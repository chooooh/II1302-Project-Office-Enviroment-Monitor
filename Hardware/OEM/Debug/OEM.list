
OEM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000528c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  0800541c  0800541c  0001541c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005634  08005634  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005634  08005634  00015634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800563c  0800563c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800563c  0800563c  0001563c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005640  08005640  00015640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005644  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001198  20000070  080056b4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001208  080056b4  00021208  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000180a0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003359  00000000  00000000  00038140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  0003b4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e98  00000000  00000000  0003c490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029e86  00000000  00000000  0003d328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013af6  00000000  00000000  000671ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107b27  00000000  00000000  0007aca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001827cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047e0  00000000  00000000  00182820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005404 	.word	0x08005404

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005404 	.word	0x08005404

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <CCS881_init>:
static uint8_t H_OG = 0;
static uint8_t L_OG = 0;
*/

SENSOR_STATUS
CCS881_init(void){
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0

	uint8_t register_value = 0;
 800056e:	2300      	movs	r3, #0
 8000570:	71fb      	strb	r3, [r7, #7]

	/* read the HW ID register to make sure the sensor is responsive */
	CCS811_read_register(HW_ID, &register_value);
 8000572:	1dfb      	adds	r3, r7, #7
 8000574:	4619      	mov	r1, r3
 8000576:	2020      	movs	r0, #32
 8000578:	f000 f80a 	bl	8000590 <CCS811_read_register>
	if(register_value != 0x81)
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	2b81      	cmp	r3, #129	; 0x81
 8000580:	d001      	beq.n	8000586 <CCS881_init+0x1e>
		return CCS881_ID_ERR;
 8000582:	2302      	movs	r3, #2
 8000584:	e000      	b.n	8000588 <CCS881_init+0x20>

	return CCS881_SUCCESS; // success
 8000586:	2300      	movs	r3, #0
}
 8000588:	4618      	mov	r0, r3
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}

08000590 <CCS811_read_register>:

/* Read a register using I2C */
void
CCS811_read_register(uint8_t reg_addr, uint8_t* buffer)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af04      	add	r7, sp, #16
 8000596:	4603      	mov	r3, r0
 8000598:	6039      	str	r1, [r7, #0]
 800059a:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c3, DEVICE_ADDR, (uint8_t) reg_addr, I2C_MEMADD_SIZE_8BIT, buffer, 1, HAL_MAX_DELAY);
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	b29a      	uxth	r2, r3
 80005a0:	f04f 33ff 	mov.w	r3, #4294967295
 80005a4:	9302      	str	r3, [sp, #8]
 80005a6:	2301      	movs	r3, #1
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2301      	movs	r3, #1
 80005b0:	21b6      	movs	r1, #182	; 0xb6
 80005b2:	4807      	ldr	r0, [pc, #28]	; (80005d0 <CCS811_read_register+0x40>)
 80005b4:	f001 f83e 	bl	8001634 <HAL_I2C_Mem_Read>
	while(HAL_I2C_GetState(&hi2c3) != HAL_I2C_STATE_READY);
 80005b8:	bf00      	nop
 80005ba:	4805      	ldr	r0, [pc, #20]	; (80005d0 <CCS811_read_register+0x40>)
 80005bc:	f001 f954 	bl	8001868 <HAL_I2C_GetState>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b20      	cmp	r3, #32
 80005c4:	d1f9      	bne.n	80005ba <CCS811_read_register+0x2a>

}
 80005c6:	bf00      	nop
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	200010a0 	.word	0x200010a0

080005d4 <init_uart_interrupt>:
static bool error_flag = false;
static bool fail_flag = false;


void
init_uart_interrupt(void){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart4, &rx_variable, 1);
 80005d8:	2201      	movs	r2, #1
 80005da:	4903      	ldr	r1, [pc, #12]	; (80005e8 <init_uart_interrupt+0x14>)
 80005dc:	4803      	ldr	r0, [pc, #12]	; (80005ec <init_uart_interrupt+0x18>)
 80005de:	f002 ff0b 	bl	80033f8 <HAL_UART_Receive_IT>
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	2000008c 	.word	0x2000008c
 80005ec:	20001170 	.word	0x20001170

080005f0 <HAL_UART_RxCpltCallback>:

/* Probably not the most efficient solution */
void
HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]

   if (huart->Instance == UART4) {
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a0b      	ldr	r2, [pc, #44]	; (800062c <HAL_UART_RxCpltCallback+0x3c>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d10a      	bne.n	8000618 <HAL_UART_RxCpltCallback+0x28>
      rx_buffer[rx_buffer_index++] = rx_variable;    // Add 1 byte to rx_Buffer
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <HAL_UART_RxCpltCallback+0x40>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	1c5a      	adds	r2, r3, #1
 8000608:	b2d1      	uxtb	r1, r2
 800060a:	4a09      	ldr	r2, [pc, #36]	; (8000630 <HAL_UART_RxCpltCallback+0x40>)
 800060c:	7011      	strb	r1, [r2, #0]
 800060e:	461a      	mov	r2, r3
 8000610:	4b08      	ldr	r3, [pc, #32]	; (8000634 <HAL_UART_RxCpltCallback+0x44>)
 8000612:	7819      	ldrb	r1, [r3, #0]
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <HAL_UART_RxCpltCallback+0x48>)
 8000616:	5499      	strb	r1, [r3, r2]
    }
      HAL_UART_Receive_IT(&huart4, &rx_variable, 1); // Clear flags and read next byte
 8000618:	2201      	movs	r2, #1
 800061a:	4906      	ldr	r1, [pc, #24]	; (8000634 <HAL_UART_RxCpltCallback+0x44>)
 800061c:	4807      	ldr	r0, [pc, #28]	; (800063c <HAL_UART_RxCpltCallback+0x4c>)
 800061e:	f002 feeb 	bl	80033f8 <HAL_UART_Receive_IT>
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40004c00 	.word	0x40004c00
 8000630:	20001090 	.word	0x20001090
 8000634:	2000008c 	.word	0x2000008c
 8000638:	20000090 	.word	0x20000090
 800063c:	20001170 	.word	0x20001170

08000640 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_GPIO_Init+0x44>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064a:	4a0e      	ldr	r2, [pc, #56]	; (8000684 <MX_GPIO_Init+0x44>)
 800064c:	f043 0304 	orr.w	r3, r3, #4
 8000650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <MX_GPIO_Init+0x44>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000656:	f003 0304 	and.w	r3, r3, #4
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_GPIO_Init+0x44>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000662:	4a08      	ldr	r2, [pc, #32]	; (8000684 <MX_GPIO_Init+0x44>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_GPIO_Init+0x44>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	603b      	str	r3, [r7, #0]
 8000674:	683b      	ldr	r3, [r7, #0]

}
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	40021000 	.word	0x40021000

08000688 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800068c:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <MX_I2C3_Init+0x74>)
 800068e:	4a1c      	ldr	r2, [pc, #112]	; (8000700 <MX_I2C3_Init+0x78>)
 8000690:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 8000692:	4b1a      	ldr	r3, [pc, #104]	; (80006fc <MX_I2C3_Init+0x74>)
 8000694:	4a1b      	ldr	r2, [pc, #108]	; (8000704 <MX_I2C3_Init+0x7c>)
 8000696:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000698:	4b18      	ldr	r3, [pc, #96]	; (80006fc <MX_I2C3_Init+0x74>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800069e:	4b17      	ldr	r3, [pc, #92]	; (80006fc <MX_I2C3_Init+0x74>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a4:	4b15      	ldr	r3, [pc, #84]	; (80006fc <MX_I2C3_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80006aa:	4b14      	ldr	r3, [pc, #80]	; (80006fc <MX_I2C3_Init+0x74>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_I2C3_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_I2C3_Init+0x74>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_I2C3_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80006c2:	480e      	ldr	r0, [pc, #56]	; (80006fc <MX_I2C3_Init+0x74>)
 80006c4:	f000 ff26 	bl	8001514 <HAL_I2C_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80006ce:	f000 f929 	bl	8000924 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006d2:	2100      	movs	r1, #0
 80006d4:	4809      	ldr	r0, [pc, #36]	; (80006fc <MX_I2C3_Init+0x74>)
 80006d6:	f001 fa9d 	bl	8001c14 <HAL_I2CEx_ConfigAnalogFilter>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80006e0:	f000 f920 	bl	8000924 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80006e4:	2100      	movs	r1, #0
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_I2C3_Init+0x74>)
 80006e8:	f001 fadf 	bl	8001caa <HAL_I2CEx_ConfigDigitalFilter>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80006f2:	f000 f917 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200010a0 	.word	0x200010a0
 8000700:	40005c00 	.word	0x40005c00
 8000704:	10909cec 	.word	0x10909cec

08000708 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	; 0x28
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a17      	ldr	r2, [pc, #92]	; (8000784 <HAL_I2C_MspInit+0x7c>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d127      	bne.n	800077a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <HAL_I2C_MspInit+0x80>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	4a16      	ldr	r2, [pc, #88]	; (8000788 <HAL_I2C_MspInit+0x80>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <HAL_I2C_MspInit+0x80>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000742:	2303      	movs	r3, #3
 8000744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000746:	2312      	movs	r3, #18
 8000748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800074a:	2301      	movs	r3, #1
 800074c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074e:	2303      	movs	r3, #3
 8000750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000752:	2304      	movs	r3, #4
 8000754:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	4619      	mov	r1, r3
 800075c:	480b      	ldr	r0, [pc, #44]	; (800078c <HAL_I2C_MspInit+0x84>)
 800075e:	f000 fd2f 	bl	80011c0 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <HAL_I2C_MspInit+0x80>)
 8000764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000766:	4a08      	ldr	r2, [pc, #32]	; (8000788 <HAL_I2C_MspInit+0x80>)
 8000768:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800076c:	6593      	str	r3, [r2, #88]	; 0x58
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <HAL_I2C_MspInit+0x80>)
 8000770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000772:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800077a:	bf00      	nop
 800077c:	3728      	adds	r7, #40	; 0x28
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40005c00 	.word	0x40005c00
 8000788:	40021000 	.word	0x40021000
 800078c:	48000800 	.word	0x48000800

08000790 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000798:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800079c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80007a0:	f003 0301 	and.w	r3, r3, #1
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d013      	beq.n	80007d0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80007a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007ac:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80007b0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d00b      	beq.n	80007d0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80007b8:	e000      	b.n	80007bc <ITM_SendChar+0x2c>
    {
      __NOP();
 80007ba:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80007bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d0f9      	beq.n	80007ba <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80007c6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	b2d2      	uxtb	r2, r2
 80007ce:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80007d0:	687b      	ldr	r3, [r7, #4]
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr

080007de <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b086      	sub	sp, #24
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	60f8      	str	r0, [r7, #12]
 80007e6:	60b9      	str	r1, [r7, #8]
 80007e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
 80007ee:	e009      	b.n	8000804 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	1c5a      	adds	r2, r3, #1
 80007f4:	60ba      	str	r2, [r7, #8]
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ffc9 	bl	8000790 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	3301      	adds	r3, #1
 8000802:	617b      	str	r3, [r7, #20]
 8000804:	697a      	ldr	r2, [r7, #20]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	429a      	cmp	r2, r3
 800080a:	dbf1      	blt.n	80007f0 <_write+0x12>
	}
	return len;
 800080c:	687b      	ldr	r3, [r7, #4]
}
 800080e:	4618      	mov	r0, r3
 8000810:	3718      	adds	r7, #24
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081a:	f000 facc 	bl	8000db6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081e:	f000 f809 	bl	8000834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000822:	f7ff ff0d 	bl	8000640 <MX_GPIO_Init>
  MX_UART4_Init();
 8000826:	f000 fa23 	bl	8000c70 <MX_UART4_Init>
  MX_I2C3_Init();
 800082a:	f7ff ff2d 	bl	8000688 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  #ifdef RUN_UNIT_TEST
  	  unit_test();
 800082e:	f000 f991 	bl	8000b54 <unit_test>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000832:	e7fe      	b.n	8000832 <main+0x1c>

08000834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b0b8      	sub	sp, #224	; 0xe0
 8000838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800083e:	2244      	movs	r2, #68	; 0x44
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f003 fe22 	bl	800448c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000848:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000858:	463b      	mov	r3, r7
 800085a:	2288      	movs	r2, #136	; 0x88
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f003 fe14 	bl	800448c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000864:	2302      	movs	r3, #2
 8000866:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800086a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800086e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000872:	2310      	movs	r3, #16
 8000874:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000878:	2302      	movs	r3, #2
 800087a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800087e:	2302      	movs	r3, #2
 8000880:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000884:	2301      	movs	r3, #1
 8000886:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800088a:	230a      	movs	r3, #10
 800088c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000890:	2307      	movs	r3, #7
 8000892:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000896:	2302      	movs	r3, #2
 8000898:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800089c:	2302      	movs	r3, #2
 800089e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008a6:	4618      	mov	r0, r3
 80008a8:	f001 fab0 	bl	8001e0c <HAL_RCC_OscConfig>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80008b2:	f000 f837 	bl	8000924 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b6:	230f      	movs	r3, #15
 80008b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008bc:	2303      	movs	r3, #3
 80008be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ce:	2300      	movs	r3, #0
 80008d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008d4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80008d8:	2104      	movs	r1, #4
 80008da:	4618      	mov	r0, r3
 80008dc:	f001 fe7c 	bl	80025d8 <HAL_RCC_ClockConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80008e6:	f000 f81d 	bl	8000924 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_I2C3;
 80008ea:	f44f 7384 	mov.w	r3, #264	; 0x108
 80008ee:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 80008f0:	2340      	movs	r3, #64	; 0x40
 80008f2:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008f8:	463b      	mov	r3, r7
 80008fa:	4618      	mov	r0, r3
 80008fc:	f002 f872 	bl	80029e4 <HAL_RCCEx_PeriphCLKConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000906:	f000 f80d 	bl	8000924 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800090a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800090e:	f001 fa27 	bl	8001d60 <HAL_PWREx_ControlVoltageScaling>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000918:	f000 f804 	bl	8000924 <Error_Handler>
  }
}
 800091c:	bf00      	nop
 800091e:	37e0      	adds	r7, #224	; 0xe0
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092c:	e7fe      	b.n	800092c <Error_Handler+0x8>
	...

08000930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <HAL_MspInit+0x44>)
 8000938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800093a:	4a0e      	ldr	r2, [pc, #56]	; (8000974 <HAL_MspInit+0x44>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6613      	str	r3, [r2, #96]	; 0x60
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <HAL_MspInit+0x44>)
 8000944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <HAL_MspInit+0x44>)
 8000950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000952:	4a08      	ldr	r2, [pc, #32]	; (8000974 <HAL_MspInit+0x44>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000958:	6593      	str	r3, [r2, #88]	; 0x58
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <HAL_MspInit+0x44>)
 800095c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800095e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	40021000 	.word	0x40021000

08000978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800097c:	e7fe      	b.n	800097c <NMI_Handler+0x4>

0800097e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <HardFault_Handler+0x4>

08000984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <MemManage_Handler+0x4>

0800098a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <BusFault_Handler+0x4>

08000990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <UsageFault_Handler+0x4>

08000996 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c4:	f000 fa4c 	bl	8000e60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}

080009cc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80009d0:	4802      	ldr	r0, [pc, #8]	; (80009dc <UART4_IRQHandler+0x10>)
 80009d2:	f002 fd55 	bl	8003480 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20001170 	.word	0x20001170

080009e0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
 80009f0:	e00a      	b.n	8000a08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009f2:	f3af 8000 	nop.w
 80009f6:	4601      	mov	r1, r0
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	1c5a      	adds	r2, r3, #1
 80009fc:	60ba      	str	r2, [r7, #8]
 80009fe:	b2ca      	uxtb	r2, r1
 8000a00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	3301      	adds	r3, #1
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	697a      	ldr	r2, [r7, #20]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	dbf0      	blt.n	80009f2 <_read+0x12>
	}

return len;
 8000a10:	687b      	ldr	r3, [r7, #4]
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3718      	adds	r7, #24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	b083      	sub	sp, #12
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
	return -1;
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
 8000a3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a42:	605a      	str	r2, [r3, #4]
	return 0;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <_isatty>:

int _isatty(int file)
{
 8000a52:	b480      	push	{r7}
 8000a54:	b083      	sub	sp, #12
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
	return 1;
 8000a5a:	2301      	movs	r3, #1
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
	return 0;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
	...

08000a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a8c:	4a14      	ldr	r2, [pc, #80]	; (8000ae0 <_sbrk+0x5c>)
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <_sbrk+0x60>)
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a98:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <_sbrk+0x64>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d102      	bne.n	8000aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <_sbrk+0x64>)
 8000aa2:	4a12      	ldr	r2, [pc, #72]	; (8000aec <_sbrk+0x68>)
 8000aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <_sbrk+0x64>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d207      	bcs.n	8000ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ab4:	f003 fcc0 	bl	8004438 <__errno>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	220c      	movs	r2, #12
 8000abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000abe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac2:	e009      	b.n	8000ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <_sbrk+0x64>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aca:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <_sbrk+0x64>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <_sbrk+0x64>)
 8000ad4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3718      	adds	r7, #24
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20018000 	.word	0x20018000
 8000ae4:	00000400 	.word	0x00000400
 8000ae8:	20001094 	.word	0x20001094
 8000aec:	20001208 	.word	0x20001208

08000af0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000af4:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <SystemInit+0x5c>)
 8000af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000afa:	4a14      	ldr	r2, [pc, #80]	; (8000b4c <SystemInit+0x5c>)
 8000afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <SystemInit+0x60>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a11      	ldr	r2, [pc, #68]	; (8000b50 <SystemInit+0x60>)
 8000b0a:	f043 0301 	orr.w	r3, r3, #1
 8000b0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <SystemInit+0x60>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <SystemInit+0x60>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a0d      	ldr	r2, [pc, #52]	; (8000b50 <SystemInit+0x60>)
 8000b1c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b20:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b24:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b26:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <SystemInit+0x60>)
 8000b28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b2c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <SystemInit+0x60>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <SystemInit+0x60>)
 8000b34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b38:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b3a:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <SystemInit+0x60>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000ed00 	.word	0xe000ed00
 8000b50:	40021000 	.word	0x40021000

08000b54 <unit_test>:

	test_esp8266_at_send(init_send);
	test_esp8266_send_data(request);
}

void unit_test(void){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0

	/* Set up */
	init_uart_interrupt();
 8000b58:	f7ff fd3c 	bl	80005d4 <init_uart_interrupt>

	/* Test begin */
	UNITY_BEGIN();
 8000b5c:	4807      	ldr	r0, [pc, #28]	; (8000b7c <unit_test+0x28>)
 8000b5e:	f000 f811 	bl	8000b84 <UnityBegin>
	//RUN_TEST(test_esp8266_web_connection);

	/* Test making a http web request to connected website */
	//RUN_TEST(test_esp8266_web_request);

	if(CCS881_init() == CCS881_SUCCESS)
 8000b62:	f7ff fd01 	bl	8000568 <CCS881_init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d102      	bne.n	8000b72 <unit_test+0x1e>
		printf("success");
 8000b6c:	4804      	ldr	r0, [pc, #16]	; (8000b80 <unit_test+0x2c>)
 8000b6e:	f003 fc95 	bl	800449c <iprintf>

	/* Test end*/
	UNITY_END();
 8000b72:	f000 f831 	bl	8000bd8 <UnityEnd>
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	08005484 	.word	0x08005484
 8000b80:	0800549c 	.word	0x0800549c

08000b84 <UnityBegin>:
	Unity.TestFile = filename;
}

/*-----------------------------------------------*/
void UnityBegin(const char* filename)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
    Unity.TestFile = filename;
 8000b8c:	4a11      	ldr	r2, [pc, #68]	; (8000bd4 <UnityBegin+0x50>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6013      	str	r3, [r2, #0]
    Unity.CurrentTestName = NULL;
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <UnityBegin+0x50>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	605a      	str	r2, [r3, #4]
    Unity.CurrentTestLineNumber = 0;
 8000b98:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <UnityBegin+0x50>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]
    Unity.NumberOfTests = 0;
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <UnityBegin+0x50>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	615a      	str	r2, [r3, #20]
    Unity.TestFailures = 0;
 8000ba4:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <UnityBegin+0x50>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	619a      	str	r2, [r3, #24]
    Unity.TestIgnores = 0;
 8000baa:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <UnityBegin+0x50>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	61da      	str	r2, [r3, #28]
    Unity.CurrentTestFailed = 0;
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <UnityBegin+0x50>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	621a      	str	r2, [r3, #32]
    Unity.CurrentTestIgnored = 0;
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <UnityBegin+0x50>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	625a      	str	r2, [r3, #36]	; 0x24

    UNITY_CLR_DETAILS();
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <UnityBegin+0x50>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <UnityBegin+0x50>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	60da      	str	r2, [r3, #12]
    UNITY_OUTPUT_START();
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	200010ec 	.word	0x200010ec

08000bd8 <UnityEnd>:

/*-----------------------------------------------*/
int UnityEnd(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
    printf(UnityStrBreaker);
 8000bdc:	481c      	ldr	r0, [pc, #112]	; (8000c50 <UnityEnd+0x78>)
 8000bde:	f003 fc5d 	bl	800449c <iprintf>
    printf("\n");
 8000be2:	200a      	movs	r0, #10
 8000be4:	f003 fc72 	bl	80044cc <putchar>
    printf(UnityStrResultsTests);
 8000be8:	481a      	ldr	r0, [pc, #104]	; (8000c54 <UnityEnd+0x7c>)
 8000bea:	f003 fc57 	bl	800449c <iprintf>
    printf("%d\n", (UNITY_INT)(Unity.NumberOfTests));
 8000bee:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <UnityEnd+0x80>)
 8000bf0:	695b      	ldr	r3, [r3, #20]
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4819      	ldr	r0, [pc, #100]	; (8000c5c <UnityEnd+0x84>)
 8000bf6:	f003 fc51 	bl	800449c <iprintf>
    printf(UnityStrResultsFailures);
 8000bfa:	4819      	ldr	r0, [pc, #100]	; (8000c60 <UnityEnd+0x88>)
 8000bfc:	f003 fc4e 	bl	800449c <iprintf>
    printf("%d\n", (UNITY_INT)(Unity.TestFailures));
 8000c00:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <UnityEnd+0x80>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	4619      	mov	r1, r3
 8000c06:	4815      	ldr	r0, [pc, #84]	; (8000c5c <UnityEnd+0x84>)
 8000c08:	f003 fc48 	bl	800449c <iprintf>
    printf(UnityStrResultsIgnored);
 8000c0c:	4815      	ldr	r0, [pc, #84]	; (8000c64 <UnityEnd+0x8c>)
 8000c0e:	f003 fc45 	bl	800449c <iprintf>
    printf("%d\n", (UNITY_INT)(Unity.TestIgnores));
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <UnityEnd+0x80>)
 8000c14:	69db      	ldr	r3, [r3, #28]
 8000c16:	4619      	mov	r1, r3
 8000c18:	4810      	ldr	r0, [pc, #64]	; (8000c5c <UnityEnd+0x84>)
 8000c1a:	f003 fc3f 	bl	800449c <iprintf>
    printf("\n");
 8000c1e:	200a      	movs	r0, #10
 8000c20:	f003 fc54 	bl	80044cc <putchar>
    if (Unity.TestFailures == 0U)
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <UnityEnd+0x80>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d106      	bne.n	8000c3a <UnityEnd+0x62>
    {
        printf(UnityStrOk);
 8000c2c:	480e      	ldr	r0, [pc, #56]	; (8000c68 <UnityEnd+0x90>)
 8000c2e:	f003 fc35 	bl	800449c <iprintf>
        printf("\n");
 8000c32:	200a      	movs	r0, #10
 8000c34:	f003 fc4a 	bl	80044cc <putchar>
 8000c38:	e002      	b.n	8000c40 <UnityEnd+0x68>
    }
    else
    {
        printf(UnityStrFail);
 8000c3a:	480c      	ldr	r0, [pc, #48]	; (8000c6c <UnityEnd+0x94>)
 8000c3c:	f003 fc2e 	bl	800449c <iprintf>
		#ifdef UNITY_DIFFERENTIATE_FINAL_FAIL
        printf('E'); printf('D');
		#endif
    }
    printf("\n");
 8000c40:	200a      	movs	r0, #10
 8000c42:	f003 fc43 	bl	80044cc <putchar>
    UNITY_FLUSH_CALL();
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures);
 8000c46:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <UnityEnd+0x80>)
 8000c48:	699b      	ldr	r3, [r3, #24]
    UNITY_PRINT_EOL();
    UNITY_FLUSH_CALL();
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures); */

}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	08005558 	.word	0x08005558
 8000c54:	08005570 	.word	0x08005570
 8000c58:	200010ec 	.word	0x200010ec
 8000c5c:	080054b4 	.word	0x080054b4
 8000c60:	08005584 	.word	0x08005584
 8000c64:	08005590 	.word	0x08005590
 8000c68:	0800551c 	.word	0x0800551c
 8000c6c:	08005520 	.word	0x08005520

08000c70 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000c74:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <MX_UART4_Init+0x58>)
 8000c76:	4a15      	ldr	r2, [pc, #84]	; (8000ccc <MX_UART4_Init+0x5c>)
 8000c78:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000c7a:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <MX_UART4_Init+0x58>)
 8000c7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c80:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <MX_UART4_Init+0x58>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c88:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <MX_UART4_Init+0x58>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <MX_UART4_Init+0x58>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MX_UART4_Init+0x58>)
 8000c96:	220c      	movs	r2, #12
 8000c98:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <MX_UART4_Init+0x58>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca0:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <MX_UART4_Init+0x58>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ca6:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <MX_UART4_Init+0x58>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <MX_UART4_Init+0x58>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000cb2:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <MX_UART4_Init+0x58>)
 8000cb4:	f002 fb52 	bl	800335c <HAL_UART_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000cbe:	f7ff fe31 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20001170 	.word	0x20001170
 8000ccc:	40004c00 	.word	0x40004c00

08000cd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	; 0x28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a1b      	ldr	r2, [pc, #108]	; (8000d5c <HAL_UART_MspInit+0x8c>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d130      	bne.n	8000d54 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000cf2:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <HAL_UART_MspInit+0x90>)
 8000cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf6:	4a1a      	ldr	r2, [pc, #104]	; (8000d60 <HAL_UART_MspInit+0x90>)
 8000cf8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000cfc:	6593      	str	r3, [r2, #88]	; 0x58
 8000cfe:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <HAL_UART_MspInit+0x90>)
 8000d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <HAL_UART_MspInit+0x90>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0e:	4a14      	ldr	r2, [pc, #80]	; (8000d60 <HAL_UART_MspInit+0x90>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d16:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <HAL_UART_MspInit+0x90>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d22:	2303      	movs	r3, #3
 8000d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d32:	2308      	movs	r3, #8
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d40:	f000 fa3e 	bl	80011c0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2100      	movs	r1, #0
 8000d48:	2034      	movs	r0, #52	; 0x34
 8000d4a:	f000 f984 	bl	8001056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000d4e:	2034      	movs	r0, #52	; 0x34
 8000d50:	f000 f99d 	bl	800108e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8000d54:	bf00      	nop
 8000d56:	3728      	adds	r7, #40	; 0x28
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40004c00 	.word	0x40004c00
 8000d60:	40021000 	.word	0x40021000

08000d64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d9c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d68:	f7ff fec2 	bl	8000af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d6c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d6e:	e003      	b.n	8000d78 <LoopCopyDataInit>

08000d70 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d70:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d72:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d74:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d76:	3104      	adds	r1, #4

08000d78 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d78:	480a      	ldr	r0, [pc, #40]	; (8000da4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000d7c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d7e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d80:	d3f6      	bcc.n	8000d70 <CopyDataInit>
	ldr	r2, =_sbss
 8000d82:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d84:	e002      	b.n	8000d8c <LoopFillZerobss>

08000d86 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d86:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d88:	f842 3b04 	str.w	r3, [r2], #4

08000d8c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <LoopForever+0x16>)
	cmp	r2, r3
 8000d8e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d90:	d3f9      	bcc.n	8000d86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d92:	f003 fb57 	bl	8004444 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d96:	f7ff fd3e 	bl	8000816 <main>

08000d9a <LoopForever>:

LoopForever:
    b LoopForever
 8000d9a:	e7fe      	b.n	8000d9a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d9c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000da0:	08005644 	.word	0x08005644
	ldr	r0, =_sdata
 8000da4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000da8:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000dac:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000db0:	20001208 	.word	0x20001208

08000db4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000db4:	e7fe      	b.n	8000db4 <ADC1_2_IRQHandler>

08000db6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc0:	2003      	movs	r0, #3
 8000dc2:	f000 f93d 	bl	8001040 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f000 f80e 	bl	8000de8 <HAL_InitTick>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d002      	beq.n	8000dd8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	71fb      	strb	r3, [r7, #7]
 8000dd6:	e001      	b.n	8000ddc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dd8:	f7ff fdaa 	bl	8000930 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000df0:	2300      	movs	r3, #0
 8000df2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000df4:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <HAL_InitTick+0x6c>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d023      	beq.n	8000e44 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000dfc:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <HAL_InitTick+0x70>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <HAL_InitTick+0x6c>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4619      	mov	r1, r3
 8000e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 f949 	bl	80010aa <HAL_SYSTICK_Config>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d10f      	bne.n	8000e3e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2b0f      	cmp	r3, #15
 8000e22:	d809      	bhi.n	8000e38 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e24:	2200      	movs	r2, #0
 8000e26:	6879      	ldr	r1, [r7, #4]
 8000e28:	f04f 30ff 	mov.w	r0, #4294967295
 8000e2c:	f000 f913 	bl	8001056 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e30:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <HAL_InitTick+0x74>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6013      	str	r3, [r2, #0]
 8000e36:	e007      	b.n	8000e48 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	73fb      	strb	r3, [r7, #15]
 8000e3c:	e004      	b.n	8000e48 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	73fb      	strb	r3, [r7, #15]
 8000e42:	e001      	b.n	8000e48 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000008 	.word	0x20000008
 8000e58:	20000000 	.word	0x20000000
 8000e5c:	20000004 	.word	0x20000004

08000e60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_IncTick+0x20>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_IncTick+0x24>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4413      	add	r3, r2
 8000e70:	4a04      	ldr	r2, [pc, #16]	; (8000e84 <HAL_IncTick+0x24>)
 8000e72:	6013      	str	r3, [r2, #0]
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	20000008 	.word	0x20000008
 8000e84:	200011f4 	.word	0x200011f4

08000e88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <HAL_GetTick+0x14>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	200011f4 	.word	0x200011f4

08000ea0 <__NVIC_SetPriorityGrouping>:
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ed2:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	60d3      	str	r3, [r2, #12]
}
 8000ed8:	bf00      	nop
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <__NVIC_GetPriorityGrouping>:
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eec:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <__NVIC_GetPriorityGrouping+0x18>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	0a1b      	lsrs	r3, r3, #8
 8000ef2:	f003 0307 	and.w	r3, r3, #7
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_EnableIRQ>:
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db0b      	blt.n	8000f2e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	f003 021f 	and.w	r2, r3, #31
 8000f1c:	4907      	ldr	r1, [pc, #28]	; (8000f3c <__NVIC_EnableIRQ+0x38>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	095b      	lsrs	r3, r3, #5
 8000f24:	2001      	movs	r0, #1
 8000f26:	fa00 f202 	lsl.w	r2, r0, r2
 8000f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000e100 	.word	0xe000e100

08000f40 <__NVIC_SetPriority>:
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	6039      	str	r1, [r7, #0]
 8000f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	db0a      	blt.n	8000f6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	490c      	ldr	r1, [pc, #48]	; (8000f8c <__NVIC_SetPriority+0x4c>)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	0112      	lsls	r2, r2, #4
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	440b      	add	r3, r1
 8000f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f68:	e00a      	b.n	8000f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4908      	ldr	r1, [pc, #32]	; (8000f90 <__NVIC_SetPriority+0x50>)
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	f003 030f 	and.w	r3, r3, #15
 8000f76:	3b04      	subs	r3, #4
 8000f78:	0112      	lsls	r2, r2, #4
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	761a      	strb	r2, [r3, #24]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000e100 	.word	0xe000e100
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <NVIC_EncodePriority>:
{
 8000f94:	b480      	push	{r7}
 8000f96:	b089      	sub	sp, #36	; 0x24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f1c3 0307 	rsb	r3, r3, #7
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	bf28      	it	cs
 8000fb2:	2304      	movcs	r3, #4
 8000fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3304      	adds	r3, #4
 8000fba:	2b06      	cmp	r3, #6
 8000fbc:	d902      	bls.n	8000fc4 <NVIC_EncodePriority+0x30>
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3b03      	subs	r3, #3
 8000fc2:	e000      	b.n	8000fc6 <NVIC_EncodePriority+0x32>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43da      	mvns	r2, r3
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	401a      	ands	r2, r3
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe6:	43d9      	mvns	r1, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	4313      	orrs	r3, r2
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3724      	adds	r7, #36	; 0x24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
	...

08000ffc <SysTick_Config>:
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3b01      	subs	r3, #1
 8001008:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800100c:	d301      	bcc.n	8001012 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800100e:	2301      	movs	r3, #1
 8001010:	e00f      	b.n	8001032 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001012:	4a0a      	ldr	r2, [pc, #40]	; (800103c <SysTick_Config+0x40>)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3b01      	subs	r3, #1
 8001018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800101a:	210f      	movs	r1, #15
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	f7ff ff8e 	bl	8000f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <SysTick_Config+0x40>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800102a:	4b04      	ldr	r3, [pc, #16]	; (800103c <SysTick_Config+0x40>)
 800102c:	2207      	movs	r2, #7
 800102e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	e000e010 	.word	0xe000e010

08001040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ff29 	bl	8000ea0 <__NVIC_SetPriorityGrouping>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b086      	sub	sp, #24
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	60b9      	str	r1, [r7, #8]
 8001060:	607a      	str	r2, [r7, #4]
 8001062:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001068:	f7ff ff3e 	bl	8000ee8 <__NVIC_GetPriorityGrouping>
 800106c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	68b9      	ldr	r1, [r7, #8]
 8001072:	6978      	ldr	r0, [r7, #20]
 8001074:	f7ff ff8e 	bl	8000f94 <NVIC_EncodePriority>
 8001078:	4602      	mov	r2, r0
 800107a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107e:	4611      	mov	r1, r2
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff5d 	bl	8000f40 <__NVIC_SetPriority>
}
 8001086:	bf00      	nop
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff31 	bl	8000f04 <__NVIC_EnableIRQ>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ffa2 	bl	8000ffc <SysTick_Config>
 80010b8:	4603      	mov	r3, r0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b085      	sub	sp, #20
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010ca:	2300      	movs	r3, #0
 80010cc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d008      	beq.n	80010ec <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2204      	movs	r2, #4
 80010de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e022      	b.n	8001132 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f022 020e 	bic.w	r2, r2, #14
 80010fa:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f022 0201 	bic.w	r2, r2, #1
 800110a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001110:	f003 021c 	and.w	r2, r3, #28
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	2101      	movs	r1, #1
 800111a:	fa01 f202 	lsl.w	r2, r1, r2
 800111e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2201      	movs	r2, #1
 8001124:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001130:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001132:	4618      	mov	r0, r3
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b084      	sub	sp, #16
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d005      	beq.n	8001162 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2204      	movs	r2, #4
 800115a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	73fb      	strb	r3, [r7, #15]
 8001160:	e029      	b.n	80011b6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f022 020e 	bic.w	r2, r2, #14
 8001170:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f022 0201 	bic.w	r2, r2, #1
 8001180:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	f003 021c 	and.w	r2, r3, #28
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	2101      	movs	r1, #1
 8001190:	fa01 f202 	lsl.w	r2, r1, r2
 8001194:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2201      	movs	r2, #1
 800119a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	4798      	blx	r3
    }
  }
  return status;
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b087      	sub	sp, #28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ce:	e17f      	b.n	80014d0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	2101      	movs	r1, #1
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	fa01 f303 	lsl.w	r3, r1, r3
 80011dc:	4013      	ands	r3, r2
 80011de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f000 8171 	beq.w	80014ca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d00b      	beq.n	8001208 <HAL_GPIO_Init+0x48>
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d007      	beq.n	8001208 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011fc:	2b11      	cmp	r3, #17
 80011fe:	d003      	beq.n	8001208 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	2b12      	cmp	r3, #18
 8001206:	d130      	bne.n	800126a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	2203      	movs	r2, #3
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4013      	ands	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	68da      	ldr	r2, [r3, #12]
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	4313      	orrs	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800123e:	2201      	movs	r2, #1
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	091b      	lsrs	r3, r3, #4
 8001254:	f003 0201 	and.w	r2, r3, #1
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 0303 	and.w	r3, r3, #3
 8001272:	2b03      	cmp	r3, #3
 8001274:	d118      	bne.n	80012a8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800127c:	2201      	movs	r2, #1
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	08db      	lsrs	r3, r3, #3
 8001292:	f003 0201 	and.w	r2, r3, #1
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	4313      	orrs	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	2203      	movs	r2, #3
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4013      	ands	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d003      	beq.n	80012e8 <HAL_GPIO_Init+0x128>
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b12      	cmp	r3, #18
 80012e6:	d123      	bne.n	8001330 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	08da      	lsrs	r2, r3, #3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3208      	adds	r2, #8
 80012f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	f003 0307 	and.w	r3, r3, #7
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	220f      	movs	r2, #15
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4013      	ands	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	691a      	ldr	r2, [r3, #16]
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	08da      	lsrs	r2, r3, #3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	3208      	adds	r2, #8
 800132a:	6939      	ldr	r1, [r7, #16]
 800132c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	2203      	movs	r2, #3
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4013      	ands	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f003 0203 	and.w	r2, r3, #3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4313      	orrs	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136c:	2b00      	cmp	r3, #0
 800136e:	f000 80ac 	beq.w	80014ca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001372:	4b5f      	ldr	r3, [pc, #380]	; (80014f0 <HAL_GPIO_Init+0x330>)
 8001374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001376:	4a5e      	ldr	r2, [pc, #376]	; (80014f0 <HAL_GPIO_Init+0x330>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6613      	str	r3, [r2, #96]	; 0x60
 800137e:	4b5c      	ldr	r3, [pc, #368]	; (80014f0 <HAL_GPIO_Init+0x330>)
 8001380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800138a:	4a5a      	ldr	r2, [pc, #360]	; (80014f4 <HAL_GPIO_Init+0x334>)
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	089b      	lsrs	r3, r3, #2
 8001390:	3302      	adds	r3, #2
 8001392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001396:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	220f      	movs	r2, #15
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	4013      	ands	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013b4:	d025      	beq.n	8001402 <HAL_GPIO_Init+0x242>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a4f      	ldr	r2, [pc, #316]	; (80014f8 <HAL_GPIO_Init+0x338>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d01f      	beq.n	80013fe <HAL_GPIO_Init+0x23e>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4e      	ldr	r2, [pc, #312]	; (80014fc <HAL_GPIO_Init+0x33c>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d019      	beq.n	80013fa <HAL_GPIO_Init+0x23a>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a4d      	ldr	r2, [pc, #308]	; (8001500 <HAL_GPIO_Init+0x340>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d013      	beq.n	80013f6 <HAL_GPIO_Init+0x236>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a4c      	ldr	r2, [pc, #304]	; (8001504 <HAL_GPIO_Init+0x344>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d00d      	beq.n	80013f2 <HAL_GPIO_Init+0x232>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a4b      	ldr	r2, [pc, #300]	; (8001508 <HAL_GPIO_Init+0x348>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d007      	beq.n	80013ee <HAL_GPIO_Init+0x22e>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a4a      	ldr	r2, [pc, #296]	; (800150c <HAL_GPIO_Init+0x34c>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d101      	bne.n	80013ea <HAL_GPIO_Init+0x22a>
 80013e6:	2306      	movs	r3, #6
 80013e8:	e00c      	b.n	8001404 <HAL_GPIO_Init+0x244>
 80013ea:	2307      	movs	r3, #7
 80013ec:	e00a      	b.n	8001404 <HAL_GPIO_Init+0x244>
 80013ee:	2305      	movs	r3, #5
 80013f0:	e008      	b.n	8001404 <HAL_GPIO_Init+0x244>
 80013f2:	2304      	movs	r3, #4
 80013f4:	e006      	b.n	8001404 <HAL_GPIO_Init+0x244>
 80013f6:	2303      	movs	r3, #3
 80013f8:	e004      	b.n	8001404 <HAL_GPIO_Init+0x244>
 80013fa:	2302      	movs	r3, #2
 80013fc:	e002      	b.n	8001404 <HAL_GPIO_Init+0x244>
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <HAL_GPIO_Init+0x244>
 8001402:	2300      	movs	r3, #0
 8001404:	697a      	ldr	r2, [r7, #20]
 8001406:	f002 0203 	and.w	r2, r2, #3
 800140a:	0092      	lsls	r2, r2, #2
 800140c:	4093      	lsls	r3, r2
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001414:	4937      	ldr	r1, [pc, #220]	; (80014f4 <HAL_GPIO_Init+0x334>)
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	089b      	lsrs	r3, r3, #2
 800141a:	3302      	adds	r3, #2
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001422:	4b3b      	ldr	r3, [pc, #236]	; (8001510 <HAL_GPIO_Init+0x350>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	43db      	mvns	r3, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4013      	ands	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4313      	orrs	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001446:	4a32      	ldr	r2, [pc, #200]	; (8001510 <HAL_GPIO_Init+0x350>)
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800144c:	4b30      	ldr	r3, [pc, #192]	; (8001510 <HAL_GPIO_Init+0x350>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	43db      	mvns	r3, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4013      	ands	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001470:	4a27      	ldr	r2, [pc, #156]	; (8001510 <HAL_GPIO_Init+0x350>)
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001476:	4b26      	ldr	r3, [pc, #152]	; (8001510 <HAL_GPIO_Init+0x350>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	43db      	mvns	r3, r3
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	4013      	ands	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4313      	orrs	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800149a:	4a1d      	ldr	r2, [pc, #116]	; (8001510 <HAL_GPIO_Init+0x350>)
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014a0:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <HAL_GPIO_Init+0x350>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4013      	ands	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014c4:	4a12      	ldr	r2, [pc, #72]	; (8001510 <HAL_GPIO_Init+0x350>)
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	3301      	adds	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	fa22 f303 	lsr.w	r3, r2, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f47f ae78 	bne.w	80011d0 <HAL_GPIO_Init+0x10>
  }
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	371c      	adds	r7, #28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40021000 	.word	0x40021000
 80014f4:	40010000 	.word	0x40010000
 80014f8:	48000400 	.word	0x48000400
 80014fc:	48000800 	.word	0x48000800
 8001500:	48000c00 	.word	0x48000c00
 8001504:	48001000 	.word	0x48001000
 8001508:	48001400 	.word	0x48001400
 800150c:	48001800 	.word	0x48001800
 8001510:	40010400 	.word	0x40010400

08001514 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e081      	b.n	800162a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d106      	bne.n	8001540 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff f8e4 	bl	8000708 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2224      	movs	r2, #36	; 0x24
 8001544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0201 	bic.w	r2, r2, #1
 8001556:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001564:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001574:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d107      	bne.n	800158e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	e006      	b.n	800159c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800159a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d104      	bne.n	80015ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	6812      	ldr	r2, [r2, #0]
 80015b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68da      	ldr	r2, [r3, #12]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	691a      	ldr	r2, [r3, #16]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	ea42 0103 	orr.w	r1, r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	021a      	lsls	r2, r3, #8
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69d9      	ldr	r1, [r3, #28]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a1a      	ldr	r2, [r3, #32]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	430a      	orrs	r2, r1
 80015fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f042 0201 	orr.w	r2, r2, #1
 800160a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2220      	movs	r2, #32
 8001616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af02      	add	r7, sp, #8
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	4608      	mov	r0, r1
 800163e:	4611      	mov	r1, r2
 8001640:	461a      	mov	r2, r3
 8001642:	4603      	mov	r3, r0
 8001644:	817b      	strh	r3, [r7, #10]
 8001646:	460b      	mov	r3, r1
 8001648:	813b      	strh	r3, [r7, #8]
 800164a:	4613      	mov	r3, r2
 800164c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b20      	cmp	r3, #32
 8001658:	f040 80fd 	bne.w	8001856 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800165c:	6a3b      	ldr	r3, [r7, #32]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d002      	beq.n	8001668 <HAL_I2C_Mem_Read+0x34>
 8001662:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001664:	2b00      	cmp	r3, #0
 8001666:	d105      	bne.n	8001674 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800166e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e0f1      	b.n	8001858 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800167a:	2b01      	cmp	r3, #1
 800167c:	d101      	bne.n	8001682 <HAL_I2C_Mem_Read+0x4e>
 800167e:	2302      	movs	r3, #2
 8001680:	e0ea      	b.n	8001858 <HAL_I2C_Mem_Read+0x224>
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2201      	movs	r2, #1
 8001686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800168a:	f7ff fbfd 	bl	8000e88 <HAL_GetTick>
 800168e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	2319      	movs	r3, #25
 8001696:	2201      	movs	r2, #1
 8001698:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	f000 f969 	bl	8001974 <I2C_WaitOnFlagUntilTimeout>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e0d5      	b.n	8001858 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2222      	movs	r2, #34	; 0x22
 80016b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2240      	movs	r2, #64	; 0x40
 80016b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2200      	movs	r2, #0
 80016c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6a3a      	ldr	r2, [r7, #32]
 80016c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2200      	movs	r2, #0
 80016d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016d4:	88f8      	ldrh	r0, [r7, #6]
 80016d6:	893a      	ldrh	r2, [r7, #8]
 80016d8:	8979      	ldrh	r1, [r7, #10]
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	9301      	str	r3, [sp, #4]
 80016de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	4603      	mov	r3, r0
 80016e4:	68f8      	ldr	r0, [r7, #12]
 80016e6:	f000 f8cd 	bl	8001884 <I2C_RequestMemoryRead>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d005      	beq.n	80016fc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0ad      	b.n	8001858 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001700:	b29b      	uxth	r3, r3
 8001702:	2bff      	cmp	r3, #255	; 0xff
 8001704:	d90e      	bls.n	8001724 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	22ff      	movs	r2, #255	; 0xff
 800170a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001710:	b2da      	uxtb	r2, r3
 8001712:	8979      	ldrh	r1, [r7, #10]
 8001714:	4b52      	ldr	r3, [pc, #328]	; (8001860 <HAL_I2C_Mem_Read+0x22c>)
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800171c:	68f8      	ldr	r0, [r7, #12]
 800171e:	f000 fa4b 	bl	8001bb8 <I2C_TransferConfig>
 8001722:	e00f      	b.n	8001744 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001728:	b29a      	uxth	r2, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001732:	b2da      	uxtb	r2, r3
 8001734:	8979      	ldrh	r1, [r7, #10]
 8001736:	4b4a      	ldr	r3, [pc, #296]	; (8001860 <HAL_I2C_Mem_Read+0x22c>)
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	f000 fa3a 	bl	8001bb8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800174a:	2200      	movs	r2, #0
 800174c:	2104      	movs	r1, #4
 800174e:	68f8      	ldr	r0, [r7, #12]
 8001750:	f000 f910 	bl	8001974 <I2C_WaitOnFlagUntilTimeout>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e07c      	b.n	8001858 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001770:	1c5a      	adds	r2, r3, #1
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800177a:	3b01      	subs	r3, #1
 800177c:	b29a      	uxth	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001786:	b29b      	uxth	r3, r3
 8001788:	3b01      	subs	r3, #1
 800178a:	b29a      	uxth	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001794:	b29b      	uxth	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d034      	beq.n	8001804 <HAL_I2C_Mem_Read+0x1d0>
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d130      	bne.n	8001804 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a8:	2200      	movs	r2, #0
 80017aa:	2180      	movs	r1, #128	; 0x80
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f000 f8e1 	bl	8001974 <I2C_WaitOnFlagUntilTimeout>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e04d      	b.n	8001858 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	2bff      	cmp	r3, #255	; 0xff
 80017c4:	d90e      	bls.n	80017e4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	22ff      	movs	r2, #255	; 0xff
 80017ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	8979      	ldrh	r1, [r7, #10]
 80017d4:	2300      	movs	r3, #0
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f000 f9eb 	bl	8001bb8 <I2C_TransferConfig>
 80017e2:	e00f      	b.n	8001804 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	8979      	ldrh	r1, [r7, #10]
 80017f6:	2300      	movs	r3, #0
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f000 f9da 	bl	8001bb8 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001808:	b29b      	uxth	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d19a      	bne.n	8001744 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	f000 f92e 	bl	8001a74 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e01a      	b.n	8001858 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2220      	movs	r2, #32
 8001828:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6859      	ldr	r1, [r3, #4]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <HAL_I2C_Mem_Read+0x230>)
 8001836:	400b      	ands	r3, r1
 8001838:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2220      	movs	r2, #32
 800183e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	e000      	b.n	8001858 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001856:	2302      	movs	r3, #2
  }
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	80002400 	.word	0x80002400
 8001864:	fe00e800 	.word	0xfe00e800

08001868 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001876:	b2db      	uxtb	r3, r3
}
 8001878:	4618      	mov	r0, r3
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af02      	add	r7, sp, #8
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	4608      	mov	r0, r1
 800188e:	4611      	mov	r1, r2
 8001890:	461a      	mov	r2, r3
 8001892:	4603      	mov	r3, r0
 8001894:	817b      	strh	r3, [r7, #10]
 8001896:	460b      	mov	r3, r1
 8001898:	813b      	strh	r3, [r7, #8]
 800189a:	4613      	mov	r3, r2
 800189c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800189e:	88fb      	ldrh	r3, [r7, #6]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	8979      	ldrh	r1, [r7, #10]
 80018a4:	4b20      	ldr	r3, [pc, #128]	; (8001928 <I2C_RequestMemoryRead+0xa4>)
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	2300      	movs	r3, #0
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f000 f984 	bl	8001bb8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018b0:	69fa      	ldr	r2, [r7, #28]
 80018b2:	69b9      	ldr	r1, [r7, #24]
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	f000 f89d 	bl	80019f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e02c      	b.n	800191e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80018c4:	88fb      	ldrh	r3, [r7, #6]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d105      	bne.n	80018d6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80018ca:	893b      	ldrh	r3, [r7, #8]
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	629a      	str	r2, [r3, #40]	; 0x28
 80018d4:	e015      	b.n	8001902 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80018d6:	893b      	ldrh	r3, [r7, #8]
 80018d8:	0a1b      	lsrs	r3, r3, #8
 80018da:	b29b      	uxth	r3, r3
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018e4:	69fa      	ldr	r2, [r7, #28]
 80018e6:	69b9      	ldr	r1, [r7, #24]
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f000 f883 	bl	80019f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e012      	b.n	800191e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80018f8:	893b      	ldrh	r3, [r7, #8]
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	2200      	movs	r2, #0
 800190a:	2140      	movs	r1, #64	; 0x40
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f000 f831 	bl	8001974 <I2C_WaitOnFlagUntilTimeout>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e000      	b.n	800191e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	80002000 	.word	0x80002000

0800192c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b02      	cmp	r3, #2
 8001940:	d103      	bne.n	800194a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2200      	movs	r2, #0
 8001948:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b01      	cmp	r3, #1
 8001956:	d007      	beq.n	8001968 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	699a      	ldr	r2, [r3, #24]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f042 0201 	orr.w	r2, r2, #1
 8001966:	619a      	str	r2, [r3, #24]
  }
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	603b      	str	r3, [r7, #0]
 8001980:	4613      	mov	r3, r2
 8001982:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001984:	e022      	b.n	80019cc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800198c:	d01e      	beq.n	80019cc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800198e:	f7ff fa7b 	bl	8000e88 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d302      	bcc.n	80019a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d113      	bne.n	80019cc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a8:	f043 0220 	orr.w	r2, r3, #32
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2220      	movs	r2, #32
 80019b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e00f      	b.n	80019ec <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	699a      	ldr	r2, [r3, #24]
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	4013      	ands	r3, r2
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	429a      	cmp	r2, r3
 80019da:	bf0c      	ite	eq
 80019dc:	2301      	moveq	r3, #1
 80019de:	2300      	movne	r3, #0
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	461a      	mov	r2, r3
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d0cd      	beq.n	8001986 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a00:	e02c      	b.n	8001a5c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	68b9      	ldr	r1, [r7, #8]
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 f870 	bl	8001aec <I2C_IsAcknowledgeFailed>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e02a      	b.n	8001a6c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a1c:	d01e      	beq.n	8001a5c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a1e:	f7ff fa33 	bl	8000e88 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d302      	bcc.n	8001a34 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d113      	bne.n	8001a5c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a38:	f043 0220 	orr.w	r2, r3, #32
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2220      	movs	r2, #32
 8001a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e007      	b.n	8001a6c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d1cb      	bne.n	8001a02 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a80:	e028      	b.n	8001ad4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	68b9      	ldr	r1, [r7, #8]
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f000 f830 	bl	8001aec <I2C_IsAcknowledgeFailed>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e026      	b.n	8001ae4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a96:	f7ff f9f7 	bl	8000e88 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	68ba      	ldr	r2, [r7, #8]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d302      	bcc.n	8001aac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d113      	bne.n	8001ad4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab0:	f043 0220 	orr.w	r2, r3, #32
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2220      	movs	r2, #32
 8001abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e007      	b.n	8001ae4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	f003 0320 	and.w	r3, r3, #32
 8001ade:	2b20      	cmp	r3, #32
 8001ae0:	d1cf      	bne.n	8001a82 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	f003 0310 	and.w	r3, r3, #16
 8001b02:	2b10      	cmp	r3, #16
 8001b04:	d151      	bne.n	8001baa <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b06:	e022      	b.n	8001b4e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b0e:	d01e      	beq.n	8001b4e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b10:	f7ff f9ba 	bl	8000e88 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d302      	bcc.n	8001b26 <I2C_IsAcknowledgeFailed+0x3a>
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d113      	bne.n	8001b4e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	f043 0220 	orr.w	r2, r3, #32
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2220      	movs	r2, #32
 8001b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e02e      	b.n	8001bac <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	f003 0320 	and.w	r3, r3, #32
 8001b58:	2b20      	cmp	r3, #32
 8001b5a:	d1d5      	bne.n	8001b08 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2210      	movs	r2, #16
 8001b62:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2220      	movs	r2, #32
 8001b6a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f7ff fedd 	bl	800192c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6859      	ldr	r1, [r3, #4]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <I2C_IsAcknowledgeFailed+0xc8>)
 8001b7e:	400b      	ands	r3, r1
 8001b80:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	f043 0204 	orr.w	r2, r3, #4
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2220      	movs	r2, #32
 8001b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	fe00e800 	.word	0xfe00e800

08001bb8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	817b      	strh	r3, [r7, #10]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	0d5b      	lsrs	r3, r3, #21
 8001bd4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001bd8:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <I2C_TransferConfig+0x58>)
 8001bda:	430b      	orrs	r3, r1
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	ea02 0103 	and.w	r1, r2, r3
 8001be2:	897b      	ldrh	r3, [r7, #10]
 8001be4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001be8:	7a7b      	ldrb	r3, [r7, #9]
 8001bea:	041b      	lsls	r3, r3, #16
 8001bec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001c02:	bf00      	nop
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	03ff63ff 	.word	0x03ff63ff

08001c14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b20      	cmp	r3, #32
 8001c28:	d138      	bne.n	8001c9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d101      	bne.n	8001c38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c34:	2302      	movs	r3, #2
 8001c36:	e032      	b.n	8001c9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2224      	movs	r2, #36	; 0x24
 8001c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 0201 	bic.w	r2, r2, #1
 8001c56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6819      	ldr	r1, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	430a      	orrs	r2, r1
 8001c76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f042 0201 	orr.w	r2, r2, #1
 8001c86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	e000      	b.n	8001c9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c9c:	2302      	movs	r3, #2
  }
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b085      	sub	sp, #20
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b20      	cmp	r3, #32
 8001cbe:	d139      	bne.n	8001d34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d101      	bne.n	8001cce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	e033      	b.n	8001d36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2224      	movs	r2, #36	; 0x24
 8001cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 0201 	bic.w	r2, r2, #1
 8001cec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cfc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	021b      	lsls	r3, r3, #8
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0201 	orr.w	r2, r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2220      	movs	r2, #32
 8001d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d30:	2300      	movs	r3, #0
 8001d32:	e000      	b.n	8001d36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d34:	2302      	movs	r3, #2
  }
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
	...

08001d44 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d48:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <HAL_PWREx_GetVoltageRange+0x18>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40007000 	.word	0x40007000

08001d60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d6e:	d130      	bne.n	8001dd2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d70:	4b23      	ldr	r3, [pc, #140]	; (8001e00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d7c:	d038      	beq.n	8001df0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d7e:	4b20      	ldr	r3, [pc, #128]	; (8001e00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d86:	4a1e      	ldr	r2, [pc, #120]	; (8001e00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d8c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d8e:	4b1d      	ldr	r3, [pc, #116]	; (8001e04 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2232      	movs	r2, #50	; 0x32
 8001d94:	fb02 f303 	mul.w	r3, r2, r3
 8001d98:	4a1b      	ldr	r2, [pc, #108]	; (8001e08 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9e:	0c9b      	lsrs	r3, r3, #18
 8001da0:	3301      	adds	r3, #1
 8001da2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001da4:	e002      	b.n	8001dac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	3b01      	subs	r3, #1
 8001daa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dac:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001db8:	d102      	bne.n	8001dc0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1f2      	bne.n	8001da6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dc0:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dc2:	695b      	ldr	r3, [r3, #20]
 8001dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dcc:	d110      	bne.n	8001df0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e00f      	b.n	8001df2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dd2:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dde:	d007      	beq.n	8001df0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001de0:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001de8:	4a05      	ldr	r2, [pc, #20]	; (8001e00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40007000 	.word	0x40007000
 8001e04:	20000000 	.word	0x20000000
 8001e08:	431bde83 	.word	0x431bde83

08001e0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e3d4      	b.n	80025c8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e1e:	4ba1      	ldr	r3, [pc, #644]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 030c 	and.w	r3, r3, #12
 8001e26:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e28:	4b9e      	ldr	r3, [pc, #632]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0310 	and.w	r3, r3, #16
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 80e4 	beq.w	8002008 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d007      	beq.n	8001e56 <HAL_RCC_OscConfig+0x4a>
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	2b0c      	cmp	r3, #12
 8001e4a:	f040 808b 	bne.w	8001f64 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	f040 8087 	bne.w	8001f64 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e56:	4b93      	ldr	r3, [pc, #588]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d005      	beq.n	8001e6e <HAL_RCC_OscConfig+0x62>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e3ac      	b.n	80025c8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a1a      	ldr	r2, [r3, #32]
 8001e72:	4b8c      	ldr	r3, [pc, #560]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d004      	beq.n	8001e88 <HAL_RCC_OscConfig+0x7c>
 8001e7e:	4b89      	ldr	r3, [pc, #548]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e86:	e005      	b.n	8001e94 <HAL_RCC_OscConfig+0x88>
 8001e88:	4b86      	ldr	r3, [pc, #536]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 8001e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e8e:	091b      	lsrs	r3, r3, #4
 8001e90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d223      	bcs.n	8001ee0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f000 fd41 	bl	8002924 <RCC_SetFlashLatencyFromMSIRange>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e38d      	b.n	80025c8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eac:	4b7d      	ldr	r3, [pc, #500]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a7c      	ldr	r2, [pc, #496]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 8001eb2:	f043 0308 	orr.w	r3, r3, #8
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	4b7a      	ldr	r3, [pc, #488]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	4977      	ldr	r1, [pc, #476]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eca:	4b76      	ldr	r3, [pc, #472]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	021b      	lsls	r3, r3, #8
 8001ed8:	4972      	ldr	r1, [pc, #456]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	604b      	str	r3, [r1, #4]
 8001ede:	e025      	b.n	8001f2c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ee0:	4b70      	ldr	r3, [pc, #448]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a6f      	ldr	r2, [pc, #444]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 8001ee6:	f043 0308 	orr.w	r3, r3, #8
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	4b6d      	ldr	r3, [pc, #436]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	496a      	ldr	r1, [pc, #424]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001efe:	4b69      	ldr	r3, [pc, #420]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	021b      	lsls	r3, r3, #8
 8001f0c:	4965      	ldr	r1, [pc, #404]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d109      	bne.n	8001f2c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f000 fd01 	bl	8002924 <RCC_SetFlashLatencyFromMSIRange>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e34d      	b.n	80025c8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f2c:	f000 fc36 	bl	800279c <HAL_RCC_GetSysClockFreq>
 8001f30:	4602      	mov	r2, r0
 8001f32:	4b5c      	ldr	r3, [pc, #368]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	091b      	lsrs	r3, r3, #4
 8001f38:	f003 030f 	and.w	r3, r3, #15
 8001f3c:	495a      	ldr	r1, [pc, #360]	; (80020a8 <HAL_RCC_OscConfig+0x29c>)
 8001f3e:	5ccb      	ldrb	r3, [r1, r3]
 8001f40:	f003 031f 	and.w	r3, r3, #31
 8001f44:	fa22 f303 	lsr.w	r3, r2, r3
 8001f48:	4a58      	ldr	r2, [pc, #352]	; (80020ac <HAL_RCC_OscConfig+0x2a0>)
 8001f4a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f4c:	4b58      	ldr	r3, [pc, #352]	; (80020b0 <HAL_RCC_OscConfig+0x2a4>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7fe ff49 	bl	8000de8 <HAL_InitTick>
 8001f56:	4603      	mov	r3, r0
 8001f58:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d052      	beq.n	8002006 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
 8001f62:	e331      	b.n	80025c8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d032      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f6c:	4b4d      	ldr	r3, [pc, #308]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a4c      	ldr	r2, [pc, #304]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f78:	f7fe ff86 	bl	8000e88 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f80:	f7fe ff82 	bl	8000e88 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e31a      	b.n	80025c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f92:	4b44      	ldr	r3, [pc, #272]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0f0      	beq.n	8001f80 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f9e:	4b41      	ldr	r3, [pc, #260]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a40      	ldr	r2, [pc, #256]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 8001fa4:	f043 0308 	orr.w	r3, r3, #8
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	4b3e      	ldr	r3, [pc, #248]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	493b      	ldr	r1, [pc, #236]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fbc:	4b39      	ldr	r3, [pc, #228]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	021b      	lsls	r3, r3, #8
 8001fca:	4936      	ldr	r1, [pc, #216]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	604b      	str	r3, [r1, #4]
 8001fd0:	e01a      	b.n	8002008 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fd2:	4b34      	ldr	r3, [pc, #208]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a33      	ldr	r2, [pc, #204]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 8001fd8:	f023 0301 	bic.w	r3, r3, #1
 8001fdc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fde:	f7fe ff53 	bl	8000e88 <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fe6:	f7fe ff4f 	bl	8000e88 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e2e7      	b.n	80025c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ff8:	4b2a      	ldr	r3, [pc, #168]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1f0      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x1da>
 8002004:	e000      	b.n	8002008 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002006:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b00      	cmp	r3, #0
 8002012:	d074      	beq.n	80020fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	2b08      	cmp	r3, #8
 8002018:	d005      	beq.n	8002026 <HAL_RCC_OscConfig+0x21a>
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	2b0c      	cmp	r3, #12
 800201e:	d10e      	bne.n	800203e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	2b03      	cmp	r3, #3
 8002024:	d10b      	bne.n	800203e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002026:	4b1f      	ldr	r3, [pc, #124]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d064      	beq.n	80020fc <HAL_RCC_OscConfig+0x2f0>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d160      	bne.n	80020fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e2c4      	b.n	80025c8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002046:	d106      	bne.n	8002056 <HAL_RCC_OscConfig+0x24a>
 8002048:	4b16      	ldr	r3, [pc, #88]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a15      	ldr	r2, [pc, #84]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 800204e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002052:	6013      	str	r3, [r2, #0]
 8002054:	e01d      	b.n	8002092 <HAL_RCC_OscConfig+0x286>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800205e:	d10c      	bne.n	800207a <HAL_RCC_OscConfig+0x26e>
 8002060:	4b10      	ldr	r3, [pc, #64]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a0f      	ldr	r2, [pc, #60]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 8002066:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800206a:	6013      	str	r3, [r2, #0]
 800206c:	4b0d      	ldr	r3, [pc, #52]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a0c      	ldr	r2, [pc, #48]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 8002072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	e00b      	b.n	8002092 <HAL_RCC_OscConfig+0x286>
 800207a:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a09      	ldr	r2, [pc, #36]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 8002080:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	4b07      	ldr	r3, [pc, #28]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a06      	ldr	r2, [pc, #24]	; (80020a4 <HAL_RCC_OscConfig+0x298>)
 800208c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002090:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d01c      	beq.n	80020d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209a:	f7fe fef5 	bl	8000e88 <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020a0:	e011      	b.n	80020c6 <HAL_RCC_OscConfig+0x2ba>
 80020a2:	bf00      	nop
 80020a4:	40021000 	.word	0x40021000
 80020a8:	080054d4 	.word	0x080054d4
 80020ac:	20000000 	.word	0x20000000
 80020b0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b4:	f7fe fee8 	bl	8000e88 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b64      	cmp	r3, #100	; 0x64
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e280      	b.n	80025c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020c6:	4baf      	ldr	r3, [pc, #700]	; (8002384 <HAL_RCC_OscConfig+0x578>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0f0      	beq.n	80020b4 <HAL_RCC_OscConfig+0x2a8>
 80020d2:	e014      	b.n	80020fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d4:	f7fe fed8 	bl	8000e88 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020dc:	f7fe fed4 	bl	8000e88 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b64      	cmp	r3, #100	; 0x64
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e26c      	b.n	80025c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020ee:	4ba5      	ldr	r3, [pc, #660]	; (8002384 <HAL_RCC_OscConfig+0x578>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f0      	bne.n	80020dc <HAL_RCC_OscConfig+0x2d0>
 80020fa:	e000      	b.n	80020fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d060      	beq.n	80021cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	2b04      	cmp	r3, #4
 800210e:	d005      	beq.n	800211c <HAL_RCC_OscConfig+0x310>
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	2b0c      	cmp	r3, #12
 8002114:	d119      	bne.n	800214a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	2b02      	cmp	r3, #2
 800211a:	d116      	bne.n	800214a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800211c:	4b99      	ldr	r3, [pc, #612]	; (8002384 <HAL_RCC_OscConfig+0x578>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002124:	2b00      	cmp	r3, #0
 8002126:	d005      	beq.n	8002134 <HAL_RCC_OscConfig+0x328>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e249      	b.n	80025c8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002134:	4b93      	ldr	r3, [pc, #588]	; (8002384 <HAL_RCC_OscConfig+0x578>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	061b      	lsls	r3, r3, #24
 8002142:	4990      	ldr	r1, [pc, #576]	; (8002384 <HAL_RCC_OscConfig+0x578>)
 8002144:	4313      	orrs	r3, r2
 8002146:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002148:	e040      	b.n	80021cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d023      	beq.n	800219a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002152:	4b8c      	ldr	r3, [pc, #560]	; (8002384 <HAL_RCC_OscConfig+0x578>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a8b      	ldr	r2, [pc, #556]	; (8002384 <HAL_RCC_OscConfig+0x578>)
 8002158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800215c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215e:	f7fe fe93 	bl	8000e88 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002166:	f7fe fe8f 	bl	8000e88 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e227      	b.n	80025c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002178:	4b82      	ldr	r3, [pc, #520]	; (8002384 <HAL_RCC_OscConfig+0x578>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0f0      	beq.n	8002166 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002184:	4b7f      	ldr	r3, [pc, #508]	; (8002384 <HAL_RCC_OscConfig+0x578>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	061b      	lsls	r3, r3, #24
 8002192:	497c      	ldr	r1, [pc, #496]	; (8002384 <HAL_RCC_OscConfig+0x578>)
 8002194:	4313      	orrs	r3, r2
 8002196:	604b      	str	r3, [r1, #4]
 8002198:	e018      	b.n	80021cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800219a:	4b7a      	ldr	r3, [pc, #488]	; (8002384 <HAL_RCC_OscConfig+0x578>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a79      	ldr	r2, [pc, #484]	; (8002384 <HAL_RCC_OscConfig+0x578>)
 80021a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a6:	f7fe fe6f 	bl	8000e88 <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ae:	f7fe fe6b 	bl	8000e88 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e203      	b.n	80025c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021c0:	4b70      	ldr	r3, [pc, #448]	; (8002384 <HAL_RCC_OscConfig+0x578>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1f0      	bne.n	80021ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0308 	and.w	r3, r3, #8
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d03c      	beq.n	8002252 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d01c      	beq.n	800221a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021e0:	4b68      	ldr	r3, [pc, #416]	; (8002384 <HAL_RCC_OscConfig+0x578>)
 80021e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021e6:	4a67      	ldr	r2, [pc, #412]	; (8002384 <HAL_RCC_OscConfig+0x578>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f0:	f7fe fe4a 	bl	8000e88 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021f8:	f7fe fe46 	bl	8000e88 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e1de      	b.n	80025c8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800220a:	4b5e      	ldr	r3, [pc, #376]	; (8002384 <HAL_RCC_OscConfig+0x578>)
 800220c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0ef      	beq.n	80021f8 <HAL_RCC_OscConfig+0x3ec>
 8002218:	e01b      	b.n	8002252 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800221a:	4b5a      	ldr	r3, [pc, #360]	; (8002384 <HAL_RCC_OscConfig+0x578>)
 800221c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002220:	4a58      	ldr	r2, [pc, #352]	; (8002384 <HAL_RCC_OscConfig+0x578>)
 8002222:	f023 0301 	bic.w	r3, r3, #1
 8002226:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222a:	f7fe fe2d 	bl	8000e88 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002232:	f7fe fe29 	bl	8000e88 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e1c1      	b.n	80025c8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002244:	4b4f      	ldr	r3, [pc, #316]	; (8002384 <HAL_RCC_OscConfig+0x578>)
 8002246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1ef      	bne.n	8002232 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0304 	and.w	r3, r3, #4
 800225a:	2b00      	cmp	r3, #0
 800225c:	f000 80a6 	beq.w	80023ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002260:	2300      	movs	r3, #0
 8002262:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002264:	4b47      	ldr	r3, [pc, #284]	; (8002384 <HAL_RCC_OscConfig+0x578>)
 8002266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10d      	bne.n	800228c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002270:	4b44      	ldr	r3, [pc, #272]	; (8002384 <HAL_RCC_OscConfig+0x578>)
 8002272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002274:	4a43      	ldr	r2, [pc, #268]	; (8002384 <HAL_RCC_OscConfig+0x578>)
 8002276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800227a:	6593      	str	r3, [r2, #88]	; 0x58
 800227c:	4b41      	ldr	r3, [pc, #260]	; (8002384 <HAL_RCC_OscConfig+0x578>)
 800227e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002288:	2301      	movs	r3, #1
 800228a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800228c:	4b3e      	ldr	r3, [pc, #248]	; (8002388 <HAL_RCC_OscConfig+0x57c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002294:	2b00      	cmp	r3, #0
 8002296:	d118      	bne.n	80022ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002298:	4b3b      	ldr	r3, [pc, #236]	; (8002388 <HAL_RCC_OscConfig+0x57c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a3a      	ldr	r2, [pc, #232]	; (8002388 <HAL_RCC_OscConfig+0x57c>)
 800229e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022a4:	f7fe fdf0 	bl	8000e88 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ac:	f7fe fdec 	bl	8000e88 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e184      	b.n	80025c8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022be:	4b32      	ldr	r3, [pc, #200]	; (8002388 <HAL_RCC_OscConfig+0x57c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0f0      	beq.n	80022ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d108      	bne.n	80022e4 <HAL_RCC_OscConfig+0x4d8>
 80022d2:	4b2c      	ldr	r3, [pc, #176]	; (8002384 <HAL_RCC_OscConfig+0x578>)
 80022d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d8:	4a2a      	ldr	r2, [pc, #168]	; (8002384 <HAL_RCC_OscConfig+0x578>)
 80022da:	f043 0301 	orr.w	r3, r3, #1
 80022de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022e2:	e024      	b.n	800232e <HAL_RCC_OscConfig+0x522>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	2b05      	cmp	r3, #5
 80022ea:	d110      	bne.n	800230e <HAL_RCC_OscConfig+0x502>
 80022ec:	4b25      	ldr	r3, [pc, #148]	; (8002384 <HAL_RCC_OscConfig+0x578>)
 80022ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f2:	4a24      	ldr	r2, [pc, #144]	; (8002384 <HAL_RCC_OscConfig+0x578>)
 80022f4:	f043 0304 	orr.w	r3, r3, #4
 80022f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022fc:	4b21      	ldr	r3, [pc, #132]	; (8002384 <HAL_RCC_OscConfig+0x578>)
 80022fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002302:	4a20      	ldr	r2, [pc, #128]	; (8002384 <HAL_RCC_OscConfig+0x578>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800230c:	e00f      	b.n	800232e <HAL_RCC_OscConfig+0x522>
 800230e:	4b1d      	ldr	r3, [pc, #116]	; (8002384 <HAL_RCC_OscConfig+0x578>)
 8002310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002314:	4a1b      	ldr	r2, [pc, #108]	; (8002384 <HAL_RCC_OscConfig+0x578>)
 8002316:	f023 0301 	bic.w	r3, r3, #1
 800231a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800231e:	4b19      	ldr	r3, [pc, #100]	; (8002384 <HAL_RCC_OscConfig+0x578>)
 8002320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002324:	4a17      	ldr	r2, [pc, #92]	; (8002384 <HAL_RCC_OscConfig+0x578>)
 8002326:	f023 0304 	bic.w	r3, r3, #4
 800232a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d016      	beq.n	8002364 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002336:	f7fe fda7 	bl	8000e88 <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800233c:	e00a      	b.n	8002354 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233e:	f7fe fda3 	bl	8000e88 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	f241 3288 	movw	r2, #5000	; 0x1388
 800234c:	4293      	cmp	r3, r2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e139      	b.n	80025c8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002354:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <HAL_RCC_OscConfig+0x578>)
 8002356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0ed      	beq.n	800233e <HAL_RCC_OscConfig+0x532>
 8002362:	e01a      	b.n	800239a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002364:	f7fe fd90 	bl	8000e88 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800236a:	e00f      	b.n	800238c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236c:	f7fe fd8c 	bl	8000e88 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	f241 3288 	movw	r2, #5000	; 0x1388
 800237a:	4293      	cmp	r3, r2
 800237c:	d906      	bls.n	800238c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e122      	b.n	80025c8 <HAL_RCC_OscConfig+0x7bc>
 8002382:	bf00      	nop
 8002384:	40021000 	.word	0x40021000
 8002388:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800238c:	4b90      	ldr	r3, [pc, #576]	; (80025d0 <HAL_RCC_OscConfig+0x7c4>)
 800238e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1e8      	bne.n	800236c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800239a:	7ffb      	ldrb	r3, [r7, #31]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d105      	bne.n	80023ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a0:	4b8b      	ldr	r3, [pc, #556]	; (80025d0 <HAL_RCC_OscConfig+0x7c4>)
 80023a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a4:	4a8a      	ldr	r2, [pc, #552]	; (80025d0 <HAL_RCC_OscConfig+0x7c4>)
 80023a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023aa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 8108 	beq.w	80025c6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	f040 80d0 	bne.w	8002560 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80023c0:	4b83      	ldr	r3, [pc, #524]	; (80025d0 <HAL_RCC_OscConfig+0x7c4>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	f003 0203 	and.w	r2, r3, #3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d130      	bne.n	8002436 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	3b01      	subs	r3, #1
 80023e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d127      	bne.n	8002436 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d11f      	bne.n	8002436 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002400:	2a07      	cmp	r2, #7
 8002402:	bf14      	ite	ne
 8002404:	2201      	movne	r2, #1
 8002406:	2200      	moveq	r2, #0
 8002408:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800240a:	4293      	cmp	r3, r2
 800240c:	d113      	bne.n	8002436 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002418:	085b      	lsrs	r3, r3, #1
 800241a:	3b01      	subs	r3, #1
 800241c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800241e:	429a      	cmp	r2, r3
 8002420:	d109      	bne.n	8002436 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	085b      	lsrs	r3, r3, #1
 800242e:	3b01      	subs	r3, #1
 8002430:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002432:	429a      	cmp	r2, r3
 8002434:	d06e      	beq.n	8002514 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	2b0c      	cmp	r3, #12
 800243a:	d069      	beq.n	8002510 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800243c:	4b64      	ldr	r3, [pc, #400]	; (80025d0 <HAL_RCC_OscConfig+0x7c4>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d105      	bne.n	8002454 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002448:	4b61      	ldr	r3, [pc, #388]	; (80025d0 <HAL_RCC_OscConfig+0x7c4>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e0b7      	b.n	80025c8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002458:	4b5d      	ldr	r3, [pc, #372]	; (80025d0 <HAL_RCC_OscConfig+0x7c4>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a5c      	ldr	r2, [pc, #368]	; (80025d0 <HAL_RCC_OscConfig+0x7c4>)
 800245e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002462:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002464:	f7fe fd10 	bl	8000e88 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800246c:	f7fe fd0c 	bl	8000e88 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e0a4      	b.n	80025c8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800247e:	4b54      	ldr	r3, [pc, #336]	; (80025d0 <HAL_RCC_OscConfig+0x7c4>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800248a:	4b51      	ldr	r3, [pc, #324]	; (80025d0 <HAL_RCC_OscConfig+0x7c4>)
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	4b51      	ldr	r3, [pc, #324]	; (80025d4 <HAL_RCC_OscConfig+0x7c8>)
 8002490:	4013      	ands	r3, r2
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800249a:	3a01      	subs	r2, #1
 800249c:	0112      	lsls	r2, r2, #4
 800249e:	4311      	orrs	r1, r2
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024a4:	0212      	lsls	r2, r2, #8
 80024a6:	4311      	orrs	r1, r2
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024ac:	0852      	lsrs	r2, r2, #1
 80024ae:	3a01      	subs	r2, #1
 80024b0:	0552      	lsls	r2, r2, #21
 80024b2:	4311      	orrs	r1, r2
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024b8:	0852      	lsrs	r2, r2, #1
 80024ba:	3a01      	subs	r2, #1
 80024bc:	0652      	lsls	r2, r2, #25
 80024be:	4311      	orrs	r1, r2
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024c4:	0912      	lsrs	r2, r2, #4
 80024c6:	0452      	lsls	r2, r2, #17
 80024c8:	430a      	orrs	r2, r1
 80024ca:	4941      	ldr	r1, [pc, #260]	; (80025d0 <HAL_RCC_OscConfig+0x7c4>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80024d0:	4b3f      	ldr	r3, [pc, #252]	; (80025d0 <HAL_RCC_OscConfig+0x7c4>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a3e      	ldr	r2, [pc, #248]	; (80025d0 <HAL_RCC_OscConfig+0x7c4>)
 80024d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024dc:	4b3c      	ldr	r3, [pc, #240]	; (80025d0 <HAL_RCC_OscConfig+0x7c4>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	4a3b      	ldr	r2, [pc, #236]	; (80025d0 <HAL_RCC_OscConfig+0x7c4>)
 80024e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024e8:	f7fe fcce 	bl	8000e88 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f0:	f7fe fcca 	bl	8000e88 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e062      	b.n	80025c8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002502:	4b33      	ldr	r3, [pc, #204]	; (80025d0 <HAL_RCC_OscConfig+0x7c4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f0      	beq.n	80024f0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800250e:	e05a      	b.n	80025c6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e059      	b.n	80025c8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002514:	4b2e      	ldr	r3, [pc, #184]	; (80025d0 <HAL_RCC_OscConfig+0x7c4>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d152      	bne.n	80025c6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002520:	4b2b      	ldr	r3, [pc, #172]	; (80025d0 <HAL_RCC_OscConfig+0x7c4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a2a      	ldr	r2, [pc, #168]	; (80025d0 <HAL_RCC_OscConfig+0x7c4>)
 8002526:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800252a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800252c:	4b28      	ldr	r3, [pc, #160]	; (80025d0 <HAL_RCC_OscConfig+0x7c4>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	4a27      	ldr	r2, [pc, #156]	; (80025d0 <HAL_RCC_OscConfig+0x7c4>)
 8002532:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002536:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002538:	f7fe fca6 	bl	8000e88 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002540:	f7fe fca2 	bl	8000e88 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e03a      	b.n	80025c8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002552:	4b1f      	ldr	r3, [pc, #124]	; (80025d0 <HAL_RCC_OscConfig+0x7c4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0f0      	beq.n	8002540 <HAL_RCC_OscConfig+0x734>
 800255e:	e032      	b.n	80025c6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	2b0c      	cmp	r3, #12
 8002564:	d02d      	beq.n	80025c2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002566:	4b1a      	ldr	r3, [pc, #104]	; (80025d0 <HAL_RCC_OscConfig+0x7c4>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a19      	ldr	r2, [pc, #100]	; (80025d0 <HAL_RCC_OscConfig+0x7c4>)
 800256c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002570:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002572:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <HAL_RCC_OscConfig+0x7c4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d105      	bne.n	800258a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800257e:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <HAL_RCC_OscConfig+0x7c4>)
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	4a13      	ldr	r2, [pc, #76]	; (80025d0 <HAL_RCC_OscConfig+0x7c4>)
 8002584:	f023 0303 	bic.w	r3, r3, #3
 8002588:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800258a:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <HAL_RCC_OscConfig+0x7c4>)
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	4a10      	ldr	r2, [pc, #64]	; (80025d0 <HAL_RCC_OscConfig+0x7c4>)
 8002590:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002598:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259a:	f7fe fc75 	bl	8000e88 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a2:	f7fe fc71 	bl	8000e88 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e009      	b.n	80025c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025b4:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <HAL_RCC_OscConfig+0x7c4>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1f0      	bne.n	80025a2 <HAL_RCC_OscConfig+0x796>
 80025c0:	e001      	b.n	80025c6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3720      	adds	r7, #32
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40021000 	.word	0x40021000
 80025d4:	f99d808c 	.word	0xf99d808c

080025d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e0c8      	b.n	800277e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025ec:	4b66      	ldr	r3, [pc, #408]	; (8002788 <HAL_RCC_ClockConfig+0x1b0>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d910      	bls.n	800261c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fa:	4b63      	ldr	r3, [pc, #396]	; (8002788 <HAL_RCC_ClockConfig+0x1b0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 0207 	bic.w	r2, r3, #7
 8002602:	4961      	ldr	r1, [pc, #388]	; (8002788 <HAL_RCC_ClockConfig+0x1b0>)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	4313      	orrs	r3, r2
 8002608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800260a:	4b5f      	ldr	r3, [pc, #380]	; (8002788 <HAL_RCC_ClockConfig+0x1b0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	429a      	cmp	r2, r3
 8002616:	d001      	beq.n	800261c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e0b0      	b.n	800277e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	2b00      	cmp	r3, #0
 8002626:	d04c      	beq.n	80026c2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b03      	cmp	r3, #3
 800262e:	d107      	bne.n	8002640 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002630:	4b56      	ldr	r3, [pc, #344]	; (800278c <HAL_RCC_ClockConfig+0x1b4>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d121      	bne.n	8002680 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e09e      	b.n	800277e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b02      	cmp	r3, #2
 8002646:	d107      	bne.n	8002658 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002648:	4b50      	ldr	r3, [pc, #320]	; (800278c <HAL_RCC_ClockConfig+0x1b4>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d115      	bne.n	8002680 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e092      	b.n	800277e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d107      	bne.n	8002670 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002660:	4b4a      	ldr	r3, [pc, #296]	; (800278c <HAL_RCC_ClockConfig+0x1b4>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d109      	bne.n	8002680 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e086      	b.n	800277e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002670:	4b46      	ldr	r3, [pc, #280]	; (800278c <HAL_RCC_ClockConfig+0x1b4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e07e      	b.n	800277e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002680:	4b42      	ldr	r3, [pc, #264]	; (800278c <HAL_RCC_ClockConfig+0x1b4>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f023 0203 	bic.w	r2, r3, #3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	493f      	ldr	r1, [pc, #252]	; (800278c <HAL_RCC_ClockConfig+0x1b4>)
 800268e:	4313      	orrs	r3, r2
 8002690:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002692:	f7fe fbf9 	bl	8000e88 <HAL_GetTick>
 8002696:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002698:	e00a      	b.n	80026b0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800269a:	f7fe fbf5 	bl	8000e88 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e066      	b.n	800277e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b0:	4b36      	ldr	r3, [pc, #216]	; (800278c <HAL_RCC_ClockConfig+0x1b4>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 020c 	and.w	r2, r3, #12
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	429a      	cmp	r2, r3
 80026c0:	d1eb      	bne.n	800269a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d008      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ce:	4b2f      	ldr	r3, [pc, #188]	; (800278c <HAL_RCC_ClockConfig+0x1b4>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	492c      	ldr	r1, [pc, #176]	; (800278c <HAL_RCC_ClockConfig+0x1b4>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026e0:	4b29      	ldr	r3, [pc, #164]	; (8002788 <HAL_RCC_ClockConfig+0x1b0>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d210      	bcs.n	8002710 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ee:	4b26      	ldr	r3, [pc, #152]	; (8002788 <HAL_RCC_ClockConfig+0x1b0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 0207 	bic.w	r2, r3, #7
 80026f6:	4924      	ldr	r1, [pc, #144]	; (8002788 <HAL_RCC_ClockConfig+0x1b0>)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fe:	4b22      	ldr	r3, [pc, #136]	; (8002788 <HAL_RCC_ClockConfig+0x1b0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	429a      	cmp	r2, r3
 800270a:	d001      	beq.n	8002710 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e036      	b.n	800277e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	d008      	beq.n	800272e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800271c:	4b1b      	ldr	r3, [pc, #108]	; (800278c <HAL_RCC_ClockConfig+0x1b4>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	4918      	ldr	r1, [pc, #96]	; (800278c <HAL_RCC_ClockConfig+0x1b4>)
 800272a:	4313      	orrs	r3, r2
 800272c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b00      	cmp	r3, #0
 8002738:	d009      	beq.n	800274e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800273a:	4b14      	ldr	r3, [pc, #80]	; (800278c <HAL_RCC_ClockConfig+0x1b4>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	4910      	ldr	r1, [pc, #64]	; (800278c <HAL_RCC_ClockConfig+0x1b4>)
 800274a:	4313      	orrs	r3, r2
 800274c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800274e:	f000 f825 	bl	800279c <HAL_RCC_GetSysClockFreq>
 8002752:	4602      	mov	r2, r0
 8002754:	4b0d      	ldr	r3, [pc, #52]	; (800278c <HAL_RCC_ClockConfig+0x1b4>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	091b      	lsrs	r3, r3, #4
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	490c      	ldr	r1, [pc, #48]	; (8002790 <HAL_RCC_ClockConfig+0x1b8>)
 8002760:	5ccb      	ldrb	r3, [r1, r3]
 8002762:	f003 031f 	and.w	r3, r3, #31
 8002766:	fa22 f303 	lsr.w	r3, r2, r3
 800276a:	4a0a      	ldr	r2, [pc, #40]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 800276c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800276e:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <HAL_RCC_ClockConfig+0x1c0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f7fe fb38 	bl	8000de8 <HAL_InitTick>
 8002778:	4603      	mov	r3, r0
 800277a:	72fb      	strb	r3, [r7, #11]

  return status;
 800277c:	7afb      	ldrb	r3, [r7, #11]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40022000 	.word	0x40022000
 800278c:	40021000 	.word	0x40021000
 8002790:	080054d4 	.word	0x080054d4
 8002794:	20000000 	.word	0x20000000
 8002798:	20000004 	.word	0x20000004

0800279c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800279c:	b480      	push	{r7}
 800279e:	b089      	sub	sp, #36	; 0x24
 80027a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
 80027a6:	2300      	movs	r3, #0
 80027a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027aa:	4b3e      	ldr	r3, [pc, #248]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 030c 	and.w	r3, r3, #12
 80027b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027b4:	4b3b      	ldr	r3, [pc, #236]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f003 0303 	and.w	r3, r3, #3
 80027bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d005      	beq.n	80027d0 <HAL_RCC_GetSysClockFreq+0x34>
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	2b0c      	cmp	r3, #12
 80027c8:	d121      	bne.n	800280e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d11e      	bne.n	800280e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80027d0:	4b34      	ldr	r3, [pc, #208]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d107      	bne.n	80027ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80027dc:	4b31      	ldr	r3, [pc, #196]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80027de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027e2:	0a1b      	lsrs	r3, r3, #8
 80027e4:	f003 030f 	and.w	r3, r3, #15
 80027e8:	61fb      	str	r3, [r7, #28]
 80027ea:	e005      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80027ec:	4b2d      	ldr	r3, [pc, #180]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	091b      	lsrs	r3, r3, #4
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80027f8:	4a2b      	ldr	r2, [pc, #172]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002800:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10d      	bne.n	8002824 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800280c:	e00a      	b.n	8002824 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	2b04      	cmp	r3, #4
 8002812:	d102      	bne.n	800281a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002814:	4b25      	ldr	r3, [pc, #148]	; (80028ac <HAL_RCC_GetSysClockFreq+0x110>)
 8002816:	61bb      	str	r3, [r7, #24]
 8002818:	e004      	b.n	8002824 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	2b08      	cmp	r3, #8
 800281e:	d101      	bne.n	8002824 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002820:	4b23      	ldr	r3, [pc, #140]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002822:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	2b0c      	cmp	r3, #12
 8002828:	d134      	bne.n	8002894 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800282a:	4b1e      	ldr	r3, [pc, #120]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2b02      	cmp	r3, #2
 8002838:	d003      	beq.n	8002842 <HAL_RCC_GetSysClockFreq+0xa6>
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2b03      	cmp	r3, #3
 800283e:	d003      	beq.n	8002848 <HAL_RCC_GetSysClockFreq+0xac>
 8002840:	e005      	b.n	800284e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002842:	4b1a      	ldr	r3, [pc, #104]	; (80028ac <HAL_RCC_GetSysClockFreq+0x110>)
 8002844:	617b      	str	r3, [r7, #20]
      break;
 8002846:	e005      	b.n	8002854 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002848:	4b19      	ldr	r3, [pc, #100]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800284a:	617b      	str	r3, [r7, #20]
      break;
 800284c:	e002      	b.n	8002854 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	617b      	str	r3, [r7, #20]
      break;
 8002852:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002854:	4b13      	ldr	r3, [pc, #76]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	091b      	lsrs	r3, r3, #4
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	3301      	adds	r3, #1
 8002860:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002862:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	0a1b      	lsrs	r3, r3, #8
 8002868:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	fb02 f203 	mul.w	r2, r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	fbb2 f3f3 	udiv	r3, r2, r3
 8002878:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800287a:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	0e5b      	lsrs	r3, r3, #25
 8002880:	f003 0303 	and.w	r3, r3, #3
 8002884:	3301      	adds	r3, #1
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002892:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002894:	69bb      	ldr	r3, [r7, #24]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3724      	adds	r7, #36	; 0x24
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	40021000 	.word	0x40021000
 80028a8:	080054ec 	.word	0x080054ec
 80028ac:	00f42400 	.word	0x00f42400
 80028b0:	02dc6c00 	.word	0x02dc6c00

080028b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028b8:	4b03      	ldr	r3, [pc, #12]	; (80028c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80028ba:	681b      	ldr	r3, [r3, #0]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	20000000 	.word	0x20000000

080028cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80028d0:	f7ff fff0 	bl	80028b4 <HAL_RCC_GetHCLKFreq>
 80028d4:	4602      	mov	r2, r0
 80028d6:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	0a1b      	lsrs	r3, r3, #8
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	4904      	ldr	r1, [pc, #16]	; (80028f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028e2:	5ccb      	ldrb	r3, [r1, r3]
 80028e4:	f003 031f 	and.w	r3, r3, #31
 80028e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40021000 	.word	0x40021000
 80028f4:	080054e4 	.word	0x080054e4

080028f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80028fc:	f7ff ffda 	bl	80028b4 <HAL_RCC_GetHCLKFreq>
 8002900:	4602      	mov	r2, r0
 8002902:	4b06      	ldr	r3, [pc, #24]	; (800291c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	0adb      	lsrs	r3, r3, #11
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	4904      	ldr	r1, [pc, #16]	; (8002920 <HAL_RCC_GetPCLK2Freq+0x28>)
 800290e:	5ccb      	ldrb	r3, [r1, r3]
 8002910:	f003 031f 	and.w	r3, r3, #31
 8002914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002918:	4618      	mov	r0, r3
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40021000 	.word	0x40021000
 8002920:	080054e4 	.word	0x080054e4

08002924 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800292c:	2300      	movs	r3, #0
 800292e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002930:	4b2a      	ldr	r3, [pc, #168]	; (80029dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800293c:	f7ff fa02 	bl	8001d44 <HAL_PWREx_GetVoltageRange>
 8002940:	6178      	str	r0, [r7, #20]
 8002942:	e014      	b.n	800296e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002944:	4b25      	ldr	r3, [pc, #148]	; (80029dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002948:	4a24      	ldr	r2, [pc, #144]	; (80029dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800294a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800294e:	6593      	str	r3, [r2, #88]	; 0x58
 8002950:	4b22      	ldr	r3, [pc, #136]	; (80029dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800295c:	f7ff f9f2 	bl	8001d44 <HAL_PWREx_GetVoltageRange>
 8002960:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002962:	4b1e      	ldr	r3, [pc, #120]	; (80029dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002966:	4a1d      	ldr	r2, [pc, #116]	; (80029dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002968:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800296c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002974:	d10b      	bne.n	800298e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b80      	cmp	r3, #128	; 0x80
 800297a:	d919      	bls.n	80029b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2ba0      	cmp	r3, #160	; 0xa0
 8002980:	d902      	bls.n	8002988 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002982:	2302      	movs	r3, #2
 8002984:	613b      	str	r3, [r7, #16]
 8002986:	e013      	b.n	80029b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002988:	2301      	movs	r3, #1
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	e010      	b.n	80029b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b80      	cmp	r3, #128	; 0x80
 8002992:	d902      	bls.n	800299a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002994:	2303      	movs	r3, #3
 8002996:	613b      	str	r3, [r7, #16]
 8002998:	e00a      	b.n	80029b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b80      	cmp	r3, #128	; 0x80
 800299e:	d102      	bne.n	80029a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029a0:	2302      	movs	r3, #2
 80029a2:	613b      	str	r3, [r7, #16]
 80029a4:	e004      	b.n	80029b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b70      	cmp	r3, #112	; 0x70
 80029aa:	d101      	bne.n	80029b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029ac:	2301      	movs	r3, #1
 80029ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80029b0:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f023 0207 	bic.w	r2, r3, #7
 80029b8:	4909      	ldr	r1, [pc, #36]	; (80029e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	4313      	orrs	r3, r2
 80029be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80029c0:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d001      	beq.n	80029d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e000      	b.n	80029d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40021000 	.word	0x40021000
 80029e0:	40022000 	.word	0x40022000

080029e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029ec:	2300      	movs	r3, #0
 80029ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029f0:	2300      	movs	r3, #0
 80029f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d041      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a04:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a08:	d02a      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002a0a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a0e:	d824      	bhi.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a14:	d008      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002a16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a1a:	d81e      	bhi.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00a      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002a20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a24:	d010      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a26:	e018      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a28:	4b86      	ldr	r3, [pc, #536]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	4a85      	ldr	r2, [pc, #532]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a32:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a34:	e015      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	3304      	adds	r3, #4
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f000 fabb 	bl	8002fb8 <RCCEx_PLLSAI1_Config>
 8002a42:	4603      	mov	r3, r0
 8002a44:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a46:	e00c      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3320      	adds	r3, #32
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 fba6 	bl	80031a0 <RCCEx_PLLSAI2_Config>
 8002a54:	4603      	mov	r3, r0
 8002a56:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a58:	e003      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	74fb      	strb	r3, [r7, #19]
      break;
 8002a5e:	e000      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002a60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a62:	7cfb      	ldrb	r3, [r7, #19]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10b      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a68:	4b76      	ldr	r3, [pc, #472]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a76:	4973      	ldr	r1, [pc, #460]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a7e:	e001      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a80:	7cfb      	ldrb	r3, [r7, #19]
 8002a82:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d041      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a94:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a98:	d02a      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002a9a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a9e:	d824      	bhi.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002aa0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002aa4:	d008      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002aa6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002aaa:	d81e      	bhi.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00a      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002ab0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ab4:	d010      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ab6:	e018      	b.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ab8:	4b62      	ldr	r3, [pc, #392]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	4a61      	ldr	r2, [pc, #388]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ac4:	e015      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	3304      	adds	r3, #4
 8002aca:	2100      	movs	r1, #0
 8002acc:	4618      	mov	r0, r3
 8002ace:	f000 fa73 	bl	8002fb8 <RCCEx_PLLSAI1_Config>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ad6:	e00c      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3320      	adds	r3, #32
 8002adc:	2100      	movs	r1, #0
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 fb5e 	bl	80031a0 <RCCEx_PLLSAI2_Config>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ae8:	e003      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	74fb      	strb	r3, [r7, #19]
      break;
 8002aee:	e000      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002af0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002af2:	7cfb      	ldrb	r3, [r7, #19]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10b      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002af8:	4b52      	ldr	r3, [pc, #328]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b06:	494f      	ldr	r1, [pc, #316]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b0e:	e001      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b10:	7cfb      	ldrb	r3, [r7, #19]
 8002b12:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 80a0 	beq.w	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b22:	2300      	movs	r3, #0
 8002b24:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b26:	4b47      	ldr	r3, [pc, #284]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002b36:	2300      	movs	r3, #0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00d      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b3c:	4b41      	ldr	r3, [pc, #260]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b40:	4a40      	ldr	r2, [pc, #256]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b46:	6593      	str	r3, [r2, #88]	; 0x58
 8002b48:	4b3e      	ldr	r3, [pc, #248]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b50:	60bb      	str	r3, [r7, #8]
 8002b52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b54:	2301      	movs	r3, #1
 8002b56:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b58:	4b3b      	ldr	r3, [pc, #236]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a3a      	ldr	r2, [pc, #232]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b64:	f7fe f990 	bl	8000e88 <HAL_GetTick>
 8002b68:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b6a:	e009      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b6c:	f7fe f98c 	bl	8000e88 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d902      	bls.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	74fb      	strb	r3, [r7, #19]
        break;
 8002b7e:	e005      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b80:	4b31      	ldr	r3, [pc, #196]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0ef      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002b8c:	7cfb      	ldrb	r3, [r7, #19]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d15c      	bne.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b92:	4b2c      	ldr	r3, [pc, #176]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b9c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d01f      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d019      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002bb0:	4b24      	ldr	r3, [pc, #144]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bbc:	4b21      	ldr	r3, [pc, #132]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc2:	4a20      	ldr	r2, [pc, #128]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bcc:	4b1d      	ldr	r3, [pc, #116]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd2:	4a1c      	ldr	r2, [pc, #112]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002bdc:	4a19      	ldr	r2, [pc, #100]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d016      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bee:	f7fe f94b 	bl	8000e88 <HAL_GetTick>
 8002bf2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bf4:	e00b      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf6:	f7fe f947 	bl	8000e88 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d902      	bls.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	74fb      	strb	r3, [r7, #19]
            break;
 8002c0c:	e006      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c0e:	4b0d      	ldr	r3, [pc, #52]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0ec      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002c1c:	7cfb      	ldrb	r3, [r7, #19]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10c      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c22:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c32:	4904      	ldr	r1, [pc, #16]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c3a:	e009      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c3c:	7cfb      	ldrb	r3, [r7, #19]
 8002c3e:	74bb      	strb	r3, [r7, #18]
 8002c40:	e006      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002c42:	bf00      	nop
 8002c44:	40021000 	.word	0x40021000
 8002c48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c4c:	7cfb      	ldrb	r3, [r7, #19]
 8002c4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c50:	7c7b      	ldrb	r3, [r7, #17]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d105      	bne.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c56:	4b9e      	ldr	r3, [pc, #632]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5a:	4a9d      	ldr	r2, [pc, #628]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c60:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00a      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c6e:	4b98      	ldr	r3, [pc, #608]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c74:	f023 0203 	bic.w	r2, r3, #3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7c:	4994      	ldr	r1, [pc, #592]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00a      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c90:	4b8f      	ldr	r3, [pc, #572]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c96:	f023 020c 	bic.w	r2, r3, #12
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9e:	498c      	ldr	r1, [pc, #560]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0304 	and.w	r3, r3, #4
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00a      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cb2:	4b87      	ldr	r3, [pc, #540]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	4983      	ldr	r1, [pc, #524]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0308 	and.w	r3, r3, #8
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00a      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cd4:	4b7e      	ldr	r3, [pc, #504]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cda:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce2:	497b      	ldr	r1, [pc, #492]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0310 	and.w	r3, r3, #16
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00a      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002cf6:	4b76      	ldr	r3, [pc, #472]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d04:	4972      	ldr	r1, [pc, #456]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0320 	and.w	r3, r3, #32
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00a      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d18:	4b6d      	ldr	r3, [pc, #436]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d26:	496a      	ldr	r1, [pc, #424]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00a      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d3a:	4b65      	ldr	r3, [pc, #404]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d48:	4961      	ldr	r1, [pc, #388]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00a      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d5c:	4b5c      	ldr	r3, [pc, #368]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d6a:	4959      	ldr	r1, [pc, #356]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00a      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d7e:	4b54      	ldr	r3, [pc, #336]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d84:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d8c:	4950      	ldr	r1, [pc, #320]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00a      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002da0:	4b4b      	ldr	r3, [pc, #300]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dae:	4948      	ldr	r1, [pc, #288]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00a      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002dc2:	4b43      	ldr	r3, [pc, #268]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd0:	493f      	ldr	r1, [pc, #252]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d028      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002de4:	4b3a      	ldr	r3, [pc, #232]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002df2:	4937      	ldr	r1, [pc, #220]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e02:	d106      	bne.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e04:	4b32      	ldr	r3, [pc, #200]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	4a31      	ldr	r2, [pc, #196]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e0e:	60d3      	str	r3, [r2, #12]
 8002e10:	e011      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e1a:	d10c      	bne.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3304      	adds	r3, #4
 8002e20:	2101      	movs	r1, #1
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 f8c8 	bl	8002fb8 <RCCEx_PLLSAI1_Config>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e2c:	7cfb      	ldrb	r3, [r7, #19]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002e32:	7cfb      	ldrb	r3, [r7, #19]
 8002e34:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d028      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e42:	4b23      	ldr	r3, [pc, #140]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e48:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e50:	491f      	ldr	r1, [pc, #124]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e60:	d106      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e62:	4b1b      	ldr	r3, [pc, #108]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	4a1a      	ldr	r2, [pc, #104]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e6c:	60d3      	str	r3, [r2, #12]
 8002e6e:	e011      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e78:	d10c      	bne.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	3304      	adds	r3, #4
 8002e7e:	2101      	movs	r1, #1
 8002e80:	4618      	mov	r0, r3
 8002e82:	f000 f899 	bl	8002fb8 <RCCEx_PLLSAI1_Config>
 8002e86:	4603      	mov	r3, r0
 8002e88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e8a:	7cfb      	ldrb	r3, [r7, #19]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002e90:	7cfb      	ldrb	r3, [r7, #19]
 8002e92:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d02b      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eae:	4908      	ldr	r1, [pc, #32]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ebe:	d109      	bne.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ec0:	4b03      	ldr	r3, [pc, #12]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	4a02      	ldr	r2, [pc, #8]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eca:	60d3      	str	r3, [r2, #12]
 8002ecc:	e014      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002ece:	bf00      	nop
 8002ed0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002edc:	d10c      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f000 f867 	bl	8002fb8 <RCCEx_PLLSAI1_Config>
 8002eea:	4603      	mov	r3, r0
 8002eec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002eee:	7cfb      	ldrb	r3, [r7, #19]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002ef4:	7cfb      	ldrb	r3, [r7, #19]
 8002ef6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d02f      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f04:	4b2b      	ldr	r3, [pc, #172]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f12:	4928      	ldr	r1, [pc, #160]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f22:	d10d      	bne.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3304      	adds	r3, #4
 8002f28:	2102      	movs	r1, #2
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 f844 	bl	8002fb8 <RCCEx_PLLSAI1_Config>
 8002f30:	4603      	mov	r3, r0
 8002f32:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f34:	7cfb      	ldrb	r3, [r7, #19]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d014      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002f3a:	7cfb      	ldrb	r3, [r7, #19]
 8002f3c:	74bb      	strb	r3, [r7, #18]
 8002f3e:	e011      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f48:	d10c      	bne.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	3320      	adds	r3, #32
 8002f4e:	2102      	movs	r1, #2
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 f925 	bl	80031a0 <RCCEx_PLLSAI2_Config>
 8002f56:	4603      	mov	r3, r0
 8002f58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f5a:	7cfb      	ldrb	r3, [r7, #19]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002f60:	7cfb      	ldrb	r3, [r7, #19]
 8002f62:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00a      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f70:	4b10      	ldr	r3, [pc, #64]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f76:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f7e:	490d      	ldr	r1, [pc, #52]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00b      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f92:	4b08      	ldr	r3, [pc, #32]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fa2:	4904      	ldr	r1, [pc, #16]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002faa:	7cbb      	ldrb	r3, [r7, #18]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40021000 	.word	0x40021000

08002fb8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002fc6:	4b75      	ldr	r3, [pc, #468]	; (800319c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d018      	beq.n	8003004 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002fd2:	4b72      	ldr	r3, [pc, #456]	; (800319c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	f003 0203 	and.w	r2, r3, #3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d10d      	bne.n	8002ffe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
       ||
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d009      	beq.n	8002ffe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002fea:	4b6c      	ldr	r3, [pc, #432]	; (800319c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	091b      	lsrs	r3, r3, #4
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	1c5a      	adds	r2, r3, #1
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
       ||
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d047      	beq.n	800308e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	73fb      	strb	r3, [r7, #15]
 8003002:	e044      	b.n	800308e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b03      	cmp	r3, #3
 800300a:	d018      	beq.n	800303e <RCCEx_PLLSAI1_Config+0x86>
 800300c:	2b03      	cmp	r3, #3
 800300e:	d825      	bhi.n	800305c <RCCEx_PLLSAI1_Config+0xa4>
 8003010:	2b01      	cmp	r3, #1
 8003012:	d002      	beq.n	800301a <RCCEx_PLLSAI1_Config+0x62>
 8003014:	2b02      	cmp	r3, #2
 8003016:	d009      	beq.n	800302c <RCCEx_PLLSAI1_Config+0x74>
 8003018:	e020      	b.n	800305c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800301a:	4b60      	ldr	r3, [pc, #384]	; (800319c <RCCEx_PLLSAI1_Config+0x1e4>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d11d      	bne.n	8003062 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800302a:	e01a      	b.n	8003062 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800302c:	4b5b      	ldr	r3, [pc, #364]	; (800319c <RCCEx_PLLSAI1_Config+0x1e4>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003034:	2b00      	cmp	r3, #0
 8003036:	d116      	bne.n	8003066 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800303c:	e013      	b.n	8003066 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800303e:	4b57      	ldr	r3, [pc, #348]	; (800319c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10f      	bne.n	800306a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800304a:	4b54      	ldr	r3, [pc, #336]	; (800319c <RCCEx_PLLSAI1_Config+0x1e4>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d109      	bne.n	800306a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800305a:	e006      	b.n	800306a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	73fb      	strb	r3, [r7, #15]
      break;
 8003060:	e004      	b.n	800306c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003062:	bf00      	nop
 8003064:	e002      	b.n	800306c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003066:	bf00      	nop
 8003068:	e000      	b.n	800306c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800306a:	bf00      	nop
    }

    if(status == HAL_OK)
 800306c:	7bfb      	ldrb	r3, [r7, #15]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10d      	bne.n	800308e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003072:	4b4a      	ldr	r3, [pc, #296]	; (800319c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6819      	ldr	r1, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	3b01      	subs	r3, #1
 8003084:	011b      	lsls	r3, r3, #4
 8003086:	430b      	orrs	r3, r1
 8003088:	4944      	ldr	r1, [pc, #272]	; (800319c <RCCEx_PLLSAI1_Config+0x1e4>)
 800308a:	4313      	orrs	r3, r2
 800308c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800308e:	7bfb      	ldrb	r3, [r7, #15]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d17d      	bne.n	8003190 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003094:	4b41      	ldr	r3, [pc, #260]	; (800319c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a40      	ldr	r2, [pc, #256]	; (800319c <RCCEx_PLLSAI1_Config+0x1e4>)
 800309a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800309e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030a0:	f7fd fef2 	bl	8000e88 <HAL_GetTick>
 80030a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030a6:	e009      	b.n	80030bc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030a8:	f7fd feee 	bl	8000e88 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d902      	bls.n	80030bc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	73fb      	strb	r3, [r7, #15]
        break;
 80030ba:	e005      	b.n	80030c8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030bc:	4b37      	ldr	r3, [pc, #220]	; (800319c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1ef      	bne.n	80030a8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d160      	bne.n	8003190 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d111      	bne.n	80030f8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030d4:	4b31      	ldr	r3, [pc, #196]	; (800319c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80030dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6892      	ldr	r2, [r2, #8]
 80030e4:	0211      	lsls	r1, r2, #8
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	68d2      	ldr	r2, [r2, #12]
 80030ea:	0912      	lsrs	r2, r2, #4
 80030ec:	0452      	lsls	r2, r2, #17
 80030ee:	430a      	orrs	r2, r1
 80030f0:	492a      	ldr	r1, [pc, #168]	; (800319c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	610b      	str	r3, [r1, #16]
 80030f6:	e027      	b.n	8003148 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d112      	bne.n	8003124 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030fe:	4b27      	ldr	r3, [pc, #156]	; (800319c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003106:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6892      	ldr	r2, [r2, #8]
 800310e:	0211      	lsls	r1, r2, #8
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6912      	ldr	r2, [r2, #16]
 8003114:	0852      	lsrs	r2, r2, #1
 8003116:	3a01      	subs	r2, #1
 8003118:	0552      	lsls	r2, r2, #21
 800311a:	430a      	orrs	r2, r1
 800311c:	491f      	ldr	r1, [pc, #124]	; (800319c <RCCEx_PLLSAI1_Config+0x1e4>)
 800311e:	4313      	orrs	r3, r2
 8003120:	610b      	str	r3, [r1, #16]
 8003122:	e011      	b.n	8003148 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003124:	4b1d      	ldr	r3, [pc, #116]	; (800319c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800312c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	6892      	ldr	r2, [r2, #8]
 8003134:	0211      	lsls	r1, r2, #8
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6952      	ldr	r2, [r2, #20]
 800313a:	0852      	lsrs	r2, r2, #1
 800313c:	3a01      	subs	r2, #1
 800313e:	0652      	lsls	r2, r2, #25
 8003140:	430a      	orrs	r2, r1
 8003142:	4916      	ldr	r1, [pc, #88]	; (800319c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003144:	4313      	orrs	r3, r2
 8003146:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003148:	4b14      	ldr	r3, [pc, #80]	; (800319c <RCCEx_PLLSAI1_Config+0x1e4>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a13      	ldr	r2, [pc, #76]	; (800319c <RCCEx_PLLSAI1_Config+0x1e4>)
 800314e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003152:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003154:	f7fd fe98 	bl	8000e88 <HAL_GetTick>
 8003158:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800315a:	e009      	b.n	8003170 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800315c:	f7fd fe94 	bl	8000e88 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d902      	bls.n	8003170 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	73fb      	strb	r3, [r7, #15]
          break;
 800316e:	e005      	b.n	800317c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003170:	4b0a      	ldr	r3, [pc, #40]	; (800319c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0ef      	beq.n	800315c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800317c:	7bfb      	ldrb	r3, [r7, #15]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d106      	bne.n	8003190 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003182:	4b06      	ldr	r3, [pc, #24]	; (800319c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003184:	691a      	ldr	r2, [r3, #16]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	4904      	ldr	r1, [pc, #16]	; (800319c <RCCEx_PLLSAI1_Config+0x1e4>)
 800318c:	4313      	orrs	r3, r2
 800318e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003190:	7bfb      	ldrb	r3, [r7, #15]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	40021000 	.word	0x40021000

080031a0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031aa:	2300      	movs	r3, #0
 80031ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031ae:	4b6a      	ldr	r3, [pc, #424]	; (8003358 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d018      	beq.n	80031ec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80031ba:	4b67      	ldr	r3, [pc, #412]	; (8003358 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f003 0203 	and.w	r2, r3, #3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d10d      	bne.n	80031e6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
       ||
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d009      	beq.n	80031e6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80031d2:	4b61      	ldr	r3, [pc, #388]	; (8003358 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	091b      	lsrs	r3, r3, #4
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	1c5a      	adds	r2, r3, #1
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
       ||
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d047      	beq.n	8003276 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	73fb      	strb	r3, [r7, #15]
 80031ea:	e044      	b.n	8003276 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2b03      	cmp	r3, #3
 80031f2:	d018      	beq.n	8003226 <RCCEx_PLLSAI2_Config+0x86>
 80031f4:	2b03      	cmp	r3, #3
 80031f6:	d825      	bhi.n	8003244 <RCCEx_PLLSAI2_Config+0xa4>
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d002      	beq.n	8003202 <RCCEx_PLLSAI2_Config+0x62>
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d009      	beq.n	8003214 <RCCEx_PLLSAI2_Config+0x74>
 8003200:	e020      	b.n	8003244 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003202:	4b55      	ldr	r3, [pc, #340]	; (8003358 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d11d      	bne.n	800324a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003212:	e01a      	b.n	800324a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003214:	4b50      	ldr	r3, [pc, #320]	; (8003358 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800321c:	2b00      	cmp	r3, #0
 800321e:	d116      	bne.n	800324e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003224:	e013      	b.n	800324e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003226:	4b4c      	ldr	r3, [pc, #304]	; (8003358 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10f      	bne.n	8003252 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003232:	4b49      	ldr	r3, [pc, #292]	; (8003358 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d109      	bne.n	8003252 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003242:	e006      	b.n	8003252 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	73fb      	strb	r3, [r7, #15]
      break;
 8003248:	e004      	b.n	8003254 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800324a:	bf00      	nop
 800324c:	e002      	b.n	8003254 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800324e:	bf00      	nop
 8003250:	e000      	b.n	8003254 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003252:	bf00      	nop
    }

    if(status == HAL_OK)
 8003254:	7bfb      	ldrb	r3, [r7, #15]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10d      	bne.n	8003276 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800325a:	4b3f      	ldr	r3, [pc, #252]	; (8003358 <RCCEx_PLLSAI2_Config+0x1b8>)
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6819      	ldr	r1, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	3b01      	subs	r3, #1
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	430b      	orrs	r3, r1
 8003270:	4939      	ldr	r1, [pc, #228]	; (8003358 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003272:	4313      	orrs	r3, r2
 8003274:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003276:	7bfb      	ldrb	r3, [r7, #15]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d167      	bne.n	800334c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800327c:	4b36      	ldr	r3, [pc, #216]	; (8003358 <RCCEx_PLLSAI2_Config+0x1b8>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a35      	ldr	r2, [pc, #212]	; (8003358 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003282:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003286:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003288:	f7fd fdfe 	bl	8000e88 <HAL_GetTick>
 800328c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800328e:	e009      	b.n	80032a4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003290:	f7fd fdfa 	bl	8000e88 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d902      	bls.n	80032a4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	73fb      	strb	r3, [r7, #15]
        break;
 80032a2:	e005      	b.n	80032b0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80032a4:	4b2c      	ldr	r3, [pc, #176]	; (8003358 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1ef      	bne.n	8003290 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80032b0:	7bfb      	ldrb	r3, [r7, #15]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d14a      	bne.n	800334c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d111      	bne.n	80032e0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032bc:	4b26      	ldr	r3, [pc, #152]	; (8003358 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80032c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6892      	ldr	r2, [r2, #8]
 80032cc:	0211      	lsls	r1, r2, #8
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	68d2      	ldr	r2, [r2, #12]
 80032d2:	0912      	lsrs	r2, r2, #4
 80032d4:	0452      	lsls	r2, r2, #17
 80032d6:	430a      	orrs	r2, r1
 80032d8:	491f      	ldr	r1, [pc, #124]	; (8003358 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	614b      	str	r3, [r1, #20]
 80032de:	e011      	b.n	8003304 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032e0:	4b1d      	ldr	r3, [pc, #116]	; (8003358 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80032e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	6892      	ldr	r2, [r2, #8]
 80032f0:	0211      	lsls	r1, r2, #8
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6912      	ldr	r2, [r2, #16]
 80032f6:	0852      	lsrs	r2, r2, #1
 80032f8:	3a01      	subs	r2, #1
 80032fa:	0652      	lsls	r2, r2, #25
 80032fc:	430a      	orrs	r2, r1
 80032fe:	4916      	ldr	r1, [pc, #88]	; (8003358 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003300:	4313      	orrs	r3, r2
 8003302:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003304:	4b14      	ldr	r3, [pc, #80]	; (8003358 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a13      	ldr	r2, [pc, #76]	; (8003358 <RCCEx_PLLSAI2_Config+0x1b8>)
 800330a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800330e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003310:	f7fd fdba 	bl	8000e88 <HAL_GetTick>
 8003314:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003316:	e009      	b.n	800332c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003318:	f7fd fdb6 	bl	8000e88 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d902      	bls.n	800332c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	73fb      	strb	r3, [r7, #15]
          break;
 800332a:	e005      	b.n	8003338 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800332c:	4b0a      	ldr	r3, [pc, #40]	; (8003358 <RCCEx_PLLSAI2_Config+0x1b8>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0ef      	beq.n	8003318 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003338:	7bfb      	ldrb	r3, [r7, #15]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d106      	bne.n	800334c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800333e:	4b06      	ldr	r3, [pc, #24]	; (8003358 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003340:	695a      	ldr	r2, [r3, #20]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	4904      	ldr	r1, [pc, #16]	; (8003358 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003348:	4313      	orrs	r3, r2
 800334a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800334c:	7bfb      	ldrb	r3, [r7, #15]
}
 800334e:	4618      	mov	r0, r3
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	40021000 	.word	0x40021000

0800335c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e040      	b.n	80033f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003372:	2b00      	cmp	r3, #0
 8003374:	d106      	bne.n	8003384 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7fd fca6 	bl	8000cd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2224      	movs	r2, #36	; 0x24
 8003388:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0201 	bic.w	r2, r2, #1
 8003398:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 fa92 	bl	80038c4 <UART_SetConfig>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d101      	bne.n	80033aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e022      	b.n	80033f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d002      	beq.n	80033b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 fd10 	bl	8003dd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689a      	ldr	r2, [r3, #8]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0201 	orr.w	r2, r2, #1
 80033e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 fd97 	bl	8003f1c <UART_CheckIdleState>
 80033ee:	4603      	mov	r3, r0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	4613      	mov	r3, r2
 8003404:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800340a:	2b20      	cmp	r3, #32
 800340c:	d131      	bne.n	8003472 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d002      	beq.n	800341a <HAL_UART_Receive_IT+0x22>
 8003414:	88fb      	ldrh	r3, [r7, #6]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e02a      	b.n	8003474 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003424:	2b01      	cmp	r3, #1
 8003426:	d101      	bne.n	800342c <HAL_UART_Receive_IT+0x34>
 8003428:	2302      	movs	r3, #2
 800342a:	e023      	b.n	8003474 <HAL_UART_Receive_IT+0x7c>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a0f      	ldr	r2, [pc, #60]	; (800347c <HAL_UART_Receive_IT+0x84>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d00e      	beq.n	8003462 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d007      	beq.n	8003462 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003460:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003462:	88fb      	ldrh	r3, [r7, #6]
 8003464:	461a      	mov	r2, r3
 8003466:	68b9      	ldr	r1, [r7, #8]
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f000 fe1d 	bl	80040a8 <UART_Start_Receive_IT>
 800346e:	4603      	mov	r3, r0
 8003470:	e000      	b.n	8003474 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8003472:	2302      	movs	r3, #2
  }
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40008000 	.word	0x40008000

08003480 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b088      	sub	sp, #32
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80034a0:	69fa      	ldr	r2, [r7, #28]
 80034a2:	f640 030f 	movw	r3, #2063	; 0x80f
 80034a6:	4013      	ands	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d113      	bne.n	80034d8 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	f003 0320 	and.w	r3, r3, #32
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00e      	beq.n	80034d8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	f003 0320 	and.w	r3, r3, #32
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d009      	beq.n	80034d8 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 81ce 	beq.w	800386a <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	4798      	blx	r3
      }
      return;
 80034d6:	e1c8      	b.n	800386a <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 80e3 	beq.w	80036a6 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d105      	bne.n	80034f6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	4ba6      	ldr	r3, [pc, #664]	; (8003788 <HAL_UART_IRQHandler+0x308>)
 80034ee:	4013      	ands	r3, r2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 80d8 	beq.w	80036a6 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d010      	beq.n	8003522 <HAL_UART_IRQHandler+0xa2>
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00b      	beq.n	8003522 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2201      	movs	r2, #1
 8003510:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003518:	f043 0201 	orr.w	r2, r3, #1
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d010      	beq.n	800354e <HAL_UART_IRQHandler+0xce>
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00b      	beq.n	800354e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2202      	movs	r2, #2
 800353c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003544:	f043 0204 	orr.w	r2, r3, #4
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	d010      	beq.n	800357a <HAL_UART_IRQHandler+0xfa>
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00b      	beq.n	800357a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2204      	movs	r2, #4
 8003568:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003570:	f043 0202 	orr.w	r2, r3, #2
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	f003 0308 	and.w	r3, r3, #8
 8003580:	2b00      	cmp	r3, #0
 8003582:	d015      	beq.n	80035b0 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	f003 0320 	and.w	r3, r3, #32
 800358a:	2b00      	cmp	r3, #0
 800358c:	d104      	bne.n	8003598 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00b      	beq.n	80035b0 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2208      	movs	r2, #8
 800359e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035a6:	f043 0208 	orr.w	r2, r3, #8
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d011      	beq.n	80035de <HAL_UART_IRQHandler+0x15e>
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00c      	beq.n	80035de <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035d4:	f043 0220 	orr.w	r2, r3, #32
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 8142 	beq.w	800386e <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	f003 0320 	and.w	r3, r3, #32
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00c      	beq.n	800360e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	f003 0320 	and.w	r3, r3, #32
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d007      	beq.n	800360e <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003614:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003620:	2b40      	cmp	r3, #64	; 0x40
 8003622:	d004      	beq.n	800362e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800362a:	2b00      	cmp	r3, #0
 800362c:	d031      	beq.n	8003692 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 fdc2 	bl	80041b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363e:	2b40      	cmp	r3, #64	; 0x40
 8003640:	d123      	bne.n	800368a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003650:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003656:	2b00      	cmp	r3, #0
 8003658:	d013      	beq.n	8003682 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365e:	4a4b      	ldr	r2, [pc, #300]	; (800378c <HAL_UART_IRQHandler+0x30c>)
 8003660:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003666:	4618      	mov	r0, r3
 8003668:	f7fd fd69 	bl	800113e <HAL_DMA_Abort_IT>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d017      	beq.n	80036a2 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800367c:	4610      	mov	r0, r2
 800367e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003680:	e00f      	b.n	80036a2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f908 	bl	8003898 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003688:	e00b      	b.n	80036a2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f904 	bl	8003898 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003690:	e007      	b.n	80036a2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f900 	bl	8003898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80036a0:	e0e5      	b.n	800386e <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a2:	bf00      	nop
    return;
 80036a4:	e0e3      	b.n	800386e <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	f040 80a9 	bne.w	8003802 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	f003 0310 	and.w	r3, r3, #16
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 80a3 	beq.w	8003802 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	f003 0310 	and.w	r3, r3, #16
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 809d 	beq.w	8003802 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2210      	movs	r2, #16
 80036ce:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036da:	2b40      	cmp	r3, #64	; 0x40
 80036dc:	d158      	bne.n	8003790 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80036e8:	893b      	ldrh	r3, [r7, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 80c1 	beq.w	8003872 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80036f6:	893a      	ldrh	r2, [r7, #8]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	f080 80ba 	bcs.w	8003872 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	893a      	ldrh	r2, [r7, #8]
 8003702:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0320 	and.w	r3, r3, #32
 8003712:	2b00      	cmp	r3, #0
 8003714:	d12a      	bne.n	800376c <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003724:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0201 	bic.w	r2, r2, #1
 8003734:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003744:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2220      	movs	r2, #32
 800374a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0210 	bic.w	r2, r2, #16
 8003760:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003766:	4618      	mov	r0, r3
 8003768:	f7fd fcab 	bl	80010c2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003778:	b29b      	uxth	r3, r3
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	b29b      	uxth	r3, r3
 800377e:	4619      	mov	r1, r3
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f893 	bl	80038ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003786:	e074      	b.n	8003872 <HAL_UART_IRQHandler+0x3f2>
 8003788:	04000120 	.word	0x04000120
 800378c:	08004217 	.word	0x08004217
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800379c:	b29b      	uxth	r3, r3
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d063      	beq.n	8003876 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 80037ae:	897b      	ldrh	r3, [r7, #10]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d060      	beq.n	8003876 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80037c2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0201 	bic.w	r2, r2, #1
 80037d2:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2220      	movs	r2, #32
 80037d8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0210 	bic.w	r2, r2, #16
 80037f4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037f6:	897b      	ldrh	r3, [r7, #10]
 80037f8:	4619      	mov	r1, r3
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f856 	bl	80038ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003800:	e039      	b.n	8003876 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00d      	beq.n	8003828 <HAL_UART_IRQHandler+0x3a8>
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d008      	beq.n	8003828 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800381e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 fdff 	bl	8004424 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003826:	e029      	b.n	800387c <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00d      	beq.n	800384e <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003838:	2b00      	cmp	r3, #0
 800383a:	d008      	beq.n	800384e <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003840:	2b00      	cmp	r3, #0
 8003842:	d01a      	beq.n	800387a <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	4798      	blx	r3
    }
    return;
 800384c:	e015      	b.n	800387a <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003854:	2b00      	cmp	r3, #0
 8003856:	d011      	beq.n	800387c <HAL_UART_IRQHandler+0x3fc>
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00c      	beq.n	800387c <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 fced 	bl	8004242 <UART_EndTransmit_IT>
    return;
 8003868:	e008      	b.n	800387c <HAL_UART_IRQHandler+0x3fc>
      return;
 800386a:	bf00      	nop
 800386c:	e006      	b.n	800387c <HAL_UART_IRQHandler+0x3fc>
    return;
 800386e:	bf00      	nop
 8003870:	e004      	b.n	800387c <HAL_UART_IRQHandler+0x3fc>
      return;
 8003872:	bf00      	nop
 8003874:	e002      	b.n	800387c <HAL_UART_IRQHandler+0x3fc>
      return;
 8003876:	bf00      	nop
 8003878:	e000      	b.n	800387c <HAL_UART_IRQHandler+0x3fc>
    return;
 800387a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800387c:	3720      	adds	r7, #32
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop

08003884 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	460b      	mov	r3, r1
 80038b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038c4:	b5b0      	push	{r4, r5, r7, lr}
 80038c6:	b088      	sub	sp, #32
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	4bad      	ldr	r3, [pc, #692]	; (8003ba4 <UART_SetConfig+0x2e0>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	6812      	ldr	r2, [r2, #0]
 80038f6:	69f9      	ldr	r1, [r7, #28]
 80038f8:	430b      	orrs	r3, r1
 80038fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	68da      	ldr	r2, [r3, #12]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4aa2      	ldr	r2, [pc, #648]	; (8003ba8 <UART_SetConfig+0x2e4>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d004      	beq.n	800392c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	69fa      	ldr	r2, [r7, #28]
 8003928:	4313      	orrs	r3, r2
 800392a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	69fa      	ldr	r2, [r7, #28]
 800393c:	430a      	orrs	r2, r1
 800393e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a99      	ldr	r2, [pc, #612]	; (8003bac <UART_SetConfig+0x2e8>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d121      	bne.n	800398e <UART_SetConfig+0xca>
 800394a:	4b99      	ldr	r3, [pc, #612]	; (8003bb0 <UART_SetConfig+0x2ec>)
 800394c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003950:	f003 0303 	and.w	r3, r3, #3
 8003954:	2b03      	cmp	r3, #3
 8003956:	d817      	bhi.n	8003988 <UART_SetConfig+0xc4>
 8003958:	a201      	add	r2, pc, #4	; (adr r2, 8003960 <UART_SetConfig+0x9c>)
 800395a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395e:	bf00      	nop
 8003960:	08003971 	.word	0x08003971
 8003964:	0800397d 	.word	0x0800397d
 8003968:	08003977 	.word	0x08003977
 800396c:	08003983 	.word	0x08003983
 8003970:	2301      	movs	r3, #1
 8003972:	76fb      	strb	r3, [r7, #27]
 8003974:	e0e7      	b.n	8003b46 <UART_SetConfig+0x282>
 8003976:	2302      	movs	r3, #2
 8003978:	76fb      	strb	r3, [r7, #27]
 800397a:	e0e4      	b.n	8003b46 <UART_SetConfig+0x282>
 800397c:	2304      	movs	r3, #4
 800397e:	76fb      	strb	r3, [r7, #27]
 8003980:	e0e1      	b.n	8003b46 <UART_SetConfig+0x282>
 8003982:	2308      	movs	r3, #8
 8003984:	76fb      	strb	r3, [r7, #27]
 8003986:	e0de      	b.n	8003b46 <UART_SetConfig+0x282>
 8003988:	2310      	movs	r3, #16
 800398a:	76fb      	strb	r3, [r7, #27]
 800398c:	e0db      	b.n	8003b46 <UART_SetConfig+0x282>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a88      	ldr	r2, [pc, #544]	; (8003bb4 <UART_SetConfig+0x2f0>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d132      	bne.n	80039fe <UART_SetConfig+0x13a>
 8003998:	4b85      	ldr	r3, [pc, #532]	; (8003bb0 <UART_SetConfig+0x2ec>)
 800399a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399e:	f003 030c 	and.w	r3, r3, #12
 80039a2:	2b0c      	cmp	r3, #12
 80039a4:	d828      	bhi.n	80039f8 <UART_SetConfig+0x134>
 80039a6:	a201      	add	r2, pc, #4	; (adr r2, 80039ac <UART_SetConfig+0xe8>)
 80039a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ac:	080039e1 	.word	0x080039e1
 80039b0:	080039f9 	.word	0x080039f9
 80039b4:	080039f9 	.word	0x080039f9
 80039b8:	080039f9 	.word	0x080039f9
 80039bc:	080039ed 	.word	0x080039ed
 80039c0:	080039f9 	.word	0x080039f9
 80039c4:	080039f9 	.word	0x080039f9
 80039c8:	080039f9 	.word	0x080039f9
 80039cc:	080039e7 	.word	0x080039e7
 80039d0:	080039f9 	.word	0x080039f9
 80039d4:	080039f9 	.word	0x080039f9
 80039d8:	080039f9 	.word	0x080039f9
 80039dc:	080039f3 	.word	0x080039f3
 80039e0:	2300      	movs	r3, #0
 80039e2:	76fb      	strb	r3, [r7, #27]
 80039e4:	e0af      	b.n	8003b46 <UART_SetConfig+0x282>
 80039e6:	2302      	movs	r3, #2
 80039e8:	76fb      	strb	r3, [r7, #27]
 80039ea:	e0ac      	b.n	8003b46 <UART_SetConfig+0x282>
 80039ec:	2304      	movs	r3, #4
 80039ee:	76fb      	strb	r3, [r7, #27]
 80039f0:	e0a9      	b.n	8003b46 <UART_SetConfig+0x282>
 80039f2:	2308      	movs	r3, #8
 80039f4:	76fb      	strb	r3, [r7, #27]
 80039f6:	e0a6      	b.n	8003b46 <UART_SetConfig+0x282>
 80039f8:	2310      	movs	r3, #16
 80039fa:	76fb      	strb	r3, [r7, #27]
 80039fc:	e0a3      	b.n	8003b46 <UART_SetConfig+0x282>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a6d      	ldr	r2, [pc, #436]	; (8003bb8 <UART_SetConfig+0x2f4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d120      	bne.n	8003a4a <UART_SetConfig+0x186>
 8003a08:	4b69      	ldr	r3, [pc, #420]	; (8003bb0 <UART_SetConfig+0x2ec>)
 8003a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a12:	2b30      	cmp	r3, #48	; 0x30
 8003a14:	d013      	beq.n	8003a3e <UART_SetConfig+0x17a>
 8003a16:	2b30      	cmp	r3, #48	; 0x30
 8003a18:	d814      	bhi.n	8003a44 <UART_SetConfig+0x180>
 8003a1a:	2b20      	cmp	r3, #32
 8003a1c:	d009      	beq.n	8003a32 <UART_SetConfig+0x16e>
 8003a1e:	2b20      	cmp	r3, #32
 8003a20:	d810      	bhi.n	8003a44 <UART_SetConfig+0x180>
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d002      	beq.n	8003a2c <UART_SetConfig+0x168>
 8003a26:	2b10      	cmp	r3, #16
 8003a28:	d006      	beq.n	8003a38 <UART_SetConfig+0x174>
 8003a2a:	e00b      	b.n	8003a44 <UART_SetConfig+0x180>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	76fb      	strb	r3, [r7, #27]
 8003a30:	e089      	b.n	8003b46 <UART_SetConfig+0x282>
 8003a32:	2302      	movs	r3, #2
 8003a34:	76fb      	strb	r3, [r7, #27]
 8003a36:	e086      	b.n	8003b46 <UART_SetConfig+0x282>
 8003a38:	2304      	movs	r3, #4
 8003a3a:	76fb      	strb	r3, [r7, #27]
 8003a3c:	e083      	b.n	8003b46 <UART_SetConfig+0x282>
 8003a3e:	2308      	movs	r3, #8
 8003a40:	76fb      	strb	r3, [r7, #27]
 8003a42:	e080      	b.n	8003b46 <UART_SetConfig+0x282>
 8003a44:	2310      	movs	r3, #16
 8003a46:	76fb      	strb	r3, [r7, #27]
 8003a48:	e07d      	b.n	8003b46 <UART_SetConfig+0x282>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a5b      	ldr	r2, [pc, #364]	; (8003bbc <UART_SetConfig+0x2f8>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d120      	bne.n	8003a96 <UART_SetConfig+0x1d2>
 8003a54:	4b56      	ldr	r3, [pc, #344]	; (8003bb0 <UART_SetConfig+0x2ec>)
 8003a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a5e:	2bc0      	cmp	r3, #192	; 0xc0
 8003a60:	d013      	beq.n	8003a8a <UART_SetConfig+0x1c6>
 8003a62:	2bc0      	cmp	r3, #192	; 0xc0
 8003a64:	d814      	bhi.n	8003a90 <UART_SetConfig+0x1cc>
 8003a66:	2b80      	cmp	r3, #128	; 0x80
 8003a68:	d009      	beq.n	8003a7e <UART_SetConfig+0x1ba>
 8003a6a:	2b80      	cmp	r3, #128	; 0x80
 8003a6c:	d810      	bhi.n	8003a90 <UART_SetConfig+0x1cc>
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d002      	beq.n	8003a78 <UART_SetConfig+0x1b4>
 8003a72:	2b40      	cmp	r3, #64	; 0x40
 8003a74:	d006      	beq.n	8003a84 <UART_SetConfig+0x1c0>
 8003a76:	e00b      	b.n	8003a90 <UART_SetConfig+0x1cc>
 8003a78:	2300      	movs	r3, #0
 8003a7a:	76fb      	strb	r3, [r7, #27]
 8003a7c:	e063      	b.n	8003b46 <UART_SetConfig+0x282>
 8003a7e:	2302      	movs	r3, #2
 8003a80:	76fb      	strb	r3, [r7, #27]
 8003a82:	e060      	b.n	8003b46 <UART_SetConfig+0x282>
 8003a84:	2304      	movs	r3, #4
 8003a86:	76fb      	strb	r3, [r7, #27]
 8003a88:	e05d      	b.n	8003b46 <UART_SetConfig+0x282>
 8003a8a:	2308      	movs	r3, #8
 8003a8c:	76fb      	strb	r3, [r7, #27]
 8003a8e:	e05a      	b.n	8003b46 <UART_SetConfig+0x282>
 8003a90:	2310      	movs	r3, #16
 8003a92:	76fb      	strb	r3, [r7, #27]
 8003a94:	e057      	b.n	8003b46 <UART_SetConfig+0x282>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a49      	ldr	r2, [pc, #292]	; (8003bc0 <UART_SetConfig+0x2fc>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d125      	bne.n	8003aec <UART_SetConfig+0x228>
 8003aa0:	4b43      	ldr	r3, [pc, #268]	; (8003bb0 <UART_SetConfig+0x2ec>)
 8003aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003aae:	d017      	beq.n	8003ae0 <UART_SetConfig+0x21c>
 8003ab0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ab4:	d817      	bhi.n	8003ae6 <UART_SetConfig+0x222>
 8003ab6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aba:	d00b      	beq.n	8003ad4 <UART_SetConfig+0x210>
 8003abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ac0:	d811      	bhi.n	8003ae6 <UART_SetConfig+0x222>
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <UART_SetConfig+0x20a>
 8003ac6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aca:	d006      	beq.n	8003ada <UART_SetConfig+0x216>
 8003acc:	e00b      	b.n	8003ae6 <UART_SetConfig+0x222>
 8003ace:	2300      	movs	r3, #0
 8003ad0:	76fb      	strb	r3, [r7, #27]
 8003ad2:	e038      	b.n	8003b46 <UART_SetConfig+0x282>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	76fb      	strb	r3, [r7, #27]
 8003ad8:	e035      	b.n	8003b46 <UART_SetConfig+0x282>
 8003ada:	2304      	movs	r3, #4
 8003adc:	76fb      	strb	r3, [r7, #27]
 8003ade:	e032      	b.n	8003b46 <UART_SetConfig+0x282>
 8003ae0:	2308      	movs	r3, #8
 8003ae2:	76fb      	strb	r3, [r7, #27]
 8003ae4:	e02f      	b.n	8003b46 <UART_SetConfig+0x282>
 8003ae6:	2310      	movs	r3, #16
 8003ae8:	76fb      	strb	r3, [r7, #27]
 8003aea:	e02c      	b.n	8003b46 <UART_SetConfig+0x282>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a2d      	ldr	r2, [pc, #180]	; (8003ba8 <UART_SetConfig+0x2e4>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d125      	bne.n	8003b42 <UART_SetConfig+0x27e>
 8003af6:	4b2e      	ldr	r3, [pc, #184]	; (8003bb0 <UART_SetConfig+0x2ec>)
 8003af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b04:	d017      	beq.n	8003b36 <UART_SetConfig+0x272>
 8003b06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b0a:	d817      	bhi.n	8003b3c <UART_SetConfig+0x278>
 8003b0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b10:	d00b      	beq.n	8003b2a <UART_SetConfig+0x266>
 8003b12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b16:	d811      	bhi.n	8003b3c <UART_SetConfig+0x278>
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d003      	beq.n	8003b24 <UART_SetConfig+0x260>
 8003b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b20:	d006      	beq.n	8003b30 <UART_SetConfig+0x26c>
 8003b22:	e00b      	b.n	8003b3c <UART_SetConfig+0x278>
 8003b24:	2300      	movs	r3, #0
 8003b26:	76fb      	strb	r3, [r7, #27]
 8003b28:	e00d      	b.n	8003b46 <UART_SetConfig+0x282>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	76fb      	strb	r3, [r7, #27]
 8003b2e:	e00a      	b.n	8003b46 <UART_SetConfig+0x282>
 8003b30:	2304      	movs	r3, #4
 8003b32:	76fb      	strb	r3, [r7, #27]
 8003b34:	e007      	b.n	8003b46 <UART_SetConfig+0x282>
 8003b36:	2308      	movs	r3, #8
 8003b38:	76fb      	strb	r3, [r7, #27]
 8003b3a:	e004      	b.n	8003b46 <UART_SetConfig+0x282>
 8003b3c:	2310      	movs	r3, #16
 8003b3e:	76fb      	strb	r3, [r7, #27]
 8003b40:	e001      	b.n	8003b46 <UART_SetConfig+0x282>
 8003b42:	2310      	movs	r3, #16
 8003b44:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a17      	ldr	r2, [pc, #92]	; (8003ba8 <UART_SetConfig+0x2e4>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	f040 8087 	bne.w	8003c60 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b52:	7efb      	ldrb	r3, [r7, #27]
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d837      	bhi.n	8003bc8 <UART_SetConfig+0x304>
 8003b58:	a201      	add	r2, pc, #4	; (adr r2, 8003b60 <UART_SetConfig+0x29c>)
 8003b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5e:	bf00      	nop
 8003b60:	08003b85 	.word	0x08003b85
 8003b64:	08003bc9 	.word	0x08003bc9
 8003b68:	08003b8d 	.word	0x08003b8d
 8003b6c:	08003bc9 	.word	0x08003bc9
 8003b70:	08003b93 	.word	0x08003b93
 8003b74:	08003bc9 	.word	0x08003bc9
 8003b78:	08003bc9 	.word	0x08003bc9
 8003b7c:	08003bc9 	.word	0x08003bc9
 8003b80:	08003b9b 	.word	0x08003b9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b84:	f7fe fea2 	bl	80028cc <HAL_RCC_GetPCLK1Freq>
 8003b88:	6178      	str	r0, [r7, #20]
        break;
 8003b8a:	e022      	b.n	8003bd2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b8c:	4b0d      	ldr	r3, [pc, #52]	; (8003bc4 <UART_SetConfig+0x300>)
 8003b8e:	617b      	str	r3, [r7, #20]
        break;
 8003b90:	e01f      	b.n	8003bd2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b92:	f7fe fe03 	bl	800279c <HAL_RCC_GetSysClockFreq>
 8003b96:	6178      	str	r0, [r7, #20]
        break;
 8003b98:	e01b      	b.n	8003bd2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b9e:	617b      	str	r3, [r7, #20]
        break;
 8003ba0:	e017      	b.n	8003bd2 <UART_SetConfig+0x30e>
 8003ba2:	bf00      	nop
 8003ba4:	efff69f3 	.word	0xefff69f3
 8003ba8:	40008000 	.word	0x40008000
 8003bac:	40013800 	.word	0x40013800
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	40004400 	.word	0x40004400
 8003bb8:	40004800 	.word	0x40004800
 8003bbc:	40004c00 	.word	0x40004c00
 8003bc0:	40005000 	.word	0x40005000
 8003bc4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	76bb      	strb	r3, [r7, #26]
        break;
 8003bd0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 80f1 	beq.w	8003dbc <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685a      	ldr	r2, [r3, #4]
 8003bde:	4613      	mov	r3, r2
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	4413      	add	r3, r2
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d305      	bcc.n	8003bf6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d902      	bls.n	8003bfc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	76bb      	strb	r3, [r7, #26]
 8003bfa:	e0df      	b.n	8003dbc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f04f 0100 	mov.w	r1, #0
 8003c04:	f04f 0200 	mov.w	r2, #0
 8003c08:	f04f 0300 	mov.w	r3, #0
 8003c0c:	020b      	lsls	r3, r1, #8
 8003c0e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003c12:	0202      	lsls	r2, r0, #8
 8003c14:	6879      	ldr	r1, [r7, #4]
 8003c16:	6849      	ldr	r1, [r1, #4]
 8003c18:	0849      	lsrs	r1, r1, #1
 8003c1a:	4608      	mov	r0, r1
 8003c1c:	f04f 0100 	mov.w	r1, #0
 8003c20:	1814      	adds	r4, r2, r0
 8003c22:	eb43 0501 	adc.w	r5, r3, r1
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	f04f 0300 	mov.w	r3, #0
 8003c30:	4620      	mov	r0, r4
 8003c32:	4629      	mov	r1, r5
 8003c34:	f7fc fb1c 	bl	8000270 <__aeabi_uldivmod>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c46:	d308      	bcc.n	8003c5a <UART_SetConfig+0x396>
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c4e:	d204      	bcs.n	8003c5a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	60da      	str	r2, [r3, #12]
 8003c58:	e0b0      	b.n	8003dbc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	76bb      	strb	r3, [r7, #26]
 8003c5e:	e0ad      	b.n	8003dbc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	69db      	ldr	r3, [r3, #28]
 8003c64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c68:	d15c      	bne.n	8003d24 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003c6a:	7efb      	ldrb	r3, [r7, #27]
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d828      	bhi.n	8003cc2 <UART_SetConfig+0x3fe>
 8003c70:	a201      	add	r2, pc, #4	; (adr r2, 8003c78 <UART_SetConfig+0x3b4>)
 8003c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c76:	bf00      	nop
 8003c78:	08003c9d 	.word	0x08003c9d
 8003c7c:	08003ca5 	.word	0x08003ca5
 8003c80:	08003cad 	.word	0x08003cad
 8003c84:	08003cc3 	.word	0x08003cc3
 8003c88:	08003cb3 	.word	0x08003cb3
 8003c8c:	08003cc3 	.word	0x08003cc3
 8003c90:	08003cc3 	.word	0x08003cc3
 8003c94:	08003cc3 	.word	0x08003cc3
 8003c98:	08003cbb 	.word	0x08003cbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c9c:	f7fe fe16 	bl	80028cc <HAL_RCC_GetPCLK1Freq>
 8003ca0:	6178      	str	r0, [r7, #20]
        break;
 8003ca2:	e013      	b.n	8003ccc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ca4:	f7fe fe28 	bl	80028f8 <HAL_RCC_GetPCLK2Freq>
 8003ca8:	6178      	str	r0, [r7, #20]
        break;
 8003caa:	e00f      	b.n	8003ccc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cac:	4b49      	ldr	r3, [pc, #292]	; (8003dd4 <UART_SetConfig+0x510>)
 8003cae:	617b      	str	r3, [r7, #20]
        break;
 8003cb0:	e00c      	b.n	8003ccc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cb2:	f7fe fd73 	bl	800279c <HAL_RCC_GetSysClockFreq>
 8003cb6:	6178      	str	r0, [r7, #20]
        break;
 8003cb8:	e008      	b.n	8003ccc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cbe:	617b      	str	r3, [r7, #20]
        break;
 8003cc0:	e004      	b.n	8003ccc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	76bb      	strb	r3, [r7, #26]
        break;
 8003cca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d074      	beq.n	8003dbc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	005a      	lsls	r2, r3, #1
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	085b      	lsrs	r3, r3, #1
 8003cdc:	441a      	add	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	2b0f      	cmp	r3, #15
 8003cee:	d916      	bls.n	8003d1e <UART_SetConfig+0x45a>
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf6:	d212      	bcs.n	8003d1e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	f023 030f 	bic.w	r3, r3, #15
 8003d00:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	085b      	lsrs	r3, r3, #1
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	f003 0307 	and.w	r3, r3, #7
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	89fb      	ldrh	r3, [r7, #14]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	89fa      	ldrh	r2, [r7, #14]
 8003d1a:	60da      	str	r2, [r3, #12]
 8003d1c:	e04e      	b.n	8003dbc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	76bb      	strb	r3, [r7, #26]
 8003d22:	e04b      	b.n	8003dbc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d24:	7efb      	ldrb	r3, [r7, #27]
 8003d26:	2b08      	cmp	r3, #8
 8003d28:	d827      	bhi.n	8003d7a <UART_SetConfig+0x4b6>
 8003d2a:	a201      	add	r2, pc, #4	; (adr r2, 8003d30 <UART_SetConfig+0x46c>)
 8003d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d30:	08003d55 	.word	0x08003d55
 8003d34:	08003d5d 	.word	0x08003d5d
 8003d38:	08003d65 	.word	0x08003d65
 8003d3c:	08003d7b 	.word	0x08003d7b
 8003d40:	08003d6b 	.word	0x08003d6b
 8003d44:	08003d7b 	.word	0x08003d7b
 8003d48:	08003d7b 	.word	0x08003d7b
 8003d4c:	08003d7b 	.word	0x08003d7b
 8003d50:	08003d73 	.word	0x08003d73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d54:	f7fe fdba 	bl	80028cc <HAL_RCC_GetPCLK1Freq>
 8003d58:	6178      	str	r0, [r7, #20]
        break;
 8003d5a:	e013      	b.n	8003d84 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d5c:	f7fe fdcc 	bl	80028f8 <HAL_RCC_GetPCLK2Freq>
 8003d60:	6178      	str	r0, [r7, #20]
        break;
 8003d62:	e00f      	b.n	8003d84 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d64:	4b1b      	ldr	r3, [pc, #108]	; (8003dd4 <UART_SetConfig+0x510>)
 8003d66:	617b      	str	r3, [r7, #20]
        break;
 8003d68:	e00c      	b.n	8003d84 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d6a:	f7fe fd17 	bl	800279c <HAL_RCC_GetSysClockFreq>
 8003d6e:	6178      	str	r0, [r7, #20]
        break;
 8003d70:	e008      	b.n	8003d84 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d76:	617b      	str	r3, [r7, #20]
        break;
 8003d78:	e004      	b.n	8003d84 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	76bb      	strb	r3, [r7, #26]
        break;
 8003d82:	bf00      	nop
    }

    if (pclk != 0U)
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d018      	beq.n	8003dbc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	085a      	lsrs	r2, r3, #1
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	441a      	add	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	2b0f      	cmp	r3, #15
 8003da4:	d908      	bls.n	8003db8 <UART_SetConfig+0x4f4>
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dac:	d204      	bcs.n	8003db8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	60da      	str	r2, [r3, #12]
 8003db6:	e001      	b.n	8003dbc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003dc8:	7ebb      	ldrb	r3, [r7, #26]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3720      	adds	r7, #32
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bdb0      	pop	{r4, r5, r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	00f42400 	.word	0x00f42400

08003dd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00a      	beq.n	8003e02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00a      	beq.n	8003e24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00a      	beq.n	8003e46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	f003 0308 	and.w	r3, r3, #8
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00a      	beq.n	8003e68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	f003 0310 	and.w	r3, r3, #16
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	f003 0320 	and.w	r3, r3, #32
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d01a      	beq.n	8003eee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ed6:	d10a      	bne.n	8003eee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	605a      	str	r2, [r3, #4]
  }
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af02      	add	r7, sp, #8
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f2c:	f7fc ffac 	bl	8000e88 <HAL_GetTick>
 8003f30:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d10e      	bne.n	8003f5e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f82d 	bl	8003fae <UART_WaitOnFlagUntilTimeout>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e023      	b.n	8003fa6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b04      	cmp	r3, #4
 8003f6a:	d10e      	bne.n	8003f8a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f817 	bl	8003fae <UART_WaitOnFlagUntilTimeout>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e00d      	b.n	8003fa6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2220      	movs	r2, #32
 8003f94:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b084      	sub	sp, #16
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	60f8      	str	r0, [r7, #12]
 8003fb6:	60b9      	str	r1, [r7, #8]
 8003fb8:	603b      	str	r3, [r7, #0]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fbe:	e05e      	b.n	800407e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc6:	d05a      	beq.n	800407e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc8:	f7fc ff5e 	bl	8000e88 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d302      	bcc.n	8003fde <UART_WaitOnFlagUntilTimeout+0x30>
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d11b      	bne.n	8004016 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fec:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 0201 	bic.w	r2, r2, #1
 8003ffc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2220      	movs	r2, #32
 8004002:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2220      	movs	r2, #32
 8004008:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e043      	b.n	800409e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0304 	and.w	r3, r3, #4
 8004020:	2b00      	cmp	r3, #0
 8004022:	d02c      	beq.n	800407e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800402e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004032:	d124      	bne.n	800407e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800403c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800404c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0201 	bic.w	r2, r2, #1
 800405c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2220      	movs	r2, #32
 8004062:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2220      	movs	r2, #32
 8004068:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2220      	movs	r2, #32
 800406e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e00f      	b.n	800409e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	69da      	ldr	r2, [r3, #28]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	4013      	ands	r3, r2
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	429a      	cmp	r2, r3
 800408c:	bf0c      	ite	eq
 800408e:	2301      	moveq	r3, #1
 8004090:	2300      	movne	r3, #0
 8004092:	b2db      	uxtb	r3, r3
 8004094:	461a      	mov	r2, r3
 8004096:	79fb      	ldrb	r3, [r7, #7]
 8004098:	429a      	cmp	r2, r3
 800409a:	d091      	beq.n	8003fc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
	...

080040a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	4613      	mov	r3, r2
 80040b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	88fa      	ldrh	r2, [r7, #6]
 80040c0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	88fa      	ldrh	r2, [r7, #6]
 80040c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040da:	d10e      	bne.n	80040fa <UART_Start_Receive_IT+0x52>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d105      	bne.n	80040f0 <UART_Start_Receive_IT+0x48>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80040ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040ee:	e02d      	b.n	800414c <UART_Start_Receive_IT+0xa4>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	22ff      	movs	r2, #255	; 0xff
 80040f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040f8:	e028      	b.n	800414c <UART_Start_Receive_IT+0xa4>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10d      	bne.n	800411e <UART_Start_Receive_IT+0x76>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d104      	bne.n	8004114 <UART_Start_Receive_IT+0x6c>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	22ff      	movs	r2, #255	; 0xff
 800410e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004112:	e01b      	b.n	800414c <UART_Start_Receive_IT+0xa4>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	227f      	movs	r2, #127	; 0x7f
 8004118:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800411c:	e016      	b.n	800414c <UART_Start_Receive_IT+0xa4>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004126:	d10d      	bne.n	8004144 <UART_Start_Receive_IT+0x9c>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d104      	bne.n	800413a <UART_Start_Receive_IT+0x92>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	227f      	movs	r2, #127	; 0x7f
 8004134:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004138:	e008      	b.n	800414c <UART_Start_Receive_IT+0xa4>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	223f      	movs	r2, #63	; 0x3f
 800413e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004142:	e003      	b.n	800414c <UART_Start_Receive_IT+0xa4>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2222      	movs	r2, #34	; 0x22
 8004158:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f042 0201 	orr.w	r2, r2, #1
 8004168:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004172:	d107      	bne.n	8004184 <UART_Start_Receive_IT+0xdc>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d103      	bne.n	8004184 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4a0c      	ldr	r2, [pc, #48]	; (80041b0 <UART_Start_Receive_IT+0x108>)
 8004180:	665a      	str	r2, [r3, #100]	; 0x64
 8004182:	e002      	b.n	800418a <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4a0b      	ldr	r2, [pc, #44]	; (80041b4 <UART_Start_Receive_IT+0x10c>)
 8004188:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80041a0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3714      	adds	r7, #20
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	0800434d 	.word	0x0800434d
 80041b4:	08004275 	.word	0x08004275

080041b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80041ce:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689a      	ldr	r2, [r3, #8]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0201 	bic.w	r2, r2, #1
 80041de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d107      	bne.n	80041f8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 0210 	bic.w	r2, r2, #16
 80041f6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2220      	movs	r2, #32
 80041fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	665a      	str	r2, [r3, #100]	; 0x64
}
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b084      	sub	sp, #16
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004222:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f7ff fb2f 	bl	8003898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800423a:	bf00      	nop
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b082      	sub	sp, #8
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004258:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2220      	movs	r2, #32
 800425e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7ff fb0c 	bl	8003884 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800426c:	bf00      	nop
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004282:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004288:	2b22      	cmp	r3, #34	; 0x22
 800428a:	d151      	bne.n	8004330 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004292:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004294:	89bb      	ldrh	r3, [r7, #12]
 8004296:	b2d9      	uxtb	r1, r3
 8004298:	89fb      	ldrh	r3, [r7, #14]
 800429a:	b2da      	uxtb	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a0:	400a      	ands	r2, r1
 80042a2:	b2d2      	uxtb	r2, r2
 80042a4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042aa:	1c5a      	adds	r2, r3, #1
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	3b01      	subs	r3, #1
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d13a      	bne.n	8004344 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80042dc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 0201 	bic.w	r2, r2, #1
 80042ec:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2220      	movs	r2, #32
 80042f2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d10f      	bne.n	8004322 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 0210 	bic.w	r2, r2, #16
 8004310:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004318:	4619      	mov	r1, r3
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7ff fac6 	bl	80038ac <HAL_UARTEx_RxEventCallback>
 8004320:	e002      	b.n	8004328 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7fc f964 	bl	80005f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800432e:	e009      	b.n	8004344 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	8b1b      	ldrh	r3, [r3, #24]
 8004336:	b29a      	uxth	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f042 0208 	orr.w	r2, r2, #8
 8004340:	b292      	uxth	r2, r2
 8004342:	831a      	strh	r2, [r3, #24]
}
 8004344:	bf00      	nop
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800435a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004360:	2b22      	cmp	r3, #34	; 0x22
 8004362:	d151      	bne.n	8004408 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800436a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004370:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004372:	89ba      	ldrh	r2, [r7, #12]
 8004374:	89fb      	ldrh	r3, [r7, #14]
 8004376:	4013      	ands	r3, r2
 8004378:	b29a      	uxth	r2, r3
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004382:	1c9a      	adds	r2, r3, #2
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800438e:	b29b      	uxth	r3, r3
 8004390:	3b01      	subs	r3, #1
 8004392:	b29a      	uxth	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d13a      	bne.n	800441c <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80043b4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 0201 	bic.w	r2, r2, #1
 80043c4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2220      	movs	r2, #32
 80043ca:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d10f      	bne.n	80043fa <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 0210 	bic.w	r2, r2, #16
 80043e8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80043f0:	4619      	mov	r1, r3
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7ff fa5a 	bl	80038ac <HAL_UARTEx_RxEventCallback>
 80043f8:	e002      	b.n	8004400 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7fc f8f8 	bl	80005f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004406:	e009      	b.n	800441c <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	8b1b      	ldrh	r3, [r3, #24]
 800440e:	b29a      	uxth	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f042 0208 	orr.w	r2, r2, #8
 8004418:	b292      	uxth	r2, r2
 800441a:	831a      	strh	r2, [r3, #24]
}
 800441c:	bf00      	nop
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <__errno>:
 8004438:	4b01      	ldr	r3, [pc, #4]	; (8004440 <__errno+0x8>)
 800443a:	6818      	ldr	r0, [r3, #0]
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	2000000c 	.word	0x2000000c

08004444 <__libc_init_array>:
 8004444:	b570      	push	{r4, r5, r6, lr}
 8004446:	4d0d      	ldr	r5, [pc, #52]	; (800447c <__libc_init_array+0x38>)
 8004448:	4c0d      	ldr	r4, [pc, #52]	; (8004480 <__libc_init_array+0x3c>)
 800444a:	1b64      	subs	r4, r4, r5
 800444c:	10a4      	asrs	r4, r4, #2
 800444e:	2600      	movs	r6, #0
 8004450:	42a6      	cmp	r6, r4
 8004452:	d109      	bne.n	8004468 <__libc_init_array+0x24>
 8004454:	4d0b      	ldr	r5, [pc, #44]	; (8004484 <__libc_init_array+0x40>)
 8004456:	4c0c      	ldr	r4, [pc, #48]	; (8004488 <__libc_init_array+0x44>)
 8004458:	f000 ffd4 	bl	8005404 <_init>
 800445c:	1b64      	subs	r4, r4, r5
 800445e:	10a4      	asrs	r4, r4, #2
 8004460:	2600      	movs	r6, #0
 8004462:	42a6      	cmp	r6, r4
 8004464:	d105      	bne.n	8004472 <__libc_init_array+0x2e>
 8004466:	bd70      	pop	{r4, r5, r6, pc}
 8004468:	f855 3b04 	ldr.w	r3, [r5], #4
 800446c:	4798      	blx	r3
 800446e:	3601      	adds	r6, #1
 8004470:	e7ee      	b.n	8004450 <__libc_init_array+0xc>
 8004472:	f855 3b04 	ldr.w	r3, [r5], #4
 8004476:	4798      	blx	r3
 8004478:	3601      	adds	r6, #1
 800447a:	e7f2      	b.n	8004462 <__libc_init_array+0x1e>
 800447c:	0800563c 	.word	0x0800563c
 8004480:	0800563c 	.word	0x0800563c
 8004484:	0800563c 	.word	0x0800563c
 8004488:	08005640 	.word	0x08005640

0800448c <memset>:
 800448c:	4402      	add	r2, r0
 800448e:	4603      	mov	r3, r0
 8004490:	4293      	cmp	r3, r2
 8004492:	d100      	bne.n	8004496 <memset+0xa>
 8004494:	4770      	bx	lr
 8004496:	f803 1b01 	strb.w	r1, [r3], #1
 800449a:	e7f9      	b.n	8004490 <memset+0x4>

0800449c <iprintf>:
 800449c:	b40f      	push	{r0, r1, r2, r3}
 800449e:	4b0a      	ldr	r3, [pc, #40]	; (80044c8 <iprintf+0x2c>)
 80044a0:	b513      	push	{r0, r1, r4, lr}
 80044a2:	681c      	ldr	r4, [r3, #0]
 80044a4:	b124      	cbz	r4, 80044b0 <iprintf+0x14>
 80044a6:	69a3      	ldr	r3, [r4, #24]
 80044a8:	b913      	cbnz	r3, 80044b0 <iprintf+0x14>
 80044aa:	4620      	mov	r0, r4
 80044ac:	f000 f9fe 	bl	80048ac <__sinit>
 80044b0:	ab05      	add	r3, sp, #20
 80044b2:	9a04      	ldr	r2, [sp, #16]
 80044b4:	68a1      	ldr	r1, [r4, #8]
 80044b6:	9301      	str	r3, [sp, #4]
 80044b8:	4620      	mov	r0, r4
 80044ba:	f000 fbcf 	bl	8004c5c <_vfiprintf_r>
 80044be:	b002      	add	sp, #8
 80044c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044c4:	b004      	add	sp, #16
 80044c6:	4770      	bx	lr
 80044c8:	2000000c 	.word	0x2000000c

080044cc <putchar>:
 80044cc:	4b09      	ldr	r3, [pc, #36]	; (80044f4 <putchar+0x28>)
 80044ce:	b513      	push	{r0, r1, r4, lr}
 80044d0:	681c      	ldr	r4, [r3, #0]
 80044d2:	4601      	mov	r1, r0
 80044d4:	b134      	cbz	r4, 80044e4 <putchar+0x18>
 80044d6:	69a3      	ldr	r3, [r4, #24]
 80044d8:	b923      	cbnz	r3, 80044e4 <putchar+0x18>
 80044da:	9001      	str	r0, [sp, #4]
 80044dc:	4620      	mov	r0, r4
 80044de:	f000 f9e5 	bl	80048ac <__sinit>
 80044e2:	9901      	ldr	r1, [sp, #4]
 80044e4:	68a2      	ldr	r2, [r4, #8]
 80044e6:	4620      	mov	r0, r4
 80044e8:	b002      	add	sp, #8
 80044ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044ee:	f000 be79 	b.w	80051e4 <_putc_r>
 80044f2:	bf00      	nop
 80044f4:	2000000c 	.word	0x2000000c

080044f8 <__swbuf_r>:
 80044f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fa:	460e      	mov	r6, r1
 80044fc:	4614      	mov	r4, r2
 80044fe:	4605      	mov	r5, r0
 8004500:	b118      	cbz	r0, 800450a <__swbuf_r+0x12>
 8004502:	6983      	ldr	r3, [r0, #24]
 8004504:	b90b      	cbnz	r3, 800450a <__swbuf_r+0x12>
 8004506:	f000 f9d1 	bl	80048ac <__sinit>
 800450a:	4b21      	ldr	r3, [pc, #132]	; (8004590 <__swbuf_r+0x98>)
 800450c:	429c      	cmp	r4, r3
 800450e:	d12b      	bne.n	8004568 <__swbuf_r+0x70>
 8004510:	686c      	ldr	r4, [r5, #4]
 8004512:	69a3      	ldr	r3, [r4, #24]
 8004514:	60a3      	str	r3, [r4, #8]
 8004516:	89a3      	ldrh	r3, [r4, #12]
 8004518:	071a      	lsls	r2, r3, #28
 800451a:	d52f      	bpl.n	800457c <__swbuf_r+0x84>
 800451c:	6923      	ldr	r3, [r4, #16]
 800451e:	b36b      	cbz	r3, 800457c <__swbuf_r+0x84>
 8004520:	6923      	ldr	r3, [r4, #16]
 8004522:	6820      	ldr	r0, [r4, #0]
 8004524:	1ac0      	subs	r0, r0, r3
 8004526:	6963      	ldr	r3, [r4, #20]
 8004528:	b2f6      	uxtb	r6, r6
 800452a:	4283      	cmp	r3, r0
 800452c:	4637      	mov	r7, r6
 800452e:	dc04      	bgt.n	800453a <__swbuf_r+0x42>
 8004530:	4621      	mov	r1, r4
 8004532:	4628      	mov	r0, r5
 8004534:	f000 f926 	bl	8004784 <_fflush_r>
 8004538:	bb30      	cbnz	r0, 8004588 <__swbuf_r+0x90>
 800453a:	68a3      	ldr	r3, [r4, #8]
 800453c:	3b01      	subs	r3, #1
 800453e:	60a3      	str	r3, [r4, #8]
 8004540:	6823      	ldr	r3, [r4, #0]
 8004542:	1c5a      	adds	r2, r3, #1
 8004544:	6022      	str	r2, [r4, #0]
 8004546:	701e      	strb	r6, [r3, #0]
 8004548:	6963      	ldr	r3, [r4, #20]
 800454a:	3001      	adds	r0, #1
 800454c:	4283      	cmp	r3, r0
 800454e:	d004      	beq.n	800455a <__swbuf_r+0x62>
 8004550:	89a3      	ldrh	r3, [r4, #12]
 8004552:	07db      	lsls	r3, r3, #31
 8004554:	d506      	bpl.n	8004564 <__swbuf_r+0x6c>
 8004556:	2e0a      	cmp	r6, #10
 8004558:	d104      	bne.n	8004564 <__swbuf_r+0x6c>
 800455a:	4621      	mov	r1, r4
 800455c:	4628      	mov	r0, r5
 800455e:	f000 f911 	bl	8004784 <_fflush_r>
 8004562:	b988      	cbnz	r0, 8004588 <__swbuf_r+0x90>
 8004564:	4638      	mov	r0, r7
 8004566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004568:	4b0a      	ldr	r3, [pc, #40]	; (8004594 <__swbuf_r+0x9c>)
 800456a:	429c      	cmp	r4, r3
 800456c:	d101      	bne.n	8004572 <__swbuf_r+0x7a>
 800456e:	68ac      	ldr	r4, [r5, #8]
 8004570:	e7cf      	b.n	8004512 <__swbuf_r+0x1a>
 8004572:	4b09      	ldr	r3, [pc, #36]	; (8004598 <__swbuf_r+0xa0>)
 8004574:	429c      	cmp	r4, r3
 8004576:	bf08      	it	eq
 8004578:	68ec      	ldreq	r4, [r5, #12]
 800457a:	e7ca      	b.n	8004512 <__swbuf_r+0x1a>
 800457c:	4621      	mov	r1, r4
 800457e:	4628      	mov	r0, r5
 8004580:	f000 f80c 	bl	800459c <__swsetup_r>
 8004584:	2800      	cmp	r0, #0
 8004586:	d0cb      	beq.n	8004520 <__swbuf_r+0x28>
 8004588:	f04f 37ff 	mov.w	r7, #4294967295
 800458c:	e7ea      	b.n	8004564 <__swbuf_r+0x6c>
 800458e:	bf00      	nop
 8004590:	080055c0 	.word	0x080055c0
 8004594:	080055e0 	.word	0x080055e0
 8004598:	080055a0 	.word	0x080055a0

0800459c <__swsetup_r>:
 800459c:	4b32      	ldr	r3, [pc, #200]	; (8004668 <__swsetup_r+0xcc>)
 800459e:	b570      	push	{r4, r5, r6, lr}
 80045a0:	681d      	ldr	r5, [r3, #0]
 80045a2:	4606      	mov	r6, r0
 80045a4:	460c      	mov	r4, r1
 80045a6:	b125      	cbz	r5, 80045b2 <__swsetup_r+0x16>
 80045a8:	69ab      	ldr	r3, [r5, #24]
 80045aa:	b913      	cbnz	r3, 80045b2 <__swsetup_r+0x16>
 80045ac:	4628      	mov	r0, r5
 80045ae:	f000 f97d 	bl	80048ac <__sinit>
 80045b2:	4b2e      	ldr	r3, [pc, #184]	; (800466c <__swsetup_r+0xd0>)
 80045b4:	429c      	cmp	r4, r3
 80045b6:	d10f      	bne.n	80045d8 <__swsetup_r+0x3c>
 80045b8:	686c      	ldr	r4, [r5, #4]
 80045ba:	89a3      	ldrh	r3, [r4, #12]
 80045bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80045c0:	0719      	lsls	r1, r3, #28
 80045c2:	d42c      	bmi.n	800461e <__swsetup_r+0x82>
 80045c4:	06dd      	lsls	r5, r3, #27
 80045c6:	d411      	bmi.n	80045ec <__swsetup_r+0x50>
 80045c8:	2309      	movs	r3, #9
 80045ca:	6033      	str	r3, [r6, #0]
 80045cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80045d0:	81a3      	strh	r3, [r4, #12]
 80045d2:	f04f 30ff 	mov.w	r0, #4294967295
 80045d6:	e03e      	b.n	8004656 <__swsetup_r+0xba>
 80045d8:	4b25      	ldr	r3, [pc, #148]	; (8004670 <__swsetup_r+0xd4>)
 80045da:	429c      	cmp	r4, r3
 80045dc:	d101      	bne.n	80045e2 <__swsetup_r+0x46>
 80045de:	68ac      	ldr	r4, [r5, #8]
 80045e0:	e7eb      	b.n	80045ba <__swsetup_r+0x1e>
 80045e2:	4b24      	ldr	r3, [pc, #144]	; (8004674 <__swsetup_r+0xd8>)
 80045e4:	429c      	cmp	r4, r3
 80045e6:	bf08      	it	eq
 80045e8:	68ec      	ldreq	r4, [r5, #12]
 80045ea:	e7e6      	b.n	80045ba <__swsetup_r+0x1e>
 80045ec:	0758      	lsls	r0, r3, #29
 80045ee:	d512      	bpl.n	8004616 <__swsetup_r+0x7a>
 80045f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045f2:	b141      	cbz	r1, 8004606 <__swsetup_r+0x6a>
 80045f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045f8:	4299      	cmp	r1, r3
 80045fa:	d002      	beq.n	8004602 <__swsetup_r+0x66>
 80045fc:	4630      	mov	r0, r6
 80045fe:	f000 fa59 	bl	8004ab4 <_free_r>
 8004602:	2300      	movs	r3, #0
 8004604:	6363      	str	r3, [r4, #52]	; 0x34
 8004606:	89a3      	ldrh	r3, [r4, #12]
 8004608:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800460c:	81a3      	strh	r3, [r4, #12]
 800460e:	2300      	movs	r3, #0
 8004610:	6063      	str	r3, [r4, #4]
 8004612:	6923      	ldr	r3, [r4, #16]
 8004614:	6023      	str	r3, [r4, #0]
 8004616:	89a3      	ldrh	r3, [r4, #12]
 8004618:	f043 0308 	orr.w	r3, r3, #8
 800461c:	81a3      	strh	r3, [r4, #12]
 800461e:	6923      	ldr	r3, [r4, #16]
 8004620:	b94b      	cbnz	r3, 8004636 <__swsetup_r+0x9a>
 8004622:	89a3      	ldrh	r3, [r4, #12]
 8004624:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800462c:	d003      	beq.n	8004636 <__swsetup_r+0x9a>
 800462e:	4621      	mov	r1, r4
 8004630:	4630      	mov	r0, r6
 8004632:	f000 f9ff 	bl	8004a34 <__smakebuf_r>
 8004636:	89a0      	ldrh	r0, [r4, #12]
 8004638:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800463c:	f010 0301 	ands.w	r3, r0, #1
 8004640:	d00a      	beq.n	8004658 <__swsetup_r+0xbc>
 8004642:	2300      	movs	r3, #0
 8004644:	60a3      	str	r3, [r4, #8]
 8004646:	6963      	ldr	r3, [r4, #20]
 8004648:	425b      	negs	r3, r3
 800464a:	61a3      	str	r3, [r4, #24]
 800464c:	6923      	ldr	r3, [r4, #16]
 800464e:	b943      	cbnz	r3, 8004662 <__swsetup_r+0xc6>
 8004650:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004654:	d1ba      	bne.n	80045cc <__swsetup_r+0x30>
 8004656:	bd70      	pop	{r4, r5, r6, pc}
 8004658:	0781      	lsls	r1, r0, #30
 800465a:	bf58      	it	pl
 800465c:	6963      	ldrpl	r3, [r4, #20]
 800465e:	60a3      	str	r3, [r4, #8]
 8004660:	e7f4      	b.n	800464c <__swsetup_r+0xb0>
 8004662:	2000      	movs	r0, #0
 8004664:	e7f7      	b.n	8004656 <__swsetup_r+0xba>
 8004666:	bf00      	nop
 8004668:	2000000c 	.word	0x2000000c
 800466c:	080055c0 	.word	0x080055c0
 8004670:	080055e0 	.word	0x080055e0
 8004674:	080055a0 	.word	0x080055a0

08004678 <__sflush_r>:
 8004678:	898a      	ldrh	r2, [r1, #12]
 800467a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800467e:	4605      	mov	r5, r0
 8004680:	0710      	lsls	r0, r2, #28
 8004682:	460c      	mov	r4, r1
 8004684:	d458      	bmi.n	8004738 <__sflush_r+0xc0>
 8004686:	684b      	ldr	r3, [r1, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	dc05      	bgt.n	8004698 <__sflush_r+0x20>
 800468c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800468e:	2b00      	cmp	r3, #0
 8004690:	dc02      	bgt.n	8004698 <__sflush_r+0x20>
 8004692:	2000      	movs	r0, #0
 8004694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004698:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800469a:	2e00      	cmp	r6, #0
 800469c:	d0f9      	beq.n	8004692 <__sflush_r+0x1a>
 800469e:	2300      	movs	r3, #0
 80046a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80046a4:	682f      	ldr	r7, [r5, #0]
 80046a6:	602b      	str	r3, [r5, #0]
 80046a8:	d032      	beq.n	8004710 <__sflush_r+0x98>
 80046aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80046ac:	89a3      	ldrh	r3, [r4, #12]
 80046ae:	075a      	lsls	r2, r3, #29
 80046b0:	d505      	bpl.n	80046be <__sflush_r+0x46>
 80046b2:	6863      	ldr	r3, [r4, #4]
 80046b4:	1ac0      	subs	r0, r0, r3
 80046b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80046b8:	b10b      	cbz	r3, 80046be <__sflush_r+0x46>
 80046ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046bc:	1ac0      	subs	r0, r0, r3
 80046be:	2300      	movs	r3, #0
 80046c0:	4602      	mov	r2, r0
 80046c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80046c4:	6a21      	ldr	r1, [r4, #32]
 80046c6:	4628      	mov	r0, r5
 80046c8:	47b0      	blx	r6
 80046ca:	1c43      	adds	r3, r0, #1
 80046cc:	89a3      	ldrh	r3, [r4, #12]
 80046ce:	d106      	bne.n	80046de <__sflush_r+0x66>
 80046d0:	6829      	ldr	r1, [r5, #0]
 80046d2:	291d      	cmp	r1, #29
 80046d4:	d82c      	bhi.n	8004730 <__sflush_r+0xb8>
 80046d6:	4a2a      	ldr	r2, [pc, #168]	; (8004780 <__sflush_r+0x108>)
 80046d8:	40ca      	lsrs	r2, r1
 80046da:	07d6      	lsls	r6, r2, #31
 80046dc:	d528      	bpl.n	8004730 <__sflush_r+0xb8>
 80046de:	2200      	movs	r2, #0
 80046e0:	6062      	str	r2, [r4, #4]
 80046e2:	04d9      	lsls	r1, r3, #19
 80046e4:	6922      	ldr	r2, [r4, #16]
 80046e6:	6022      	str	r2, [r4, #0]
 80046e8:	d504      	bpl.n	80046f4 <__sflush_r+0x7c>
 80046ea:	1c42      	adds	r2, r0, #1
 80046ec:	d101      	bne.n	80046f2 <__sflush_r+0x7a>
 80046ee:	682b      	ldr	r3, [r5, #0]
 80046f0:	b903      	cbnz	r3, 80046f4 <__sflush_r+0x7c>
 80046f2:	6560      	str	r0, [r4, #84]	; 0x54
 80046f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046f6:	602f      	str	r7, [r5, #0]
 80046f8:	2900      	cmp	r1, #0
 80046fa:	d0ca      	beq.n	8004692 <__sflush_r+0x1a>
 80046fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004700:	4299      	cmp	r1, r3
 8004702:	d002      	beq.n	800470a <__sflush_r+0x92>
 8004704:	4628      	mov	r0, r5
 8004706:	f000 f9d5 	bl	8004ab4 <_free_r>
 800470a:	2000      	movs	r0, #0
 800470c:	6360      	str	r0, [r4, #52]	; 0x34
 800470e:	e7c1      	b.n	8004694 <__sflush_r+0x1c>
 8004710:	6a21      	ldr	r1, [r4, #32]
 8004712:	2301      	movs	r3, #1
 8004714:	4628      	mov	r0, r5
 8004716:	47b0      	blx	r6
 8004718:	1c41      	adds	r1, r0, #1
 800471a:	d1c7      	bne.n	80046ac <__sflush_r+0x34>
 800471c:	682b      	ldr	r3, [r5, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d0c4      	beq.n	80046ac <__sflush_r+0x34>
 8004722:	2b1d      	cmp	r3, #29
 8004724:	d001      	beq.n	800472a <__sflush_r+0xb2>
 8004726:	2b16      	cmp	r3, #22
 8004728:	d101      	bne.n	800472e <__sflush_r+0xb6>
 800472a:	602f      	str	r7, [r5, #0]
 800472c:	e7b1      	b.n	8004692 <__sflush_r+0x1a>
 800472e:	89a3      	ldrh	r3, [r4, #12]
 8004730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004734:	81a3      	strh	r3, [r4, #12]
 8004736:	e7ad      	b.n	8004694 <__sflush_r+0x1c>
 8004738:	690f      	ldr	r7, [r1, #16]
 800473a:	2f00      	cmp	r7, #0
 800473c:	d0a9      	beq.n	8004692 <__sflush_r+0x1a>
 800473e:	0793      	lsls	r3, r2, #30
 8004740:	680e      	ldr	r6, [r1, #0]
 8004742:	bf08      	it	eq
 8004744:	694b      	ldreq	r3, [r1, #20]
 8004746:	600f      	str	r7, [r1, #0]
 8004748:	bf18      	it	ne
 800474a:	2300      	movne	r3, #0
 800474c:	eba6 0807 	sub.w	r8, r6, r7
 8004750:	608b      	str	r3, [r1, #8]
 8004752:	f1b8 0f00 	cmp.w	r8, #0
 8004756:	dd9c      	ble.n	8004692 <__sflush_r+0x1a>
 8004758:	6a21      	ldr	r1, [r4, #32]
 800475a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800475c:	4643      	mov	r3, r8
 800475e:	463a      	mov	r2, r7
 8004760:	4628      	mov	r0, r5
 8004762:	47b0      	blx	r6
 8004764:	2800      	cmp	r0, #0
 8004766:	dc06      	bgt.n	8004776 <__sflush_r+0xfe>
 8004768:	89a3      	ldrh	r3, [r4, #12]
 800476a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800476e:	81a3      	strh	r3, [r4, #12]
 8004770:	f04f 30ff 	mov.w	r0, #4294967295
 8004774:	e78e      	b.n	8004694 <__sflush_r+0x1c>
 8004776:	4407      	add	r7, r0
 8004778:	eba8 0800 	sub.w	r8, r8, r0
 800477c:	e7e9      	b.n	8004752 <__sflush_r+0xda>
 800477e:	bf00      	nop
 8004780:	20400001 	.word	0x20400001

08004784 <_fflush_r>:
 8004784:	b538      	push	{r3, r4, r5, lr}
 8004786:	690b      	ldr	r3, [r1, #16]
 8004788:	4605      	mov	r5, r0
 800478a:	460c      	mov	r4, r1
 800478c:	b913      	cbnz	r3, 8004794 <_fflush_r+0x10>
 800478e:	2500      	movs	r5, #0
 8004790:	4628      	mov	r0, r5
 8004792:	bd38      	pop	{r3, r4, r5, pc}
 8004794:	b118      	cbz	r0, 800479e <_fflush_r+0x1a>
 8004796:	6983      	ldr	r3, [r0, #24]
 8004798:	b90b      	cbnz	r3, 800479e <_fflush_r+0x1a>
 800479a:	f000 f887 	bl	80048ac <__sinit>
 800479e:	4b14      	ldr	r3, [pc, #80]	; (80047f0 <_fflush_r+0x6c>)
 80047a0:	429c      	cmp	r4, r3
 80047a2:	d11b      	bne.n	80047dc <_fflush_r+0x58>
 80047a4:	686c      	ldr	r4, [r5, #4]
 80047a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d0ef      	beq.n	800478e <_fflush_r+0xa>
 80047ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80047b0:	07d0      	lsls	r0, r2, #31
 80047b2:	d404      	bmi.n	80047be <_fflush_r+0x3a>
 80047b4:	0599      	lsls	r1, r3, #22
 80047b6:	d402      	bmi.n	80047be <_fflush_r+0x3a>
 80047b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047ba:	f000 f915 	bl	80049e8 <__retarget_lock_acquire_recursive>
 80047be:	4628      	mov	r0, r5
 80047c0:	4621      	mov	r1, r4
 80047c2:	f7ff ff59 	bl	8004678 <__sflush_r>
 80047c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047c8:	07da      	lsls	r2, r3, #31
 80047ca:	4605      	mov	r5, r0
 80047cc:	d4e0      	bmi.n	8004790 <_fflush_r+0xc>
 80047ce:	89a3      	ldrh	r3, [r4, #12]
 80047d0:	059b      	lsls	r3, r3, #22
 80047d2:	d4dd      	bmi.n	8004790 <_fflush_r+0xc>
 80047d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047d6:	f000 f908 	bl	80049ea <__retarget_lock_release_recursive>
 80047da:	e7d9      	b.n	8004790 <_fflush_r+0xc>
 80047dc:	4b05      	ldr	r3, [pc, #20]	; (80047f4 <_fflush_r+0x70>)
 80047de:	429c      	cmp	r4, r3
 80047e0:	d101      	bne.n	80047e6 <_fflush_r+0x62>
 80047e2:	68ac      	ldr	r4, [r5, #8]
 80047e4:	e7df      	b.n	80047a6 <_fflush_r+0x22>
 80047e6:	4b04      	ldr	r3, [pc, #16]	; (80047f8 <_fflush_r+0x74>)
 80047e8:	429c      	cmp	r4, r3
 80047ea:	bf08      	it	eq
 80047ec:	68ec      	ldreq	r4, [r5, #12]
 80047ee:	e7da      	b.n	80047a6 <_fflush_r+0x22>
 80047f0:	080055c0 	.word	0x080055c0
 80047f4:	080055e0 	.word	0x080055e0
 80047f8:	080055a0 	.word	0x080055a0

080047fc <std>:
 80047fc:	2300      	movs	r3, #0
 80047fe:	b510      	push	{r4, lr}
 8004800:	4604      	mov	r4, r0
 8004802:	e9c0 3300 	strd	r3, r3, [r0]
 8004806:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800480a:	6083      	str	r3, [r0, #8]
 800480c:	8181      	strh	r1, [r0, #12]
 800480e:	6643      	str	r3, [r0, #100]	; 0x64
 8004810:	81c2      	strh	r2, [r0, #14]
 8004812:	6183      	str	r3, [r0, #24]
 8004814:	4619      	mov	r1, r3
 8004816:	2208      	movs	r2, #8
 8004818:	305c      	adds	r0, #92	; 0x5c
 800481a:	f7ff fe37 	bl	800448c <memset>
 800481e:	4b05      	ldr	r3, [pc, #20]	; (8004834 <std+0x38>)
 8004820:	6263      	str	r3, [r4, #36]	; 0x24
 8004822:	4b05      	ldr	r3, [pc, #20]	; (8004838 <std+0x3c>)
 8004824:	62a3      	str	r3, [r4, #40]	; 0x28
 8004826:	4b05      	ldr	r3, [pc, #20]	; (800483c <std+0x40>)
 8004828:	62e3      	str	r3, [r4, #44]	; 0x2c
 800482a:	4b05      	ldr	r3, [pc, #20]	; (8004840 <std+0x44>)
 800482c:	6224      	str	r4, [r4, #32]
 800482e:	6323      	str	r3, [r4, #48]	; 0x30
 8004830:	bd10      	pop	{r4, pc}
 8004832:	bf00      	nop
 8004834:	08005295 	.word	0x08005295
 8004838:	080052b7 	.word	0x080052b7
 800483c:	080052ef 	.word	0x080052ef
 8004840:	08005313 	.word	0x08005313

08004844 <_cleanup_r>:
 8004844:	4901      	ldr	r1, [pc, #4]	; (800484c <_cleanup_r+0x8>)
 8004846:	f000 b8af 	b.w	80049a8 <_fwalk_reent>
 800484a:	bf00      	nop
 800484c:	08004785 	.word	0x08004785

08004850 <__sfmoreglue>:
 8004850:	b570      	push	{r4, r5, r6, lr}
 8004852:	1e4a      	subs	r2, r1, #1
 8004854:	2568      	movs	r5, #104	; 0x68
 8004856:	4355      	muls	r5, r2
 8004858:	460e      	mov	r6, r1
 800485a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800485e:	f000 f979 	bl	8004b54 <_malloc_r>
 8004862:	4604      	mov	r4, r0
 8004864:	b140      	cbz	r0, 8004878 <__sfmoreglue+0x28>
 8004866:	2100      	movs	r1, #0
 8004868:	e9c0 1600 	strd	r1, r6, [r0]
 800486c:	300c      	adds	r0, #12
 800486e:	60a0      	str	r0, [r4, #8]
 8004870:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004874:	f7ff fe0a 	bl	800448c <memset>
 8004878:	4620      	mov	r0, r4
 800487a:	bd70      	pop	{r4, r5, r6, pc}

0800487c <__sfp_lock_acquire>:
 800487c:	4801      	ldr	r0, [pc, #4]	; (8004884 <__sfp_lock_acquire+0x8>)
 800487e:	f000 b8b3 	b.w	80049e8 <__retarget_lock_acquire_recursive>
 8004882:	bf00      	nop
 8004884:	20001200 	.word	0x20001200

08004888 <__sfp_lock_release>:
 8004888:	4801      	ldr	r0, [pc, #4]	; (8004890 <__sfp_lock_release+0x8>)
 800488a:	f000 b8ae 	b.w	80049ea <__retarget_lock_release_recursive>
 800488e:	bf00      	nop
 8004890:	20001200 	.word	0x20001200

08004894 <__sinit_lock_acquire>:
 8004894:	4801      	ldr	r0, [pc, #4]	; (800489c <__sinit_lock_acquire+0x8>)
 8004896:	f000 b8a7 	b.w	80049e8 <__retarget_lock_acquire_recursive>
 800489a:	bf00      	nop
 800489c:	200011fb 	.word	0x200011fb

080048a0 <__sinit_lock_release>:
 80048a0:	4801      	ldr	r0, [pc, #4]	; (80048a8 <__sinit_lock_release+0x8>)
 80048a2:	f000 b8a2 	b.w	80049ea <__retarget_lock_release_recursive>
 80048a6:	bf00      	nop
 80048a8:	200011fb 	.word	0x200011fb

080048ac <__sinit>:
 80048ac:	b510      	push	{r4, lr}
 80048ae:	4604      	mov	r4, r0
 80048b0:	f7ff fff0 	bl	8004894 <__sinit_lock_acquire>
 80048b4:	69a3      	ldr	r3, [r4, #24]
 80048b6:	b11b      	cbz	r3, 80048c0 <__sinit+0x14>
 80048b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048bc:	f7ff bff0 	b.w	80048a0 <__sinit_lock_release>
 80048c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80048c4:	6523      	str	r3, [r4, #80]	; 0x50
 80048c6:	4b13      	ldr	r3, [pc, #76]	; (8004914 <__sinit+0x68>)
 80048c8:	4a13      	ldr	r2, [pc, #76]	; (8004918 <__sinit+0x6c>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80048ce:	42a3      	cmp	r3, r4
 80048d0:	bf04      	itt	eq
 80048d2:	2301      	moveq	r3, #1
 80048d4:	61a3      	streq	r3, [r4, #24]
 80048d6:	4620      	mov	r0, r4
 80048d8:	f000 f820 	bl	800491c <__sfp>
 80048dc:	6060      	str	r0, [r4, #4]
 80048de:	4620      	mov	r0, r4
 80048e0:	f000 f81c 	bl	800491c <__sfp>
 80048e4:	60a0      	str	r0, [r4, #8]
 80048e6:	4620      	mov	r0, r4
 80048e8:	f000 f818 	bl	800491c <__sfp>
 80048ec:	2200      	movs	r2, #0
 80048ee:	60e0      	str	r0, [r4, #12]
 80048f0:	2104      	movs	r1, #4
 80048f2:	6860      	ldr	r0, [r4, #4]
 80048f4:	f7ff ff82 	bl	80047fc <std>
 80048f8:	68a0      	ldr	r0, [r4, #8]
 80048fa:	2201      	movs	r2, #1
 80048fc:	2109      	movs	r1, #9
 80048fe:	f7ff ff7d 	bl	80047fc <std>
 8004902:	68e0      	ldr	r0, [r4, #12]
 8004904:	2202      	movs	r2, #2
 8004906:	2112      	movs	r1, #18
 8004908:	f7ff ff78 	bl	80047fc <std>
 800490c:	2301      	movs	r3, #1
 800490e:	61a3      	str	r3, [r4, #24]
 8004910:	e7d2      	b.n	80048b8 <__sinit+0xc>
 8004912:	bf00      	nop
 8004914:	0800559c 	.word	0x0800559c
 8004918:	08004845 	.word	0x08004845

0800491c <__sfp>:
 800491c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800491e:	4607      	mov	r7, r0
 8004920:	f7ff ffac 	bl	800487c <__sfp_lock_acquire>
 8004924:	4b1e      	ldr	r3, [pc, #120]	; (80049a0 <__sfp+0x84>)
 8004926:	681e      	ldr	r6, [r3, #0]
 8004928:	69b3      	ldr	r3, [r6, #24]
 800492a:	b913      	cbnz	r3, 8004932 <__sfp+0x16>
 800492c:	4630      	mov	r0, r6
 800492e:	f7ff ffbd 	bl	80048ac <__sinit>
 8004932:	3648      	adds	r6, #72	; 0x48
 8004934:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004938:	3b01      	subs	r3, #1
 800493a:	d503      	bpl.n	8004944 <__sfp+0x28>
 800493c:	6833      	ldr	r3, [r6, #0]
 800493e:	b30b      	cbz	r3, 8004984 <__sfp+0x68>
 8004940:	6836      	ldr	r6, [r6, #0]
 8004942:	e7f7      	b.n	8004934 <__sfp+0x18>
 8004944:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004948:	b9d5      	cbnz	r5, 8004980 <__sfp+0x64>
 800494a:	4b16      	ldr	r3, [pc, #88]	; (80049a4 <__sfp+0x88>)
 800494c:	60e3      	str	r3, [r4, #12]
 800494e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004952:	6665      	str	r5, [r4, #100]	; 0x64
 8004954:	f000 f847 	bl	80049e6 <__retarget_lock_init_recursive>
 8004958:	f7ff ff96 	bl	8004888 <__sfp_lock_release>
 800495c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004960:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004964:	6025      	str	r5, [r4, #0]
 8004966:	61a5      	str	r5, [r4, #24]
 8004968:	2208      	movs	r2, #8
 800496a:	4629      	mov	r1, r5
 800496c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004970:	f7ff fd8c 	bl	800448c <memset>
 8004974:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004978:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800497c:	4620      	mov	r0, r4
 800497e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004980:	3468      	adds	r4, #104	; 0x68
 8004982:	e7d9      	b.n	8004938 <__sfp+0x1c>
 8004984:	2104      	movs	r1, #4
 8004986:	4638      	mov	r0, r7
 8004988:	f7ff ff62 	bl	8004850 <__sfmoreglue>
 800498c:	4604      	mov	r4, r0
 800498e:	6030      	str	r0, [r6, #0]
 8004990:	2800      	cmp	r0, #0
 8004992:	d1d5      	bne.n	8004940 <__sfp+0x24>
 8004994:	f7ff ff78 	bl	8004888 <__sfp_lock_release>
 8004998:	230c      	movs	r3, #12
 800499a:	603b      	str	r3, [r7, #0]
 800499c:	e7ee      	b.n	800497c <__sfp+0x60>
 800499e:	bf00      	nop
 80049a0:	0800559c 	.word	0x0800559c
 80049a4:	ffff0001 	.word	0xffff0001

080049a8 <_fwalk_reent>:
 80049a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049ac:	4606      	mov	r6, r0
 80049ae:	4688      	mov	r8, r1
 80049b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80049b4:	2700      	movs	r7, #0
 80049b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80049ba:	f1b9 0901 	subs.w	r9, r9, #1
 80049be:	d505      	bpl.n	80049cc <_fwalk_reent+0x24>
 80049c0:	6824      	ldr	r4, [r4, #0]
 80049c2:	2c00      	cmp	r4, #0
 80049c4:	d1f7      	bne.n	80049b6 <_fwalk_reent+0xe>
 80049c6:	4638      	mov	r0, r7
 80049c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049cc:	89ab      	ldrh	r3, [r5, #12]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d907      	bls.n	80049e2 <_fwalk_reent+0x3a>
 80049d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80049d6:	3301      	adds	r3, #1
 80049d8:	d003      	beq.n	80049e2 <_fwalk_reent+0x3a>
 80049da:	4629      	mov	r1, r5
 80049dc:	4630      	mov	r0, r6
 80049de:	47c0      	blx	r8
 80049e0:	4307      	orrs	r7, r0
 80049e2:	3568      	adds	r5, #104	; 0x68
 80049e4:	e7e9      	b.n	80049ba <_fwalk_reent+0x12>

080049e6 <__retarget_lock_init_recursive>:
 80049e6:	4770      	bx	lr

080049e8 <__retarget_lock_acquire_recursive>:
 80049e8:	4770      	bx	lr

080049ea <__retarget_lock_release_recursive>:
 80049ea:	4770      	bx	lr

080049ec <__swhatbuf_r>:
 80049ec:	b570      	push	{r4, r5, r6, lr}
 80049ee:	460e      	mov	r6, r1
 80049f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049f4:	2900      	cmp	r1, #0
 80049f6:	b096      	sub	sp, #88	; 0x58
 80049f8:	4614      	mov	r4, r2
 80049fa:	461d      	mov	r5, r3
 80049fc:	da07      	bge.n	8004a0e <__swhatbuf_r+0x22>
 80049fe:	2300      	movs	r3, #0
 8004a00:	602b      	str	r3, [r5, #0]
 8004a02:	89b3      	ldrh	r3, [r6, #12]
 8004a04:	061a      	lsls	r2, r3, #24
 8004a06:	d410      	bmi.n	8004a2a <__swhatbuf_r+0x3e>
 8004a08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a0c:	e00e      	b.n	8004a2c <__swhatbuf_r+0x40>
 8004a0e:	466a      	mov	r2, sp
 8004a10:	f000 fca6 	bl	8005360 <_fstat_r>
 8004a14:	2800      	cmp	r0, #0
 8004a16:	dbf2      	blt.n	80049fe <__swhatbuf_r+0x12>
 8004a18:	9a01      	ldr	r2, [sp, #4]
 8004a1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004a1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004a22:	425a      	negs	r2, r3
 8004a24:	415a      	adcs	r2, r3
 8004a26:	602a      	str	r2, [r5, #0]
 8004a28:	e7ee      	b.n	8004a08 <__swhatbuf_r+0x1c>
 8004a2a:	2340      	movs	r3, #64	; 0x40
 8004a2c:	2000      	movs	r0, #0
 8004a2e:	6023      	str	r3, [r4, #0]
 8004a30:	b016      	add	sp, #88	; 0x58
 8004a32:	bd70      	pop	{r4, r5, r6, pc}

08004a34 <__smakebuf_r>:
 8004a34:	898b      	ldrh	r3, [r1, #12]
 8004a36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a38:	079d      	lsls	r5, r3, #30
 8004a3a:	4606      	mov	r6, r0
 8004a3c:	460c      	mov	r4, r1
 8004a3e:	d507      	bpl.n	8004a50 <__smakebuf_r+0x1c>
 8004a40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004a44:	6023      	str	r3, [r4, #0]
 8004a46:	6123      	str	r3, [r4, #16]
 8004a48:	2301      	movs	r3, #1
 8004a4a:	6163      	str	r3, [r4, #20]
 8004a4c:	b002      	add	sp, #8
 8004a4e:	bd70      	pop	{r4, r5, r6, pc}
 8004a50:	ab01      	add	r3, sp, #4
 8004a52:	466a      	mov	r2, sp
 8004a54:	f7ff ffca 	bl	80049ec <__swhatbuf_r>
 8004a58:	9900      	ldr	r1, [sp, #0]
 8004a5a:	4605      	mov	r5, r0
 8004a5c:	4630      	mov	r0, r6
 8004a5e:	f000 f879 	bl	8004b54 <_malloc_r>
 8004a62:	b948      	cbnz	r0, 8004a78 <__smakebuf_r+0x44>
 8004a64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a68:	059a      	lsls	r2, r3, #22
 8004a6a:	d4ef      	bmi.n	8004a4c <__smakebuf_r+0x18>
 8004a6c:	f023 0303 	bic.w	r3, r3, #3
 8004a70:	f043 0302 	orr.w	r3, r3, #2
 8004a74:	81a3      	strh	r3, [r4, #12]
 8004a76:	e7e3      	b.n	8004a40 <__smakebuf_r+0xc>
 8004a78:	4b0d      	ldr	r3, [pc, #52]	; (8004ab0 <__smakebuf_r+0x7c>)
 8004a7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004a7c:	89a3      	ldrh	r3, [r4, #12]
 8004a7e:	6020      	str	r0, [r4, #0]
 8004a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a84:	81a3      	strh	r3, [r4, #12]
 8004a86:	9b00      	ldr	r3, [sp, #0]
 8004a88:	6163      	str	r3, [r4, #20]
 8004a8a:	9b01      	ldr	r3, [sp, #4]
 8004a8c:	6120      	str	r0, [r4, #16]
 8004a8e:	b15b      	cbz	r3, 8004aa8 <__smakebuf_r+0x74>
 8004a90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a94:	4630      	mov	r0, r6
 8004a96:	f000 fc75 	bl	8005384 <_isatty_r>
 8004a9a:	b128      	cbz	r0, 8004aa8 <__smakebuf_r+0x74>
 8004a9c:	89a3      	ldrh	r3, [r4, #12]
 8004a9e:	f023 0303 	bic.w	r3, r3, #3
 8004aa2:	f043 0301 	orr.w	r3, r3, #1
 8004aa6:	81a3      	strh	r3, [r4, #12]
 8004aa8:	89a0      	ldrh	r0, [r4, #12]
 8004aaa:	4305      	orrs	r5, r0
 8004aac:	81a5      	strh	r5, [r4, #12]
 8004aae:	e7cd      	b.n	8004a4c <__smakebuf_r+0x18>
 8004ab0:	08004845 	.word	0x08004845

08004ab4 <_free_r>:
 8004ab4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ab6:	2900      	cmp	r1, #0
 8004ab8:	d048      	beq.n	8004b4c <_free_r+0x98>
 8004aba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004abe:	9001      	str	r0, [sp, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f1a1 0404 	sub.w	r4, r1, #4
 8004ac6:	bfb8      	it	lt
 8004ac8:	18e4      	addlt	r4, r4, r3
 8004aca:	f000 fc7d 	bl	80053c8 <__malloc_lock>
 8004ace:	4a20      	ldr	r2, [pc, #128]	; (8004b50 <_free_r+0x9c>)
 8004ad0:	9801      	ldr	r0, [sp, #4]
 8004ad2:	6813      	ldr	r3, [r2, #0]
 8004ad4:	4615      	mov	r5, r2
 8004ad6:	b933      	cbnz	r3, 8004ae6 <_free_r+0x32>
 8004ad8:	6063      	str	r3, [r4, #4]
 8004ada:	6014      	str	r4, [r2, #0]
 8004adc:	b003      	add	sp, #12
 8004ade:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ae2:	f000 bc77 	b.w	80053d4 <__malloc_unlock>
 8004ae6:	42a3      	cmp	r3, r4
 8004ae8:	d90b      	bls.n	8004b02 <_free_r+0x4e>
 8004aea:	6821      	ldr	r1, [r4, #0]
 8004aec:	1862      	adds	r2, r4, r1
 8004aee:	4293      	cmp	r3, r2
 8004af0:	bf04      	itt	eq
 8004af2:	681a      	ldreq	r2, [r3, #0]
 8004af4:	685b      	ldreq	r3, [r3, #4]
 8004af6:	6063      	str	r3, [r4, #4]
 8004af8:	bf04      	itt	eq
 8004afa:	1852      	addeq	r2, r2, r1
 8004afc:	6022      	streq	r2, [r4, #0]
 8004afe:	602c      	str	r4, [r5, #0]
 8004b00:	e7ec      	b.n	8004adc <_free_r+0x28>
 8004b02:	461a      	mov	r2, r3
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	b10b      	cbz	r3, 8004b0c <_free_r+0x58>
 8004b08:	42a3      	cmp	r3, r4
 8004b0a:	d9fa      	bls.n	8004b02 <_free_r+0x4e>
 8004b0c:	6811      	ldr	r1, [r2, #0]
 8004b0e:	1855      	adds	r5, r2, r1
 8004b10:	42a5      	cmp	r5, r4
 8004b12:	d10b      	bne.n	8004b2c <_free_r+0x78>
 8004b14:	6824      	ldr	r4, [r4, #0]
 8004b16:	4421      	add	r1, r4
 8004b18:	1854      	adds	r4, r2, r1
 8004b1a:	42a3      	cmp	r3, r4
 8004b1c:	6011      	str	r1, [r2, #0]
 8004b1e:	d1dd      	bne.n	8004adc <_free_r+0x28>
 8004b20:	681c      	ldr	r4, [r3, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	6053      	str	r3, [r2, #4]
 8004b26:	4421      	add	r1, r4
 8004b28:	6011      	str	r1, [r2, #0]
 8004b2a:	e7d7      	b.n	8004adc <_free_r+0x28>
 8004b2c:	d902      	bls.n	8004b34 <_free_r+0x80>
 8004b2e:	230c      	movs	r3, #12
 8004b30:	6003      	str	r3, [r0, #0]
 8004b32:	e7d3      	b.n	8004adc <_free_r+0x28>
 8004b34:	6825      	ldr	r5, [r4, #0]
 8004b36:	1961      	adds	r1, r4, r5
 8004b38:	428b      	cmp	r3, r1
 8004b3a:	bf04      	itt	eq
 8004b3c:	6819      	ldreq	r1, [r3, #0]
 8004b3e:	685b      	ldreq	r3, [r3, #4]
 8004b40:	6063      	str	r3, [r4, #4]
 8004b42:	bf04      	itt	eq
 8004b44:	1949      	addeq	r1, r1, r5
 8004b46:	6021      	streq	r1, [r4, #0]
 8004b48:	6054      	str	r4, [r2, #4]
 8004b4a:	e7c7      	b.n	8004adc <_free_r+0x28>
 8004b4c:	b003      	add	sp, #12
 8004b4e:	bd30      	pop	{r4, r5, pc}
 8004b50:	20001098 	.word	0x20001098

08004b54 <_malloc_r>:
 8004b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b56:	1ccd      	adds	r5, r1, #3
 8004b58:	f025 0503 	bic.w	r5, r5, #3
 8004b5c:	3508      	adds	r5, #8
 8004b5e:	2d0c      	cmp	r5, #12
 8004b60:	bf38      	it	cc
 8004b62:	250c      	movcc	r5, #12
 8004b64:	2d00      	cmp	r5, #0
 8004b66:	4606      	mov	r6, r0
 8004b68:	db01      	blt.n	8004b6e <_malloc_r+0x1a>
 8004b6a:	42a9      	cmp	r1, r5
 8004b6c:	d903      	bls.n	8004b76 <_malloc_r+0x22>
 8004b6e:	230c      	movs	r3, #12
 8004b70:	6033      	str	r3, [r6, #0]
 8004b72:	2000      	movs	r0, #0
 8004b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b76:	f000 fc27 	bl	80053c8 <__malloc_lock>
 8004b7a:	4921      	ldr	r1, [pc, #132]	; (8004c00 <_malloc_r+0xac>)
 8004b7c:	680a      	ldr	r2, [r1, #0]
 8004b7e:	4614      	mov	r4, r2
 8004b80:	b99c      	cbnz	r4, 8004baa <_malloc_r+0x56>
 8004b82:	4f20      	ldr	r7, [pc, #128]	; (8004c04 <_malloc_r+0xb0>)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	b923      	cbnz	r3, 8004b92 <_malloc_r+0x3e>
 8004b88:	4621      	mov	r1, r4
 8004b8a:	4630      	mov	r0, r6
 8004b8c:	f000 fb72 	bl	8005274 <_sbrk_r>
 8004b90:	6038      	str	r0, [r7, #0]
 8004b92:	4629      	mov	r1, r5
 8004b94:	4630      	mov	r0, r6
 8004b96:	f000 fb6d 	bl	8005274 <_sbrk_r>
 8004b9a:	1c43      	adds	r3, r0, #1
 8004b9c:	d123      	bne.n	8004be6 <_malloc_r+0x92>
 8004b9e:	230c      	movs	r3, #12
 8004ba0:	6033      	str	r3, [r6, #0]
 8004ba2:	4630      	mov	r0, r6
 8004ba4:	f000 fc16 	bl	80053d4 <__malloc_unlock>
 8004ba8:	e7e3      	b.n	8004b72 <_malloc_r+0x1e>
 8004baa:	6823      	ldr	r3, [r4, #0]
 8004bac:	1b5b      	subs	r3, r3, r5
 8004bae:	d417      	bmi.n	8004be0 <_malloc_r+0x8c>
 8004bb0:	2b0b      	cmp	r3, #11
 8004bb2:	d903      	bls.n	8004bbc <_malloc_r+0x68>
 8004bb4:	6023      	str	r3, [r4, #0]
 8004bb6:	441c      	add	r4, r3
 8004bb8:	6025      	str	r5, [r4, #0]
 8004bba:	e004      	b.n	8004bc6 <_malloc_r+0x72>
 8004bbc:	6863      	ldr	r3, [r4, #4]
 8004bbe:	42a2      	cmp	r2, r4
 8004bc0:	bf0c      	ite	eq
 8004bc2:	600b      	streq	r3, [r1, #0]
 8004bc4:	6053      	strne	r3, [r2, #4]
 8004bc6:	4630      	mov	r0, r6
 8004bc8:	f000 fc04 	bl	80053d4 <__malloc_unlock>
 8004bcc:	f104 000b 	add.w	r0, r4, #11
 8004bd0:	1d23      	adds	r3, r4, #4
 8004bd2:	f020 0007 	bic.w	r0, r0, #7
 8004bd6:	1ac2      	subs	r2, r0, r3
 8004bd8:	d0cc      	beq.n	8004b74 <_malloc_r+0x20>
 8004bda:	1a1b      	subs	r3, r3, r0
 8004bdc:	50a3      	str	r3, [r4, r2]
 8004bde:	e7c9      	b.n	8004b74 <_malloc_r+0x20>
 8004be0:	4622      	mov	r2, r4
 8004be2:	6864      	ldr	r4, [r4, #4]
 8004be4:	e7cc      	b.n	8004b80 <_malloc_r+0x2c>
 8004be6:	1cc4      	adds	r4, r0, #3
 8004be8:	f024 0403 	bic.w	r4, r4, #3
 8004bec:	42a0      	cmp	r0, r4
 8004bee:	d0e3      	beq.n	8004bb8 <_malloc_r+0x64>
 8004bf0:	1a21      	subs	r1, r4, r0
 8004bf2:	4630      	mov	r0, r6
 8004bf4:	f000 fb3e 	bl	8005274 <_sbrk_r>
 8004bf8:	3001      	adds	r0, #1
 8004bfa:	d1dd      	bne.n	8004bb8 <_malloc_r+0x64>
 8004bfc:	e7cf      	b.n	8004b9e <_malloc_r+0x4a>
 8004bfe:	bf00      	nop
 8004c00:	20001098 	.word	0x20001098
 8004c04:	2000109c 	.word	0x2000109c

08004c08 <__sfputc_r>:
 8004c08:	6893      	ldr	r3, [r2, #8]
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	b410      	push	{r4}
 8004c10:	6093      	str	r3, [r2, #8]
 8004c12:	da08      	bge.n	8004c26 <__sfputc_r+0x1e>
 8004c14:	6994      	ldr	r4, [r2, #24]
 8004c16:	42a3      	cmp	r3, r4
 8004c18:	db01      	blt.n	8004c1e <__sfputc_r+0x16>
 8004c1a:	290a      	cmp	r1, #10
 8004c1c:	d103      	bne.n	8004c26 <__sfputc_r+0x1e>
 8004c1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c22:	f7ff bc69 	b.w	80044f8 <__swbuf_r>
 8004c26:	6813      	ldr	r3, [r2, #0]
 8004c28:	1c58      	adds	r0, r3, #1
 8004c2a:	6010      	str	r0, [r2, #0]
 8004c2c:	7019      	strb	r1, [r3, #0]
 8004c2e:	4608      	mov	r0, r1
 8004c30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <__sfputs_r>:
 8004c36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c38:	4606      	mov	r6, r0
 8004c3a:	460f      	mov	r7, r1
 8004c3c:	4614      	mov	r4, r2
 8004c3e:	18d5      	adds	r5, r2, r3
 8004c40:	42ac      	cmp	r4, r5
 8004c42:	d101      	bne.n	8004c48 <__sfputs_r+0x12>
 8004c44:	2000      	movs	r0, #0
 8004c46:	e007      	b.n	8004c58 <__sfputs_r+0x22>
 8004c48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c4c:	463a      	mov	r2, r7
 8004c4e:	4630      	mov	r0, r6
 8004c50:	f7ff ffda 	bl	8004c08 <__sfputc_r>
 8004c54:	1c43      	adds	r3, r0, #1
 8004c56:	d1f3      	bne.n	8004c40 <__sfputs_r+0xa>
 8004c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004c5c <_vfiprintf_r>:
 8004c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c60:	460d      	mov	r5, r1
 8004c62:	b09d      	sub	sp, #116	; 0x74
 8004c64:	4614      	mov	r4, r2
 8004c66:	4698      	mov	r8, r3
 8004c68:	4606      	mov	r6, r0
 8004c6a:	b118      	cbz	r0, 8004c74 <_vfiprintf_r+0x18>
 8004c6c:	6983      	ldr	r3, [r0, #24]
 8004c6e:	b90b      	cbnz	r3, 8004c74 <_vfiprintf_r+0x18>
 8004c70:	f7ff fe1c 	bl	80048ac <__sinit>
 8004c74:	4b89      	ldr	r3, [pc, #548]	; (8004e9c <_vfiprintf_r+0x240>)
 8004c76:	429d      	cmp	r5, r3
 8004c78:	d11b      	bne.n	8004cb2 <_vfiprintf_r+0x56>
 8004c7a:	6875      	ldr	r5, [r6, #4]
 8004c7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c7e:	07d9      	lsls	r1, r3, #31
 8004c80:	d405      	bmi.n	8004c8e <_vfiprintf_r+0x32>
 8004c82:	89ab      	ldrh	r3, [r5, #12]
 8004c84:	059a      	lsls	r2, r3, #22
 8004c86:	d402      	bmi.n	8004c8e <_vfiprintf_r+0x32>
 8004c88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c8a:	f7ff fead 	bl	80049e8 <__retarget_lock_acquire_recursive>
 8004c8e:	89ab      	ldrh	r3, [r5, #12]
 8004c90:	071b      	lsls	r3, r3, #28
 8004c92:	d501      	bpl.n	8004c98 <_vfiprintf_r+0x3c>
 8004c94:	692b      	ldr	r3, [r5, #16]
 8004c96:	b9eb      	cbnz	r3, 8004cd4 <_vfiprintf_r+0x78>
 8004c98:	4629      	mov	r1, r5
 8004c9a:	4630      	mov	r0, r6
 8004c9c:	f7ff fc7e 	bl	800459c <__swsetup_r>
 8004ca0:	b1c0      	cbz	r0, 8004cd4 <_vfiprintf_r+0x78>
 8004ca2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ca4:	07dc      	lsls	r4, r3, #31
 8004ca6:	d50e      	bpl.n	8004cc6 <_vfiprintf_r+0x6a>
 8004ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cac:	b01d      	add	sp, #116	; 0x74
 8004cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cb2:	4b7b      	ldr	r3, [pc, #492]	; (8004ea0 <_vfiprintf_r+0x244>)
 8004cb4:	429d      	cmp	r5, r3
 8004cb6:	d101      	bne.n	8004cbc <_vfiprintf_r+0x60>
 8004cb8:	68b5      	ldr	r5, [r6, #8]
 8004cba:	e7df      	b.n	8004c7c <_vfiprintf_r+0x20>
 8004cbc:	4b79      	ldr	r3, [pc, #484]	; (8004ea4 <_vfiprintf_r+0x248>)
 8004cbe:	429d      	cmp	r5, r3
 8004cc0:	bf08      	it	eq
 8004cc2:	68f5      	ldreq	r5, [r6, #12]
 8004cc4:	e7da      	b.n	8004c7c <_vfiprintf_r+0x20>
 8004cc6:	89ab      	ldrh	r3, [r5, #12]
 8004cc8:	0598      	lsls	r0, r3, #22
 8004cca:	d4ed      	bmi.n	8004ca8 <_vfiprintf_r+0x4c>
 8004ccc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cce:	f7ff fe8c 	bl	80049ea <__retarget_lock_release_recursive>
 8004cd2:	e7e9      	b.n	8004ca8 <_vfiprintf_r+0x4c>
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	9309      	str	r3, [sp, #36]	; 0x24
 8004cd8:	2320      	movs	r3, #32
 8004cda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cde:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ce2:	2330      	movs	r3, #48	; 0x30
 8004ce4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004ea8 <_vfiprintf_r+0x24c>
 8004ce8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cec:	f04f 0901 	mov.w	r9, #1
 8004cf0:	4623      	mov	r3, r4
 8004cf2:	469a      	mov	sl, r3
 8004cf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cf8:	b10a      	cbz	r2, 8004cfe <_vfiprintf_r+0xa2>
 8004cfa:	2a25      	cmp	r2, #37	; 0x25
 8004cfc:	d1f9      	bne.n	8004cf2 <_vfiprintf_r+0x96>
 8004cfe:	ebba 0b04 	subs.w	fp, sl, r4
 8004d02:	d00b      	beq.n	8004d1c <_vfiprintf_r+0xc0>
 8004d04:	465b      	mov	r3, fp
 8004d06:	4622      	mov	r2, r4
 8004d08:	4629      	mov	r1, r5
 8004d0a:	4630      	mov	r0, r6
 8004d0c:	f7ff ff93 	bl	8004c36 <__sfputs_r>
 8004d10:	3001      	adds	r0, #1
 8004d12:	f000 80aa 	beq.w	8004e6a <_vfiprintf_r+0x20e>
 8004d16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d18:	445a      	add	r2, fp
 8004d1a:	9209      	str	r2, [sp, #36]	; 0x24
 8004d1c:	f89a 3000 	ldrb.w	r3, [sl]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 80a2 	beq.w	8004e6a <_vfiprintf_r+0x20e>
 8004d26:	2300      	movs	r3, #0
 8004d28:	f04f 32ff 	mov.w	r2, #4294967295
 8004d2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d30:	f10a 0a01 	add.w	sl, sl, #1
 8004d34:	9304      	str	r3, [sp, #16]
 8004d36:	9307      	str	r3, [sp, #28]
 8004d38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d3c:	931a      	str	r3, [sp, #104]	; 0x68
 8004d3e:	4654      	mov	r4, sl
 8004d40:	2205      	movs	r2, #5
 8004d42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d46:	4858      	ldr	r0, [pc, #352]	; (8004ea8 <_vfiprintf_r+0x24c>)
 8004d48:	f7fb fa42 	bl	80001d0 <memchr>
 8004d4c:	9a04      	ldr	r2, [sp, #16]
 8004d4e:	b9d8      	cbnz	r0, 8004d88 <_vfiprintf_r+0x12c>
 8004d50:	06d1      	lsls	r1, r2, #27
 8004d52:	bf44      	itt	mi
 8004d54:	2320      	movmi	r3, #32
 8004d56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d5a:	0713      	lsls	r3, r2, #28
 8004d5c:	bf44      	itt	mi
 8004d5e:	232b      	movmi	r3, #43	; 0x2b
 8004d60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d64:	f89a 3000 	ldrb.w	r3, [sl]
 8004d68:	2b2a      	cmp	r3, #42	; 0x2a
 8004d6a:	d015      	beq.n	8004d98 <_vfiprintf_r+0x13c>
 8004d6c:	9a07      	ldr	r2, [sp, #28]
 8004d6e:	4654      	mov	r4, sl
 8004d70:	2000      	movs	r0, #0
 8004d72:	f04f 0c0a 	mov.w	ip, #10
 8004d76:	4621      	mov	r1, r4
 8004d78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d7c:	3b30      	subs	r3, #48	; 0x30
 8004d7e:	2b09      	cmp	r3, #9
 8004d80:	d94e      	bls.n	8004e20 <_vfiprintf_r+0x1c4>
 8004d82:	b1b0      	cbz	r0, 8004db2 <_vfiprintf_r+0x156>
 8004d84:	9207      	str	r2, [sp, #28]
 8004d86:	e014      	b.n	8004db2 <_vfiprintf_r+0x156>
 8004d88:	eba0 0308 	sub.w	r3, r0, r8
 8004d8c:	fa09 f303 	lsl.w	r3, r9, r3
 8004d90:	4313      	orrs	r3, r2
 8004d92:	9304      	str	r3, [sp, #16]
 8004d94:	46a2      	mov	sl, r4
 8004d96:	e7d2      	b.n	8004d3e <_vfiprintf_r+0xe2>
 8004d98:	9b03      	ldr	r3, [sp, #12]
 8004d9a:	1d19      	adds	r1, r3, #4
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	9103      	str	r1, [sp, #12]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	bfbb      	ittet	lt
 8004da4:	425b      	neglt	r3, r3
 8004da6:	f042 0202 	orrlt.w	r2, r2, #2
 8004daa:	9307      	strge	r3, [sp, #28]
 8004dac:	9307      	strlt	r3, [sp, #28]
 8004dae:	bfb8      	it	lt
 8004db0:	9204      	strlt	r2, [sp, #16]
 8004db2:	7823      	ldrb	r3, [r4, #0]
 8004db4:	2b2e      	cmp	r3, #46	; 0x2e
 8004db6:	d10c      	bne.n	8004dd2 <_vfiprintf_r+0x176>
 8004db8:	7863      	ldrb	r3, [r4, #1]
 8004dba:	2b2a      	cmp	r3, #42	; 0x2a
 8004dbc:	d135      	bne.n	8004e2a <_vfiprintf_r+0x1ce>
 8004dbe:	9b03      	ldr	r3, [sp, #12]
 8004dc0:	1d1a      	adds	r2, r3, #4
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	9203      	str	r2, [sp, #12]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	bfb8      	it	lt
 8004dca:	f04f 33ff 	movlt.w	r3, #4294967295
 8004dce:	3402      	adds	r4, #2
 8004dd0:	9305      	str	r3, [sp, #20]
 8004dd2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004eb8 <_vfiprintf_r+0x25c>
 8004dd6:	7821      	ldrb	r1, [r4, #0]
 8004dd8:	2203      	movs	r2, #3
 8004dda:	4650      	mov	r0, sl
 8004ddc:	f7fb f9f8 	bl	80001d0 <memchr>
 8004de0:	b140      	cbz	r0, 8004df4 <_vfiprintf_r+0x198>
 8004de2:	2340      	movs	r3, #64	; 0x40
 8004de4:	eba0 000a 	sub.w	r0, r0, sl
 8004de8:	fa03 f000 	lsl.w	r0, r3, r0
 8004dec:	9b04      	ldr	r3, [sp, #16]
 8004dee:	4303      	orrs	r3, r0
 8004df0:	3401      	adds	r4, #1
 8004df2:	9304      	str	r3, [sp, #16]
 8004df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004df8:	482c      	ldr	r0, [pc, #176]	; (8004eac <_vfiprintf_r+0x250>)
 8004dfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004dfe:	2206      	movs	r2, #6
 8004e00:	f7fb f9e6 	bl	80001d0 <memchr>
 8004e04:	2800      	cmp	r0, #0
 8004e06:	d03f      	beq.n	8004e88 <_vfiprintf_r+0x22c>
 8004e08:	4b29      	ldr	r3, [pc, #164]	; (8004eb0 <_vfiprintf_r+0x254>)
 8004e0a:	bb1b      	cbnz	r3, 8004e54 <_vfiprintf_r+0x1f8>
 8004e0c:	9b03      	ldr	r3, [sp, #12]
 8004e0e:	3307      	adds	r3, #7
 8004e10:	f023 0307 	bic.w	r3, r3, #7
 8004e14:	3308      	adds	r3, #8
 8004e16:	9303      	str	r3, [sp, #12]
 8004e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e1a:	443b      	add	r3, r7
 8004e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e1e:	e767      	b.n	8004cf0 <_vfiprintf_r+0x94>
 8004e20:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e24:	460c      	mov	r4, r1
 8004e26:	2001      	movs	r0, #1
 8004e28:	e7a5      	b.n	8004d76 <_vfiprintf_r+0x11a>
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	3401      	adds	r4, #1
 8004e2e:	9305      	str	r3, [sp, #20]
 8004e30:	4619      	mov	r1, r3
 8004e32:	f04f 0c0a 	mov.w	ip, #10
 8004e36:	4620      	mov	r0, r4
 8004e38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e3c:	3a30      	subs	r2, #48	; 0x30
 8004e3e:	2a09      	cmp	r2, #9
 8004e40:	d903      	bls.n	8004e4a <_vfiprintf_r+0x1ee>
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d0c5      	beq.n	8004dd2 <_vfiprintf_r+0x176>
 8004e46:	9105      	str	r1, [sp, #20]
 8004e48:	e7c3      	b.n	8004dd2 <_vfiprintf_r+0x176>
 8004e4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e4e:	4604      	mov	r4, r0
 8004e50:	2301      	movs	r3, #1
 8004e52:	e7f0      	b.n	8004e36 <_vfiprintf_r+0x1da>
 8004e54:	ab03      	add	r3, sp, #12
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	462a      	mov	r2, r5
 8004e5a:	4b16      	ldr	r3, [pc, #88]	; (8004eb4 <_vfiprintf_r+0x258>)
 8004e5c:	a904      	add	r1, sp, #16
 8004e5e:	4630      	mov	r0, r6
 8004e60:	f3af 8000 	nop.w
 8004e64:	4607      	mov	r7, r0
 8004e66:	1c78      	adds	r0, r7, #1
 8004e68:	d1d6      	bne.n	8004e18 <_vfiprintf_r+0x1bc>
 8004e6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e6c:	07d9      	lsls	r1, r3, #31
 8004e6e:	d405      	bmi.n	8004e7c <_vfiprintf_r+0x220>
 8004e70:	89ab      	ldrh	r3, [r5, #12]
 8004e72:	059a      	lsls	r2, r3, #22
 8004e74:	d402      	bmi.n	8004e7c <_vfiprintf_r+0x220>
 8004e76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e78:	f7ff fdb7 	bl	80049ea <__retarget_lock_release_recursive>
 8004e7c:	89ab      	ldrh	r3, [r5, #12]
 8004e7e:	065b      	lsls	r3, r3, #25
 8004e80:	f53f af12 	bmi.w	8004ca8 <_vfiprintf_r+0x4c>
 8004e84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e86:	e711      	b.n	8004cac <_vfiprintf_r+0x50>
 8004e88:	ab03      	add	r3, sp, #12
 8004e8a:	9300      	str	r3, [sp, #0]
 8004e8c:	462a      	mov	r2, r5
 8004e8e:	4b09      	ldr	r3, [pc, #36]	; (8004eb4 <_vfiprintf_r+0x258>)
 8004e90:	a904      	add	r1, sp, #16
 8004e92:	4630      	mov	r0, r6
 8004e94:	f000 f880 	bl	8004f98 <_printf_i>
 8004e98:	e7e4      	b.n	8004e64 <_vfiprintf_r+0x208>
 8004e9a:	bf00      	nop
 8004e9c:	080055c0 	.word	0x080055c0
 8004ea0:	080055e0 	.word	0x080055e0
 8004ea4:	080055a0 	.word	0x080055a0
 8004ea8:	08005600 	.word	0x08005600
 8004eac:	0800560a 	.word	0x0800560a
 8004eb0:	00000000 	.word	0x00000000
 8004eb4:	08004c37 	.word	0x08004c37
 8004eb8:	08005606 	.word	0x08005606

08004ebc <_printf_common>:
 8004ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ec0:	4616      	mov	r6, r2
 8004ec2:	4699      	mov	r9, r3
 8004ec4:	688a      	ldr	r2, [r1, #8]
 8004ec6:	690b      	ldr	r3, [r1, #16]
 8004ec8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	bfb8      	it	lt
 8004ed0:	4613      	movlt	r3, r2
 8004ed2:	6033      	str	r3, [r6, #0]
 8004ed4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ed8:	4607      	mov	r7, r0
 8004eda:	460c      	mov	r4, r1
 8004edc:	b10a      	cbz	r2, 8004ee2 <_printf_common+0x26>
 8004ede:	3301      	adds	r3, #1
 8004ee0:	6033      	str	r3, [r6, #0]
 8004ee2:	6823      	ldr	r3, [r4, #0]
 8004ee4:	0699      	lsls	r1, r3, #26
 8004ee6:	bf42      	ittt	mi
 8004ee8:	6833      	ldrmi	r3, [r6, #0]
 8004eea:	3302      	addmi	r3, #2
 8004eec:	6033      	strmi	r3, [r6, #0]
 8004eee:	6825      	ldr	r5, [r4, #0]
 8004ef0:	f015 0506 	ands.w	r5, r5, #6
 8004ef4:	d106      	bne.n	8004f04 <_printf_common+0x48>
 8004ef6:	f104 0a19 	add.w	sl, r4, #25
 8004efa:	68e3      	ldr	r3, [r4, #12]
 8004efc:	6832      	ldr	r2, [r6, #0]
 8004efe:	1a9b      	subs	r3, r3, r2
 8004f00:	42ab      	cmp	r3, r5
 8004f02:	dc26      	bgt.n	8004f52 <_printf_common+0x96>
 8004f04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f08:	1e13      	subs	r3, r2, #0
 8004f0a:	6822      	ldr	r2, [r4, #0]
 8004f0c:	bf18      	it	ne
 8004f0e:	2301      	movne	r3, #1
 8004f10:	0692      	lsls	r2, r2, #26
 8004f12:	d42b      	bmi.n	8004f6c <_printf_common+0xb0>
 8004f14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f18:	4649      	mov	r1, r9
 8004f1a:	4638      	mov	r0, r7
 8004f1c:	47c0      	blx	r8
 8004f1e:	3001      	adds	r0, #1
 8004f20:	d01e      	beq.n	8004f60 <_printf_common+0xa4>
 8004f22:	6823      	ldr	r3, [r4, #0]
 8004f24:	68e5      	ldr	r5, [r4, #12]
 8004f26:	6832      	ldr	r2, [r6, #0]
 8004f28:	f003 0306 	and.w	r3, r3, #6
 8004f2c:	2b04      	cmp	r3, #4
 8004f2e:	bf08      	it	eq
 8004f30:	1aad      	subeq	r5, r5, r2
 8004f32:	68a3      	ldr	r3, [r4, #8]
 8004f34:	6922      	ldr	r2, [r4, #16]
 8004f36:	bf0c      	ite	eq
 8004f38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f3c:	2500      	movne	r5, #0
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	bfc4      	itt	gt
 8004f42:	1a9b      	subgt	r3, r3, r2
 8004f44:	18ed      	addgt	r5, r5, r3
 8004f46:	2600      	movs	r6, #0
 8004f48:	341a      	adds	r4, #26
 8004f4a:	42b5      	cmp	r5, r6
 8004f4c:	d11a      	bne.n	8004f84 <_printf_common+0xc8>
 8004f4e:	2000      	movs	r0, #0
 8004f50:	e008      	b.n	8004f64 <_printf_common+0xa8>
 8004f52:	2301      	movs	r3, #1
 8004f54:	4652      	mov	r2, sl
 8004f56:	4649      	mov	r1, r9
 8004f58:	4638      	mov	r0, r7
 8004f5a:	47c0      	blx	r8
 8004f5c:	3001      	adds	r0, #1
 8004f5e:	d103      	bne.n	8004f68 <_printf_common+0xac>
 8004f60:	f04f 30ff 	mov.w	r0, #4294967295
 8004f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f68:	3501      	adds	r5, #1
 8004f6a:	e7c6      	b.n	8004efa <_printf_common+0x3e>
 8004f6c:	18e1      	adds	r1, r4, r3
 8004f6e:	1c5a      	adds	r2, r3, #1
 8004f70:	2030      	movs	r0, #48	; 0x30
 8004f72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f76:	4422      	add	r2, r4
 8004f78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f80:	3302      	adds	r3, #2
 8004f82:	e7c7      	b.n	8004f14 <_printf_common+0x58>
 8004f84:	2301      	movs	r3, #1
 8004f86:	4622      	mov	r2, r4
 8004f88:	4649      	mov	r1, r9
 8004f8a:	4638      	mov	r0, r7
 8004f8c:	47c0      	blx	r8
 8004f8e:	3001      	adds	r0, #1
 8004f90:	d0e6      	beq.n	8004f60 <_printf_common+0xa4>
 8004f92:	3601      	adds	r6, #1
 8004f94:	e7d9      	b.n	8004f4a <_printf_common+0x8e>
	...

08004f98 <_printf_i>:
 8004f98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f9c:	460c      	mov	r4, r1
 8004f9e:	4691      	mov	r9, r2
 8004fa0:	7e27      	ldrb	r7, [r4, #24]
 8004fa2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004fa4:	2f78      	cmp	r7, #120	; 0x78
 8004fa6:	4680      	mov	r8, r0
 8004fa8:	469a      	mov	sl, r3
 8004faa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fae:	d807      	bhi.n	8004fc0 <_printf_i+0x28>
 8004fb0:	2f62      	cmp	r7, #98	; 0x62
 8004fb2:	d80a      	bhi.n	8004fca <_printf_i+0x32>
 8004fb4:	2f00      	cmp	r7, #0
 8004fb6:	f000 80d8 	beq.w	800516a <_printf_i+0x1d2>
 8004fba:	2f58      	cmp	r7, #88	; 0x58
 8004fbc:	f000 80a3 	beq.w	8005106 <_printf_i+0x16e>
 8004fc0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004fc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fc8:	e03a      	b.n	8005040 <_printf_i+0xa8>
 8004fca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fce:	2b15      	cmp	r3, #21
 8004fd0:	d8f6      	bhi.n	8004fc0 <_printf_i+0x28>
 8004fd2:	a001      	add	r0, pc, #4	; (adr r0, 8004fd8 <_printf_i+0x40>)
 8004fd4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004fd8:	08005031 	.word	0x08005031
 8004fdc:	08005045 	.word	0x08005045
 8004fe0:	08004fc1 	.word	0x08004fc1
 8004fe4:	08004fc1 	.word	0x08004fc1
 8004fe8:	08004fc1 	.word	0x08004fc1
 8004fec:	08004fc1 	.word	0x08004fc1
 8004ff0:	08005045 	.word	0x08005045
 8004ff4:	08004fc1 	.word	0x08004fc1
 8004ff8:	08004fc1 	.word	0x08004fc1
 8004ffc:	08004fc1 	.word	0x08004fc1
 8005000:	08004fc1 	.word	0x08004fc1
 8005004:	08005151 	.word	0x08005151
 8005008:	08005075 	.word	0x08005075
 800500c:	08005133 	.word	0x08005133
 8005010:	08004fc1 	.word	0x08004fc1
 8005014:	08004fc1 	.word	0x08004fc1
 8005018:	08005173 	.word	0x08005173
 800501c:	08004fc1 	.word	0x08004fc1
 8005020:	08005075 	.word	0x08005075
 8005024:	08004fc1 	.word	0x08004fc1
 8005028:	08004fc1 	.word	0x08004fc1
 800502c:	0800513b 	.word	0x0800513b
 8005030:	680b      	ldr	r3, [r1, #0]
 8005032:	1d1a      	adds	r2, r3, #4
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	600a      	str	r2, [r1, #0]
 8005038:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800503c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005040:	2301      	movs	r3, #1
 8005042:	e0a3      	b.n	800518c <_printf_i+0x1f4>
 8005044:	6825      	ldr	r5, [r4, #0]
 8005046:	6808      	ldr	r0, [r1, #0]
 8005048:	062e      	lsls	r6, r5, #24
 800504a:	f100 0304 	add.w	r3, r0, #4
 800504e:	d50a      	bpl.n	8005066 <_printf_i+0xce>
 8005050:	6805      	ldr	r5, [r0, #0]
 8005052:	600b      	str	r3, [r1, #0]
 8005054:	2d00      	cmp	r5, #0
 8005056:	da03      	bge.n	8005060 <_printf_i+0xc8>
 8005058:	232d      	movs	r3, #45	; 0x2d
 800505a:	426d      	negs	r5, r5
 800505c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005060:	485e      	ldr	r0, [pc, #376]	; (80051dc <_printf_i+0x244>)
 8005062:	230a      	movs	r3, #10
 8005064:	e019      	b.n	800509a <_printf_i+0x102>
 8005066:	f015 0f40 	tst.w	r5, #64	; 0x40
 800506a:	6805      	ldr	r5, [r0, #0]
 800506c:	600b      	str	r3, [r1, #0]
 800506e:	bf18      	it	ne
 8005070:	b22d      	sxthne	r5, r5
 8005072:	e7ef      	b.n	8005054 <_printf_i+0xbc>
 8005074:	680b      	ldr	r3, [r1, #0]
 8005076:	6825      	ldr	r5, [r4, #0]
 8005078:	1d18      	adds	r0, r3, #4
 800507a:	6008      	str	r0, [r1, #0]
 800507c:	0628      	lsls	r0, r5, #24
 800507e:	d501      	bpl.n	8005084 <_printf_i+0xec>
 8005080:	681d      	ldr	r5, [r3, #0]
 8005082:	e002      	b.n	800508a <_printf_i+0xf2>
 8005084:	0669      	lsls	r1, r5, #25
 8005086:	d5fb      	bpl.n	8005080 <_printf_i+0xe8>
 8005088:	881d      	ldrh	r5, [r3, #0]
 800508a:	4854      	ldr	r0, [pc, #336]	; (80051dc <_printf_i+0x244>)
 800508c:	2f6f      	cmp	r7, #111	; 0x6f
 800508e:	bf0c      	ite	eq
 8005090:	2308      	moveq	r3, #8
 8005092:	230a      	movne	r3, #10
 8005094:	2100      	movs	r1, #0
 8005096:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800509a:	6866      	ldr	r6, [r4, #4]
 800509c:	60a6      	str	r6, [r4, #8]
 800509e:	2e00      	cmp	r6, #0
 80050a0:	bfa2      	ittt	ge
 80050a2:	6821      	ldrge	r1, [r4, #0]
 80050a4:	f021 0104 	bicge.w	r1, r1, #4
 80050a8:	6021      	strge	r1, [r4, #0]
 80050aa:	b90d      	cbnz	r5, 80050b0 <_printf_i+0x118>
 80050ac:	2e00      	cmp	r6, #0
 80050ae:	d04d      	beq.n	800514c <_printf_i+0x1b4>
 80050b0:	4616      	mov	r6, r2
 80050b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80050b6:	fb03 5711 	mls	r7, r3, r1, r5
 80050ba:	5dc7      	ldrb	r7, [r0, r7]
 80050bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80050c0:	462f      	mov	r7, r5
 80050c2:	42bb      	cmp	r3, r7
 80050c4:	460d      	mov	r5, r1
 80050c6:	d9f4      	bls.n	80050b2 <_printf_i+0x11a>
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	d10b      	bne.n	80050e4 <_printf_i+0x14c>
 80050cc:	6823      	ldr	r3, [r4, #0]
 80050ce:	07df      	lsls	r7, r3, #31
 80050d0:	d508      	bpl.n	80050e4 <_printf_i+0x14c>
 80050d2:	6923      	ldr	r3, [r4, #16]
 80050d4:	6861      	ldr	r1, [r4, #4]
 80050d6:	4299      	cmp	r1, r3
 80050d8:	bfde      	ittt	le
 80050da:	2330      	movle	r3, #48	; 0x30
 80050dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80050e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80050e4:	1b92      	subs	r2, r2, r6
 80050e6:	6122      	str	r2, [r4, #16]
 80050e8:	f8cd a000 	str.w	sl, [sp]
 80050ec:	464b      	mov	r3, r9
 80050ee:	aa03      	add	r2, sp, #12
 80050f0:	4621      	mov	r1, r4
 80050f2:	4640      	mov	r0, r8
 80050f4:	f7ff fee2 	bl	8004ebc <_printf_common>
 80050f8:	3001      	adds	r0, #1
 80050fa:	d14c      	bne.n	8005196 <_printf_i+0x1fe>
 80050fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005100:	b004      	add	sp, #16
 8005102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005106:	4835      	ldr	r0, [pc, #212]	; (80051dc <_printf_i+0x244>)
 8005108:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800510c:	6823      	ldr	r3, [r4, #0]
 800510e:	680e      	ldr	r6, [r1, #0]
 8005110:	061f      	lsls	r7, r3, #24
 8005112:	f856 5b04 	ldr.w	r5, [r6], #4
 8005116:	600e      	str	r6, [r1, #0]
 8005118:	d514      	bpl.n	8005144 <_printf_i+0x1ac>
 800511a:	07d9      	lsls	r1, r3, #31
 800511c:	bf44      	itt	mi
 800511e:	f043 0320 	orrmi.w	r3, r3, #32
 8005122:	6023      	strmi	r3, [r4, #0]
 8005124:	b91d      	cbnz	r5, 800512e <_printf_i+0x196>
 8005126:	6823      	ldr	r3, [r4, #0]
 8005128:	f023 0320 	bic.w	r3, r3, #32
 800512c:	6023      	str	r3, [r4, #0]
 800512e:	2310      	movs	r3, #16
 8005130:	e7b0      	b.n	8005094 <_printf_i+0xfc>
 8005132:	6823      	ldr	r3, [r4, #0]
 8005134:	f043 0320 	orr.w	r3, r3, #32
 8005138:	6023      	str	r3, [r4, #0]
 800513a:	2378      	movs	r3, #120	; 0x78
 800513c:	4828      	ldr	r0, [pc, #160]	; (80051e0 <_printf_i+0x248>)
 800513e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005142:	e7e3      	b.n	800510c <_printf_i+0x174>
 8005144:	065e      	lsls	r6, r3, #25
 8005146:	bf48      	it	mi
 8005148:	b2ad      	uxthmi	r5, r5
 800514a:	e7e6      	b.n	800511a <_printf_i+0x182>
 800514c:	4616      	mov	r6, r2
 800514e:	e7bb      	b.n	80050c8 <_printf_i+0x130>
 8005150:	680b      	ldr	r3, [r1, #0]
 8005152:	6826      	ldr	r6, [r4, #0]
 8005154:	6960      	ldr	r0, [r4, #20]
 8005156:	1d1d      	adds	r5, r3, #4
 8005158:	600d      	str	r5, [r1, #0]
 800515a:	0635      	lsls	r5, r6, #24
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	d501      	bpl.n	8005164 <_printf_i+0x1cc>
 8005160:	6018      	str	r0, [r3, #0]
 8005162:	e002      	b.n	800516a <_printf_i+0x1d2>
 8005164:	0671      	lsls	r1, r6, #25
 8005166:	d5fb      	bpl.n	8005160 <_printf_i+0x1c8>
 8005168:	8018      	strh	r0, [r3, #0]
 800516a:	2300      	movs	r3, #0
 800516c:	6123      	str	r3, [r4, #16]
 800516e:	4616      	mov	r6, r2
 8005170:	e7ba      	b.n	80050e8 <_printf_i+0x150>
 8005172:	680b      	ldr	r3, [r1, #0]
 8005174:	1d1a      	adds	r2, r3, #4
 8005176:	600a      	str	r2, [r1, #0]
 8005178:	681e      	ldr	r6, [r3, #0]
 800517a:	6862      	ldr	r2, [r4, #4]
 800517c:	2100      	movs	r1, #0
 800517e:	4630      	mov	r0, r6
 8005180:	f7fb f826 	bl	80001d0 <memchr>
 8005184:	b108      	cbz	r0, 800518a <_printf_i+0x1f2>
 8005186:	1b80      	subs	r0, r0, r6
 8005188:	6060      	str	r0, [r4, #4]
 800518a:	6863      	ldr	r3, [r4, #4]
 800518c:	6123      	str	r3, [r4, #16]
 800518e:	2300      	movs	r3, #0
 8005190:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005194:	e7a8      	b.n	80050e8 <_printf_i+0x150>
 8005196:	6923      	ldr	r3, [r4, #16]
 8005198:	4632      	mov	r2, r6
 800519a:	4649      	mov	r1, r9
 800519c:	4640      	mov	r0, r8
 800519e:	47d0      	blx	sl
 80051a0:	3001      	adds	r0, #1
 80051a2:	d0ab      	beq.n	80050fc <_printf_i+0x164>
 80051a4:	6823      	ldr	r3, [r4, #0]
 80051a6:	079b      	lsls	r3, r3, #30
 80051a8:	d413      	bmi.n	80051d2 <_printf_i+0x23a>
 80051aa:	68e0      	ldr	r0, [r4, #12]
 80051ac:	9b03      	ldr	r3, [sp, #12]
 80051ae:	4298      	cmp	r0, r3
 80051b0:	bfb8      	it	lt
 80051b2:	4618      	movlt	r0, r3
 80051b4:	e7a4      	b.n	8005100 <_printf_i+0x168>
 80051b6:	2301      	movs	r3, #1
 80051b8:	4632      	mov	r2, r6
 80051ba:	4649      	mov	r1, r9
 80051bc:	4640      	mov	r0, r8
 80051be:	47d0      	blx	sl
 80051c0:	3001      	adds	r0, #1
 80051c2:	d09b      	beq.n	80050fc <_printf_i+0x164>
 80051c4:	3501      	adds	r5, #1
 80051c6:	68e3      	ldr	r3, [r4, #12]
 80051c8:	9903      	ldr	r1, [sp, #12]
 80051ca:	1a5b      	subs	r3, r3, r1
 80051cc:	42ab      	cmp	r3, r5
 80051ce:	dcf2      	bgt.n	80051b6 <_printf_i+0x21e>
 80051d0:	e7eb      	b.n	80051aa <_printf_i+0x212>
 80051d2:	2500      	movs	r5, #0
 80051d4:	f104 0619 	add.w	r6, r4, #25
 80051d8:	e7f5      	b.n	80051c6 <_printf_i+0x22e>
 80051da:	bf00      	nop
 80051dc:	08005611 	.word	0x08005611
 80051e0:	08005622 	.word	0x08005622

080051e4 <_putc_r>:
 80051e4:	b570      	push	{r4, r5, r6, lr}
 80051e6:	460d      	mov	r5, r1
 80051e8:	4614      	mov	r4, r2
 80051ea:	4606      	mov	r6, r0
 80051ec:	b118      	cbz	r0, 80051f6 <_putc_r+0x12>
 80051ee:	6983      	ldr	r3, [r0, #24]
 80051f0:	b90b      	cbnz	r3, 80051f6 <_putc_r+0x12>
 80051f2:	f7ff fb5b 	bl	80048ac <__sinit>
 80051f6:	4b1c      	ldr	r3, [pc, #112]	; (8005268 <_putc_r+0x84>)
 80051f8:	429c      	cmp	r4, r3
 80051fa:	d124      	bne.n	8005246 <_putc_r+0x62>
 80051fc:	6874      	ldr	r4, [r6, #4]
 80051fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005200:	07d8      	lsls	r0, r3, #31
 8005202:	d405      	bmi.n	8005210 <_putc_r+0x2c>
 8005204:	89a3      	ldrh	r3, [r4, #12]
 8005206:	0599      	lsls	r1, r3, #22
 8005208:	d402      	bmi.n	8005210 <_putc_r+0x2c>
 800520a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800520c:	f7ff fbec 	bl	80049e8 <__retarget_lock_acquire_recursive>
 8005210:	68a3      	ldr	r3, [r4, #8]
 8005212:	3b01      	subs	r3, #1
 8005214:	2b00      	cmp	r3, #0
 8005216:	60a3      	str	r3, [r4, #8]
 8005218:	da05      	bge.n	8005226 <_putc_r+0x42>
 800521a:	69a2      	ldr	r2, [r4, #24]
 800521c:	4293      	cmp	r3, r2
 800521e:	db1c      	blt.n	800525a <_putc_r+0x76>
 8005220:	b2eb      	uxtb	r3, r5
 8005222:	2b0a      	cmp	r3, #10
 8005224:	d019      	beq.n	800525a <_putc_r+0x76>
 8005226:	6823      	ldr	r3, [r4, #0]
 8005228:	1c5a      	adds	r2, r3, #1
 800522a:	6022      	str	r2, [r4, #0]
 800522c:	701d      	strb	r5, [r3, #0]
 800522e:	b2ed      	uxtb	r5, r5
 8005230:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005232:	07da      	lsls	r2, r3, #31
 8005234:	d405      	bmi.n	8005242 <_putc_r+0x5e>
 8005236:	89a3      	ldrh	r3, [r4, #12]
 8005238:	059b      	lsls	r3, r3, #22
 800523a:	d402      	bmi.n	8005242 <_putc_r+0x5e>
 800523c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800523e:	f7ff fbd4 	bl	80049ea <__retarget_lock_release_recursive>
 8005242:	4628      	mov	r0, r5
 8005244:	bd70      	pop	{r4, r5, r6, pc}
 8005246:	4b09      	ldr	r3, [pc, #36]	; (800526c <_putc_r+0x88>)
 8005248:	429c      	cmp	r4, r3
 800524a:	d101      	bne.n	8005250 <_putc_r+0x6c>
 800524c:	68b4      	ldr	r4, [r6, #8]
 800524e:	e7d6      	b.n	80051fe <_putc_r+0x1a>
 8005250:	4b07      	ldr	r3, [pc, #28]	; (8005270 <_putc_r+0x8c>)
 8005252:	429c      	cmp	r4, r3
 8005254:	bf08      	it	eq
 8005256:	68f4      	ldreq	r4, [r6, #12]
 8005258:	e7d1      	b.n	80051fe <_putc_r+0x1a>
 800525a:	4629      	mov	r1, r5
 800525c:	4622      	mov	r2, r4
 800525e:	4630      	mov	r0, r6
 8005260:	f7ff f94a 	bl	80044f8 <__swbuf_r>
 8005264:	4605      	mov	r5, r0
 8005266:	e7e3      	b.n	8005230 <_putc_r+0x4c>
 8005268:	080055c0 	.word	0x080055c0
 800526c:	080055e0 	.word	0x080055e0
 8005270:	080055a0 	.word	0x080055a0

08005274 <_sbrk_r>:
 8005274:	b538      	push	{r3, r4, r5, lr}
 8005276:	4d06      	ldr	r5, [pc, #24]	; (8005290 <_sbrk_r+0x1c>)
 8005278:	2300      	movs	r3, #0
 800527a:	4604      	mov	r4, r0
 800527c:	4608      	mov	r0, r1
 800527e:	602b      	str	r3, [r5, #0]
 8005280:	f7fb fc00 	bl	8000a84 <_sbrk>
 8005284:	1c43      	adds	r3, r0, #1
 8005286:	d102      	bne.n	800528e <_sbrk_r+0x1a>
 8005288:	682b      	ldr	r3, [r5, #0]
 800528a:	b103      	cbz	r3, 800528e <_sbrk_r+0x1a>
 800528c:	6023      	str	r3, [r4, #0]
 800528e:	bd38      	pop	{r3, r4, r5, pc}
 8005290:	20001204 	.word	0x20001204

08005294 <__sread>:
 8005294:	b510      	push	{r4, lr}
 8005296:	460c      	mov	r4, r1
 8005298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800529c:	f000 f8a0 	bl	80053e0 <_read_r>
 80052a0:	2800      	cmp	r0, #0
 80052a2:	bfab      	itete	ge
 80052a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80052a6:	89a3      	ldrhlt	r3, [r4, #12]
 80052a8:	181b      	addge	r3, r3, r0
 80052aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80052ae:	bfac      	ite	ge
 80052b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80052b2:	81a3      	strhlt	r3, [r4, #12]
 80052b4:	bd10      	pop	{r4, pc}

080052b6 <__swrite>:
 80052b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052ba:	461f      	mov	r7, r3
 80052bc:	898b      	ldrh	r3, [r1, #12]
 80052be:	05db      	lsls	r3, r3, #23
 80052c0:	4605      	mov	r5, r0
 80052c2:	460c      	mov	r4, r1
 80052c4:	4616      	mov	r6, r2
 80052c6:	d505      	bpl.n	80052d4 <__swrite+0x1e>
 80052c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052cc:	2302      	movs	r3, #2
 80052ce:	2200      	movs	r2, #0
 80052d0:	f000 f868 	bl	80053a4 <_lseek_r>
 80052d4:	89a3      	ldrh	r3, [r4, #12]
 80052d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052de:	81a3      	strh	r3, [r4, #12]
 80052e0:	4632      	mov	r2, r6
 80052e2:	463b      	mov	r3, r7
 80052e4:	4628      	mov	r0, r5
 80052e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052ea:	f000 b817 	b.w	800531c <_write_r>

080052ee <__sseek>:
 80052ee:	b510      	push	{r4, lr}
 80052f0:	460c      	mov	r4, r1
 80052f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052f6:	f000 f855 	bl	80053a4 <_lseek_r>
 80052fa:	1c43      	adds	r3, r0, #1
 80052fc:	89a3      	ldrh	r3, [r4, #12]
 80052fe:	bf15      	itete	ne
 8005300:	6560      	strne	r0, [r4, #84]	; 0x54
 8005302:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005306:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800530a:	81a3      	strheq	r3, [r4, #12]
 800530c:	bf18      	it	ne
 800530e:	81a3      	strhne	r3, [r4, #12]
 8005310:	bd10      	pop	{r4, pc}

08005312 <__sclose>:
 8005312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005316:	f000 b813 	b.w	8005340 <_close_r>
	...

0800531c <_write_r>:
 800531c:	b538      	push	{r3, r4, r5, lr}
 800531e:	4d07      	ldr	r5, [pc, #28]	; (800533c <_write_r+0x20>)
 8005320:	4604      	mov	r4, r0
 8005322:	4608      	mov	r0, r1
 8005324:	4611      	mov	r1, r2
 8005326:	2200      	movs	r2, #0
 8005328:	602a      	str	r2, [r5, #0]
 800532a:	461a      	mov	r2, r3
 800532c:	f7fb fa57 	bl	80007de <_write>
 8005330:	1c43      	adds	r3, r0, #1
 8005332:	d102      	bne.n	800533a <_write_r+0x1e>
 8005334:	682b      	ldr	r3, [r5, #0]
 8005336:	b103      	cbz	r3, 800533a <_write_r+0x1e>
 8005338:	6023      	str	r3, [r4, #0]
 800533a:	bd38      	pop	{r3, r4, r5, pc}
 800533c:	20001204 	.word	0x20001204

08005340 <_close_r>:
 8005340:	b538      	push	{r3, r4, r5, lr}
 8005342:	4d06      	ldr	r5, [pc, #24]	; (800535c <_close_r+0x1c>)
 8005344:	2300      	movs	r3, #0
 8005346:	4604      	mov	r4, r0
 8005348:	4608      	mov	r0, r1
 800534a:	602b      	str	r3, [r5, #0]
 800534c:	f7fb fb65 	bl	8000a1a <_close>
 8005350:	1c43      	adds	r3, r0, #1
 8005352:	d102      	bne.n	800535a <_close_r+0x1a>
 8005354:	682b      	ldr	r3, [r5, #0]
 8005356:	b103      	cbz	r3, 800535a <_close_r+0x1a>
 8005358:	6023      	str	r3, [r4, #0]
 800535a:	bd38      	pop	{r3, r4, r5, pc}
 800535c:	20001204 	.word	0x20001204

08005360 <_fstat_r>:
 8005360:	b538      	push	{r3, r4, r5, lr}
 8005362:	4d07      	ldr	r5, [pc, #28]	; (8005380 <_fstat_r+0x20>)
 8005364:	2300      	movs	r3, #0
 8005366:	4604      	mov	r4, r0
 8005368:	4608      	mov	r0, r1
 800536a:	4611      	mov	r1, r2
 800536c:	602b      	str	r3, [r5, #0]
 800536e:	f7fb fb60 	bl	8000a32 <_fstat>
 8005372:	1c43      	adds	r3, r0, #1
 8005374:	d102      	bne.n	800537c <_fstat_r+0x1c>
 8005376:	682b      	ldr	r3, [r5, #0]
 8005378:	b103      	cbz	r3, 800537c <_fstat_r+0x1c>
 800537a:	6023      	str	r3, [r4, #0]
 800537c:	bd38      	pop	{r3, r4, r5, pc}
 800537e:	bf00      	nop
 8005380:	20001204 	.word	0x20001204

08005384 <_isatty_r>:
 8005384:	b538      	push	{r3, r4, r5, lr}
 8005386:	4d06      	ldr	r5, [pc, #24]	; (80053a0 <_isatty_r+0x1c>)
 8005388:	2300      	movs	r3, #0
 800538a:	4604      	mov	r4, r0
 800538c:	4608      	mov	r0, r1
 800538e:	602b      	str	r3, [r5, #0]
 8005390:	f7fb fb5f 	bl	8000a52 <_isatty>
 8005394:	1c43      	adds	r3, r0, #1
 8005396:	d102      	bne.n	800539e <_isatty_r+0x1a>
 8005398:	682b      	ldr	r3, [r5, #0]
 800539a:	b103      	cbz	r3, 800539e <_isatty_r+0x1a>
 800539c:	6023      	str	r3, [r4, #0]
 800539e:	bd38      	pop	{r3, r4, r5, pc}
 80053a0:	20001204 	.word	0x20001204

080053a4 <_lseek_r>:
 80053a4:	b538      	push	{r3, r4, r5, lr}
 80053a6:	4d07      	ldr	r5, [pc, #28]	; (80053c4 <_lseek_r+0x20>)
 80053a8:	4604      	mov	r4, r0
 80053aa:	4608      	mov	r0, r1
 80053ac:	4611      	mov	r1, r2
 80053ae:	2200      	movs	r2, #0
 80053b0:	602a      	str	r2, [r5, #0]
 80053b2:	461a      	mov	r2, r3
 80053b4:	f7fb fb58 	bl	8000a68 <_lseek>
 80053b8:	1c43      	adds	r3, r0, #1
 80053ba:	d102      	bne.n	80053c2 <_lseek_r+0x1e>
 80053bc:	682b      	ldr	r3, [r5, #0]
 80053be:	b103      	cbz	r3, 80053c2 <_lseek_r+0x1e>
 80053c0:	6023      	str	r3, [r4, #0]
 80053c2:	bd38      	pop	{r3, r4, r5, pc}
 80053c4:	20001204 	.word	0x20001204

080053c8 <__malloc_lock>:
 80053c8:	4801      	ldr	r0, [pc, #4]	; (80053d0 <__malloc_lock+0x8>)
 80053ca:	f7ff bb0d 	b.w	80049e8 <__retarget_lock_acquire_recursive>
 80053ce:	bf00      	nop
 80053d0:	200011fc 	.word	0x200011fc

080053d4 <__malloc_unlock>:
 80053d4:	4801      	ldr	r0, [pc, #4]	; (80053dc <__malloc_unlock+0x8>)
 80053d6:	f7ff bb08 	b.w	80049ea <__retarget_lock_release_recursive>
 80053da:	bf00      	nop
 80053dc:	200011fc 	.word	0x200011fc

080053e0 <_read_r>:
 80053e0:	b538      	push	{r3, r4, r5, lr}
 80053e2:	4d07      	ldr	r5, [pc, #28]	; (8005400 <_read_r+0x20>)
 80053e4:	4604      	mov	r4, r0
 80053e6:	4608      	mov	r0, r1
 80053e8:	4611      	mov	r1, r2
 80053ea:	2200      	movs	r2, #0
 80053ec:	602a      	str	r2, [r5, #0]
 80053ee:	461a      	mov	r2, r3
 80053f0:	f7fb faf6 	bl	80009e0 <_read>
 80053f4:	1c43      	adds	r3, r0, #1
 80053f6:	d102      	bne.n	80053fe <_read_r+0x1e>
 80053f8:	682b      	ldr	r3, [r5, #0]
 80053fa:	b103      	cbz	r3, 80053fe <_read_r+0x1e>
 80053fc:	6023      	str	r3, [r4, #0]
 80053fe:	bd38      	pop	{r3, r4, r5, pc}
 8005400:	20001204 	.word	0x20001204

08005404 <_init>:
 8005404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005406:	bf00      	nop
 8005408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800540a:	bc08      	pop	{r3}
 800540c:	469e      	mov	lr, r3
 800540e:	4770      	bx	lr

08005410 <_fini>:
 8005410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005412:	bf00      	nop
 8005414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005416:	bc08      	pop	{r3}
 8005418:	469e      	mov	lr, r3
 800541a:	4770      	bx	lr
