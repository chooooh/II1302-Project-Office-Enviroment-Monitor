
OEM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000535c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  080054ec  080054ec  000154ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005888  08005888  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005888  08005888  00015888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005890  08005890  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005890  08005890  00015890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005894  08005894  00015894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005898  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000054c  20000070  08005908  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005bc  08005908  000205bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b40  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b47  00000000  00000000  00032be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  00035728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b78  00000000  00000000  000363b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029592  00000000  00000000  00036f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef3f  00000000  00000000  000604c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106609  00000000  00000000  0006f401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00175a0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039a0  00000000  00000000  00175a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080054d4 	.word	0x080054d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080054d4 	.word	0x080054d4

080001d0 <setjmp>:
 80001d0:	46ec      	mov	ip, sp
 80001d2:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80001d6:	f04f 0000 	mov.w	r0, #0
 80001da:	4770      	bx	lr

080001dc <longjmp>:
 80001dc:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80001e0:	46e5      	mov	sp, ip
 80001e2:	0008      	movs	r0, r1
 80001e4:	bf08      	it	eq
 80001e6:	2001      	moveq	r0, #1
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr
 80001fc:	0000      	movs	r0, r0
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <init_uart_interrupt>:

static uint8_t rx_variable;
static char rx_buffer[RX_BUFFER_SIZE];
static uint8_t rx_buffer_index = 0;

void init_uart_interrupt(void){
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart4, &rx_variable, 1);
 800059c:	2201      	movs	r2, #1
 800059e:	4903      	ldr	r1, [pc, #12]	; (80005ac <init_uart_interrupt+0x14>)
 80005a0:	4803      	ldr	r0, [pc, #12]	; (80005b0 <init_uart_interrupt+0x18>)
 80005a2:	f002 ff03 	bl	80033ac <HAL_UART_Receive_IT>
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	2000008e 	.word	0x2000008e
 80005b0:	20000524 	.word	0x20000524

080005b4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]

   if (huart->Instance == UART4) {
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a0b      	ldr	r2, [pc, #44]	; (80005f0 <HAL_UART_RxCpltCallback+0x3c>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d10a      	bne.n	80005dc <HAL_UART_RxCpltCallback+0x28>
      rx_buffer[rx_buffer_index++] = rx_variable;    // Add 1 byte to Rx_Buffer
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <HAL_UART_RxCpltCallback+0x40>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	1c5a      	adds	r2, r3, #1
 80005cc:	b2d1      	uxtb	r1, r2
 80005ce:	4a09      	ldr	r2, [pc, #36]	; (80005f4 <HAL_UART_RxCpltCallback+0x40>)
 80005d0:	7011      	strb	r1, [r2, #0]
 80005d2:	461a      	mov	r2, r3
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <HAL_UART_RxCpltCallback+0x44>)
 80005d6:	7819      	ldrb	r1, [r3, #0]
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <HAL_UART_RxCpltCallback+0x48>)
 80005da:	5499      	strb	r1, [r3, r2]
    }
      HAL_UART_Receive_IT(&huart4, &rx_variable, 1);
 80005dc:	2201      	movs	r2, #1
 80005de:	4906      	ldr	r1, [pc, #24]	; (80005f8 <HAL_UART_RxCpltCallback+0x44>)
 80005e0:	4807      	ldr	r0, [pc, #28]	; (8000600 <HAL_UART_RxCpltCallback+0x4c>)
 80005e2:	f002 fee3 	bl	80033ac <HAL_UART_Receive_IT>
}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40004c00 	.word	0x40004c00
 80005f4:	20000490 	.word	0x20000490
 80005f8:	2000008e 	.word	0x2000008e
 80005fc:	20000090 	.word	0x20000090
 8000600:	20000524 	.word	0x20000524

08000604 <hash>:

/* djb2 hashing algorithm */
const unsigned long hash(const char *str) {
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
    unsigned long hash = 5381;
 800060c:	f241 5305 	movw	r3, #5381	; 0x1505
 8000610:	60fb      	str	r3, [r7, #12]
    int c;

    while ((c = *str++))
 8000612:	e006      	b.n	8000622 <hash+0x1e>
        hash = ((hash << 5) + hash) + c;
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	015a      	lsls	r2, r3, #5
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	441a      	add	r2, r3
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	4413      	add	r3, r2
 8000620:	60fb      	str	r3, [r7, #12]
    while ((c = *str++))
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	1c5a      	adds	r2, r3, #1
 8000626:	607a      	str	r2, [r7, #4]
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d1f0      	bne.n	8000614 <hash+0x10>
    return hash;
 8000632:	68fb      	ldr	r3, [r7, #12]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3714      	adds	r7, #20
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr

08000640 <uart_send>:

char* uart_send(const char* command){
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	rx_buffer_index = 0;
 8000648:	4b6f      	ldr	r3, [pc, #444]	; (8000808 <uart_send+0x1c8>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
	ERROR_FLAG = false;
 800064e:	4b6f      	ldr	r3, [pc, #444]	; (800080c <uart_send+0x1cc>)
 8000650:	2200      	movs	r2, #0
 8000652:	701a      	strb	r2, [r3, #0]
	FAIL_FLAG = false;
 8000654:	4b6e      	ldr	r3, [pc, #440]	; (8000810 <uart_send+0x1d0>)
 8000656:	2200      	movs	r2, #0
 8000658:	701a      	strb	r2, [r3, #0]
	memset(rx_buffer, 0, RX_BUFFER_SIZE);
 800065a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800065e:	2100      	movs	r1, #0
 8000660:	486c      	ldr	r0, [pc, #432]	; (8000814 <uart_send+0x1d4>)
 8000662:	f003 feed 	bl	8004440 <memset>
	HAL_UART_Transmit(&huart4, (uint8_t*) command, strlen(command), 100);
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f7ff fdc0 	bl	80001ec <strlen>
 800066c:	4603      	mov	r3, r0
 800066e:	b29a      	uxth	r2, r3
 8000670:	2364      	movs	r3, #100	; 0x64
 8000672:	6879      	ldr	r1, [r7, #4]
 8000674:	4868      	ldr	r0, [pc, #416]	; (8000818 <uart_send+0x1d8>)
 8000676:	f002 fe05 	bl	8003284 <HAL_UART_Transmit>

	// wait for OK or ERROR/FAIL
	while((strstr(rx_buffer, "OK\r\n") == NULL)){
 800067a:	e015      	b.n	80006a8 <uart_send+0x68>
		if(strstr(rx_buffer, "ERROR") != NULL){
 800067c:	4967      	ldr	r1, [pc, #412]	; (800081c <uart_send+0x1dc>)
 800067e:	4865      	ldr	r0, [pc, #404]	; (8000814 <uart_send+0x1d4>)
 8000680:	f003 ff8a 	bl	8004598 <strstr>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d003      	beq.n	8000692 <uart_send+0x52>
			ERROR_FLAG = true;
 800068a:	4b60      	ldr	r3, [pc, #384]	; (800080c <uart_send+0x1cc>)
 800068c:	2201      	movs	r2, #1
 800068e:	701a      	strb	r2, [r3, #0]
			break;
 8000690:	e011      	b.n	80006b6 <uart_send+0x76>
		}
		if(strstr(rx_buffer, "FAIL") != NULL){
 8000692:	4963      	ldr	r1, [pc, #396]	; (8000820 <uart_send+0x1e0>)
 8000694:	485f      	ldr	r0, [pc, #380]	; (8000814 <uart_send+0x1d4>)
 8000696:	f003 ff7f 	bl	8004598 <strstr>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d003      	beq.n	80006a8 <uart_send+0x68>
			FAIL_FLAG = true;
 80006a0:	4b5b      	ldr	r3, [pc, #364]	; (8000810 <uart_send+0x1d0>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	701a      	strb	r2, [r3, #0]
			break;
 80006a6:	e006      	b.n	80006b6 <uart_send+0x76>
	while((strstr(rx_buffer, "OK\r\n") == NULL)){
 80006a8:	495e      	ldr	r1, [pc, #376]	; (8000824 <uart_send+0x1e4>)
 80006aa:	485a      	ldr	r0, [pc, #360]	; (8000814 <uart_send+0x1d4>)
 80006ac:	f003 ff74 	bl	8004598 <strstr>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d0e2      	beq.n	800067c <uart_send+0x3c>
		}
	}

	switch (hash(command)) {
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f7ff ffa4 	bl	8000604 <hash>
 80006bc:	4603      	mov	r3, r0
 80006be:	4a5a      	ldr	r2, [pc, #360]	; (8000828 <uart_send+0x1e8>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d05f      	beq.n	8000784 <uart_send+0x144>
 80006c4:	4a58      	ldr	r2, [pc, #352]	; (8000828 <uart_send+0x1e8>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	f200 8098 	bhi.w	80007fc <uart_send+0x1bc>
 80006cc:	4a57      	ldr	r2, [pc, #348]	; (800082c <uart_send+0x1ec>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d024      	beq.n	800071c <uart_send+0xdc>
 80006d2:	4a56      	ldr	r2, [pc, #344]	; (800082c <uart_send+0x1ec>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	f200 8091 	bhi.w	80007fc <uart_send+0x1bc>
 80006da:	4a55      	ldr	r2, [pc, #340]	; (8000830 <uart_send+0x1f0>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d078      	beq.n	80007d2 <uart_send+0x192>
 80006e0:	4a53      	ldr	r2, [pc, #332]	; (8000830 <uart_send+0x1f0>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	f200 808a 	bhi.w	80007fc <uart_send+0x1bc>
 80006e8:	4a52      	ldr	r2, [pc, #328]	; (8000834 <uart_send+0x1f4>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d02a      	beq.n	8000744 <uart_send+0x104>
 80006ee:	4a51      	ldr	r2, [pc, #324]	; (8000834 <uart_send+0x1f4>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	f200 8083 	bhi.w	80007fc <uart_send+0x1bc>
 80006f6:	4a50      	ldr	r2, [pc, #320]	; (8000838 <uart_send+0x1f8>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d02d      	beq.n	8000758 <uart_send+0x118>
 80006fc:	4a4e      	ldr	r2, [pc, #312]	; (8000838 <uart_send+0x1f8>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d87c      	bhi.n	80007fc <uart_send+0x1bc>
 8000702:	4a4e      	ldr	r2, [pc, #312]	; (800083c <uart_send+0x1fc>)
 8000704:	4293      	cmp	r3, r2
 8000706:	d013      	beq.n	8000730 <uart_send+0xf0>
 8000708:	4a4c      	ldr	r2, [pc, #304]	; (800083c <uart_send+0x1fc>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d876      	bhi.n	80007fc <uart_send+0x1bc>
 800070e:	4a4c      	ldr	r2, [pc, #304]	; (8000840 <uart_send+0x200>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d035      	beq.n	8000780 <uart_send+0x140>
 8000714:	4a4b      	ldr	r2, [pc, #300]	; (8000844 <uart_send+0x204>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d028      	beq.n	800076c <uart_send+0x12c>
 800071a:	e06f      	b.n	80007fc <uart_send+0x1bc>

		case ESP8266_AT_KEY:
			return evaluate(ERROR_FLAG, FAIL_FLAG);
 800071c:	4b3b      	ldr	r3, [pc, #236]	; (800080c <uart_send+0x1cc>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	4a3b      	ldr	r2, [pc, #236]	; (8000810 <uart_send+0x1d0>)
 8000722:	7812      	ldrb	r2, [r2, #0]
 8000724:	4611      	mov	r1, r2
 8000726:	4618      	mov	r0, r3
 8000728:	f000 f8a4 	bl	8000874 <evaluate>
 800072c:	4603      	mov	r3, r0
 800072e:	e066      	b.n	80007fe <uart_send+0x1be>

		case ESP8266_AT_GMR_KEY:
			return evaluate(ERROR_FLAG, FAIL_FLAG);
 8000730:	4b36      	ldr	r3, [pc, #216]	; (800080c <uart_send+0x1cc>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	4a36      	ldr	r2, [pc, #216]	; (8000810 <uart_send+0x1d0>)
 8000736:	7812      	ldrb	r2, [r2, #0]
 8000738:	4611      	mov	r1, r2
 800073a:	4618      	mov	r0, r3
 800073c:	f000 f89a 	bl	8000874 <evaluate>
 8000740:	4603      	mov	r3, r0
 8000742:	e05c      	b.n	80007fe <uart_send+0x1be>

		case ESP8266_AT_RST_KEY:
			return evaluate(ERROR_FLAG, FAIL_FLAG);
 8000744:	4b31      	ldr	r3, [pc, #196]	; (800080c <uart_send+0x1cc>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	4a31      	ldr	r2, [pc, #196]	; (8000810 <uart_send+0x1d0>)
 800074a:	7812      	ldrb	r2, [r2, #0]
 800074c:	4611      	mov	r1, r2
 800074e:	4618      	mov	r0, r3
 8000750:	f000 f890 	bl	8000874 <evaluate>
 8000754:	4603      	mov	r3, r0
 8000756:	e052      	b.n	80007fe <uart_send+0x1be>

		case ESP8266_AT_CWMODE_STATION_MODE_KEY:
			return evaluate(ERROR_FLAG, FAIL_FLAG);
 8000758:	4b2c      	ldr	r3, [pc, #176]	; (800080c <uart_send+0x1cc>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	4a2c      	ldr	r2, [pc, #176]	; (8000810 <uart_send+0x1d0>)
 800075e:	7812      	ldrb	r2, [r2, #0]
 8000760:	4611      	mov	r1, r2
 8000762:	4618      	mov	r0, r3
 8000764:	f000 f886 	bl	8000874 <evaluate>
 8000768:	4603      	mov	r3, r0
 800076a:	e048      	b.n	80007fe <uart_send+0x1be>

		case ESP8266_AT_CWQAP_KEY:
			return evaluate(ERROR_FLAG, FAIL_FLAG);
 800076c:	4b27      	ldr	r3, [pc, #156]	; (800080c <uart_send+0x1cc>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	4a27      	ldr	r2, [pc, #156]	; (8000810 <uart_send+0x1d0>)
 8000772:	7812      	ldrb	r2, [r2, #0]
 8000774:	4611      	mov	r1, r2
 8000776:	4618      	mov	r0, r3
 8000778:	f000 f87c 	bl	8000874 <evaluate>
 800077c:	4603      	mov	r3, r0
 800077e:	e03e      	b.n	80007fe <uart_send+0x1be>

		case ESP8266_DEBUG_KEY:
			return rx_buffer;
 8000780:	4b24      	ldr	r3, [pc, #144]	; (8000814 <uart_send+0x1d4>)
 8000782:	e03c      	b.n	80007fe <uart_send+0x1be>

		case ESP8266_AT_CWMODE_TEST_KEY:
			if(ERROR_FLAG || FAIL_FLAG)
 8000784:	4b21      	ldr	r3, [pc, #132]	; (800080c <uart_send+0x1cc>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d103      	bne.n	8000794 <uart_send+0x154>
 800078c:	4b20      	ldr	r3, [pc, #128]	; (8000810 <uart_send+0x1d0>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <uart_send+0x158>
				return "ERROR";
 8000794:	4b21      	ldr	r3, [pc, #132]	; (800081c <uart_send+0x1dc>)
 8000796:	e032      	b.n	80007fe <uart_send+0x1be>
			else {
				if (strstr(rx_buffer, "CWMODE_CUR:1") != NULL)
 8000798:	492b      	ldr	r1, [pc, #172]	; (8000848 <uart_send+0x208>)
 800079a:	481e      	ldr	r0, [pc, #120]	; (8000814 <uart_send+0x1d4>)
 800079c:	f003 fefc 	bl	8004598 <strstr>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <uart_send+0x16a>
					return "CWMODE:1";
 80007a6:	4b29      	ldr	r3, [pc, #164]	; (800084c <uart_send+0x20c>)
 80007a8:	e029      	b.n	80007fe <uart_send+0x1be>
				else if(strstr(rx_buffer, "CWMODE_CUR:2") != NULL)
 80007aa:	4929      	ldr	r1, [pc, #164]	; (8000850 <uart_send+0x210>)
 80007ac:	4819      	ldr	r0, [pc, #100]	; (8000814 <uart_send+0x1d4>)
 80007ae:	f003 fef3 	bl	8004598 <strstr>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <uart_send+0x17c>
					return "CWMODE:2";
 80007b8:	4b26      	ldr	r3, [pc, #152]	; (8000854 <uart_send+0x214>)
 80007ba:	e020      	b.n	80007fe <uart_send+0x1be>
				else if(strstr(rx_buffer, "CWMODE_CUR:3") != NULL)
 80007bc:	4926      	ldr	r1, [pc, #152]	; (8000858 <uart_send+0x218>)
 80007be:	4815      	ldr	r0, [pc, #84]	; (8000814 <uart_send+0x1d4>)
 80007c0:	f003 feea 	bl	8004598 <strstr>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <uart_send+0x18e>
					return "CWMODE:3";
 80007ca:	4b24      	ldr	r3, [pc, #144]	; (800085c <uart_send+0x21c>)
 80007cc:	e017      	b.n	80007fe <uart_send+0x1be>
				else
					return "CWMODE:?";
 80007ce:	4b24      	ldr	r3, [pc, #144]	; (8000860 <uart_send+0x220>)
 80007d0:	e015      	b.n	80007fe <uart_send+0x1be>
			}

		case ESP8266_AT_CWJAP_TEST_KEY:
			if(ERROR_FLAG || FAIL_FLAG)
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <uart_send+0x1cc>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d103      	bne.n	80007e2 <uart_send+0x1a2>
 80007da:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <uart_send+0x1d0>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <uart_send+0x1a6>
				return "ERROR";
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <uart_send+0x1dc>)
 80007e4:	e00b      	b.n	80007fe <uart_send+0x1be>
			else {
				if(strstr(rx_buffer, "No AP\r\n"))
 80007e6:	491f      	ldr	r1, [pc, #124]	; (8000864 <uart_send+0x224>)
 80007e8:	480a      	ldr	r0, [pc, #40]	; (8000814 <uart_send+0x1d4>)
 80007ea:	f003 fed5 	bl	8004598 <strstr>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <uart_send+0x1b8>
					return "NO AP";
 80007f4:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <uart_send+0x228>)
 80007f6:	e002      	b.n	80007fe <uart_send+0x1be>
				else
					return "CONNECTED";
 80007f8:	4b1c      	ldr	r3, [pc, #112]	; (800086c <uart_send+0x22c>)
 80007fa:	e000      	b.n	80007fe <uart_send+0x1be>
				else
					return "CWJAP:?";

			}*/
		default:
			return "not implemented";
 80007fc:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <uart_send+0x230>)
			break;
	}
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000490 	.word	0x20000490
 800080c:	2000008c 	.word	0x2000008c
 8000810:	2000008d 	.word	0x2000008d
 8000814:	20000090 	.word	0x20000090
 8000818:	20000524 	.word	0x20000524
 800081c:	080054ec 	.word	0x080054ec
 8000820:	080054f4 	.word	0x080054f4
 8000824:	080054fc 	.word	0x080054fc
 8000828:	f5600f43 	.word	0xf5600f43
 800082c:	7c821b31 	.word	0x7c821b31
 8000830:	5bfaa730 	.word	0x5bfaa730
 8000834:	24cedd55 	.word	0x24cedd55
 8000838:	243fa9a9 	.word	0x243fa9a9
 800083c:	24047d02 	.word	0x24047d02
 8000840:	0cf47c8c 	.word	0x0cf47c8c
 8000844:	1a8dff78 	.word	0x1a8dff78
 8000848:	08005504 	.word	0x08005504
 800084c:	08005514 	.word	0x08005514
 8000850:	08005520 	.word	0x08005520
 8000854:	08005530 	.word	0x08005530
 8000858:	0800553c 	.word	0x0800553c
 800085c:	0800554c 	.word	0x0800554c
 8000860:	08005558 	.word	0x08005558
 8000864:	08005564 	.word	0x08005564
 8000868:	0800556c 	.word	0x0800556c
 800086c:	08005574 	.word	0x08005574
 8000870:	08005580 	.word	0x08005580

08000874 <evaluate>:

char* evaluate(bool ERROR_FLAG, bool FAIL_FLAG){
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	460a      	mov	r2, r1
 800087e:	71fb      	strb	r3, [r7, #7]
 8000880:	4613      	mov	r3, r2
 8000882:	71bb      	strb	r3, [r7, #6]
	if(ERROR_FLAG || FAIL_FLAG)
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d102      	bne.n	8000890 <evaluate+0x1c>
 800088a:	79bb      	ldrb	r3, [r7, #6]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <evaluate+0x20>
		return "ERROR";
 8000890:	4b04      	ldr	r3, [pc, #16]	; (80008a4 <evaluate+0x30>)
 8000892:	e000      	b.n	8000896 <evaluate+0x22>
	return "OK";
 8000894:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <evaluate+0x34>)
}
 8000896:	4618      	mov	r0, r3
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	080054ec 	.word	0x080054ec
 80008a8:	08005590 	.word	0x08005590

080008ac <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_GPIO_Init+0x2c>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	4a08      	ldr	r2, [pc, #32]	; (80008d8 <MX_GPIO_Init+0x2c>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_GPIO_Init+0x2c>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40021000 	.word	0x40021000

080008dc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80008e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008e8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d013      	beq.n	800091c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80008f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008f8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80008fc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000900:	2b00      	cmp	r3, #0
 8000902:	d00b      	beq.n	800091c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000904:	e000      	b.n	8000908 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000906:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000908:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d0f9      	beq.n	8000906 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000912:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	b2d2      	uxtb	r2, r2
 800091a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800091c:	687b      	ldr	r3, [r7, #4]
}
 800091e:	4618      	mov	r0, r3
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b086      	sub	sp, #24
 800092e:	af00      	add	r7, sp, #0
 8000930:	60f8      	str	r0, [r7, #12]
 8000932:	60b9      	str	r1, [r7, #8]
 8000934:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
 800093a:	e009      	b.n	8000950 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	1c5a      	adds	r2, r3, #1
 8000940:	60ba      	str	r2, [r7, #8]
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff ffc9 	bl	80008dc <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	3301      	adds	r3, #1
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	697a      	ldr	r2, [r7, #20]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	429a      	cmp	r2, r3
 8000956:	dbf1      	blt.n	800093c <_write+0x12>
	}
	return len;
 8000958:	687b      	ldr	r3, [r7, #4]
}
 800095a:	4618      	mov	r0, r3
 800095c:	3718      	adds	r7, #24
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000966:	f000 fd84 	bl	8001472 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800096a:	f000 f807 	bl	800097c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800096e:	f7ff ff9d 	bl	80008ac <MX_GPIO_Init>
  MX_UART4_Init();
 8000972:	f000 fcdb 	bl	800132c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  #ifdef RUN_UNIT_TEST
  	  unit_test();
 8000976:	f000 fa19 	bl	8000dac <unit_test>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800097a:	e7fe      	b.n	800097a <main+0x18>

0800097c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b0b8      	sub	sp, #224	; 0xe0
 8000980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000982:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000986:	2244      	movs	r2, #68	; 0x44
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f003 fd58 	bl	8004440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000990:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a0:	463b      	mov	r3, r7
 80009a2:	2288      	movs	r2, #136	; 0x88
 80009a4:	2100      	movs	r1, #0
 80009a6:	4618      	mov	r0, r3
 80009a8:	f003 fd4a 	bl	8004440 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ac:	2302      	movs	r3, #2
 80009ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ba:	2310      	movs	r3, #16
 80009bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c0:	2302      	movs	r3, #2
 80009c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009c6:	2302      	movs	r3, #2
 80009c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009cc:	2301      	movs	r3, #1
 80009ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80009d2:	230a      	movs	r3, #10
 80009d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009d8:	2307      	movs	r3, #7
 80009da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009de:	2302      	movs	r3, #2
 80009e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009e4:	2302      	movs	r3, #2
 80009e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009ee:	4618      	mov	r0, r3
 80009f0:	f001 f952 	bl	8001c98 <HAL_RCC_OscConfig>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <SystemClock_Config+0x82>
  {
    Error_Handler();
 80009fa:	f000 f834 	bl	8000a66 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009fe:	230f      	movs	r3, #15
 8000a00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a04:	2303      	movs	r3, #3
 8000a06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a1c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000a20:	2104      	movs	r1, #4
 8000a22:	4618      	mov	r0, r3
 8000a24:	f001 fd1e 	bl	8002464 <HAL_RCC_ClockConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000a2e:	f000 f81a 	bl	8000a66 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000a32:	2308      	movs	r3, #8
 8000a34:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 8000a36:	2340      	movs	r3, #64	; 0x40
 8000a38:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a3a:	463b      	mov	r3, r7
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f001 ff17 	bl	8002870 <HAL_RCCEx_PeriphCLKConfig>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000a48:	f000 f80d 	bl	8000a66 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a4c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a50:	f001 f8cc 	bl	8001bec <HAL_PWREx_ControlVoltageScaling>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000a5a:	f000 f804 	bl	8000a66 <Error_Handler>
  }
}
 8000a5e:	bf00      	nop
 8000a60:	37e0      	adds	r7, #224	; 0xe0
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a6a:	b672      	cpsid	i
}
 8000a6c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <Error_Handler+0x8>

08000a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a7a:	4a0e      	ldr	r2, [pc, #56]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6613      	str	r3, [r2, #96]	; 0x60
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a92:	4a08      	ldr	r2, [pc, #32]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a98:	6593      	str	r3, [r2, #88]	; 0x58
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <NMI_Handler+0x4>

08000abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <HardFault_Handler+0x4>

08000ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <MemManage_Handler+0x4>

08000aca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <BusFault_Handler+0x4>

08000ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <UsageFault_Handler+0x4>

08000ad6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b04:	f000 fd0a 	bl	800151c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000b10:	4802      	ldr	r0, [pc, #8]	; (8000b1c <UART4_IRQHandler+0x10>)
 8000b12:	f002 fc8f 	bl	8003434 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000524 	.word	0x20000524

08000b20 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	e00a      	b.n	8000b48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b32:	f3af 8000 	nop.w
 8000b36:	4601      	mov	r1, r0
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	1c5a      	adds	r2, r3, #1
 8000b3c:	60ba      	str	r2, [r7, #8]
 8000b3e:	b2ca      	uxtb	r2, r1
 8000b40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	3301      	adds	r3, #1
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	dbf0      	blt.n	8000b32 <_read+0x12>
	}

return len;
 8000b50:	687b      	ldr	r3, [r7, #4]
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b083      	sub	sp, #12
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
	return -1;
 8000b62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b083      	sub	sp, #12
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
 8000b7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b82:	605a      	str	r2, [r3, #4]
	return 0;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <_isatty>:

int _isatty(int file)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b083      	sub	sp, #12
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
	return 1;
 8000b9a:	2301      	movs	r3, #1
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
	return 0;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3714      	adds	r7, #20
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
	...

08000bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bcc:	4a14      	ldr	r2, [pc, #80]	; (8000c20 <_sbrk+0x5c>)
 8000bce:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <_sbrk+0x60>)
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd8:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <_sbrk+0x64>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d102      	bne.n	8000be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <_sbrk+0x64>)
 8000be2:	4a12      	ldr	r2, [pc, #72]	; (8000c2c <_sbrk+0x68>)
 8000be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <_sbrk+0x64>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d207      	bcs.n	8000c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf4:	f003 fbfa 	bl	80043ec <__errno>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000c02:	e009      	b.n	8000c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0a:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <_sbrk+0x64>)
 8000c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c16:	68fb      	ldr	r3, [r7, #12]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20018000 	.word	0x20018000
 8000c24:	00000400 	.word	0x00000400
 8000c28:	20000494 	.word	0x20000494
 8000c2c:	200005c0 	.word	0x200005c0

08000c30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c34:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <SystemInit+0x5c>)
 8000c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3a:	4a14      	ldr	r2, [pc, #80]	; (8000c8c <SystemInit+0x5c>)
 8000c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <SystemInit+0x60>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a11      	ldr	r2, [pc, #68]	; (8000c90 <SystemInit+0x60>)
 8000c4a:	f043 0301 	orr.w	r3, r3, #1
 8000c4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c50:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <SystemInit+0x60>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <SystemInit+0x60>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a0d      	ldr	r2, [pc, #52]	; (8000c90 <SystemInit+0x60>)
 8000c5c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c60:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c64:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c66:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <SystemInit+0x60>)
 8000c68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c6c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c6e:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <SystemInit+0x60>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a07      	ldr	r2, [pc, #28]	; (8000c90 <SystemInit+0x60>)
 8000c74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c78:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c7a:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <SystemInit+0x60>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000ed00 	.word	0xe000ed00
 8000c90:	40021000 	.word	0x40021000

08000c94 <setUp>:
******************************************************************************
*/

#include "unit_test.h"

void setUp(void){
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <tearDown>:

void tearDown(void){
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <test_ESP8266_AT_RST>:

void test_ESP8266_AT_RST(void){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	TEST_ASSERT_EQUAL_STRING("OK", uart_send(ESP8266_AT_RST));
 8000cb4:	4805      	ldr	r0, [pc, #20]	; (8000ccc <test_ESP8266_AT_RST+0x1c>)
 8000cb6:	f7ff fcc3 	bl	8000640 <uart_send>
 8000cba:	4601      	mov	r1, r0
 8000cbc:	2316      	movs	r3, #22
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	4803      	ldr	r0, [pc, #12]	; (8000cd0 <test_ESP8266_AT_RST+0x20>)
 8000cc2:	f000 fa33 	bl	800112c <UnityAssertEqualString>
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	080056f8 	.word	0x080056f8
 8000cd0:	0800559c 	.word	0x0800559c

08000cd4 <test_ESP8266_AT>:

void test_ESP8266_AT(void){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	TEST_ASSERT_EQUAL_STRING("OK", uart_send(ESP8266_AT));
 8000cd8:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <test_ESP8266_AT+0x1c>)
 8000cda:	f7ff fcb1 	bl	8000640 <uart_send>
 8000cde:	4601      	mov	r1, r0
 8000ce0:	231a      	movs	r3, #26
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	4803      	ldr	r0, [pc, #12]	; (8000cf4 <test_ESP8266_AT+0x20>)
 8000ce6:	f000 fa21 	bl	800112c <UnityAssertEqualString>
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	080056f0 	.word	0x080056f0
 8000cf4:	0800559c 	.word	0x0800559c

08000cf8 <test_ESP8266_AT_GMR>:

void test_ESP8266_AT_GMR(void){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	TEST_ASSERT_EQUAL_STRING("OK", uart_send(ESP8266_AT_GMR));
 8000cfc:	4805      	ldr	r0, [pc, #20]	; (8000d14 <test_ESP8266_AT_GMR+0x1c>)
 8000cfe:	f7ff fc9f 	bl	8000640 <uart_send>
 8000d02:	4601      	mov	r1, r0
 8000d04:	231e      	movs	r3, #30
 8000d06:	2200      	movs	r2, #0
 8000d08:	4803      	ldr	r0, [pc, #12]	; (8000d18 <test_ESP8266_AT_GMR+0x20>)
 8000d0a:	f000 fa0f 	bl	800112c <UnityAssertEqualString>
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	08005704 	.word	0x08005704
 8000d18:	0800559c 	.word	0x0800559c

08000d1c <test_ESP8266_AT_CWQAP>:

void test_ESP8266_AT_CWQAP(void){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
	TEST_ASSERT_EQUAL_STRING("OK", uart_send(ESP8266_AT_CWQAP));
 8000d20:	4805      	ldr	r0, [pc, #20]	; (8000d38 <test_ESP8266_AT_CWQAP+0x1c>)
 8000d22:	f7ff fc8d 	bl	8000640 <uart_send>
 8000d26:	4601      	mov	r1, r0
 8000d28:	2322      	movs	r3, #34	; 0x22
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	4803      	ldr	r0, [pc, #12]	; (8000d3c <test_ESP8266_AT_CWQAP+0x20>)
 8000d2e:	f000 f9fd 	bl	800112c <UnityAssertEqualString>
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	08005740 	.word	0x08005740
 8000d3c:	0800559c 	.word	0x0800559c

08000d40 <test_ESP8266_AT_CWMODE_1>:

void test_ESP8266_AT_CWMODE_1(void){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
	TEST_ASSERT_EQUAL_STRING("OK", uart_send(ESP8266_AT_CWMODE_STATION_MODE));
 8000d44:	4805      	ldr	r0, [pc, #20]	; (8000d5c <test_ESP8266_AT_CWMODE_1+0x1c>)
 8000d46:	f7ff fc7b 	bl	8000640 <uart_send>
 8000d4a:	4601      	mov	r1, r0
 8000d4c:	2326      	movs	r3, #38	; 0x26
 8000d4e:	2200      	movs	r2, #0
 8000d50:	4803      	ldr	r0, [pc, #12]	; (8000d60 <test_ESP8266_AT_CWMODE_1+0x20>)
 8000d52:	f000 f9eb 	bl	800112c <UnityAssertEqualString>
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	08005724 	.word	0x08005724
 8000d60:	0800559c 	.word	0x0800559c

08000d64 <test_ESP8266_AT_CWMODE_1_VERIFY>:

void test_ESP8266_AT_CWMODE_1_VERIFY(void){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	TEST_ASSERT_EQUAL_STRING("CWMODE:1", uart_send(ESP8266_AT_CWMODE_TEST));
 8000d68:	4805      	ldr	r0, [pc, #20]	; (8000d80 <test_ESP8266_AT_CWMODE_1_VERIFY+0x1c>)
 8000d6a:	f7ff fc69 	bl	8000640 <uart_send>
 8000d6e:	4601      	mov	r1, r0
 8000d70:	232a      	movs	r3, #42	; 0x2a
 8000d72:	2200      	movs	r2, #0
 8000d74:	4803      	ldr	r0, [pc, #12]	; (8000d84 <test_ESP8266_AT_CWMODE_1_VERIFY+0x20>)
 8000d76:	f000 f9d9 	bl	800112c <UnityAssertEqualString>
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	08005710 	.word	0x08005710
 8000d84:	080055a0 	.word	0x080055a0

08000d88 <test_ESP8266_AT_CWJAP_VERIFY>:
	char buffer[256] = {0};
	ESP8266_get_cwjap_command(buffer);
	TEST_ASSERT_EQUAL_STRING("OK", uart_send(buffer));
}

void test_ESP8266_AT_CWJAP_VERIFY(void){
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	TEST_ASSERT_EQUAL_STRING("NO AP", uart_send(ESP8266_AT_CWJAP_TEST));
 8000d8c:	4805      	ldr	r0, [pc, #20]	; (8000da4 <test_ESP8266_AT_CWJAP_VERIFY+0x1c>)
 8000d8e:	f7ff fc57 	bl	8000640 <uart_send>
 8000d92:	4601      	mov	r1, r0
 8000d94:	2334      	movs	r3, #52	; 0x34
 8000d96:	2200      	movs	r2, #0
 8000d98:	4803      	ldr	r0, [pc, #12]	; (8000da8 <test_ESP8266_AT_CWJAP_VERIFY+0x20>)
 8000d9a:	f000 f9c7 	bl	800112c <UnityAssertEqualString>
	//TEST_ASSERT_EQUAL_STRING("CONNECTED", uart_send(ESP8266_AT_CWJAP_TEST, connection_status));
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	08005734 	.word	0x08005734
 8000da8:	080055ac 	.word	0x080055ac

08000dac <unit_test>:

void unit_test(void){
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0

	init_uart_interrupt();
 8000db0:	f7ff fbf2 	bl	8000598 <init_uart_interrupt>

	UNITY_BEGIN();
 8000db4:	4814      	ldr	r0, [pc, #80]	; (8000e08 <unit_test+0x5c>)
 8000db6:	f000 fa43 	bl	8001240 <UnityBegin>
	RUN_TEST(test_ESP8266_AT_RST);
 8000dba:	223d      	movs	r2, #61	; 0x3d
 8000dbc:	4913      	ldr	r1, [pc, #76]	; (8000e0c <unit_test+0x60>)
 8000dbe:	4814      	ldr	r0, [pc, #80]	; (8000e10 <unit_test+0x64>)
 8000dc0:	f000 fa0a 	bl	80011d8 <UnityDefaultTestRun>
	RUN_TEST(test_ESP8266_AT);
 8000dc4:	223e      	movs	r2, #62	; 0x3e
 8000dc6:	4913      	ldr	r1, [pc, #76]	; (8000e14 <unit_test+0x68>)
 8000dc8:	4813      	ldr	r0, [pc, #76]	; (8000e18 <unit_test+0x6c>)
 8000dca:	f000 fa05 	bl	80011d8 <UnityDefaultTestRun>
	RUN_TEST(test_ESP8266_AT_GMR);
 8000dce:	223f      	movs	r2, #63	; 0x3f
 8000dd0:	4912      	ldr	r1, [pc, #72]	; (8000e1c <unit_test+0x70>)
 8000dd2:	4813      	ldr	r0, [pc, #76]	; (8000e20 <unit_test+0x74>)
 8000dd4:	f000 fa00 	bl	80011d8 <UnityDefaultTestRun>
	RUN_TEST(test_ESP8266_AT_CWMODE_1);
 8000dd8:	2240      	movs	r2, #64	; 0x40
 8000dda:	4912      	ldr	r1, [pc, #72]	; (8000e24 <unit_test+0x78>)
 8000ddc:	4812      	ldr	r0, [pc, #72]	; (8000e28 <unit_test+0x7c>)
 8000dde:	f000 f9fb 	bl	80011d8 <UnityDefaultTestRun>
	RUN_TEST(test_ESP8266_AT_CWMODE_1_VERIFY);
 8000de2:	2241      	movs	r2, #65	; 0x41
 8000de4:	4911      	ldr	r1, [pc, #68]	; (8000e2c <unit_test+0x80>)
 8000de6:	4812      	ldr	r0, [pc, #72]	; (8000e30 <unit_test+0x84>)
 8000de8:	f000 f9f6 	bl	80011d8 <UnityDefaultTestRun>
	//RUN_TEST(test_ESP8266_AT_CWJAP_SET);
	RUN_TEST(test_ESP8266_AT_CWQAP);
 8000dec:	2243      	movs	r2, #67	; 0x43
 8000dee:	4911      	ldr	r1, [pc, #68]	; (8000e34 <unit_test+0x88>)
 8000df0:	4811      	ldr	r0, [pc, #68]	; (8000e38 <unit_test+0x8c>)
 8000df2:	f000 f9f1 	bl	80011d8 <UnityDefaultTestRun>
	RUN_TEST(test_ESP8266_AT_CWJAP_VERIFY);
 8000df6:	2244      	movs	r2, #68	; 0x44
 8000df8:	4910      	ldr	r1, [pc, #64]	; (8000e3c <unit_test+0x90>)
 8000dfa:	4811      	ldr	r0, [pc, #68]	; (8000e40 <unit_test+0x94>)
 8000dfc:	f000 f9ec 	bl	80011d8 <UnityDefaultTestRun>
	UNITY_END();
 8000e00:	f000 fa48 	bl	8001294 <UnityEnd>
		uart_send("AT+CWLAP\r\n");
		uart_send(ESP8266_AT_CWQAP);
	//uart_send(ESP8266_AT_CWQAP, connection_status);
		uart_send(ESP8266_AT_CWJAP_TEST);
	*/
}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	080055b4 	.word	0x080055b4
 8000e0c:	080055cc 	.word	0x080055cc
 8000e10:	08000cb1 	.word	0x08000cb1
 8000e14:	080055e0 	.word	0x080055e0
 8000e18:	08000cd5 	.word	0x08000cd5
 8000e1c:	080055f0 	.word	0x080055f0
 8000e20:	08000cf9 	.word	0x08000cf9
 8000e24:	08005604 	.word	0x08005604
 8000e28:	08000d41 	.word	0x08000d41
 8000e2c:	08005620 	.word	0x08005620
 8000e30:	08000d65 	.word	0x08000d65
 8000e34:	08005640 	.word	0x08005640
 8000e38:	08000d1d 	.word	0x08000d1d
 8000e3c:	08005658 	.word	0x08005658
 8000e40:	08000d89 	.word	0x08000d89

08000e44 <UnityPrintChar>:
 *-----------------------------------------------*/

/*-----------------------------------------------*/
/* Local helper function to print characters. */
static void UnityPrintChar(const char* pch)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
    /* printable characters plus CR & LF are printed */
    if ((*pch <= 126) && (*pch >= 32))
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b7e      	cmp	r3, #126	; 0x7e
 8000e52:	d80a      	bhi.n	8000e6a <UnityPrintChar+0x26>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b1f      	cmp	r3, #31
 8000e5a:	d906      	bls.n	8000e6a <UnityPrintChar+0x26>
    {
        UNITY_OUTPUT_CHAR(*pch);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f003 fb0d 	bl	8004480 <putchar>
 8000e66:	bf00      	nop
    {
        UNITY_OUTPUT_CHAR('\\');
        UNITY_OUTPUT_CHAR('x');
        UnityPrintNumberHex((UNITY_UINT)*pch, 2);
    }
}
 8000e68:	e021      	b.n	8000eae <UnityPrintChar+0x6a>
    else if (*pch == 13)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b0d      	cmp	r3, #13
 8000e70:	d106      	bne.n	8000e80 <UnityPrintChar+0x3c>
        UNITY_OUTPUT_CHAR('\\');
 8000e72:	205c      	movs	r0, #92	; 0x5c
 8000e74:	f003 fb04 	bl	8004480 <putchar>
        UNITY_OUTPUT_CHAR('r');
 8000e78:	2072      	movs	r0, #114	; 0x72
 8000e7a:	f003 fb01 	bl	8004480 <putchar>
}
 8000e7e:	e016      	b.n	8000eae <UnityPrintChar+0x6a>
    else if (*pch == 10)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b0a      	cmp	r3, #10
 8000e86:	d106      	bne.n	8000e96 <UnityPrintChar+0x52>
        UNITY_OUTPUT_CHAR('\\');
 8000e88:	205c      	movs	r0, #92	; 0x5c
 8000e8a:	f003 faf9 	bl	8004480 <putchar>
        UNITY_OUTPUT_CHAR('n');
 8000e8e:	206e      	movs	r0, #110	; 0x6e
 8000e90:	f003 faf6 	bl	8004480 <putchar>
}
 8000e94:	e00b      	b.n	8000eae <UnityPrintChar+0x6a>
        UNITY_OUTPUT_CHAR('\\');
 8000e96:	205c      	movs	r0, #92	; 0x5c
 8000e98:	f003 faf2 	bl	8004480 <putchar>
        UNITY_OUTPUT_CHAR('x');
 8000e9c:	2078      	movs	r0, #120	; 0x78
 8000e9e:	f003 faef 	bl	8004480 <putchar>
        UnityPrintNumberHex((UNITY_UINT)*pch, 2);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2102      	movs	r1, #2
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 f869 	bl	8000f80 <UnityPrintNumberHex>
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <UnityPrint>:
}
#endif

/*-----------------------------------------------*/
void UnityPrint(const char* string)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b084      	sub	sp, #16
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
    const char* pch = string;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	60fb      	str	r3, [r7, #12]

    if (pch != NULL)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d00a      	beq.n	8000ede <UnityPrint+0x28>
    {
        while (*pch)
 8000ec8:	e005      	b.n	8000ed6 <UnityPrint+0x20>
            {
                pch += UnityPrintAnsiEscapeString(pch);
                continue;
            }
#endif
            UnityPrintChar(pch);
 8000eca:	68f8      	ldr	r0, [r7, #12]
 8000ecc:	f7ff ffba 	bl	8000e44 <UnityPrintChar>
            pch++;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	60fb      	str	r3, [r7, #12]
        while (*pch)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1f5      	bne.n	8000eca <UnityPrint+0x14>
        }
    }
}
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <UnityPrintNumber>:
    }
}

/*-----------------------------------------------*/
void UnityPrintNumber(const UNITY_INT number_to_print)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b084      	sub	sp, #16
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
    UNITY_UINT number = (UNITY_UINT)number_to_print;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	60fb      	str	r3, [r7, #12]

    if (number_to_print < 0)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	da05      	bge.n	8000f04 <UnityPrintNumber+0x1e>
    {
        /* A negative number, including MIN negative */
        UNITY_OUTPUT_CHAR('-');
 8000ef8:	202d      	movs	r0, #45	; 0x2d
 8000efa:	f003 fac1 	bl	8004480 <putchar>
        number = (~number) + 1;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	425b      	negs	r3, r3
 8000f02:	60fb      	str	r3, [r7, #12]
    }
    UnityPrintNumberUnsigned(number);
 8000f04:	68f8      	ldr	r0, [r7, #12]
 8000f06:	f000 f805 	bl	8000f14 <UnityPrintNumberUnsigned>
}
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <UnityPrintNumberUnsigned>:

/*-----------------------------------------------
 * basically do an itoa using as little ram as possible */
void UnityPrintNumberUnsigned(const UNITY_UINT number)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
    UNITY_UINT divisor = 1;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	60fb      	str	r3, [r7, #12]

    /* figure out initial divisor */
    while (number / divisor > 9)
 8000f20:	e005      	b.n	8000f2e <UnityPrintNumberUnsigned+0x1a>
    {
        divisor *= 10;
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	4613      	mov	r3, r2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	4413      	add	r3, r2
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	60fb      	str	r3, [r7, #12]
    while (number / divisor > 9)
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f36:	2b09      	cmp	r3, #9
 8000f38:	d8f3      	bhi.n	8000f22 <UnityPrintNumberUnsigned+0xe>
    }

    /* now mod and print, then divide divisor */
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	fbb2 f1f3 	udiv	r1, r2, r3
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <UnityPrintNumberUnsigned+0x68>)
 8000f44:	fba3 2301 	umull	r2, r3, r3, r1
 8000f48:	08da      	lsrs	r2, r3, #3
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	1aca      	subs	r2, r1, r3
 8000f54:	b2d3      	uxtb	r3, r2
 8000f56:	3330      	adds	r3, #48	; 0x30
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f003 fa90 	bl	8004480 <putchar>
        divisor /= 10;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4a06      	ldr	r2, [pc, #24]	; (8000f7c <UnityPrintNumberUnsigned+0x68>)
 8000f64:	fba2 2303 	umull	r2, r3, r2, r3
 8000f68:	08db      	lsrs	r3, r3, #3
 8000f6a:	60fb      	str	r3, [r7, #12]
    } while (divisor > 0);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d1e3      	bne.n	8000f3a <UnityPrintNumberUnsigned+0x26>
}
 8000f72:	bf00      	nop
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	cccccccd 	.word	0xcccccccd

08000f80 <UnityPrintNumberHex>:

/*-----------------------------------------------*/
void UnityPrintNumberHex(const UNITY_UINT number, const char nibbles_to_print)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	70fb      	strb	r3, [r7, #3]
    int nibble;
    char nibbles = nibbles_to_print;
 8000f8c:	78fb      	ldrb	r3, [r7, #3]
 8000f8e:	73fb      	strb	r3, [r7, #15]

    if ((unsigned)nibbles > UNITY_MAX_NIBBLES)
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	2b08      	cmp	r3, #8
 8000f94:	d91f      	bls.n	8000fd6 <UnityPrintNumberHex+0x56>
    {
        nibbles = UNITY_MAX_NIBBLES;
 8000f96:	2308      	movs	r3, #8
 8000f98:	73fb      	strb	r3, [r7, #15]
    }

    while (nibbles > 0)
 8000f9a:	e01c      	b.n	8000fd6 <UnityPrintNumberHex+0x56>
    {
        nibbles--;
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	73fb      	strb	r3, [r7, #15]
        nibble = (int)(number >> (nibbles * 4)) & 0x0F;
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fac:	f003 030f 	and.w	r3, r3, #15
 8000fb0:	60bb      	str	r3, [r7, #8]
        if (nibble <= 9)
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	2b09      	cmp	r3, #9
 8000fb6:	dc07      	bgt.n	8000fc8 <UnityPrintNumberHex+0x48>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	3330      	adds	r3, #48	; 0x30
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f003 fa5d 	bl	8004480 <putchar>
 8000fc6:	e006      	b.n	8000fd6 <UnityPrintNumberHex+0x56>
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	3337      	adds	r3, #55	; 0x37
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f003 fa55 	bl	8004480 <putchar>
    while (nibbles > 0)
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1df      	bne.n	8000f9c <UnityPrintNumberHex+0x1c>
        }
    }
}
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <UnityTestResultsBegin>:
}
#endif /* ! UNITY_EXCLUDE_FLOAT_PRINT */

/*-----------------------------------------------*/
static void UnityTestResultsBegin(const char* file, const UNITY_LINE_TYPE line)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
    UnityPrintNumber((UNITY_INT)line);
    UNITY_OUTPUT_CHAR(' ');
    UnityPrint(Unity.CurrentTestName);
    UNITY_OUTPUT_CHAR(':');
#else
    UnityPrint(file);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff ff5f 	bl	8000eb6 <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
 8000ff8:	203a      	movs	r0, #58	; 0x3a
 8000ffa:	f003 fa41 	bl	8004480 <putchar>
    UnityPrintNumber((UNITY_INT)line);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff70 	bl	8000ee6 <UnityPrintNumber>
    UNITY_OUTPUT_CHAR(':');
 8001006:	203a      	movs	r0, #58	; 0x3a
 8001008:	f003 fa3a 	bl	8004480 <putchar>
    UnityPrint(Unity.CurrentTestName);
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <UnityTestResultsBegin+0x3c>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff50 	bl	8000eb6 <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
 8001016:	203a      	movs	r0, #58	; 0x3a
 8001018:	f003 fa32 	bl	8004480 <putchar>
#endif
#endif
#endif
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	200004a0 	.word	0x200004a0

08001028 <UnityTestResultsFailBegin>:

/*-----------------------------------------------*/
static void UnityTestResultsFailBegin(const UNITY_LINE_TYPE line)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
    UnityTestResultsBegin(Unity.TestFile, line);
 8001030:	4b07      	ldr	r3, [pc, #28]	; (8001050 <UnityTestResultsFailBegin+0x28>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6879      	ldr	r1, [r7, #4]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff ffd6 	bl	8000fe8 <UnityTestResultsBegin>
    //UnityPrint(UnityStrFail);
    printf(UnityStrFail);
 800103c:	4805      	ldr	r0, [pc, #20]	; (8001054 <UnityTestResultsFailBegin+0x2c>)
 800103e:	f003 fa07 	bl	8004450 <iprintf>
    UNITY_OUTPUT_CHAR(':');
 8001042:	203a      	movs	r0, #58	; 0x3a
 8001044:	f003 fa1c 	bl	8004480 <putchar>
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	200004a0 	.word	0x200004a0
 8001054:	08005758 	.word	0x08005758

08001058 <UnityConcludeTest>:

/*-----------------------------------------------*/
void UnityConcludeTest(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
    if (Unity.CurrentTestIgnored)
 800105c:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <UnityConcludeTest+0x58>)
 800105e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001060:	2b00      	cmp	r3, #0
 8001062:	d005      	beq.n	8001070 <UnityConcludeTest+0x18>
    {
        Unity.TestIgnores++;
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <UnityConcludeTest+0x58>)
 8001066:	69db      	ldr	r3, [r3, #28]
 8001068:	3301      	adds	r3, #1
 800106a:	4a11      	ldr	r2, [pc, #68]	; (80010b0 <UnityConcludeTest+0x58>)
 800106c:	61d3      	str	r3, [r2, #28]
 800106e:	e014      	b.n	800109a <UnityConcludeTest+0x42>
    }
    else if (!Unity.CurrentTestFailed)
 8001070:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <UnityConcludeTest+0x58>)
 8001072:	6a1b      	ldr	r3, [r3, #32]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d10b      	bne.n	8001090 <UnityConcludeTest+0x38>
    {
        UnityTestResultsBegin(Unity.TestFile, Unity.CurrentTestLineNumber);
 8001078:	4b0d      	ldr	r3, [pc, #52]	; (80010b0 <UnityConcludeTest+0x58>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0c      	ldr	r2, [pc, #48]	; (80010b0 <UnityConcludeTest+0x58>)
 800107e:	6912      	ldr	r2, [r2, #16]
 8001080:	4611      	mov	r1, r2
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ffb0 	bl	8000fe8 <UnityTestResultsBegin>
        //UnityPrint(UnityStrPass);
        printf(UnityStrPass);
 8001088:	480a      	ldr	r0, [pc, #40]	; (80010b4 <UnityConcludeTest+0x5c>)
 800108a:	f003 f9e1 	bl	8004450 <iprintf>
 800108e:	e004      	b.n	800109a <UnityConcludeTest+0x42>
    }
    else
    {
        Unity.TestFailures++;
 8001090:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <UnityConcludeTest+0x58>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	3301      	adds	r3, #1
 8001096:	4a06      	ldr	r2, [pc, #24]	; (80010b0 <UnityConcludeTest+0x58>)
 8001098:	6193      	str	r3, [r2, #24]
    }

    Unity.CurrentTestFailed = 0;
 800109a:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <UnityConcludeTest+0x58>)
 800109c:	2200      	movs	r2, #0
 800109e:	621a      	str	r2, [r3, #32]
    Unity.CurrentTestIgnored = 0;
 80010a0:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <UnityConcludeTest+0x58>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	625a      	str	r2, [r3, #36]	; 0x24
    //printf("%d\n", (Unity.CurrentTestStopTime - Unity.CurrentTestStartTime));
    UNITY_PRINT_EXEC_TIME();
    UNITY_PRINT_EOL();
 80010a6:	200a      	movs	r0, #10
 80010a8:	f003 f9ea 	bl	8004480 <putchar>
    UNITY_FLUSH_CALL();
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	200004a0 	.word	0x200004a0
 80010b4:	08005750 	.word	0x08005750

080010b8 <UnityPrintExpectedAndActualStrings>:
    }
}

/*-----------------------------------------------*/
static void UnityPrintExpectedAndActualStrings(const char* expected, const char* actual)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
	printf("\n");
 80010c2:	200a      	movs	r0, #10
 80010c4:	f003 f9dc 	bl	8004480 <putchar>
	UnityPrint(UnityStrExpected);
 80010c8:	4814      	ldr	r0, [pc, #80]	; (800111c <UnityPrintExpectedAndActualStrings+0x64>)
 80010ca:	f7ff fef4 	bl	8000eb6 <UnityPrint>
    if (expected != NULL)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d009      	beq.n	80010e8 <UnityPrintExpectedAndActualStrings+0x30>
    {
        //UNITY_OUTPUT_CHAR('\'');
        //UnityPrint(expected);
    	printf("\'");
 80010d4:	2027      	movs	r0, #39	; 0x27
 80010d6:	f003 f9d3 	bl	8004480 <putchar>
    	printf(expected);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f003 f9b8 	bl	8004450 <iprintf>
    	printf("\'\n");
 80010e0:	480f      	ldr	r0, [pc, #60]	; (8001120 <UnityPrintExpectedAndActualStrings+0x68>)
 80010e2:	f003 fa51 	bl	8004588 <puts>
 80010e6:	e002      	b.n	80010ee <UnityPrintExpectedAndActualStrings+0x36>
    	//UNITY_OUTPUT_CHAR('\'');
    }
    else
    {
        //UnityPrint(UnityStrNull);
    	printf(UnityStrNull);
 80010e8:	480e      	ldr	r0, [pc, #56]	; (8001124 <UnityPrintExpectedAndActualStrings+0x6c>)
 80010ea:	f003 f9b1 	bl	8004450 <iprintf>
    }
    //UnityPrint(UnityStrWas);
    printf(UnityStrWas);
 80010ee:	480e      	ldr	r0, [pc, #56]	; (8001128 <UnityPrintExpectedAndActualStrings+0x70>)
 80010f0:	f003 f9ae 	bl	8004450 <iprintf>
    if (actual != NULL)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d009      	beq.n	800110e <UnityPrintExpectedAndActualStrings+0x56>
    {
        printf("\'");
 80010fa:	2027      	movs	r0, #39	; 0x27
 80010fc:	f003 f9c0 	bl	8004480 <putchar>
    	printf(actual);
 8001100:	6838      	ldr	r0, [r7, #0]
 8001102:	f003 f9a5 	bl	8004450 <iprintf>
    	printf("\'");
 8001106:	2027      	movs	r0, #39	; 0x27
 8001108:	f003 f9ba 	bl	8004480 <putchar>
    else
    {
        //UnityPrint(UnityStrNull);
    	printf(UnityStrNull);
    }
}
 800110c:	e002      	b.n	8001114 <UnityPrintExpectedAndActualStrings+0x5c>
    	printf(UnityStrNull);
 800110e:	4805      	ldr	r0, [pc, #20]	; (8001124 <UnityPrintExpectedAndActualStrings+0x6c>)
 8001110:	f003 f99e 	bl	8004450 <iprintf>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	08005768 	.word	0x08005768
 8001120:	08005684 	.word	0x08005684
 8001124:	08005760 	.word	0x08005760
 8001128:	08005774 	.word	0x08005774

0800112c <UnityAssertEqualString>:
/*-----------------------------------------------*/
void UnityAssertEqualString(const char* expected,
                            const char* actual,
                            const char* msg,
                            const UNITY_LINE_TYPE lineNumber)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	603b      	str	r3, [r7, #0]
    UNITY_UINT32 i;

    RETURN_IF_FAIL_OR_IGNORE;
 800113a:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <UnityAssertEqualString+0xa4>)
 800113c:	6a1b      	ldr	r3, [r3, #32]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d103      	bne.n	800114a <UnityAssertEqualString+0x1e>
 8001142:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <UnityAssertEqualString+0xa4>)
 8001144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <UnityAssertEqualString+0x26>
 800114a:	2101      	movs	r1, #1
 800114c:	4821      	ldr	r0, [pc, #132]	; (80011d4 <UnityAssertEqualString+0xa8>)
 800114e:	f7ff f845 	bl	80001dc <longjmp>

    /* if both pointers not null compare the strings */
    if (expected && actual)
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d024      	beq.n	80011a2 <UnityAssertEqualString+0x76>
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d021      	beq.n	80011a2 <UnityAssertEqualString+0x76>
    {
        for (i = 0; expected[i] || actual[i]; i++)
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
 8001162:	e011      	b.n	8001188 <UnityAssertEqualString+0x5c>
        {
            if (expected[i] != actual[i])
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	4413      	add	r3, r2
 800116a:	781a      	ldrb	r2, [r3, #0]
 800116c:	68b9      	ldr	r1, [r7, #8]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	440b      	add	r3, r1
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	429a      	cmp	r2, r3
 8001176:	d004      	beq.n	8001182 <UnityAssertEqualString+0x56>
            {
                Unity.CurrentTestFailed = 1;
 8001178:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <UnityAssertEqualString+0xa4>)
 800117a:	2201      	movs	r2, #1
 800117c:	621a      	str	r2, [r3, #32]
                break;
 800117e:	bf00      	nop
    if (expected && actual)
 8001180:	e016      	b.n	80011b0 <UnityAssertEqualString+0x84>
        for (i = 0; expected[i] || actual[i]; i++)
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	3301      	adds	r3, #1
 8001186:	617b      	str	r3, [r7, #20]
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	4413      	add	r3, r2
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d1e7      	bne.n	8001164 <UnityAssertEqualString+0x38>
 8001194:	68ba      	ldr	r2, [r7, #8]
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	4413      	add	r3, r2
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1e1      	bne.n	8001164 <UnityAssertEqualString+0x38>
    if (expected && actual)
 80011a0:	e006      	b.n	80011b0 <UnityAssertEqualString+0x84>
            }
        }
    }
    else
    { /* handle case of one pointers being null (if both null, test should pass) */
        if (expected != actual)
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d002      	beq.n	80011b0 <UnityAssertEqualString+0x84>
        {
            Unity.CurrentTestFailed = 1;
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <UnityAssertEqualString+0xa4>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	621a      	str	r2, [r3, #32]
        }
    }

    if (Unity.CurrentTestFailed)
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <UnityAssertEqualString+0xa4>)
 80011b2:	6a1b      	ldr	r3, [r3, #32]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d006      	beq.n	80011c6 <UnityAssertEqualString+0x9a>
    {
    	UnityTestResultsFailBegin(lineNumber);
 80011b8:	6838      	ldr	r0, [r7, #0]
 80011ba:	f7ff ff35 	bl	8001028 <UnityTestResultsFailBegin>
        UnityPrintExpectedAndActualStrings(expected, actual);
 80011be:	68b9      	ldr	r1, [r7, #8]
 80011c0:	68f8      	ldr	r0, [r7, #12]
 80011c2:	f7ff ff79 	bl	80010b8 <UnityPrintExpectedAndActualStrings>
        UnityPrintExpectedAndActualStrings(expected, actual);
        UnityAddMsgIfSpecified(msg);
        UNITY_FAIL_AND_BAIL;
    	*/
    }
}
 80011c6:	bf00      	nop
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200004a0 	.word	0x200004a0
 80011d4:	200004c8 	.word	0x200004c8

080011d8 <UnityDefaultTestRun>:
/*-----------------------------------------------*/
/* If we have not defined our own test runner, then include our default test runner to make life easier */
#ifndef UNITY_SKIP_DEFAULT_RUNNER

void UnityDefaultTestRun(UnityTestFunction Func, const char* FuncName, const int FuncLineNum)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
    Unity.CurrentTestName = FuncName;
 80011e4:	4a14      	ldr	r2, [pc, #80]	; (8001238 <UnityDefaultTestRun+0x60>)
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	6053      	str	r3, [r2, #4]
    Unity.CurrentTestLineNumber = (UNITY_LINE_TYPE)FuncLineNum;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a12      	ldr	r2, [pc, #72]	; (8001238 <UnityDefaultTestRun+0x60>)
 80011ee:	6113      	str	r3, [r2, #16]
    Unity.NumberOfTests++;
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <UnityDefaultTestRun+0x60>)
 80011f2:	695b      	ldr	r3, [r3, #20]
 80011f4:	3301      	adds	r3, #1
 80011f6:	4a10      	ldr	r2, [pc, #64]	; (8001238 <UnityDefaultTestRun+0x60>)
 80011f8:	6153      	str	r3, [r2, #20]
    UNITY_CLR_DETAILS();
 80011fa:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <UnityDefaultTestRun+0x60>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	4b0d      	ldr	r3, [pc, #52]	; (8001238 <UnityDefaultTestRun+0x60>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]

    //UNITY_EXEC_TIME_START();
    if (TEST_PROTECT())
 8001206:	480d      	ldr	r0, [pc, #52]	; (800123c <UnityDefaultTestRun+0x64>)
 8001208:	f7fe ffe2 	bl	80001d0 <setjmp>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d103      	bne.n	800121a <UnityDefaultTestRun+0x42>
    {
        setUp();
 8001212:	f7ff fd3f 	bl	8000c94 <setUp>
        Func();
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	4798      	blx	r3
    }
    if (TEST_PROTECT())
 800121a:	4808      	ldr	r0, [pc, #32]	; (800123c <UnityDefaultTestRun+0x64>)
 800121c:	f7fe ffd8 	bl	80001d0 <setjmp>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <UnityDefaultTestRun+0x52>
    {
        tearDown();
 8001226:	f7ff fd3c 	bl	8000ca2 <tearDown>
    }
    //UNITY_EXEC_TIME_STOP();

    UnityConcludeTest();
 800122a:	f7ff ff15 	bl	8001058 <UnityConcludeTest>
}
 800122e:	bf00      	nop
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200004a0 	.word	0x200004a0
 800123c:	200004c8 	.word	0x200004c8

08001240 <UnityBegin>:
	Unity.TestFile = filename;
}

/*-----------------------------------------------*/
void UnityBegin(const char* filename)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
    Unity.TestFile = filename;
 8001248:	4a11      	ldr	r2, [pc, #68]	; (8001290 <UnityBegin+0x50>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6013      	str	r3, [r2, #0]
    Unity.CurrentTestName = NULL;
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <UnityBegin+0x50>)
 8001250:	2200      	movs	r2, #0
 8001252:	605a      	str	r2, [r3, #4]
    Unity.CurrentTestLineNumber = 0;
 8001254:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <UnityBegin+0x50>)
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]
    Unity.NumberOfTests = 0;
 800125a:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <UnityBegin+0x50>)
 800125c:	2200      	movs	r2, #0
 800125e:	615a      	str	r2, [r3, #20]
    Unity.TestFailures = 0;
 8001260:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <UnityBegin+0x50>)
 8001262:	2200      	movs	r2, #0
 8001264:	619a      	str	r2, [r3, #24]
    Unity.TestIgnores = 0;
 8001266:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <UnityBegin+0x50>)
 8001268:	2200      	movs	r2, #0
 800126a:	61da      	str	r2, [r3, #28]
    Unity.CurrentTestFailed = 0;
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <UnityBegin+0x50>)
 800126e:	2200      	movs	r2, #0
 8001270:	621a      	str	r2, [r3, #32]
    Unity.CurrentTestIgnored = 0;
 8001272:	4b07      	ldr	r3, [pc, #28]	; (8001290 <UnityBegin+0x50>)
 8001274:	2200      	movs	r2, #0
 8001276:	625a      	str	r2, [r3, #36]	; 0x24

    UNITY_CLR_DETAILS();
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <UnityBegin+0x50>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	4b04      	ldr	r3, [pc, #16]	; (8001290 <UnityBegin+0x50>)
 8001280:	2200      	movs	r2, #0
 8001282:	60da      	str	r2, [r3, #12]
    UNITY_OUTPUT_START();
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	200004a0 	.word	0x200004a0

08001294 <UnityEnd>:

/*-----------------------------------------------*/
int UnityEnd(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
    printf(UnityStrBreaker);
 8001298:	481c      	ldr	r0, [pc, #112]	; (800130c <UnityEnd+0x78>)
 800129a:	f003 f8d9 	bl	8004450 <iprintf>
    printf("\n");
 800129e:	200a      	movs	r0, #10
 80012a0:	f003 f8ee 	bl	8004480 <putchar>
    printf(UnityStrResultsTests);
 80012a4:	481a      	ldr	r0, [pc, #104]	; (8001310 <UnityEnd+0x7c>)
 80012a6:	f003 f8d3 	bl	8004450 <iprintf>
    printf("%d\n", (UNITY_INT)(Unity.NumberOfTests));
 80012aa:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <UnityEnd+0x80>)
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	4619      	mov	r1, r3
 80012b0:	4819      	ldr	r0, [pc, #100]	; (8001318 <UnityEnd+0x84>)
 80012b2:	f003 f8cd 	bl	8004450 <iprintf>
    printf(UnityStrResultsFailures);
 80012b6:	4819      	ldr	r0, [pc, #100]	; (800131c <UnityEnd+0x88>)
 80012b8:	f003 f8ca 	bl	8004450 <iprintf>
    printf("%d\n", (UNITY_INT)(Unity.TestFailures));
 80012bc:	4b15      	ldr	r3, [pc, #84]	; (8001314 <UnityEnd+0x80>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	4619      	mov	r1, r3
 80012c2:	4815      	ldr	r0, [pc, #84]	; (8001318 <UnityEnd+0x84>)
 80012c4:	f003 f8c4 	bl	8004450 <iprintf>
    printf(UnityStrResultsIgnored);
 80012c8:	4815      	ldr	r0, [pc, #84]	; (8001320 <UnityEnd+0x8c>)
 80012ca:	f003 f8c1 	bl	8004450 <iprintf>
    printf("%d\n", (UNITY_INT)(Unity.TestIgnores));
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <UnityEnd+0x80>)
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	4619      	mov	r1, r3
 80012d4:	4810      	ldr	r0, [pc, #64]	; (8001318 <UnityEnd+0x84>)
 80012d6:	f003 f8bb 	bl	8004450 <iprintf>
    printf("\n");
 80012da:	200a      	movs	r0, #10
 80012dc:	f003 f8d0 	bl	8004480 <putchar>
    if (Unity.TestFailures == 0U)
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <UnityEnd+0x80>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d106      	bne.n	80012f6 <UnityEnd+0x62>
    {
        printf(UnityStrOk);
 80012e8:	480e      	ldr	r0, [pc, #56]	; (8001324 <UnityEnd+0x90>)
 80012ea:	f003 f8b1 	bl	8004450 <iprintf>
        printf("\n");
 80012ee:	200a      	movs	r0, #10
 80012f0:	f003 f8c6 	bl	8004480 <putchar>
 80012f4:	e002      	b.n	80012fc <UnityEnd+0x68>
    }
    else
    {
        printf(UnityStrFail);
 80012f6:	480c      	ldr	r0, [pc, #48]	; (8001328 <UnityEnd+0x94>)
 80012f8:	f003 f8aa 	bl	8004450 <iprintf>
		#ifdef UNITY_DIFFERENTIATE_FINAL_FAIL
        printf('E'); printf('D');
		#endif
    }
    printf("\n");
 80012fc:	200a      	movs	r0, #10
 80012fe:	f003 f8bf 	bl	8004480 <putchar>
    UNITY_FLUSH_CALL();
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures);
 8001302:	4b04      	ldr	r3, [pc, #16]	; (8001314 <UnityEnd+0x80>)
 8001304:	699b      	ldr	r3, [r3, #24]
    UNITY_PRINT_EOL();
    UNITY_FLUSH_CALL();
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures); */

}
 8001306:	4618      	mov	r0, r3
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	080057ac 	.word	0x080057ac
 8001310:	080057c4 	.word	0x080057c4
 8001314:	200004a0 	.word	0x200004a0
 8001318:	08005688 	.word	0x08005688
 800131c:	080057d8 	.word	0x080057d8
 8001320:	080057e4 	.word	0x080057e4
 8001324:	0800574c 	.word	0x0800574c
 8001328:	08005758 	.word	0x08005758

0800132c <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001330:	4b14      	ldr	r3, [pc, #80]	; (8001384 <MX_UART4_Init+0x58>)
 8001332:	4a15      	ldr	r2, [pc, #84]	; (8001388 <MX_UART4_Init+0x5c>)
 8001334:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001336:	4b13      	ldr	r3, [pc, #76]	; (8001384 <MX_UART4_Init+0x58>)
 8001338:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800133c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800133e:	4b11      	ldr	r3, [pc, #68]	; (8001384 <MX_UART4_Init+0x58>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001344:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <MX_UART4_Init+0x58>)
 8001346:	2200      	movs	r2, #0
 8001348:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <MX_UART4_Init+0x58>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <MX_UART4_Init+0x58>)
 8001352:	220c      	movs	r2, #12
 8001354:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <MX_UART4_Init+0x58>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800135c:	4b09      	ldr	r3, [pc, #36]	; (8001384 <MX_UART4_Init+0x58>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001362:	4b08      	ldr	r3, [pc, #32]	; (8001384 <MX_UART4_Init+0x58>)
 8001364:	2200      	movs	r2, #0
 8001366:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <MX_UART4_Init+0x58>)
 800136a:	2200      	movs	r2, #0
 800136c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800136e:	4805      	ldr	r0, [pc, #20]	; (8001384 <MX_UART4_Init+0x58>)
 8001370:	f001 ff3a 	bl	80031e8 <HAL_UART_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800137a:	f7ff fb74 	bl	8000a66 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000524 	.word	0x20000524
 8001388:	40004c00 	.word	0x40004c00

0800138c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08a      	sub	sp, #40	; 0x28
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a1b      	ldr	r2, [pc, #108]	; (8001418 <HAL_UART_MspInit+0x8c>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d130      	bne.n	8001410 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80013ae:	4b1b      	ldr	r3, [pc, #108]	; (800141c <HAL_UART_MspInit+0x90>)
 80013b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b2:	4a1a      	ldr	r2, [pc, #104]	; (800141c <HAL_UART_MspInit+0x90>)
 80013b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80013b8:	6593      	str	r3, [r2, #88]	; 0x58
 80013ba:	4b18      	ldr	r3, [pc, #96]	; (800141c <HAL_UART_MspInit+0x90>)
 80013bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c6:	4b15      	ldr	r3, [pc, #84]	; (800141c <HAL_UART_MspInit+0x90>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ca:	4a14      	ldr	r2, [pc, #80]	; (800141c <HAL_UART_MspInit+0x90>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d2:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_UART_MspInit+0x90>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013de:	2303      	movs	r3, #3
 80013e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e2:	2302      	movs	r3, #2
 80013e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ea:	2303      	movs	r3, #3
 80013ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80013ee:	2308      	movs	r3, #8
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	4619      	mov	r1, r3
 80013f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013fc:	f000 fa3e 	bl	800187c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001400:	2200      	movs	r2, #0
 8001402:	2100      	movs	r1, #0
 8001404:	2034      	movs	r0, #52	; 0x34
 8001406:	f000 f984 	bl	8001712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800140a:	2034      	movs	r0, #52	; 0x34
 800140c:	f000 f99d 	bl	800174a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001410:	bf00      	nop
 8001412:	3728      	adds	r7, #40	; 0x28
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40004c00 	.word	0x40004c00
 800141c:	40021000 	.word	0x40021000

08001420 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001420:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001458 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001424:	f7ff fc04 	bl	8000c30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001428:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800142a:	e003      	b.n	8001434 <LoopCopyDataInit>

0800142c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800142c:	4b0b      	ldr	r3, [pc, #44]	; (800145c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800142e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001430:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001432:	3104      	adds	r1, #4

08001434 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001434:	480a      	ldr	r0, [pc, #40]	; (8001460 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001436:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001438:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800143a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800143c:	d3f6      	bcc.n	800142c <CopyDataInit>
	ldr	r2, =_sbss
 800143e:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001440:	e002      	b.n	8001448 <LoopFillZerobss>

08001442 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001442:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001444:	f842 3b04 	str.w	r3, [r2], #4

08001448 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <LoopForever+0x16>)
	cmp	r2, r3
 800144a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800144c:	d3f9      	bcc.n	8001442 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800144e:	f002 ffd3 	bl	80043f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001452:	f7ff fa86 	bl	8000962 <main>

08001456 <LoopForever>:

LoopForever:
    b LoopForever
 8001456:	e7fe      	b.n	8001456 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001458:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800145c:	08005898 	.word	0x08005898
	ldr	r0, =_sdata
 8001460:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001464:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001468:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 800146c:	200005bc 	.word	0x200005bc

08001470 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001470:	e7fe      	b.n	8001470 <ADC1_2_IRQHandler>

08001472 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001478:	2300      	movs	r3, #0
 800147a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800147c:	2003      	movs	r0, #3
 800147e:	f000 f93d 	bl	80016fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001482:	2000      	movs	r0, #0
 8001484:	f000 f80e 	bl	80014a4 <HAL_InitTick>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d002      	beq.n	8001494 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	71fb      	strb	r3, [r7, #7]
 8001492:	e001      	b.n	8001498 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001494:	f7ff faec 	bl	8000a70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001498:	79fb      	ldrb	r3, [r7, #7]
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014ac:	2300      	movs	r3, #0
 80014ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014b0:	4b17      	ldr	r3, [pc, #92]	; (8001510 <HAL_InitTick+0x6c>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d023      	beq.n	8001500 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014b8:	4b16      	ldr	r3, [pc, #88]	; (8001514 <HAL_InitTick+0x70>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4b14      	ldr	r3, [pc, #80]	; (8001510 <HAL_InitTick+0x6c>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	4619      	mov	r1, r3
 80014c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ce:	4618      	mov	r0, r3
 80014d0:	f000 f949 	bl	8001766 <HAL_SYSTICK_Config>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d10f      	bne.n	80014fa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b0f      	cmp	r3, #15
 80014de:	d809      	bhi.n	80014f4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014e0:	2200      	movs	r2, #0
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	f04f 30ff 	mov.w	r0, #4294967295
 80014e8:	f000 f913 	bl	8001712 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014ec:	4a0a      	ldr	r2, [pc, #40]	; (8001518 <HAL_InitTick+0x74>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	e007      	b.n	8001504 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	73fb      	strb	r3, [r7, #15]
 80014f8:	e004      	b.n	8001504 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	73fb      	strb	r3, [r7, #15]
 80014fe:	e001      	b.n	8001504 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001504:	7bfb      	ldrb	r3, [r7, #15]
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000008 	.word	0x20000008
 8001514:	20000000 	.word	0x20000000
 8001518:	20000004 	.word	0x20000004

0800151c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_IncTick+0x20>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	461a      	mov	r2, r3
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_IncTick+0x24>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4413      	add	r3, r2
 800152c:	4a04      	ldr	r2, [pc, #16]	; (8001540 <HAL_IncTick+0x24>)
 800152e:	6013      	str	r3, [r2, #0]
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	20000008 	.word	0x20000008
 8001540:	200005a8 	.word	0x200005a8

08001544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return uwTick;
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <HAL_GetTick+0x14>)
 800154a:	681b      	ldr	r3, [r3, #0]
}
 800154c:	4618      	mov	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	200005a8 	.word	0x200005a8

0800155c <__NVIC_SetPriorityGrouping>:
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <__NVIC_SetPriorityGrouping+0x44>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001578:	4013      	ands	r3, r2
 800157a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001584:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800158c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800158e:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	60d3      	str	r3, [r2, #12]
}
 8001594:	bf00      	nop
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <__NVIC_GetPriorityGrouping>:
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a8:	4b04      	ldr	r3, [pc, #16]	; (80015bc <__NVIC_GetPriorityGrouping+0x18>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	0a1b      	lsrs	r3, r3, #8
 80015ae:	f003 0307 	and.w	r3, r3, #7
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <__NVIC_EnableIRQ>:
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	db0b      	blt.n	80015ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	f003 021f 	and.w	r2, r3, #31
 80015d8:	4907      	ldr	r1, [pc, #28]	; (80015f8 <__NVIC_EnableIRQ+0x38>)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	095b      	lsrs	r3, r3, #5
 80015e0:	2001      	movs	r0, #1
 80015e2:	fa00 f202 	lsl.w	r2, r0, r2
 80015e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000e100 	.word	0xe000e100

080015fc <__NVIC_SetPriority>:
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	6039      	str	r1, [r7, #0]
 8001606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160c:	2b00      	cmp	r3, #0
 800160e:	db0a      	blt.n	8001626 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	b2da      	uxtb	r2, r3
 8001614:	490c      	ldr	r1, [pc, #48]	; (8001648 <__NVIC_SetPriority+0x4c>)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	0112      	lsls	r2, r2, #4
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	440b      	add	r3, r1
 8001620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001624:	e00a      	b.n	800163c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4908      	ldr	r1, [pc, #32]	; (800164c <__NVIC_SetPriority+0x50>)
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	3b04      	subs	r3, #4
 8001634:	0112      	lsls	r2, r2, #4
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	440b      	add	r3, r1
 800163a:	761a      	strb	r2, [r3, #24]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000e100 	.word	0xe000e100
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <NVIC_EncodePriority>:
{
 8001650:	b480      	push	{r7}
 8001652:	b089      	sub	sp, #36	; 0x24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f1c3 0307 	rsb	r3, r3, #7
 800166a:	2b04      	cmp	r3, #4
 800166c:	bf28      	it	cs
 800166e:	2304      	movcs	r3, #4
 8001670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3304      	adds	r3, #4
 8001676:	2b06      	cmp	r3, #6
 8001678:	d902      	bls.n	8001680 <NVIC_EncodePriority+0x30>
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3b03      	subs	r3, #3
 800167e:	e000      	b.n	8001682 <NVIC_EncodePriority+0x32>
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	f04f 32ff 	mov.w	r2, #4294967295
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43da      	mvns	r2, r3
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	401a      	ands	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001698:	f04f 31ff 	mov.w	r1, #4294967295
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	fa01 f303 	lsl.w	r3, r1, r3
 80016a2:	43d9      	mvns	r1, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a8:	4313      	orrs	r3, r2
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3724      	adds	r7, #36	; 0x24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
	...

080016b8 <SysTick_Config>:
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016c8:	d301      	bcc.n	80016ce <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80016ca:	2301      	movs	r3, #1
 80016cc:	e00f      	b.n	80016ee <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ce:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <SysTick_Config+0x40>)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016d6:	210f      	movs	r1, #15
 80016d8:	f04f 30ff 	mov.w	r0, #4294967295
 80016dc:	f7ff ff8e 	bl	80015fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <SysTick_Config+0x40>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016e6:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <SysTick_Config+0x40>)
 80016e8:	2207      	movs	r2, #7
 80016ea:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	e000e010 	.word	0xe000e010

080016fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff ff29 	bl	800155c <__NVIC_SetPriorityGrouping>
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b086      	sub	sp, #24
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	60b9      	str	r1, [r7, #8]
 800171c:	607a      	str	r2, [r7, #4]
 800171e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001724:	f7ff ff3e 	bl	80015a4 <__NVIC_GetPriorityGrouping>
 8001728:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	68b9      	ldr	r1, [r7, #8]
 800172e:	6978      	ldr	r0, [r7, #20]
 8001730:	f7ff ff8e 	bl	8001650 <NVIC_EncodePriority>
 8001734:	4602      	mov	r2, r0
 8001736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800173a:	4611      	mov	r1, r2
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff5d 	bl	80015fc <__NVIC_SetPriority>
}
 8001742:	bf00      	nop
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	4603      	mov	r3, r0
 8001752:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff31 	bl	80015c0 <__NVIC_EnableIRQ>
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff ffa2 	bl	80016b8 <SysTick_Config>
 8001774:	4603      	mov	r3, r0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800177e:	b480      	push	{r7}
 8001780:	b085      	sub	sp, #20
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001786:	2300      	movs	r3, #0
 8001788:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d008      	beq.n	80017a8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2204      	movs	r2, #4
 800179a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e022      	b.n	80017ee <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 020e 	bic.w	r2, r2, #14
 80017b6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f022 0201 	bic.w	r2, r2, #1
 80017c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017cc:	f003 021c 	and.w	r2, r3, #28
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	2101      	movs	r1, #1
 80017d6:	fa01 f202 	lsl.w	r2, r1, r2
 80017da:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b084      	sub	sp, #16
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001802:	2300      	movs	r3, #0
 8001804:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d005      	beq.n	800181e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2204      	movs	r2, #4
 8001816:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	73fb      	strb	r3, [r7, #15]
 800181c:	e029      	b.n	8001872 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 020e 	bic.w	r2, r2, #14
 800182c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 0201 	bic.w	r2, r2, #1
 800183c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	f003 021c 	and.w	r2, r3, #28
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	2101      	movs	r1, #1
 800184c:	fa01 f202 	lsl.w	r2, r1, r2
 8001850:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	4798      	blx	r3
    }
  }
  return status;
 8001872:	7bfb      	ldrb	r3, [r7, #15]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800187c:	b480      	push	{r7}
 800187e:	b087      	sub	sp, #28
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800188a:	e17f      	b.n	8001b8c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	2101      	movs	r1, #1
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	fa01 f303 	lsl.w	r3, r1, r3
 8001898:	4013      	ands	r3, r2
 800189a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 8171 	beq.w	8001b86 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d00b      	beq.n	80018c4 <HAL_GPIO_Init+0x48>
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d007      	beq.n	80018c4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018b8:	2b11      	cmp	r3, #17
 80018ba:	d003      	beq.n	80018c4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	2b12      	cmp	r3, #18
 80018c2:	d130      	bne.n	8001926 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	2203      	movs	r2, #3
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018fa:	2201      	movs	r2, #1
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	4013      	ands	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	091b      	lsrs	r3, r3, #4
 8001910:	f003 0201 	and.w	r2, r3, #1
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4313      	orrs	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f003 0303 	and.w	r3, r3, #3
 800192e:	2b03      	cmp	r3, #3
 8001930:	d118      	bne.n	8001964 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001936:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001938:	2201      	movs	r2, #1
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4013      	ands	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	08db      	lsrs	r3, r3, #3
 800194e:	f003 0201 	and.w	r2, r3, #1
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	4313      	orrs	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	2203      	movs	r2, #3
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4013      	ands	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4313      	orrs	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b02      	cmp	r3, #2
 800199a:	d003      	beq.n	80019a4 <HAL_GPIO_Init+0x128>
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b12      	cmp	r3, #18
 80019a2:	d123      	bne.n	80019ec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	08da      	lsrs	r2, r3, #3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3208      	adds	r2, #8
 80019ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	220f      	movs	r2, #15
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4013      	ands	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	691a      	ldr	r2, [r3, #16]
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4313      	orrs	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	08da      	lsrs	r2, r3, #3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3208      	adds	r2, #8
 80019e6:	6939      	ldr	r1, [r7, #16]
 80019e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	2203      	movs	r2, #3
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	4013      	ands	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 0203 	and.w	r2, r3, #3
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f000 80ac 	beq.w	8001b86 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2e:	4b5f      	ldr	r3, [pc, #380]	; (8001bac <HAL_GPIO_Init+0x330>)
 8001a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a32:	4a5e      	ldr	r2, [pc, #376]	; (8001bac <HAL_GPIO_Init+0x330>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6613      	str	r3, [r2, #96]	; 0x60
 8001a3a:	4b5c      	ldr	r3, [pc, #368]	; (8001bac <HAL_GPIO_Init+0x330>)
 8001a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a46:	4a5a      	ldr	r2, [pc, #360]	; (8001bb0 <HAL_GPIO_Init+0x334>)
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	089b      	lsrs	r3, r3, #2
 8001a4c:	3302      	adds	r3, #2
 8001a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a52:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	220f      	movs	r2, #15
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	4013      	ands	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a70:	d025      	beq.n	8001abe <HAL_GPIO_Init+0x242>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a4f      	ldr	r2, [pc, #316]	; (8001bb4 <HAL_GPIO_Init+0x338>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d01f      	beq.n	8001aba <HAL_GPIO_Init+0x23e>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a4e      	ldr	r2, [pc, #312]	; (8001bb8 <HAL_GPIO_Init+0x33c>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d019      	beq.n	8001ab6 <HAL_GPIO_Init+0x23a>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a4d      	ldr	r2, [pc, #308]	; (8001bbc <HAL_GPIO_Init+0x340>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d013      	beq.n	8001ab2 <HAL_GPIO_Init+0x236>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a4c      	ldr	r2, [pc, #304]	; (8001bc0 <HAL_GPIO_Init+0x344>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d00d      	beq.n	8001aae <HAL_GPIO_Init+0x232>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a4b      	ldr	r2, [pc, #300]	; (8001bc4 <HAL_GPIO_Init+0x348>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d007      	beq.n	8001aaa <HAL_GPIO_Init+0x22e>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a4a      	ldr	r2, [pc, #296]	; (8001bc8 <HAL_GPIO_Init+0x34c>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d101      	bne.n	8001aa6 <HAL_GPIO_Init+0x22a>
 8001aa2:	2306      	movs	r3, #6
 8001aa4:	e00c      	b.n	8001ac0 <HAL_GPIO_Init+0x244>
 8001aa6:	2307      	movs	r3, #7
 8001aa8:	e00a      	b.n	8001ac0 <HAL_GPIO_Init+0x244>
 8001aaa:	2305      	movs	r3, #5
 8001aac:	e008      	b.n	8001ac0 <HAL_GPIO_Init+0x244>
 8001aae:	2304      	movs	r3, #4
 8001ab0:	e006      	b.n	8001ac0 <HAL_GPIO_Init+0x244>
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e004      	b.n	8001ac0 <HAL_GPIO_Init+0x244>
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	e002      	b.n	8001ac0 <HAL_GPIO_Init+0x244>
 8001aba:	2301      	movs	r3, #1
 8001abc:	e000      	b.n	8001ac0 <HAL_GPIO_Init+0x244>
 8001abe:	2300      	movs	r3, #0
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	f002 0203 	and.w	r2, r2, #3
 8001ac6:	0092      	lsls	r2, r2, #2
 8001ac8:	4093      	lsls	r3, r2
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ad0:	4937      	ldr	r1, [pc, #220]	; (8001bb0 <HAL_GPIO_Init+0x334>)
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	089b      	lsrs	r3, r3, #2
 8001ad6:	3302      	adds	r3, #2
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ade:	4b3b      	ldr	r3, [pc, #236]	; (8001bcc <HAL_GPIO_Init+0x350>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	4013      	ands	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b02:	4a32      	ldr	r2, [pc, #200]	; (8001bcc <HAL_GPIO_Init+0x350>)
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001b08:	4b30      	ldr	r3, [pc, #192]	; (8001bcc <HAL_GPIO_Init+0x350>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4013      	ands	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b2c:	4a27      	ldr	r2, [pc, #156]	; (8001bcc <HAL_GPIO_Init+0x350>)
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b32:	4b26      	ldr	r3, [pc, #152]	; (8001bcc <HAL_GPIO_Init+0x350>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b56:	4a1d      	ldr	r2, [pc, #116]	; (8001bcc <HAL_GPIO_Init+0x350>)
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b5c:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <HAL_GPIO_Init+0x350>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	43db      	mvns	r3, r3
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b80:	4a12      	ldr	r2, [pc, #72]	; (8001bcc <HAL_GPIO_Init+0x350>)
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	fa22 f303 	lsr.w	r3, r2, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f47f ae78 	bne.w	800188c <HAL_GPIO_Init+0x10>
  }
}
 8001b9c:	bf00      	nop
 8001b9e:	bf00      	nop
 8001ba0:	371c      	adds	r7, #28
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40010000 	.word	0x40010000
 8001bb4:	48000400 	.word	0x48000400
 8001bb8:	48000800 	.word	0x48000800
 8001bbc:	48000c00 	.word	0x48000c00
 8001bc0:	48001000 	.word	0x48001000
 8001bc4:	48001400 	.word	0x48001400
 8001bc8:	48001800 	.word	0x48001800
 8001bcc:	40010400 	.word	0x40010400

08001bd0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001bd4:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	40007000 	.word	0x40007000

08001bec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bfa:	d130      	bne.n	8001c5e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bfc:	4b23      	ldr	r3, [pc, #140]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c08:	d038      	beq.n	8001c7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c0a:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c12:	4a1e      	ldr	r2, [pc, #120]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c18:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c1a:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2232      	movs	r2, #50	; 0x32
 8001c20:	fb02 f303 	mul.w	r3, r2, r3
 8001c24:	4a1b      	ldr	r2, [pc, #108]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c26:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2a:	0c9b      	lsrs	r3, r3, #18
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c30:	e002      	b.n	8001c38 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	3b01      	subs	r3, #1
 8001c36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c38:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c3a:	695b      	ldr	r3, [r3, #20]
 8001c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c44:	d102      	bne.n	8001c4c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1f2      	bne.n	8001c32 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c58:	d110      	bne.n	8001c7c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e00f      	b.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c5e:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c6a:	d007      	beq.n	8001c7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c6c:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c74:	4a05      	ldr	r2, [pc, #20]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c7a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	40007000 	.word	0x40007000
 8001c90:	20000000 	.word	0x20000000
 8001c94:	431bde83 	.word	0x431bde83

08001c98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b088      	sub	sp, #32
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e3d4      	b.n	8002454 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001caa:	4ba1      	ldr	r3, [pc, #644]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 030c 	and.w	r3, r3, #12
 8001cb2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cb4:	4b9e      	ldr	r3, [pc, #632]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f003 0303 	and.w	r3, r3, #3
 8001cbc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0310 	and.w	r3, r3, #16
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 80e4 	beq.w	8001e94 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d007      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x4a>
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	2b0c      	cmp	r3, #12
 8001cd6:	f040 808b 	bne.w	8001df0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	f040 8087 	bne.w	8001df0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ce2:	4b93      	ldr	r3, [pc, #588]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d005      	beq.n	8001cfa <HAL_RCC_OscConfig+0x62>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e3ac      	b.n	8002454 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a1a      	ldr	r2, [r3, #32]
 8001cfe:	4b8c      	ldr	r3, [pc, #560]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0308 	and.w	r3, r3, #8
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d004      	beq.n	8001d14 <HAL_RCC_OscConfig+0x7c>
 8001d0a:	4b89      	ldr	r3, [pc, #548]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d12:	e005      	b.n	8001d20 <HAL_RCC_OscConfig+0x88>
 8001d14:	4b86      	ldr	r3, [pc, #536]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d1a:	091b      	lsrs	r3, r3, #4
 8001d1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d223      	bcs.n	8001d6c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f000 fd41 	bl	80027b0 <RCC_SetFlashLatencyFromMSIRange>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e38d      	b.n	8002454 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d38:	4b7d      	ldr	r3, [pc, #500]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a7c      	ldr	r2, [pc, #496]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001d3e:	f043 0308 	orr.w	r3, r3, #8
 8001d42:	6013      	str	r3, [r2, #0]
 8001d44:	4b7a      	ldr	r3, [pc, #488]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	4977      	ldr	r1, [pc, #476]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d56:	4b76      	ldr	r3, [pc, #472]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	021b      	lsls	r3, r3, #8
 8001d64:	4972      	ldr	r1, [pc, #456]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	604b      	str	r3, [r1, #4]
 8001d6a:	e025      	b.n	8001db8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d6c:	4b70      	ldr	r3, [pc, #448]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a6f      	ldr	r2, [pc, #444]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001d72:	f043 0308 	orr.w	r3, r3, #8
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	4b6d      	ldr	r3, [pc, #436]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	496a      	ldr	r1, [pc, #424]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d8a:	4b69      	ldr	r3, [pc, #420]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	021b      	lsls	r3, r3, #8
 8001d98:	4965      	ldr	r1, [pc, #404]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d109      	bne.n	8001db8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f000 fd01 	bl	80027b0 <RCC_SetFlashLatencyFromMSIRange>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e34d      	b.n	8002454 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001db8:	f000 fc36 	bl	8002628 <HAL_RCC_GetSysClockFreq>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	4b5c      	ldr	r3, [pc, #368]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	091b      	lsrs	r3, r3, #4
 8001dc4:	f003 030f 	and.w	r3, r3, #15
 8001dc8:	495a      	ldr	r1, [pc, #360]	; (8001f34 <HAL_RCC_OscConfig+0x29c>)
 8001dca:	5ccb      	ldrb	r3, [r1, r3]
 8001dcc:	f003 031f 	and.w	r3, r3, #31
 8001dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd4:	4a58      	ldr	r2, [pc, #352]	; (8001f38 <HAL_RCC_OscConfig+0x2a0>)
 8001dd6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001dd8:	4b58      	ldr	r3, [pc, #352]	; (8001f3c <HAL_RCC_OscConfig+0x2a4>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff fb61 	bl	80014a4 <HAL_InitTick>
 8001de2:	4603      	mov	r3, r0
 8001de4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d052      	beq.n	8001e92 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
 8001dee:	e331      	b.n	8002454 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d032      	beq.n	8001e5e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001df8:	4b4d      	ldr	r3, [pc, #308]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a4c      	ldr	r2, [pc, #304]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e04:	f7ff fb9e 	bl	8001544 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e0c:	f7ff fb9a 	bl	8001544 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e31a      	b.n	8002454 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e1e:	4b44      	ldr	r3, [pc, #272]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e2a:	4b41      	ldr	r3, [pc, #260]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a40      	ldr	r2, [pc, #256]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001e30:	f043 0308 	orr.w	r3, r3, #8
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	4b3e      	ldr	r3, [pc, #248]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	493b      	ldr	r1, [pc, #236]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e48:	4b39      	ldr	r3, [pc, #228]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69db      	ldr	r3, [r3, #28]
 8001e54:	021b      	lsls	r3, r3, #8
 8001e56:	4936      	ldr	r1, [pc, #216]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	604b      	str	r3, [r1, #4]
 8001e5c:	e01a      	b.n	8001e94 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e5e:	4b34      	ldr	r3, [pc, #208]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a33      	ldr	r2, [pc, #204]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001e64:	f023 0301 	bic.w	r3, r3, #1
 8001e68:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e6a:	f7ff fb6b 	bl	8001544 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e72:	f7ff fb67 	bl	8001544 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e2e7      	b.n	8002454 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e84:	4b2a      	ldr	r3, [pc, #168]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1f0      	bne.n	8001e72 <HAL_RCC_OscConfig+0x1da>
 8001e90:	e000      	b.n	8001e94 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e92:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d074      	beq.n	8001f8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	2b08      	cmp	r3, #8
 8001ea4:	d005      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x21a>
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	2b0c      	cmp	r3, #12
 8001eaa:	d10e      	bne.n	8001eca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	2b03      	cmp	r3, #3
 8001eb0:	d10b      	bne.n	8001eca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb2:	4b1f      	ldr	r3, [pc, #124]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d064      	beq.n	8001f88 <HAL_RCC_OscConfig+0x2f0>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d160      	bne.n	8001f88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e2c4      	b.n	8002454 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ed2:	d106      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x24a>
 8001ed4:	4b16      	ldr	r3, [pc, #88]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a15      	ldr	r2, [pc, #84]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001eda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	e01d      	b.n	8001f1e <HAL_RCC_OscConfig+0x286>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001eea:	d10c      	bne.n	8001f06 <HAL_RCC_OscConfig+0x26e>
 8001eec:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a0f      	ldr	r2, [pc, #60]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001ef2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ef6:	6013      	str	r3, [r2, #0]
 8001ef8:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a0c      	ldr	r2, [pc, #48]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f02:	6013      	str	r3, [r2, #0]
 8001f04:	e00b      	b.n	8001f1e <HAL_RCC_OscConfig+0x286>
 8001f06:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a09      	ldr	r2, [pc, #36]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001f0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	4b07      	ldr	r3, [pc, #28]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a06      	ldr	r2, [pc, #24]	; (8001f30 <HAL_RCC_OscConfig+0x298>)
 8001f18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f1c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d01c      	beq.n	8001f60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f26:	f7ff fb0d 	bl	8001544 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f2c:	e011      	b.n	8001f52 <HAL_RCC_OscConfig+0x2ba>
 8001f2e:	bf00      	nop
 8001f30:	40021000 	.word	0x40021000
 8001f34:	080056a8 	.word	0x080056a8
 8001f38:	20000000 	.word	0x20000000
 8001f3c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f40:	f7ff fb00 	bl	8001544 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b64      	cmp	r3, #100	; 0x64
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e280      	b.n	8002454 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f52:	4baf      	ldr	r3, [pc, #700]	; (8002210 <HAL_RCC_OscConfig+0x578>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCC_OscConfig+0x2a8>
 8001f5e:	e014      	b.n	8001f8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f60:	f7ff faf0 	bl	8001544 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f68:	f7ff faec 	bl	8001544 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b64      	cmp	r3, #100	; 0x64
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e26c      	b.n	8002454 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f7a:	4ba5      	ldr	r3, [pc, #660]	; (8002210 <HAL_RCC_OscConfig+0x578>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f0      	bne.n	8001f68 <HAL_RCC_OscConfig+0x2d0>
 8001f86:	e000      	b.n	8001f8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d060      	beq.n	8002058 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	2b04      	cmp	r3, #4
 8001f9a:	d005      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x310>
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	2b0c      	cmp	r3, #12
 8001fa0:	d119      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d116      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fa8:	4b99      	ldr	r3, [pc, #612]	; (8002210 <HAL_RCC_OscConfig+0x578>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d005      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x328>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e249      	b.n	8002454 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc0:	4b93      	ldr	r3, [pc, #588]	; (8002210 <HAL_RCC_OscConfig+0x578>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	061b      	lsls	r3, r3, #24
 8001fce:	4990      	ldr	r1, [pc, #576]	; (8002210 <HAL_RCC_OscConfig+0x578>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fd4:	e040      	b.n	8002058 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d023      	beq.n	8002026 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fde:	4b8c      	ldr	r3, [pc, #560]	; (8002210 <HAL_RCC_OscConfig+0x578>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a8b      	ldr	r2, [pc, #556]	; (8002210 <HAL_RCC_OscConfig+0x578>)
 8001fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fea:	f7ff faab 	bl	8001544 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff2:	f7ff faa7 	bl	8001544 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e227      	b.n	8002454 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002004:	4b82      	ldr	r3, [pc, #520]	; (8002210 <HAL_RCC_OscConfig+0x578>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0f0      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002010:	4b7f      	ldr	r3, [pc, #508]	; (8002210 <HAL_RCC_OscConfig+0x578>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	061b      	lsls	r3, r3, #24
 800201e:	497c      	ldr	r1, [pc, #496]	; (8002210 <HAL_RCC_OscConfig+0x578>)
 8002020:	4313      	orrs	r3, r2
 8002022:	604b      	str	r3, [r1, #4]
 8002024:	e018      	b.n	8002058 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002026:	4b7a      	ldr	r3, [pc, #488]	; (8002210 <HAL_RCC_OscConfig+0x578>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a79      	ldr	r2, [pc, #484]	; (8002210 <HAL_RCC_OscConfig+0x578>)
 800202c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002032:	f7ff fa87 	bl	8001544 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800203a:	f7ff fa83 	bl	8001544 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e203      	b.n	8002454 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800204c:	4b70      	ldr	r3, [pc, #448]	; (8002210 <HAL_RCC_OscConfig+0x578>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1f0      	bne.n	800203a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0308 	and.w	r3, r3, #8
 8002060:	2b00      	cmp	r3, #0
 8002062:	d03c      	beq.n	80020de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d01c      	beq.n	80020a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800206c:	4b68      	ldr	r3, [pc, #416]	; (8002210 <HAL_RCC_OscConfig+0x578>)
 800206e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002072:	4a67      	ldr	r2, [pc, #412]	; (8002210 <HAL_RCC_OscConfig+0x578>)
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207c:	f7ff fa62 	bl	8001544 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002084:	f7ff fa5e 	bl	8001544 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e1de      	b.n	8002454 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002096:	4b5e      	ldr	r3, [pc, #376]	; (8002210 <HAL_RCC_OscConfig+0x578>)
 8002098:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0ef      	beq.n	8002084 <HAL_RCC_OscConfig+0x3ec>
 80020a4:	e01b      	b.n	80020de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020a6:	4b5a      	ldr	r3, [pc, #360]	; (8002210 <HAL_RCC_OscConfig+0x578>)
 80020a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ac:	4a58      	ldr	r2, [pc, #352]	; (8002210 <HAL_RCC_OscConfig+0x578>)
 80020ae:	f023 0301 	bic.w	r3, r3, #1
 80020b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b6:	f7ff fa45 	bl	8001544 <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020bc:	e008      	b.n	80020d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020be:	f7ff fa41 	bl	8001544 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e1c1      	b.n	8002454 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020d0:	4b4f      	ldr	r3, [pc, #316]	; (8002210 <HAL_RCC_OscConfig+0x578>)
 80020d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1ef      	bne.n	80020be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 80a6 	beq.w	8002238 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ec:	2300      	movs	r3, #0
 80020ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020f0:	4b47      	ldr	r3, [pc, #284]	; (8002210 <HAL_RCC_OscConfig+0x578>)
 80020f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10d      	bne.n	8002118 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020fc:	4b44      	ldr	r3, [pc, #272]	; (8002210 <HAL_RCC_OscConfig+0x578>)
 80020fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002100:	4a43      	ldr	r2, [pc, #268]	; (8002210 <HAL_RCC_OscConfig+0x578>)
 8002102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002106:	6593      	str	r3, [r2, #88]	; 0x58
 8002108:	4b41      	ldr	r3, [pc, #260]	; (8002210 <HAL_RCC_OscConfig+0x578>)
 800210a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002114:	2301      	movs	r3, #1
 8002116:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002118:	4b3e      	ldr	r3, [pc, #248]	; (8002214 <HAL_RCC_OscConfig+0x57c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002120:	2b00      	cmp	r3, #0
 8002122:	d118      	bne.n	8002156 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002124:	4b3b      	ldr	r3, [pc, #236]	; (8002214 <HAL_RCC_OscConfig+0x57c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a3a      	ldr	r2, [pc, #232]	; (8002214 <HAL_RCC_OscConfig+0x57c>)
 800212a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800212e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002130:	f7ff fa08 	bl	8001544 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002138:	f7ff fa04 	bl	8001544 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e184      	b.n	8002454 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800214a:	4b32      	ldr	r3, [pc, #200]	; (8002214 <HAL_RCC_OscConfig+0x57c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0f0      	beq.n	8002138 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d108      	bne.n	8002170 <HAL_RCC_OscConfig+0x4d8>
 800215e:	4b2c      	ldr	r3, [pc, #176]	; (8002210 <HAL_RCC_OscConfig+0x578>)
 8002160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002164:	4a2a      	ldr	r2, [pc, #168]	; (8002210 <HAL_RCC_OscConfig+0x578>)
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800216e:	e024      	b.n	80021ba <HAL_RCC_OscConfig+0x522>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	2b05      	cmp	r3, #5
 8002176:	d110      	bne.n	800219a <HAL_RCC_OscConfig+0x502>
 8002178:	4b25      	ldr	r3, [pc, #148]	; (8002210 <HAL_RCC_OscConfig+0x578>)
 800217a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217e:	4a24      	ldr	r2, [pc, #144]	; (8002210 <HAL_RCC_OscConfig+0x578>)
 8002180:	f043 0304 	orr.w	r3, r3, #4
 8002184:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002188:	4b21      	ldr	r3, [pc, #132]	; (8002210 <HAL_RCC_OscConfig+0x578>)
 800218a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218e:	4a20      	ldr	r2, [pc, #128]	; (8002210 <HAL_RCC_OscConfig+0x578>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002198:	e00f      	b.n	80021ba <HAL_RCC_OscConfig+0x522>
 800219a:	4b1d      	ldr	r3, [pc, #116]	; (8002210 <HAL_RCC_OscConfig+0x578>)
 800219c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a0:	4a1b      	ldr	r2, [pc, #108]	; (8002210 <HAL_RCC_OscConfig+0x578>)
 80021a2:	f023 0301 	bic.w	r3, r3, #1
 80021a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021aa:	4b19      	ldr	r3, [pc, #100]	; (8002210 <HAL_RCC_OscConfig+0x578>)
 80021ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b0:	4a17      	ldr	r2, [pc, #92]	; (8002210 <HAL_RCC_OscConfig+0x578>)
 80021b2:	f023 0304 	bic.w	r3, r3, #4
 80021b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d016      	beq.n	80021f0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c2:	f7ff f9bf 	bl	8001544 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021c8:	e00a      	b.n	80021e0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ca:	f7ff f9bb 	bl	8001544 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d8:	4293      	cmp	r3, r2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e139      	b.n	8002454 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021e0:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <HAL_RCC_OscConfig+0x578>)
 80021e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0ed      	beq.n	80021ca <HAL_RCC_OscConfig+0x532>
 80021ee:	e01a      	b.n	8002226 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f0:	f7ff f9a8 	bl	8001544 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021f6:	e00f      	b.n	8002218 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f8:	f7ff f9a4 	bl	8001544 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	f241 3288 	movw	r2, #5000	; 0x1388
 8002206:	4293      	cmp	r3, r2
 8002208:	d906      	bls.n	8002218 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e122      	b.n	8002454 <HAL_RCC_OscConfig+0x7bc>
 800220e:	bf00      	nop
 8002210:	40021000 	.word	0x40021000
 8002214:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002218:	4b90      	ldr	r3, [pc, #576]	; (800245c <HAL_RCC_OscConfig+0x7c4>)
 800221a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1e8      	bne.n	80021f8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002226:	7ffb      	ldrb	r3, [r7, #31]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d105      	bne.n	8002238 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800222c:	4b8b      	ldr	r3, [pc, #556]	; (800245c <HAL_RCC_OscConfig+0x7c4>)
 800222e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002230:	4a8a      	ldr	r2, [pc, #552]	; (800245c <HAL_RCC_OscConfig+0x7c4>)
 8002232:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002236:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 8108 	beq.w	8002452 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002246:	2b02      	cmp	r3, #2
 8002248:	f040 80d0 	bne.w	80023ec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800224c:	4b83      	ldr	r3, [pc, #524]	; (800245c <HAL_RCC_OscConfig+0x7c4>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f003 0203 	and.w	r2, r3, #3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225c:	429a      	cmp	r2, r3
 800225e:	d130      	bne.n	80022c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	3b01      	subs	r3, #1
 800226c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800226e:	429a      	cmp	r2, r3
 8002270:	d127      	bne.n	80022c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800227c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800227e:	429a      	cmp	r2, r3
 8002280:	d11f      	bne.n	80022c2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800228c:	2a07      	cmp	r2, #7
 800228e:	bf14      	ite	ne
 8002290:	2201      	movne	r2, #1
 8002292:	2200      	moveq	r2, #0
 8002294:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002296:	4293      	cmp	r3, r2
 8002298:	d113      	bne.n	80022c2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a4:	085b      	lsrs	r3, r3, #1
 80022a6:	3b01      	subs	r3, #1
 80022a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d109      	bne.n	80022c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	085b      	lsrs	r3, r3, #1
 80022ba:	3b01      	subs	r3, #1
 80022bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022be:	429a      	cmp	r2, r3
 80022c0:	d06e      	beq.n	80023a0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	2b0c      	cmp	r3, #12
 80022c6:	d069      	beq.n	800239c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80022c8:	4b64      	ldr	r3, [pc, #400]	; (800245c <HAL_RCC_OscConfig+0x7c4>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d105      	bne.n	80022e0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80022d4:	4b61      	ldr	r3, [pc, #388]	; (800245c <HAL_RCC_OscConfig+0x7c4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0b7      	b.n	8002454 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80022e4:	4b5d      	ldr	r3, [pc, #372]	; (800245c <HAL_RCC_OscConfig+0x7c4>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a5c      	ldr	r2, [pc, #368]	; (800245c <HAL_RCC_OscConfig+0x7c4>)
 80022ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022ee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022f0:	f7ff f928 	bl	8001544 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f8:	f7ff f924 	bl	8001544 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e0a4      	b.n	8002454 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800230a:	4b54      	ldr	r3, [pc, #336]	; (800245c <HAL_RCC_OscConfig+0x7c4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002316:	4b51      	ldr	r3, [pc, #324]	; (800245c <HAL_RCC_OscConfig+0x7c4>)
 8002318:	68da      	ldr	r2, [r3, #12]
 800231a:	4b51      	ldr	r3, [pc, #324]	; (8002460 <HAL_RCC_OscConfig+0x7c8>)
 800231c:	4013      	ands	r3, r2
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002326:	3a01      	subs	r2, #1
 8002328:	0112      	lsls	r2, r2, #4
 800232a:	4311      	orrs	r1, r2
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002330:	0212      	lsls	r2, r2, #8
 8002332:	4311      	orrs	r1, r2
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002338:	0852      	lsrs	r2, r2, #1
 800233a:	3a01      	subs	r2, #1
 800233c:	0552      	lsls	r2, r2, #21
 800233e:	4311      	orrs	r1, r2
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002344:	0852      	lsrs	r2, r2, #1
 8002346:	3a01      	subs	r2, #1
 8002348:	0652      	lsls	r2, r2, #25
 800234a:	4311      	orrs	r1, r2
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002350:	0912      	lsrs	r2, r2, #4
 8002352:	0452      	lsls	r2, r2, #17
 8002354:	430a      	orrs	r2, r1
 8002356:	4941      	ldr	r1, [pc, #260]	; (800245c <HAL_RCC_OscConfig+0x7c4>)
 8002358:	4313      	orrs	r3, r2
 800235a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800235c:	4b3f      	ldr	r3, [pc, #252]	; (800245c <HAL_RCC_OscConfig+0x7c4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a3e      	ldr	r2, [pc, #248]	; (800245c <HAL_RCC_OscConfig+0x7c4>)
 8002362:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002366:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002368:	4b3c      	ldr	r3, [pc, #240]	; (800245c <HAL_RCC_OscConfig+0x7c4>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	4a3b      	ldr	r2, [pc, #236]	; (800245c <HAL_RCC_OscConfig+0x7c4>)
 800236e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002372:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002374:	f7ff f8e6 	bl	8001544 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800237c:	f7ff f8e2 	bl	8001544 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e062      	b.n	8002454 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800238e:	4b33      	ldr	r3, [pc, #204]	; (800245c <HAL_RCC_OscConfig+0x7c4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f0      	beq.n	800237c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800239a:	e05a      	b.n	8002452 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e059      	b.n	8002454 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023a0:	4b2e      	ldr	r3, [pc, #184]	; (800245c <HAL_RCC_OscConfig+0x7c4>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d152      	bne.n	8002452 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023ac:	4b2b      	ldr	r3, [pc, #172]	; (800245c <HAL_RCC_OscConfig+0x7c4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a2a      	ldr	r2, [pc, #168]	; (800245c <HAL_RCC_OscConfig+0x7c4>)
 80023b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023b8:	4b28      	ldr	r3, [pc, #160]	; (800245c <HAL_RCC_OscConfig+0x7c4>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	4a27      	ldr	r2, [pc, #156]	; (800245c <HAL_RCC_OscConfig+0x7c4>)
 80023be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023c4:	f7ff f8be 	bl	8001544 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023cc:	f7ff f8ba 	bl	8001544 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e03a      	b.n	8002454 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023de:	4b1f      	ldr	r3, [pc, #124]	; (800245c <HAL_RCC_OscConfig+0x7c4>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0f0      	beq.n	80023cc <HAL_RCC_OscConfig+0x734>
 80023ea:	e032      	b.n	8002452 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	2b0c      	cmp	r3, #12
 80023f0:	d02d      	beq.n	800244e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f2:	4b1a      	ldr	r3, [pc, #104]	; (800245c <HAL_RCC_OscConfig+0x7c4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a19      	ldr	r2, [pc, #100]	; (800245c <HAL_RCC_OscConfig+0x7c4>)
 80023f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023fc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80023fe:	4b17      	ldr	r3, [pc, #92]	; (800245c <HAL_RCC_OscConfig+0x7c4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d105      	bne.n	8002416 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800240a:	4b14      	ldr	r3, [pc, #80]	; (800245c <HAL_RCC_OscConfig+0x7c4>)
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	4a13      	ldr	r2, [pc, #76]	; (800245c <HAL_RCC_OscConfig+0x7c4>)
 8002410:	f023 0303 	bic.w	r3, r3, #3
 8002414:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002416:	4b11      	ldr	r3, [pc, #68]	; (800245c <HAL_RCC_OscConfig+0x7c4>)
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	4a10      	ldr	r2, [pc, #64]	; (800245c <HAL_RCC_OscConfig+0x7c4>)
 800241c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002424:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002426:	f7ff f88d 	bl	8001544 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800242e:	f7ff f889 	bl	8001544 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e009      	b.n	8002454 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002440:	4b06      	ldr	r3, [pc, #24]	; (800245c <HAL_RCC_OscConfig+0x7c4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1f0      	bne.n	800242e <HAL_RCC_OscConfig+0x796>
 800244c:	e001      	b.n	8002452 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3720      	adds	r7, #32
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40021000 	.word	0x40021000
 8002460:	f99d808c 	.word	0xf99d808c

08002464 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e0c8      	b.n	800260a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002478:	4b66      	ldr	r3, [pc, #408]	; (8002614 <HAL_RCC_ClockConfig+0x1b0>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d910      	bls.n	80024a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002486:	4b63      	ldr	r3, [pc, #396]	; (8002614 <HAL_RCC_ClockConfig+0x1b0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 0207 	bic.w	r2, r3, #7
 800248e:	4961      	ldr	r1, [pc, #388]	; (8002614 <HAL_RCC_ClockConfig+0x1b0>)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	4313      	orrs	r3, r2
 8002494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002496:	4b5f      	ldr	r3, [pc, #380]	; (8002614 <HAL_RCC_ClockConfig+0x1b0>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d001      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e0b0      	b.n	800260a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d04c      	beq.n	800254e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	2b03      	cmp	r3, #3
 80024ba:	d107      	bne.n	80024cc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024bc:	4b56      	ldr	r3, [pc, #344]	; (8002618 <HAL_RCC_ClockConfig+0x1b4>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d121      	bne.n	800250c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e09e      	b.n	800260a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d107      	bne.n	80024e4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024d4:	4b50      	ldr	r3, [pc, #320]	; (8002618 <HAL_RCC_ClockConfig+0x1b4>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d115      	bne.n	800250c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e092      	b.n	800260a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d107      	bne.n	80024fc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024ec:	4b4a      	ldr	r3, [pc, #296]	; (8002618 <HAL_RCC_ClockConfig+0x1b4>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d109      	bne.n	800250c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e086      	b.n	800260a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024fc:	4b46      	ldr	r3, [pc, #280]	; (8002618 <HAL_RCC_ClockConfig+0x1b4>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e07e      	b.n	800260a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800250c:	4b42      	ldr	r3, [pc, #264]	; (8002618 <HAL_RCC_ClockConfig+0x1b4>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f023 0203 	bic.w	r2, r3, #3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	493f      	ldr	r1, [pc, #252]	; (8002618 <HAL_RCC_ClockConfig+0x1b4>)
 800251a:	4313      	orrs	r3, r2
 800251c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800251e:	f7ff f811 	bl	8001544 <HAL_GetTick>
 8002522:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002524:	e00a      	b.n	800253c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002526:	f7ff f80d 	bl	8001544 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	f241 3288 	movw	r2, #5000	; 0x1388
 8002534:	4293      	cmp	r3, r2
 8002536:	d901      	bls.n	800253c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e066      	b.n	800260a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800253c:	4b36      	ldr	r3, [pc, #216]	; (8002618 <HAL_RCC_ClockConfig+0x1b4>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 020c 	and.w	r2, r3, #12
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	429a      	cmp	r2, r3
 800254c:	d1eb      	bne.n	8002526 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d008      	beq.n	800256c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800255a:	4b2f      	ldr	r3, [pc, #188]	; (8002618 <HAL_RCC_ClockConfig+0x1b4>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	492c      	ldr	r1, [pc, #176]	; (8002618 <HAL_RCC_ClockConfig+0x1b4>)
 8002568:	4313      	orrs	r3, r2
 800256a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800256c:	4b29      	ldr	r3, [pc, #164]	; (8002614 <HAL_RCC_ClockConfig+0x1b0>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d210      	bcs.n	800259c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257a:	4b26      	ldr	r3, [pc, #152]	; (8002614 <HAL_RCC_ClockConfig+0x1b0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f023 0207 	bic.w	r2, r3, #7
 8002582:	4924      	ldr	r1, [pc, #144]	; (8002614 <HAL_RCC_ClockConfig+0x1b0>)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	4313      	orrs	r3, r2
 8002588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800258a:	4b22      	ldr	r3, [pc, #136]	; (8002614 <HAL_RCC_ClockConfig+0x1b0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d001      	beq.n	800259c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e036      	b.n	800260a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d008      	beq.n	80025ba <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025a8:	4b1b      	ldr	r3, [pc, #108]	; (8002618 <HAL_RCC_ClockConfig+0x1b4>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	4918      	ldr	r1, [pc, #96]	; (8002618 <HAL_RCC_ClockConfig+0x1b4>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d009      	beq.n	80025da <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025c6:	4b14      	ldr	r3, [pc, #80]	; (8002618 <HAL_RCC_ClockConfig+0x1b4>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	4910      	ldr	r1, [pc, #64]	; (8002618 <HAL_RCC_ClockConfig+0x1b4>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025da:	f000 f825 	bl	8002628 <HAL_RCC_GetSysClockFreq>
 80025de:	4602      	mov	r2, r0
 80025e0:	4b0d      	ldr	r3, [pc, #52]	; (8002618 <HAL_RCC_ClockConfig+0x1b4>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	091b      	lsrs	r3, r3, #4
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	490c      	ldr	r1, [pc, #48]	; (800261c <HAL_RCC_ClockConfig+0x1b8>)
 80025ec:	5ccb      	ldrb	r3, [r1, r3]
 80025ee:	f003 031f 	and.w	r3, r3, #31
 80025f2:	fa22 f303 	lsr.w	r3, r2, r3
 80025f6:	4a0a      	ldr	r2, [pc, #40]	; (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 80025f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025fa:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <HAL_RCC_ClockConfig+0x1c0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe ff50 	bl	80014a4 <HAL_InitTick>
 8002604:	4603      	mov	r3, r0
 8002606:	72fb      	strb	r3, [r7, #11]

  return status;
 8002608:	7afb      	ldrb	r3, [r7, #11]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40022000 	.word	0x40022000
 8002618:	40021000 	.word	0x40021000
 800261c:	080056a8 	.word	0x080056a8
 8002620:	20000000 	.word	0x20000000
 8002624:	20000004 	.word	0x20000004

08002628 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002628:	b480      	push	{r7}
 800262a:	b089      	sub	sp, #36	; 0x24
 800262c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800262e:	2300      	movs	r3, #0
 8002630:	61fb      	str	r3, [r7, #28]
 8002632:	2300      	movs	r3, #0
 8002634:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002636:	4b3e      	ldr	r3, [pc, #248]	; (8002730 <HAL_RCC_GetSysClockFreq+0x108>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 030c 	and.w	r3, r3, #12
 800263e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002640:	4b3b      	ldr	r3, [pc, #236]	; (8002730 <HAL_RCC_GetSysClockFreq+0x108>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d005      	beq.n	800265c <HAL_RCC_GetSysClockFreq+0x34>
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	2b0c      	cmp	r3, #12
 8002654:	d121      	bne.n	800269a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d11e      	bne.n	800269a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800265c:	4b34      	ldr	r3, [pc, #208]	; (8002730 <HAL_RCC_GetSysClockFreq+0x108>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0308 	and.w	r3, r3, #8
 8002664:	2b00      	cmp	r3, #0
 8002666:	d107      	bne.n	8002678 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002668:	4b31      	ldr	r3, [pc, #196]	; (8002730 <HAL_RCC_GetSysClockFreq+0x108>)
 800266a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800266e:	0a1b      	lsrs	r3, r3, #8
 8002670:	f003 030f 	and.w	r3, r3, #15
 8002674:	61fb      	str	r3, [r7, #28]
 8002676:	e005      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002678:	4b2d      	ldr	r3, [pc, #180]	; (8002730 <HAL_RCC_GetSysClockFreq+0x108>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	091b      	lsrs	r3, r3, #4
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002684:	4a2b      	ldr	r2, [pc, #172]	; (8002734 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800268c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10d      	bne.n	80026b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002698:	e00a      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	2b04      	cmp	r3, #4
 800269e:	d102      	bne.n	80026a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026a0:	4b25      	ldr	r3, [pc, #148]	; (8002738 <HAL_RCC_GetSysClockFreq+0x110>)
 80026a2:	61bb      	str	r3, [r7, #24]
 80026a4:	e004      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d101      	bne.n	80026b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026ac:	4b23      	ldr	r3, [pc, #140]	; (800273c <HAL_RCC_GetSysClockFreq+0x114>)
 80026ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	2b0c      	cmp	r3, #12
 80026b4:	d134      	bne.n	8002720 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026b6:	4b1e      	ldr	r3, [pc, #120]	; (8002730 <HAL_RCC_GetSysClockFreq+0x108>)
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d003      	beq.n	80026ce <HAL_RCC_GetSysClockFreq+0xa6>
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2b03      	cmp	r3, #3
 80026ca:	d003      	beq.n	80026d4 <HAL_RCC_GetSysClockFreq+0xac>
 80026cc:	e005      	b.n	80026da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80026ce:	4b1a      	ldr	r3, [pc, #104]	; (8002738 <HAL_RCC_GetSysClockFreq+0x110>)
 80026d0:	617b      	str	r3, [r7, #20]
      break;
 80026d2:	e005      	b.n	80026e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80026d4:	4b19      	ldr	r3, [pc, #100]	; (800273c <HAL_RCC_GetSysClockFreq+0x114>)
 80026d6:	617b      	str	r3, [r7, #20]
      break;
 80026d8:	e002      	b.n	80026e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	617b      	str	r3, [r7, #20]
      break;
 80026de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026e0:	4b13      	ldr	r3, [pc, #76]	; (8002730 <HAL_RCC_GetSysClockFreq+0x108>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	091b      	lsrs	r3, r3, #4
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	3301      	adds	r3, #1
 80026ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026ee:	4b10      	ldr	r3, [pc, #64]	; (8002730 <HAL_RCC_GetSysClockFreq+0x108>)
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	0a1b      	lsrs	r3, r3, #8
 80026f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	fb02 f203 	mul.w	r2, r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	fbb2 f3f3 	udiv	r3, r2, r3
 8002704:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002706:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <HAL_RCC_GetSysClockFreq+0x108>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	0e5b      	lsrs	r3, r3, #25
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	3301      	adds	r3, #1
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	fbb2 f3f3 	udiv	r3, r2, r3
 800271e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002720:	69bb      	ldr	r3, [r7, #24]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3724      	adds	r7, #36	; 0x24
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	40021000 	.word	0x40021000
 8002734:	080056c0 	.word	0x080056c0
 8002738:	00f42400 	.word	0x00f42400
 800273c:	02dc6c00 	.word	0x02dc6c00

08002740 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002744:	4b03      	ldr	r3, [pc, #12]	; (8002754 <HAL_RCC_GetHCLKFreq+0x14>)
 8002746:	681b      	ldr	r3, [r3, #0]
}
 8002748:	4618      	mov	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	20000000 	.word	0x20000000

08002758 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800275c:	f7ff fff0 	bl	8002740 <HAL_RCC_GetHCLKFreq>
 8002760:	4602      	mov	r2, r0
 8002762:	4b06      	ldr	r3, [pc, #24]	; (800277c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	0a1b      	lsrs	r3, r3, #8
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	4904      	ldr	r1, [pc, #16]	; (8002780 <HAL_RCC_GetPCLK1Freq+0x28>)
 800276e:	5ccb      	ldrb	r3, [r1, r3]
 8002770:	f003 031f 	and.w	r3, r3, #31
 8002774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002778:	4618      	mov	r0, r3
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40021000 	.word	0x40021000
 8002780:	080056b8 	.word	0x080056b8

08002784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002788:	f7ff ffda 	bl	8002740 <HAL_RCC_GetHCLKFreq>
 800278c:	4602      	mov	r2, r0
 800278e:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	0adb      	lsrs	r3, r3, #11
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	4904      	ldr	r1, [pc, #16]	; (80027ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800279a:	5ccb      	ldrb	r3, [r1, r3]
 800279c:	f003 031f 	and.w	r3, r3, #31
 80027a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40021000 	.word	0x40021000
 80027ac:	080056b8 	.word	0x080056b8

080027b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027b8:	2300      	movs	r3, #0
 80027ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027bc:	4b2a      	ldr	r3, [pc, #168]	; (8002868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d003      	beq.n	80027d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027c8:	f7ff fa02 	bl	8001bd0 <HAL_PWREx_GetVoltageRange>
 80027cc:	6178      	str	r0, [r7, #20]
 80027ce:	e014      	b.n	80027fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027d0:	4b25      	ldr	r3, [pc, #148]	; (8002868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d4:	4a24      	ldr	r2, [pc, #144]	; (8002868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027da:	6593      	str	r3, [r2, #88]	; 0x58
 80027dc:	4b22      	ldr	r3, [pc, #136]	; (8002868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80027e8:	f7ff f9f2 	bl	8001bd0 <HAL_PWREx_GetVoltageRange>
 80027ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80027ee:	4b1e      	ldr	r3, [pc, #120]	; (8002868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f2:	4a1d      	ldr	r2, [pc, #116]	; (8002868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027f8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002800:	d10b      	bne.n	800281a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b80      	cmp	r3, #128	; 0x80
 8002806:	d919      	bls.n	800283c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2ba0      	cmp	r3, #160	; 0xa0
 800280c:	d902      	bls.n	8002814 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800280e:	2302      	movs	r3, #2
 8002810:	613b      	str	r3, [r7, #16]
 8002812:	e013      	b.n	800283c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002814:	2301      	movs	r3, #1
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	e010      	b.n	800283c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b80      	cmp	r3, #128	; 0x80
 800281e:	d902      	bls.n	8002826 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002820:	2303      	movs	r3, #3
 8002822:	613b      	str	r3, [r7, #16]
 8002824:	e00a      	b.n	800283c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b80      	cmp	r3, #128	; 0x80
 800282a:	d102      	bne.n	8002832 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800282c:	2302      	movs	r3, #2
 800282e:	613b      	str	r3, [r7, #16]
 8002830:	e004      	b.n	800283c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b70      	cmp	r3, #112	; 0x70
 8002836:	d101      	bne.n	800283c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002838:	2301      	movs	r3, #1
 800283a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800283c:	4b0b      	ldr	r3, [pc, #44]	; (800286c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f023 0207 	bic.w	r2, r3, #7
 8002844:	4909      	ldr	r1, [pc, #36]	; (800286c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	4313      	orrs	r3, r2
 800284a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800284c:	4b07      	ldr	r3, [pc, #28]	; (800286c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	429a      	cmp	r2, r3
 8002858:	d001      	beq.n	800285e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40021000 	.word	0x40021000
 800286c:	40022000 	.word	0x40022000

08002870 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002878:	2300      	movs	r3, #0
 800287a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800287c:	2300      	movs	r3, #0
 800287e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002888:	2b00      	cmp	r3, #0
 800288a:	d041      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002890:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002894:	d02a      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002896:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800289a:	d824      	bhi.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800289c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028a0:	d008      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80028a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028a6:	d81e      	bhi.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00a      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80028ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028b0:	d010      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80028b2:	e018      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028b4:	4b86      	ldr	r3, [pc, #536]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	4a85      	ldr	r2, [pc, #532]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028be:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028c0:	e015      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3304      	adds	r3, #4
 80028c6:	2100      	movs	r1, #0
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 fabb 	bl	8002e44 <RCCEx_PLLSAI1_Config>
 80028ce:	4603      	mov	r3, r0
 80028d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028d2:	e00c      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3320      	adds	r3, #32
 80028d8:	2100      	movs	r1, #0
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 fba6 	bl	800302c <RCCEx_PLLSAI2_Config>
 80028e0:	4603      	mov	r3, r0
 80028e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028e4:	e003      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	74fb      	strb	r3, [r7, #19]
      break;
 80028ea:	e000      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80028ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028ee:	7cfb      	ldrb	r3, [r7, #19]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10b      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028f4:	4b76      	ldr	r3, [pc, #472]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002902:	4973      	ldr	r1, [pc, #460]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002904:	4313      	orrs	r3, r2
 8002906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800290a:	e001      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800290c:	7cfb      	ldrb	r3, [r7, #19]
 800290e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d041      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002920:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002924:	d02a      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002926:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800292a:	d824      	bhi.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800292c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002930:	d008      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002932:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002936:	d81e      	bhi.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00a      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800293c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002940:	d010      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002942:	e018      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002944:	4b62      	ldr	r3, [pc, #392]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	4a61      	ldr	r2, [pc, #388]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800294a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800294e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002950:	e015      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	3304      	adds	r3, #4
 8002956:	2100      	movs	r1, #0
 8002958:	4618      	mov	r0, r3
 800295a:	f000 fa73 	bl	8002e44 <RCCEx_PLLSAI1_Config>
 800295e:	4603      	mov	r3, r0
 8002960:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002962:	e00c      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3320      	adds	r3, #32
 8002968:	2100      	movs	r1, #0
 800296a:	4618      	mov	r0, r3
 800296c:	f000 fb5e 	bl	800302c <RCCEx_PLLSAI2_Config>
 8002970:	4603      	mov	r3, r0
 8002972:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002974:	e003      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	74fb      	strb	r3, [r7, #19]
      break;
 800297a:	e000      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800297c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800297e:	7cfb      	ldrb	r3, [r7, #19]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10b      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002984:	4b52      	ldr	r3, [pc, #328]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002992:	494f      	ldr	r1, [pc, #316]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002994:	4313      	orrs	r3, r2
 8002996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800299a:	e001      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800299c:	7cfb      	ldrb	r3, [r7, #19]
 800299e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 80a0 	beq.w	8002aee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ae:	2300      	movs	r3, #0
 80029b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029b2:	4b47      	ldr	r3, [pc, #284]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80029c2:	2300      	movs	r3, #0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00d      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029c8:	4b41      	ldr	r3, [pc, #260]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029cc:	4a40      	ldr	r2, [pc, #256]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d2:	6593      	str	r3, [r2, #88]	; 0x58
 80029d4:	4b3e      	ldr	r3, [pc, #248]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029e0:	2301      	movs	r3, #1
 80029e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029e4:	4b3b      	ldr	r3, [pc, #236]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a3a      	ldr	r2, [pc, #232]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029f0:	f7fe fda8 	bl	8001544 <HAL_GetTick>
 80029f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029f6:	e009      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f8:	f7fe fda4 	bl	8001544 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d902      	bls.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	74fb      	strb	r3, [r7, #19]
        break;
 8002a0a:	e005      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a0c:	4b31      	ldr	r3, [pc, #196]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0ef      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002a18:	7cfb      	ldrb	r3, [r7, #19]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d15c      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a1e:	4b2c      	ldr	r3, [pc, #176]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a28:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d01f      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d019      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a3c:	4b24      	ldr	r3, [pc, #144]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a48:	4b21      	ldr	r3, [pc, #132]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4e:	4a20      	ldr	r2, [pc, #128]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a58:	4b1d      	ldr	r3, [pc, #116]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5e:	4a1c      	ldr	r2, [pc, #112]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a68:	4a19      	ldr	r2, [pc, #100]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d016      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7a:	f7fe fd63 	bl	8001544 <HAL_GetTick>
 8002a7e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a80:	e00b      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a82:	f7fe fd5f 	bl	8001544 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d902      	bls.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	74fb      	strb	r3, [r7, #19]
            break;
 8002a98:	e006      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a9a:	4b0d      	ldr	r3, [pc, #52]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0ec      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002aa8:	7cfb      	ldrb	r3, [r7, #19]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10c      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002aae:	4b08      	ldr	r3, [pc, #32]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002abe:	4904      	ldr	r1, [pc, #16]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ac6:	e009      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ac8:	7cfb      	ldrb	r3, [r7, #19]
 8002aca:	74bb      	strb	r3, [r7, #18]
 8002acc:	e006      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002ace:	bf00      	nop
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ad8:	7cfb      	ldrb	r3, [r7, #19]
 8002ada:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002adc:	7c7b      	ldrb	r3, [r7, #17]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d105      	bne.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae2:	4b9e      	ldr	r3, [pc, #632]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae6:	4a9d      	ldr	r2, [pc, #628]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00a      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002afa:	4b98      	ldr	r3, [pc, #608]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b00:	f023 0203 	bic.w	r2, r3, #3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b08:	4994      	ldr	r1, [pc, #592]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00a      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b1c:	4b8f      	ldr	r3, [pc, #572]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b22:	f023 020c 	bic.w	r2, r3, #12
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b2a:	498c      	ldr	r1, [pc, #560]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0304 	and.w	r3, r3, #4
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00a      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b3e:	4b87      	ldr	r3, [pc, #540]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	4983      	ldr	r1, [pc, #524]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0308 	and.w	r3, r3, #8
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00a      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b60:	4b7e      	ldr	r3, [pc, #504]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6e:	497b      	ldr	r1, [pc, #492]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0310 	and.w	r3, r3, #16
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00a      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b82:	4b76      	ldr	r3, [pc, #472]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b90:	4972      	ldr	r1, [pc, #456]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00a      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ba4:	4b6d      	ldr	r3, [pc, #436]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002baa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb2:	496a      	ldr	r1, [pc, #424]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00a      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bc6:	4b65      	ldr	r3, [pc, #404]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bcc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd4:	4961      	ldr	r1, [pc, #388]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00a      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002be8:	4b5c      	ldr	r3, [pc, #368]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf6:	4959      	ldr	r1, [pc, #356]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00a      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c0a:	4b54      	ldr	r3, [pc, #336]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c10:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c18:	4950      	ldr	r1, [pc, #320]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00a      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c2c:	4b4b      	ldr	r3, [pc, #300]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c32:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3a:	4948      	ldr	r1, [pc, #288]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00a      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c4e:	4b43      	ldr	r3, [pc, #268]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5c:	493f      	ldr	r1, [pc, #252]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d028      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c70:	4b3a      	ldr	r3, [pc, #232]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c7e:	4937      	ldr	r1, [pc, #220]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c8e:	d106      	bne.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c90:	4b32      	ldr	r3, [pc, #200]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	4a31      	ldr	r2, [pc, #196]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c9a:	60d3      	str	r3, [r2, #12]
 8002c9c:	e011      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ca2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ca6:	d10c      	bne.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3304      	adds	r3, #4
 8002cac:	2101      	movs	r1, #1
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 f8c8 	bl	8002e44 <RCCEx_PLLSAI1_Config>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002cb8:	7cfb      	ldrb	r3, [r7, #19]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002cbe:	7cfb      	ldrb	r3, [r7, #19]
 8002cc0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d028      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cce:	4b23      	ldr	r3, [pc, #140]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cdc:	491f      	ldr	r1, [pc, #124]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cec:	d106      	bne.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cee:	4b1b      	ldr	r3, [pc, #108]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	4a1a      	ldr	r2, [pc, #104]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cf8:	60d3      	str	r3, [r2, #12]
 8002cfa:	e011      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d04:	d10c      	bne.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3304      	adds	r3, #4
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f000 f899 	bl	8002e44 <RCCEx_PLLSAI1_Config>
 8002d12:	4603      	mov	r3, r0
 8002d14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d16:	7cfb      	ldrb	r3, [r7, #19]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002d1c:	7cfb      	ldrb	r3, [r7, #19]
 8002d1e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d02b      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d2c:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d3a:	4908      	ldr	r1, [pc, #32]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d4a:	d109      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d4c:	4b03      	ldr	r3, [pc, #12]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	4a02      	ldr	r2, [pc, #8]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d56:	60d3      	str	r3, [r2, #12]
 8002d58:	e014      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002d5a:	bf00      	nop
 8002d5c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d68:	d10c      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	2101      	movs	r1, #1
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 f867 	bl	8002e44 <RCCEx_PLLSAI1_Config>
 8002d76:	4603      	mov	r3, r0
 8002d78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d7a:	7cfb      	ldrb	r3, [r7, #19]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002d80:	7cfb      	ldrb	r3, [r7, #19]
 8002d82:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d02f      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d90:	4b2b      	ldr	r3, [pc, #172]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d96:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d9e:	4928      	ldr	r1, [pc, #160]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002daa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dae:	d10d      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3304      	adds	r3, #4
 8002db4:	2102      	movs	r1, #2
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 f844 	bl	8002e44 <RCCEx_PLLSAI1_Config>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dc0:	7cfb      	ldrb	r3, [r7, #19]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d014      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002dc6:	7cfb      	ldrb	r3, [r7, #19]
 8002dc8:	74bb      	strb	r3, [r7, #18]
 8002dca:	e011      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dd4:	d10c      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	3320      	adds	r3, #32
 8002dda:	2102      	movs	r1, #2
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 f925 	bl	800302c <RCCEx_PLLSAI2_Config>
 8002de2:	4603      	mov	r3, r0
 8002de4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002de6:	7cfb      	ldrb	r3, [r7, #19]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002dec:	7cfb      	ldrb	r3, [r7, #19]
 8002dee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00a      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002dfc:	4b10      	ldr	r3, [pc, #64]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e02:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e0a:	490d      	ldr	r1, [pc, #52]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00b      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e1e:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e24:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e2e:	4904      	ldr	r1, [pc, #16]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e36:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3718      	adds	r7, #24
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40021000 	.word	0x40021000

08002e44 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e52:	4b75      	ldr	r3, [pc, #468]	; (8003028 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d018      	beq.n	8002e90 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e5e:	4b72      	ldr	r3, [pc, #456]	; (8003028 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	f003 0203 	and.w	r2, r3, #3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d10d      	bne.n	8002e8a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
       ||
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d009      	beq.n	8002e8a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e76:	4b6c      	ldr	r3, [pc, #432]	; (8003028 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	091b      	lsrs	r3, r3, #4
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	1c5a      	adds	r2, r3, #1
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
       ||
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d047      	beq.n	8002f1a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	73fb      	strb	r3, [r7, #15]
 8002e8e:	e044      	b.n	8002f1a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d018      	beq.n	8002eca <RCCEx_PLLSAI1_Config+0x86>
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d825      	bhi.n	8002ee8 <RCCEx_PLLSAI1_Config+0xa4>
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d002      	beq.n	8002ea6 <RCCEx_PLLSAI1_Config+0x62>
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d009      	beq.n	8002eb8 <RCCEx_PLLSAI1_Config+0x74>
 8002ea4:	e020      	b.n	8002ee8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ea6:	4b60      	ldr	r3, [pc, #384]	; (8003028 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d11d      	bne.n	8002eee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eb6:	e01a      	b.n	8002eee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002eb8:	4b5b      	ldr	r3, [pc, #364]	; (8003028 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d116      	bne.n	8002ef2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ec8:	e013      	b.n	8002ef2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002eca:	4b57      	ldr	r3, [pc, #348]	; (8003028 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10f      	bne.n	8002ef6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ed6:	4b54      	ldr	r3, [pc, #336]	; (8003028 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d109      	bne.n	8002ef6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ee6:	e006      	b.n	8002ef6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	73fb      	strb	r3, [r7, #15]
      break;
 8002eec:	e004      	b.n	8002ef8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002eee:	bf00      	nop
 8002ef0:	e002      	b.n	8002ef8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ef2:	bf00      	nop
 8002ef4:	e000      	b.n	8002ef8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ef6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10d      	bne.n	8002f1a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002efe:	4b4a      	ldr	r3, [pc, #296]	; (8003028 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6819      	ldr	r1, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	430b      	orrs	r3, r1
 8002f14:	4944      	ldr	r1, [pc, #272]	; (8003028 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d17d      	bne.n	800301c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f20:	4b41      	ldr	r3, [pc, #260]	; (8003028 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a40      	ldr	r2, [pc, #256]	; (8003028 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f2c:	f7fe fb0a 	bl	8001544 <HAL_GetTick>
 8002f30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f32:	e009      	b.n	8002f48 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f34:	f7fe fb06 	bl	8001544 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d902      	bls.n	8002f48 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	73fb      	strb	r3, [r7, #15]
        break;
 8002f46:	e005      	b.n	8002f54 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f48:	4b37      	ldr	r3, [pc, #220]	; (8003028 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1ef      	bne.n	8002f34 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d160      	bne.n	800301c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d111      	bne.n	8002f84 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f60:	4b31      	ldr	r3, [pc, #196]	; (8003028 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6892      	ldr	r2, [r2, #8]
 8002f70:	0211      	lsls	r1, r2, #8
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	68d2      	ldr	r2, [r2, #12]
 8002f76:	0912      	lsrs	r2, r2, #4
 8002f78:	0452      	lsls	r2, r2, #17
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	492a      	ldr	r1, [pc, #168]	; (8003028 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	610b      	str	r3, [r1, #16]
 8002f82:	e027      	b.n	8002fd4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d112      	bne.n	8002fb0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f8a:	4b27      	ldr	r3, [pc, #156]	; (8003028 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002f92:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6892      	ldr	r2, [r2, #8]
 8002f9a:	0211      	lsls	r1, r2, #8
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6912      	ldr	r2, [r2, #16]
 8002fa0:	0852      	lsrs	r2, r2, #1
 8002fa2:	3a01      	subs	r2, #1
 8002fa4:	0552      	lsls	r2, r2, #21
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	491f      	ldr	r1, [pc, #124]	; (8003028 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	610b      	str	r3, [r1, #16]
 8002fae:	e011      	b.n	8002fd4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fb0:	4b1d      	ldr	r3, [pc, #116]	; (8003028 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002fb8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6892      	ldr	r2, [r2, #8]
 8002fc0:	0211      	lsls	r1, r2, #8
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6952      	ldr	r2, [r2, #20]
 8002fc6:	0852      	lsrs	r2, r2, #1
 8002fc8:	3a01      	subs	r2, #1
 8002fca:	0652      	lsls	r2, r2, #25
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	4916      	ldr	r1, [pc, #88]	; (8003028 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002fd4:	4b14      	ldr	r3, [pc, #80]	; (8003028 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a13      	ldr	r2, [pc, #76]	; (8003028 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fda:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fde:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe0:	f7fe fab0 	bl	8001544 <HAL_GetTick>
 8002fe4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fe6:	e009      	b.n	8002ffc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fe8:	f7fe faac 	bl	8001544 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d902      	bls.n	8002ffc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	73fb      	strb	r3, [r7, #15]
          break;
 8002ffa:	e005      	b.n	8003008 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ffc:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0ef      	beq.n	8002fe8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003008:	7bfb      	ldrb	r3, [r7, #15]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d106      	bne.n	800301c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800300e:	4b06      	ldr	r3, [pc, #24]	; (8003028 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003010:	691a      	ldr	r2, [r3, #16]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	4904      	ldr	r1, [pc, #16]	; (8003028 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003018:	4313      	orrs	r3, r2
 800301a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800301c:	7bfb      	ldrb	r3, [r7, #15]
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40021000 	.word	0x40021000

0800302c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003036:	2300      	movs	r3, #0
 8003038:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800303a:	4b6a      	ldr	r3, [pc, #424]	; (80031e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d018      	beq.n	8003078 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003046:	4b67      	ldr	r3, [pc, #412]	; (80031e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f003 0203 	and.w	r2, r3, #3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d10d      	bne.n	8003072 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
       ||
 800305a:	2b00      	cmp	r3, #0
 800305c:	d009      	beq.n	8003072 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800305e:	4b61      	ldr	r3, [pc, #388]	; (80031e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	091b      	lsrs	r3, r3, #4
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
       ||
 800306e:	429a      	cmp	r2, r3
 8003070:	d047      	beq.n	8003102 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	73fb      	strb	r3, [r7, #15]
 8003076:	e044      	b.n	8003102 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b03      	cmp	r3, #3
 800307e:	d018      	beq.n	80030b2 <RCCEx_PLLSAI2_Config+0x86>
 8003080:	2b03      	cmp	r3, #3
 8003082:	d825      	bhi.n	80030d0 <RCCEx_PLLSAI2_Config+0xa4>
 8003084:	2b01      	cmp	r3, #1
 8003086:	d002      	beq.n	800308e <RCCEx_PLLSAI2_Config+0x62>
 8003088:	2b02      	cmp	r3, #2
 800308a:	d009      	beq.n	80030a0 <RCCEx_PLLSAI2_Config+0x74>
 800308c:	e020      	b.n	80030d0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800308e:	4b55      	ldr	r3, [pc, #340]	; (80031e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d11d      	bne.n	80030d6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800309e:	e01a      	b.n	80030d6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030a0:	4b50      	ldr	r3, [pc, #320]	; (80031e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d116      	bne.n	80030da <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030b0:	e013      	b.n	80030da <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030b2:	4b4c      	ldr	r3, [pc, #304]	; (80031e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10f      	bne.n	80030de <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030be:	4b49      	ldr	r3, [pc, #292]	; (80031e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d109      	bne.n	80030de <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030ce:	e006      	b.n	80030de <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	73fb      	strb	r3, [r7, #15]
      break;
 80030d4:	e004      	b.n	80030e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030d6:	bf00      	nop
 80030d8:	e002      	b.n	80030e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030da:	bf00      	nop
 80030dc:	e000      	b.n	80030e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030de:	bf00      	nop
    }

    if(status == HAL_OK)
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10d      	bne.n	8003102 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030e6:	4b3f      	ldr	r3, [pc, #252]	; (80031e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6819      	ldr	r1, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	3b01      	subs	r3, #1
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	430b      	orrs	r3, r1
 80030fc:	4939      	ldr	r1, [pc, #228]	; (80031e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003102:	7bfb      	ldrb	r3, [r7, #15]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d167      	bne.n	80031d8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003108:	4b36      	ldr	r3, [pc, #216]	; (80031e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a35      	ldr	r2, [pc, #212]	; (80031e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800310e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003112:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003114:	f7fe fa16 	bl	8001544 <HAL_GetTick>
 8003118:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800311a:	e009      	b.n	8003130 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800311c:	f7fe fa12 	bl	8001544 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d902      	bls.n	8003130 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	73fb      	strb	r3, [r7, #15]
        break;
 800312e:	e005      	b.n	800313c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003130:	4b2c      	ldr	r3, [pc, #176]	; (80031e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1ef      	bne.n	800311c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800313c:	7bfb      	ldrb	r3, [r7, #15]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d14a      	bne.n	80031d8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d111      	bne.n	800316c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003148:	4b26      	ldr	r3, [pc, #152]	; (80031e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6892      	ldr	r2, [r2, #8]
 8003158:	0211      	lsls	r1, r2, #8
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	68d2      	ldr	r2, [r2, #12]
 800315e:	0912      	lsrs	r2, r2, #4
 8003160:	0452      	lsls	r2, r2, #17
 8003162:	430a      	orrs	r2, r1
 8003164:	491f      	ldr	r1, [pc, #124]	; (80031e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003166:	4313      	orrs	r3, r2
 8003168:	614b      	str	r3, [r1, #20]
 800316a:	e011      	b.n	8003190 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800316c:	4b1d      	ldr	r3, [pc, #116]	; (80031e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003174:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6892      	ldr	r2, [r2, #8]
 800317c:	0211      	lsls	r1, r2, #8
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6912      	ldr	r2, [r2, #16]
 8003182:	0852      	lsrs	r2, r2, #1
 8003184:	3a01      	subs	r2, #1
 8003186:	0652      	lsls	r2, r2, #25
 8003188:	430a      	orrs	r2, r1
 800318a:	4916      	ldr	r1, [pc, #88]	; (80031e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800318c:	4313      	orrs	r3, r2
 800318e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003190:	4b14      	ldr	r3, [pc, #80]	; (80031e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a13      	ldr	r2, [pc, #76]	; (80031e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800319a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319c:	f7fe f9d2 	bl	8001544 <HAL_GetTick>
 80031a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031a2:	e009      	b.n	80031b8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031a4:	f7fe f9ce 	bl	8001544 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d902      	bls.n	80031b8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	73fb      	strb	r3, [r7, #15]
          break;
 80031b6:	e005      	b.n	80031c4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031b8:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0ef      	beq.n	80031a4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80031c4:	7bfb      	ldrb	r3, [r7, #15]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d106      	bne.n	80031d8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80031ca:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031cc:	695a      	ldr	r2, [r3, #20]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	4904      	ldr	r1, [pc, #16]	; (80031e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40021000 	.word	0x40021000

080031e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e040      	b.n	800327c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d106      	bne.n	8003210 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7fe f8be 	bl	800138c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2224      	movs	r2, #36	; 0x24
 8003214:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0201 	bic.w	r2, r2, #1
 8003224:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 fb26 	bl	8003878 <UART_SetConfig>
 800322c:	4603      	mov	r3, r0
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e022      	b.n	800327c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	2b00      	cmp	r3, #0
 800323c:	d002      	beq.n	8003244 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 fda4 	bl	8003d8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003252:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003262:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 fe2b 	bl	8003ed0 <UART_CheckIdleState>
 800327a:	4603      	mov	r3, r0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b08a      	sub	sp, #40	; 0x28
 8003288:	af02      	add	r7, sp, #8
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	603b      	str	r3, [r7, #0]
 8003290:	4613      	mov	r3, r2
 8003292:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003298:	2b20      	cmp	r3, #32
 800329a:	f040 8082 	bne.w	80033a2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d002      	beq.n	80032aa <HAL_UART_Transmit+0x26>
 80032a4:	88fb      	ldrh	r3, [r7, #6]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e07a      	b.n	80033a4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d101      	bne.n	80032bc <HAL_UART_Transmit+0x38>
 80032b8:	2302      	movs	r3, #2
 80032ba:	e073      	b.n	80033a4 <HAL_UART_Transmit+0x120>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2221      	movs	r2, #33	; 0x21
 80032d0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032d2:	f7fe f937 	bl	8001544 <HAL_GetTick>
 80032d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	88fa      	ldrh	r2, [r7, #6]
 80032dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	88fa      	ldrh	r2, [r7, #6]
 80032e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032f0:	d108      	bne.n	8003304 <HAL_UART_Transmit+0x80>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d104      	bne.n	8003304 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80032fa:	2300      	movs	r3, #0
 80032fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	61bb      	str	r3, [r7, #24]
 8003302:	e003      	b.n	800330c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003308:	2300      	movs	r3, #0
 800330a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003314:	e02d      	b.n	8003372 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2200      	movs	r2, #0
 800331e:	2180      	movs	r1, #128	; 0x80
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f000 fe1e 	bl	8003f62 <UART_WaitOnFlagUntilTimeout>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e039      	b.n	80033a4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10b      	bne.n	800334e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	881a      	ldrh	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003342:	b292      	uxth	r2, r2
 8003344:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	3302      	adds	r3, #2
 800334a:	61bb      	str	r3, [r7, #24]
 800334c:	e008      	b.n	8003360 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	781a      	ldrb	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	b292      	uxth	r2, r2
 8003358:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	3301      	adds	r3, #1
 800335e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003366:	b29b      	uxth	r3, r3
 8003368:	3b01      	subs	r3, #1
 800336a:	b29a      	uxth	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003378:	b29b      	uxth	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1cb      	bne.n	8003316 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2200      	movs	r2, #0
 8003386:	2140      	movs	r1, #64	; 0x40
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 fdea 	bl	8003f62 <UART_WaitOnFlagUntilTimeout>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e005      	b.n	80033a4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2220      	movs	r2, #32
 800339c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800339e:	2300      	movs	r3, #0
 80033a0:	e000      	b.n	80033a4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80033a2:	2302      	movs	r3, #2
  }
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3720      	adds	r7, #32
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	4613      	mov	r3, r2
 80033b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033be:	2b20      	cmp	r3, #32
 80033c0:	d131      	bne.n	8003426 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d002      	beq.n	80033ce <HAL_UART_Receive_IT+0x22>
 80033c8:	88fb      	ldrh	r3, [r7, #6]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e02a      	b.n	8003428 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d101      	bne.n	80033e0 <HAL_UART_Receive_IT+0x34>
 80033dc:	2302      	movs	r3, #2
 80033de:	e023      	b.n	8003428 <HAL_UART_Receive_IT+0x7c>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a0f      	ldr	r2, [pc, #60]	; (8003430 <HAL_UART_Receive_IT+0x84>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d00e      	beq.n	8003416 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d007      	beq.n	8003416 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003414:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003416:	88fb      	ldrh	r3, [r7, #6]
 8003418:	461a      	mov	r2, r3
 800341a:	68b9      	ldr	r1, [r7, #8]
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 fe1d 	bl	800405c <UART_Start_Receive_IT>
 8003422:	4603      	mov	r3, r0
 8003424:	e000      	b.n	8003428 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8003426:	2302      	movs	r3, #2
  }
}
 8003428:	4618      	mov	r0, r3
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40008000 	.word	0x40008000

08003434 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b088      	sub	sp, #32
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003454:	69fa      	ldr	r2, [r7, #28]
 8003456:	f640 030f 	movw	r3, #2063	; 0x80f
 800345a:	4013      	ands	r3, r2
 800345c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d113      	bne.n	800348c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f003 0320 	and.w	r3, r3, #32
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00e      	beq.n	800348c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	f003 0320 	and.w	r3, r3, #32
 8003474:	2b00      	cmp	r3, #0
 8003476:	d009      	beq.n	800348c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 81ce 	beq.w	800381e <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	4798      	blx	r3
      }
      return;
 800348a:	e1c8      	b.n	800381e <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 80e3 	beq.w	800365a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d105      	bne.n	80034aa <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	4ba6      	ldr	r3, [pc, #664]	; (800373c <HAL_UART_IRQHandler+0x308>)
 80034a2:	4013      	ands	r3, r2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 80d8 	beq.w	800365a <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d010      	beq.n	80034d6 <HAL_UART_IRQHandler+0xa2>
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00b      	beq.n	80034d6 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2201      	movs	r2, #1
 80034c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034cc:	f043 0201 	orr.w	r2, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d010      	beq.n	8003502 <HAL_UART_IRQHandler+0xce>
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00b      	beq.n	8003502 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2202      	movs	r2, #2
 80034f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034f8:	f043 0204 	orr.w	r2, r3, #4
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	d010      	beq.n	800352e <HAL_UART_IRQHandler+0xfa>
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00b      	beq.n	800352e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2204      	movs	r2, #4
 800351c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003524:	f043 0202 	orr.w	r2, r3, #2
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	f003 0308 	and.w	r3, r3, #8
 8003534:	2b00      	cmp	r3, #0
 8003536:	d015      	beq.n	8003564 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	f003 0320 	and.w	r3, r3, #32
 800353e:	2b00      	cmp	r3, #0
 8003540:	d104      	bne.n	800354c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00b      	beq.n	8003564 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2208      	movs	r2, #8
 8003552:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800355a:	f043 0208 	orr.w	r2, r3, #8
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800356a:	2b00      	cmp	r3, #0
 800356c:	d011      	beq.n	8003592 <HAL_UART_IRQHandler+0x15e>
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00c      	beq.n	8003592 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003580:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003588:	f043 0220 	orr.w	r2, r3, #32
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 8142 	beq.w	8003822 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	f003 0320 	and.w	r3, r3, #32
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00c      	beq.n	80035c2 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	f003 0320 	and.w	r3, r3, #32
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d007      	beq.n	80035c2 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035c8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d4:	2b40      	cmp	r3, #64	; 0x40
 80035d6:	d004      	beq.n	80035e2 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d031      	beq.n	8003646 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 fdc2 	bl	800416c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f2:	2b40      	cmp	r3, #64	; 0x40
 80035f4:	d123      	bne.n	800363e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003604:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360a:	2b00      	cmp	r3, #0
 800360c:	d013      	beq.n	8003636 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003612:	4a4b      	ldr	r2, [pc, #300]	; (8003740 <HAL_UART_IRQHandler+0x30c>)
 8003614:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361a:	4618      	mov	r0, r3
 800361c:	f7fe f8ed 	bl	80017fa <HAL_DMA_Abort_IT>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d017      	beq.n	8003656 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003630:	4610      	mov	r0, r2
 8003632:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003634:	e00f      	b.n	8003656 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f908 	bl	800384c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800363c:	e00b      	b.n	8003656 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f904 	bl	800384c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003644:	e007      	b.n	8003656 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f900 	bl	800384c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003654:	e0e5      	b.n	8003822 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003656:	bf00      	nop
    return;
 8003658:	e0e3      	b.n	8003822 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800365e:	2b01      	cmp	r3, #1
 8003660:	f040 80a9 	bne.w	80037b6 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	f003 0310 	and.w	r3, r3, #16
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 80a3 	beq.w	80037b6 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	f003 0310 	and.w	r3, r3, #16
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 809d 	beq.w	80037b6 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2210      	movs	r2, #16
 8003682:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368e:	2b40      	cmp	r3, #64	; 0x40
 8003690:	d158      	bne.n	8003744 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800369c:	893b      	ldrh	r3, [r7, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 80c1 	beq.w	8003826 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80036aa:	893a      	ldrh	r2, [r7, #8]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	f080 80ba 	bcs.w	8003826 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	893a      	ldrh	r2, [r7, #8]
 80036b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0320 	and.w	r3, r3, #32
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d12a      	bne.n	8003720 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036d8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0201 	bic.w	r2, r2, #1
 80036e8:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036f8:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2220      	movs	r2, #32
 80036fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0210 	bic.w	r2, r2, #16
 8003714:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371a:	4618      	mov	r0, r3
 800371c:	f7fe f82f 	bl	800177e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800372c:	b29b      	uxth	r3, r3
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	b29b      	uxth	r3, r3
 8003732:	4619      	mov	r1, r3
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f893 	bl	8003860 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800373a:	e074      	b.n	8003826 <HAL_UART_IRQHandler+0x3f2>
 800373c:	04000120 	.word	0x04000120
 8003740:	080041cb 	.word	0x080041cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003750:	b29b      	uxth	r3, r3
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d063      	beq.n	800382a <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8003762:	897b      	ldrh	r3, [r7, #10]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d060      	beq.n	800382a <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003776:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689a      	ldr	r2, [r3, #8]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0201 	bic.w	r2, r2, #1
 8003786:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2220      	movs	r2, #32
 800378c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0210 	bic.w	r2, r2, #16
 80037a8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037aa:	897b      	ldrh	r3, [r7, #10]
 80037ac:	4619      	mov	r1, r3
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f856 	bl	8003860 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80037b4:	e039      	b.n	800382a <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00d      	beq.n	80037dc <HAL_UART_IRQHandler+0x3a8>
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d008      	beq.n	80037dc <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80037d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 fdff 	bl	80043d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80037da:	e029      	b.n	8003830 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00d      	beq.n	8003802 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d008      	beq.n	8003802 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d01a      	beq.n	800382e <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	4798      	blx	r3
    }
    return;
 8003800:	e015      	b.n	800382e <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003808:	2b00      	cmp	r3, #0
 800380a:	d011      	beq.n	8003830 <HAL_UART_IRQHandler+0x3fc>
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00c      	beq.n	8003830 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 fced 	bl	80041f6 <UART_EndTransmit_IT>
    return;
 800381c:	e008      	b.n	8003830 <HAL_UART_IRQHandler+0x3fc>
      return;
 800381e:	bf00      	nop
 8003820:	e006      	b.n	8003830 <HAL_UART_IRQHandler+0x3fc>
    return;
 8003822:	bf00      	nop
 8003824:	e004      	b.n	8003830 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003826:	bf00      	nop
 8003828:	e002      	b.n	8003830 <HAL_UART_IRQHandler+0x3fc>
      return;
 800382a:	bf00      	nop
 800382c:	e000      	b.n	8003830 <HAL_UART_IRQHandler+0x3fc>
    return;
 800382e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003830:	3720      	adds	r7, #32
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop

08003838 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	460b      	mov	r3, r1
 800386a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003878:	b5b0      	push	{r4, r5, r7, lr}
 800387a:	b088      	sub	sp, #32
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003880:	2300      	movs	r3, #0
 8003882:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	431a      	orrs	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	431a      	orrs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	4313      	orrs	r3, r2
 800389a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	4bad      	ldr	r3, [pc, #692]	; (8003b58 <UART_SetConfig+0x2e0>)
 80038a4:	4013      	ands	r3, r2
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6812      	ldr	r2, [r2, #0]
 80038aa:	69f9      	ldr	r1, [r7, #28]
 80038ac:	430b      	orrs	r3, r1
 80038ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4aa2      	ldr	r2, [pc, #648]	; (8003b5c <UART_SetConfig+0x2e4>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d004      	beq.n	80038e0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	69fa      	ldr	r2, [r7, #28]
 80038dc:	4313      	orrs	r3, r2
 80038de:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	69fa      	ldr	r2, [r7, #28]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a99      	ldr	r2, [pc, #612]	; (8003b60 <UART_SetConfig+0x2e8>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d121      	bne.n	8003942 <UART_SetConfig+0xca>
 80038fe:	4b99      	ldr	r3, [pc, #612]	; (8003b64 <UART_SetConfig+0x2ec>)
 8003900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003904:	f003 0303 	and.w	r3, r3, #3
 8003908:	2b03      	cmp	r3, #3
 800390a:	d817      	bhi.n	800393c <UART_SetConfig+0xc4>
 800390c:	a201      	add	r2, pc, #4	; (adr r2, 8003914 <UART_SetConfig+0x9c>)
 800390e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003912:	bf00      	nop
 8003914:	08003925 	.word	0x08003925
 8003918:	08003931 	.word	0x08003931
 800391c:	0800392b 	.word	0x0800392b
 8003920:	08003937 	.word	0x08003937
 8003924:	2301      	movs	r3, #1
 8003926:	76fb      	strb	r3, [r7, #27]
 8003928:	e0e7      	b.n	8003afa <UART_SetConfig+0x282>
 800392a:	2302      	movs	r3, #2
 800392c:	76fb      	strb	r3, [r7, #27]
 800392e:	e0e4      	b.n	8003afa <UART_SetConfig+0x282>
 8003930:	2304      	movs	r3, #4
 8003932:	76fb      	strb	r3, [r7, #27]
 8003934:	e0e1      	b.n	8003afa <UART_SetConfig+0x282>
 8003936:	2308      	movs	r3, #8
 8003938:	76fb      	strb	r3, [r7, #27]
 800393a:	e0de      	b.n	8003afa <UART_SetConfig+0x282>
 800393c:	2310      	movs	r3, #16
 800393e:	76fb      	strb	r3, [r7, #27]
 8003940:	e0db      	b.n	8003afa <UART_SetConfig+0x282>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a88      	ldr	r2, [pc, #544]	; (8003b68 <UART_SetConfig+0x2f0>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d132      	bne.n	80039b2 <UART_SetConfig+0x13a>
 800394c:	4b85      	ldr	r3, [pc, #532]	; (8003b64 <UART_SetConfig+0x2ec>)
 800394e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003952:	f003 030c 	and.w	r3, r3, #12
 8003956:	2b0c      	cmp	r3, #12
 8003958:	d828      	bhi.n	80039ac <UART_SetConfig+0x134>
 800395a:	a201      	add	r2, pc, #4	; (adr r2, 8003960 <UART_SetConfig+0xe8>)
 800395c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003960:	08003995 	.word	0x08003995
 8003964:	080039ad 	.word	0x080039ad
 8003968:	080039ad 	.word	0x080039ad
 800396c:	080039ad 	.word	0x080039ad
 8003970:	080039a1 	.word	0x080039a1
 8003974:	080039ad 	.word	0x080039ad
 8003978:	080039ad 	.word	0x080039ad
 800397c:	080039ad 	.word	0x080039ad
 8003980:	0800399b 	.word	0x0800399b
 8003984:	080039ad 	.word	0x080039ad
 8003988:	080039ad 	.word	0x080039ad
 800398c:	080039ad 	.word	0x080039ad
 8003990:	080039a7 	.word	0x080039a7
 8003994:	2300      	movs	r3, #0
 8003996:	76fb      	strb	r3, [r7, #27]
 8003998:	e0af      	b.n	8003afa <UART_SetConfig+0x282>
 800399a:	2302      	movs	r3, #2
 800399c:	76fb      	strb	r3, [r7, #27]
 800399e:	e0ac      	b.n	8003afa <UART_SetConfig+0x282>
 80039a0:	2304      	movs	r3, #4
 80039a2:	76fb      	strb	r3, [r7, #27]
 80039a4:	e0a9      	b.n	8003afa <UART_SetConfig+0x282>
 80039a6:	2308      	movs	r3, #8
 80039a8:	76fb      	strb	r3, [r7, #27]
 80039aa:	e0a6      	b.n	8003afa <UART_SetConfig+0x282>
 80039ac:	2310      	movs	r3, #16
 80039ae:	76fb      	strb	r3, [r7, #27]
 80039b0:	e0a3      	b.n	8003afa <UART_SetConfig+0x282>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a6d      	ldr	r2, [pc, #436]	; (8003b6c <UART_SetConfig+0x2f4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d120      	bne.n	80039fe <UART_SetConfig+0x186>
 80039bc:	4b69      	ldr	r3, [pc, #420]	; (8003b64 <UART_SetConfig+0x2ec>)
 80039be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80039c6:	2b30      	cmp	r3, #48	; 0x30
 80039c8:	d013      	beq.n	80039f2 <UART_SetConfig+0x17a>
 80039ca:	2b30      	cmp	r3, #48	; 0x30
 80039cc:	d814      	bhi.n	80039f8 <UART_SetConfig+0x180>
 80039ce:	2b20      	cmp	r3, #32
 80039d0:	d009      	beq.n	80039e6 <UART_SetConfig+0x16e>
 80039d2:	2b20      	cmp	r3, #32
 80039d4:	d810      	bhi.n	80039f8 <UART_SetConfig+0x180>
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d002      	beq.n	80039e0 <UART_SetConfig+0x168>
 80039da:	2b10      	cmp	r3, #16
 80039dc:	d006      	beq.n	80039ec <UART_SetConfig+0x174>
 80039de:	e00b      	b.n	80039f8 <UART_SetConfig+0x180>
 80039e0:	2300      	movs	r3, #0
 80039e2:	76fb      	strb	r3, [r7, #27]
 80039e4:	e089      	b.n	8003afa <UART_SetConfig+0x282>
 80039e6:	2302      	movs	r3, #2
 80039e8:	76fb      	strb	r3, [r7, #27]
 80039ea:	e086      	b.n	8003afa <UART_SetConfig+0x282>
 80039ec:	2304      	movs	r3, #4
 80039ee:	76fb      	strb	r3, [r7, #27]
 80039f0:	e083      	b.n	8003afa <UART_SetConfig+0x282>
 80039f2:	2308      	movs	r3, #8
 80039f4:	76fb      	strb	r3, [r7, #27]
 80039f6:	e080      	b.n	8003afa <UART_SetConfig+0x282>
 80039f8:	2310      	movs	r3, #16
 80039fa:	76fb      	strb	r3, [r7, #27]
 80039fc:	e07d      	b.n	8003afa <UART_SetConfig+0x282>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a5b      	ldr	r2, [pc, #364]	; (8003b70 <UART_SetConfig+0x2f8>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d120      	bne.n	8003a4a <UART_SetConfig+0x1d2>
 8003a08:	4b56      	ldr	r3, [pc, #344]	; (8003b64 <UART_SetConfig+0x2ec>)
 8003a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a12:	2bc0      	cmp	r3, #192	; 0xc0
 8003a14:	d013      	beq.n	8003a3e <UART_SetConfig+0x1c6>
 8003a16:	2bc0      	cmp	r3, #192	; 0xc0
 8003a18:	d814      	bhi.n	8003a44 <UART_SetConfig+0x1cc>
 8003a1a:	2b80      	cmp	r3, #128	; 0x80
 8003a1c:	d009      	beq.n	8003a32 <UART_SetConfig+0x1ba>
 8003a1e:	2b80      	cmp	r3, #128	; 0x80
 8003a20:	d810      	bhi.n	8003a44 <UART_SetConfig+0x1cc>
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d002      	beq.n	8003a2c <UART_SetConfig+0x1b4>
 8003a26:	2b40      	cmp	r3, #64	; 0x40
 8003a28:	d006      	beq.n	8003a38 <UART_SetConfig+0x1c0>
 8003a2a:	e00b      	b.n	8003a44 <UART_SetConfig+0x1cc>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	76fb      	strb	r3, [r7, #27]
 8003a30:	e063      	b.n	8003afa <UART_SetConfig+0x282>
 8003a32:	2302      	movs	r3, #2
 8003a34:	76fb      	strb	r3, [r7, #27]
 8003a36:	e060      	b.n	8003afa <UART_SetConfig+0x282>
 8003a38:	2304      	movs	r3, #4
 8003a3a:	76fb      	strb	r3, [r7, #27]
 8003a3c:	e05d      	b.n	8003afa <UART_SetConfig+0x282>
 8003a3e:	2308      	movs	r3, #8
 8003a40:	76fb      	strb	r3, [r7, #27]
 8003a42:	e05a      	b.n	8003afa <UART_SetConfig+0x282>
 8003a44:	2310      	movs	r3, #16
 8003a46:	76fb      	strb	r3, [r7, #27]
 8003a48:	e057      	b.n	8003afa <UART_SetConfig+0x282>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a49      	ldr	r2, [pc, #292]	; (8003b74 <UART_SetConfig+0x2fc>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d125      	bne.n	8003aa0 <UART_SetConfig+0x228>
 8003a54:	4b43      	ldr	r3, [pc, #268]	; (8003b64 <UART_SetConfig+0x2ec>)
 8003a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a62:	d017      	beq.n	8003a94 <UART_SetConfig+0x21c>
 8003a64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a68:	d817      	bhi.n	8003a9a <UART_SetConfig+0x222>
 8003a6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a6e:	d00b      	beq.n	8003a88 <UART_SetConfig+0x210>
 8003a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a74:	d811      	bhi.n	8003a9a <UART_SetConfig+0x222>
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <UART_SetConfig+0x20a>
 8003a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a7e:	d006      	beq.n	8003a8e <UART_SetConfig+0x216>
 8003a80:	e00b      	b.n	8003a9a <UART_SetConfig+0x222>
 8003a82:	2300      	movs	r3, #0
 8003a84:	76fb      	strb	r3, [r7, #27]
 8003a86:	e038      	b.n	8003afa <UART_SetConfig+0x282>
 8003a88:	2302      	movs	r3, #2
 8003a8a:	76fb      	strb	r3, [r7, #27]
 8003a8c:	e035      	b.n	8003afa <UART_SetConfig+0x282>
 8003a8e:	2304      	movs	r3, #4
 8003a90:	76fb      	strb	r3, [r7, #27]
 8003a92:	e032      	b.n	8003afa <UART_SetConfig+0x282>
 8003a94:	2308      	movs	r3, #8
 8003a96:	76fb      	strb	r3, [r7, #27]
 8003a98:	e02f      	b.n	8003afa <UART_SetConfig+0x282>
 8003a9a:	2310      	movs	r3, #16
 8003a9c:	76fb      	strb	r3, [r7, #27]
 8003a9e:	e02c      	b.n	8003afa <UART_SetConfig+0x282>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a2d      	ldr	r2, [pc, #180]	; (8003b5c <UART_SetConfig+0x2e4>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d125      	bne.n	8003af6 <UART_SetConfig+0x27e>
 8003aaa:	4b2e      	ldr	r3, [pc, #184]	; (8003b64 <UART_SetConfig+0x2ec>)
 8003aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ab4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ab8:	d017      	beq.n	8003aea <UART_SetConfig+0x272>
 8003aba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003abe:	d817      	bhi.n	8003af0 <UART_SetConfig+0x278>
 8003ac0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ac4:	d00b      	beq.n	8003ade <UART_SetConfig+0x266>
 8003ac6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aca:	d811      	bhi.n	8003af0 <UART_SetConfig+0x278>
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <UART_SetConfig+0x260>
 8003ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ad4:	d006      	beq.n	8003ae4 <UART_SetConfig+0x26c>
 8003ad6:	e00b      	b.n	8003af0 <UART_SetConfig+0x278>
 8003ad8:	2300      	movs	r3, #0
 8003ada:	76fb      	strb	r3, [r7, #27]
 8003adc:	e00d      	b.n	8003afa <UART_SetConfig+0x282>
 8003ade:	2302      	movs	r3, #2
 8003ae0:	76fb      	strb	r3, [r7, #27]
 8003ae2:	e00a      	b.n	8003afa <UART_SetConfig+0x282>
 8003ae4:	2304      	movs	r3, #4
 8003ae6:	76fb      	strb	r3, [r7, #27]
 8003ae8:	e007      	b.n	8003afa <UART_SetConfig+0x282>
 8003aea:	2308      	movs	r3, #8
 8003aec:	76fb      	strb	r3, [r7, #27]
 8003aee:	e004      	b.n	8003afa <UART_SetConfig+0x282>
 8003af0:	2310      	movs	r3, #16
 8003af2:	76fb      	strb	r3, [r7, #27]
 8003af4:	e001      	b.n	8003afa <UART_SetConfig+0x282>
 8003af6:	2310      	movs	r3, #16
 8003af8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a17      	ldr	r2, [pc, #92]	; (8003b5c <UART_SetConfig+0x2e4>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	f040 8087 	bne.w	8003c14 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b06:	7efb      	ldrb	r3, [r7, #27]
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d837      	bhi.n	8003b7c <UART_SetConfig+0x304>
 8003b0c:	a201      	add	r2, pc, #4	; (adr r2, 8003b14 <UART_SetConfig+0x29c>)
 8003b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b12:	bf00      	nop
 8003b14:	08003b39 	.word	0x08003b39
 8003b18:	08003b7d 	.word	0x08003b7d
 8003b1c:	08003b41 	.word	0x08003b41
 8003b20:	08003b7d 	.word	0x08003b7d
 8003b24:	08003b47 	.word	0x08003b47
 8003b28:	08003b7d 	.word	0x08003b7d
 8003b2c:	08003b7d 	.word	0x08003b7d
 8003b30:	08003b7d 	.word	0x08003b7d
 8003b34:	08003b4f 	.word	0x08003b4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b38:	f7fe fe0e 	bl	8002758 <HAL_RCC_GetPCLK1Freq>
 8003b3c:	6178      	str	r0, [r7, #20]
        break;
 8003b3e:	e022      	b.n	8003b86 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b40:	4b0d      	ldr	r3, [pc, #52]	; (8003b78 <UART_SetConfig+0x300>)
 8003b42:	617b      	str	r3, [r7, #20]
        break;
 8003b44:	e01f      	b.n	8003b86 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b46:	f7fe fd6f 	bl	8002628 <HAL_RCC_GetSysClockFreq>
 8003b4a:	6178      	str	r0, [r7, #20]
        break;
 8003b4c:	e01b      	b.n	8003b86 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b52:	617b      	str	r3, [r7, #20]
        break;
 8003b54:	e017      	b.n	8003b86 <UART_SetConfig+0x30e>
 8003b56:	bf00      	nop
 8003b58:	efff69f3 	.word	0xefff69f3
 8003b5c:	40008000 	.word	0x40008000
 8003b60:	40013800 	.word	0x40013800
 8003b64:	40021000 	.word	0x40021000
 8003b68:	40004400 	.word	0x40004400
 8003b6c:	40004800 	.word	0x40004800
 8003b70:	40004c00 	.word	0x40004c00
 8003b74:	40005000 	.word	0x40005000
 8003b78:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	76bb      	strb	r3, [r7, #26]
        break;
 8003b84:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 80f1 	beq.w	8003d70 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	4613      	mov	r3, r2
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	4413      	add	r3, r2
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d305      	bcc.n	8003baa <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d902      	bls.n	8003bb0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	76bb      	strb	r3, [r7, #26]
 8003bae:	e0df      	b.n	8003d70 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f04f 0100 	mov.w	r1, #0
 8003bb8:	f04f 0200 	mov.w	r2, #0
 8003bbc:	f04f 0300 	mov.w	r3, #0
 8003bc0:	020b      	lsls	r3, r1, #8
 8003bc2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003bc6:	0202      	lsls	r2, r0, #8
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	6849      	ldr	r1, [r1, #4]
 8003bcc:	0849      	lsrs	r1, r1, #1
 8003bce:	4608      	mov	r0, r1
 8003bd0:	f04f 0100 	mov.w	r1, #0
 8003bd4:	1814      	adds	r4, r2, r0
 8003bd6:	eb43 0501 	adc.w	r5, r3, r1
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	461a      	mov	r2, r3
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	4620      	mov	r0, r4
 8003be6:	4629      	mov	r1, r5
 8003be8:	f7fc fb5a 	bl	80002a0 <__aeabi_uldivmod>
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bfa:	d308      	bcc.n	8003c0e <UART_SetConfig+0x396>
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c02:	d204      	bcs.n	8003c0e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	60da      	str	r2, [r3, #12]
 8003c0c:	e0b0      	b.n	8003d70 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	76bb      	strb	r3, [r7, #26]
 8003c12:	e0ad      	b.n	8003d70 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c1c:	d15c      	bne.n	8003cd8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003c1e:	7efb      	ldrb	r3, [r7, #27]
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	d828      	bhi.n	8003c76 <UART_SetConfig+0x3fe>
 8003c24:	a201      	add	r2, pc, #4	; (adr r2, 8003c2c <UART_SetConfig+0x3b4>)
 8003c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2a:	bf00      	nop
 8003c2c:	08003c51 	.word	0x08003c51
 8003c30:	08003c59 	.word	0x08003c59
 8003c34:	08003c61 	.word	0x08003c61
 8003c38:	08003c77 	.word	0x08003c77
 8003c3c:	08003c67 	.word	0x08003c67
 8003c40:	08003c77 	.word	0x08003c77
 8003c44:	08003c77 	.word	0x08003c77
 8003c48:	08003c77 	.word	0x08003c77
 8003c4c:	08003c6f 	.word	0x08003c6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c50:	f7fe fd82 	bl	8002758 <HAL_RCC_GetPCLK1Freq>
 8003c54:	6178      	str	r0, [r7, #20]
        break;
 8003c56:	e013      	b.n	8003c80 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c58:	f7fe fd94 	bl	8002784 <HAL_RCC_GetPCLK2Freq>
 8003c5c:	6178      	str	r0, [r7, #20]
        break;
 8003c5e:	e00f      	b.n	8003c80 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c60:	4b49      	ldr	r3, [pc, #292]	; (8003d88 <UART_SetConfig+0x510>)
 8003c62:	617b      	str	r3, [r7, #20]
        break;
 8003c64:	e00c      	b.n	8003c80 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c66:	f7fe fcdf 	bl	8002628 <HAL_RCC_GetSysClockFreq>
 8003c6a:	6178      	str	r0, [r7, #20]
        break;
 8003c6c:	e008      	b.n	8003c80 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c72:	617b      	str	r3, [r7, #20]
        break;
 8003c74:	e004      	b.n	8003c80 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	76bb      	strb	r3, [r7, #26]
        break;
 8003c7e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d074      	beq.n	8003d70 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	005a      	lsls	r2, r3, #1
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	085b      	lsrs	r3, r3, #1
 8003c90:	441a      	add	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	2b0f      	cmp	r3, #15
 8003ca2:	d916      	bls.n	8003cd2 <UART_SetConfig+0x45a>
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003caa:	d212      	bcs.n	8003cd2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	f023 030f 	bic.w	r3, r3, #15
 8003cb4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	085b      	lsrs	r3, r3, #1
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	89fb      	ldrh	r3, [r7, #14]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	89fa      	ldrh	r2, [r7, #14]
 8003cce:	60da      	str	r2, [r3, #12]
 8003cd0:	e04e      	b.n	8003d70 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	76bb      	strb	r3, [r7, #26]
 8003cd6:	e04b      	b.n	8003d70 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003cd8:	7efb      	ldrb	r3, [r7, #27]
 8003cda:	2b08      	cmp	r3, #8
 8003cdc:	d827      	bhi.n	8003d2e <UART_SetConfig+0x4b6>
 8003cde:	a201      	add	r2, pc, #4	; (adr r2, 8003ce4 <UART_SetConfig+0x46c>)
 8003ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce4:	08003d09 	.word	0x08003d09
 8003ce8:	08003d11 	.word	0x08003d11
 8003cec:	08003d19 	.word	0x08003d19
 8003cf0:	08003d2f 	.word	0x08003d2f
 8003cf4:	08003d1f 	.word	0x08003d1f
 8003cf8:	08003d2f 	.word	0x08003d2f
 8003cfc:	08003d2f 	.word	0x08003d2f
 8003d00:	08003d2f 	.word	0x08003d2f
 8003d04:	08003d27 	.word	0x08003d27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d08:	f7fe fd26 	bl	8002758 <HAL_RCC_GetPCLK1Freq>
 8003d0c:	6178      	str	r0, [r7, #20]
        break;
 8003d0e:	e013      	b.n	8003d38 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d10:	f7fe fd38 	bl	8002784 <HAL_RCC_GetPCLK2Freq>
 8003d14:	6178      	str	r0, [r7, #20]
        break;
 8003d16:	e00f      	b.n	8003d38 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d18:	4b1b      	ldr	r3, [pc, #108]	; (8003d88 <UART_SetConfig+0x510>)
 8003d1a:	617b      	str	r3, [r7, #20]
        break;
 8003d1c:	e00c      	b.n	8003d38 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d1e:	f7fe fc83 	bl	8002628 <HAL_RCC_GetSysClockFreq>
 8003d22:	6178      	str	r0, [r7, #20]
        break;
 8003d24:	e008      	b.n	8003d38 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d2a:	617b      	str	r3, [r7, #20]
        break;
 8003d2c:	e004      	b.n	8003d38 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	76bb      	strb	r3, [r7, #26]
        break;
 8003d36:	bf00      	nop
    }

    if (pclk != 0U)
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d018      	beq.n	8003d70 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	085a      	lsrs	r2, r3, #1
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	441a      	add	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	2b0f      	cmp	r3, #15
 8003d58:	d908      	bls.n	8003d6c <UART_SetConfig+0x4f4>
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d60:	d204      	bcs.n	8003d6c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	60da      	str	r2, [r3, #12]
 8003d6a:	e001      	b.n	8003d70 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003d7c:	7ebb      	ldrb	r3, [r7, #26]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3720      	adds	r7, #32
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bdb0      	pop	{r4, r5, r7, pc}
 8003d86:	bf00      	nop
 8003d88:	00f42400 	.word	0x00f42400

08003d8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00a      	beq.n	8003db6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00a      	beq.n	8003dd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00a      	beq.n	8003dfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	f003 0310 	and.w	r3, r3, #16
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00a      	beq.n	8003e3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	f003 0320 	and.w	r3, r3, #32
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d01a      	beq.n	8003ea2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e8a:	d10a      	bne.n	8003ea2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00a      	beq.n	8003ec4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	605a      	str	r2, [r3, #4]
  }
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af02      	add	r7, sp, #8
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ee0:	f7fd fb30 	bl	8001544 <HAL_GetTick>
 8003ee4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0308 	and.w	r3, r3, #8
 8003ef0:	2b08      	cmp	r3, #8
 8003ef2:	d10e      	bne.n	8003f12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ef4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f82d 	bl	8003f62 <UART_WaitOnFlagUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e023      	b.n	8003f5a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b04      	cmp	r3, #4
 8003f1e:	d10e      	bne.n	8003f3e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f817 	bl	8003f62 <UART_WaitOnFlagUntilTimeout>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e00d      	b.n	8003f5a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2220      	movs	r2, #32
 8003f42:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2220      	movs	r2, #32
 8003f48:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b084      	sub	sp, #16
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	60f8      	str	r0, [r7, #12]
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	603b      	str	r3, [r7, #0]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f72:	e05e      	b.n	8004032 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7a:	d05a      	beq.n	8004032 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f7c:	f7fd fae2 	bl	8001544 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d302      	bcc.n	8003f92 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d11b      	bne.n	8003fca <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fa0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0201 	bic.w	r2, r2, #1
 8003fb0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e043      	b.n	8004052 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d02c      	beq.n	8004032 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fe2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fe6:	d124      	bne.n	8004032 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ff0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004000:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0201 	bic.w	r2, r2, #1
 8004010:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2220      	movs	r2, #32
 8004016:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2220      	movs	r2, #32
 800401c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2220      	movs	r2, #32
 8004022:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e00f      	b.n	8004052 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	69da      	ldr	r2, [r3, #28]
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	4013      	ands	r3, r2
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	429a      	cmp	r2, r3
 8004040:	bf0c      	ite	eq
 8004042:	2301      	moveq	r3, #1
 8004044:	2300      	movne	r3, #0
 8004046:	b2db      	uxtb	r3, r3
 8004048:	461a      	mov	r2, r3
 800404a:	79fb      	ldrb	r3, [r7, #7]
 800404c:	429a      	cmp	r2, r3
 800404e:	d091      	beq.n	8003f74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
	...

0800405c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	4613      	mov	r3, r2
 8004068:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	88fa      	ldrh	r2, [r7, #6]
 8004074:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	88fa      	ldrh	r2, [r7, #6]
 800407c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800408e:	d10e      	bne.n	80040ae <UART_Start_Receive_IT+0x52>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d105      	bne.n	80040a4 <UART_Start_Receive_IT+0x48>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800409e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040a2:	e02d      	b.n	8004100 <UART_Start_Receive_IT+0xa4>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	22ff      	movs	r2, #255	; 0xff
 80040a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040ac:	e028      	b.n	8004100 <UART_Start_Receive_IT+0xa4>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10d      	bne.n	80040d2 <UART_Start_Receive_IT+0x76>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d104      	bne.n	80040c8 <UART_Start_Receive_IT+0x6c>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	22ff      	movs	r2, #255	; 0xff
 80040c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040c6:	e01b      	b.n	8004100 <UART_Start_Receive_IT+0xa4>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	227f      	movs	r2, #127	; 0x7f
 80040cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040d0:	e016      	b.n	8004100 <UART_Start_Receive_IT+0xa4>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040da:	d10d      	bne.n	80040f8 <UART_Start_Receive_IT+0x9c>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d104      	bne.n	80040ee <UART_Start_Receive_IT+0x92>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	227f      	movs	r2, #127	; 0x7f
 80040e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040ec:	e008      	b.n	8004100 <UART_Start_Receive_IT+0xa4>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	223f      	movs	r2, #63	; 0x3f
 80040f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040f6:	e003      	b.n	8004100 <UART_Start_Receive_IT+0xa4>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2222      	movs	r2, #34	; 0x22
 800410c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689a      	ldr	r2, [r3, #8]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f042 0201 	orr.w	r2, r2, #1
 800411c:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004126:	d107      	bne.n	8004138 <UART_Start_Receive_IT+0xdc>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d103      	bne.n	8004138 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4a0c      	ldr	r2, [pc, #48]	; (8004164 <UART_Start_Receive_IT+0x108>)
 8004134:	665a      	str	r2, [r3, #100]	; 0x64
 8004136:	e002      	b.n	800413e <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4a0b      	ldr	r2, [pc, #44]	; (8004168 <UART_Start_Receive_IT+0x10c>)
 800413c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004154:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3714      	adds	r7, #20
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	08004301 	.word	0x08004301
 8004168:	08004229 	.word	0x08004229

0800416c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004182:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689a      	ldr	r2, [r3, #8]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 0201 	bic.w	r2, r2, #1
 8004192:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004198:	2b01      	cmp	r3, #1
 800419a:	d107      	bne.n	80041ac <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0210 	bic.w	r2, r2, #16
 80041aa:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2220      	movs	r2, #32
 80041b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	665a      	str	r2, [r3, #100]	; 0x64
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b084      	sub	sp, #16
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f7ff fb2f 	bl	800384c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041ee:	bf00      	nop
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b082      	sub	sp, #8
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800420c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2220      	movs	r2, #32
 8004212:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7ff fb0c 	bl	8003838 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004220:	bf00      	nop
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004236:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800423c:	2b22      	cmp	r3, #34	; 0x22
 800423e:	d151      	bne.n	80042e4 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004246:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004248:	89bb      	ldrh	r3, [r7, #12]
 800424a:	b2d9      	uxtb	r1, r3
 800424c:	89fb      	ldrh	r3, [r7, #14]
 800424e:	b2da      	uxtb	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004254:	400a      	ands	r2, r1
 8004256:	b2d2      	uxtb	r2, r2
 8004258:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425e:	1c5a      	adds	r2, r3, #1
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800426a:	b29b      	uxth	r3, r3
 800426c:	3b01      	subs	r3, #1
 800426e:	b29a      	uxth	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800427c:	b29b      	uxth	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d13a      	bne.n	80042f8 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004290:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0201 	bic.w	r2, r2, #1
 80042a0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2220      	movs	r2, #32
 80042a6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d10f      	bne.n	80042d6 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 0210 	bic.w	r2, r2, #16
 80042c4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80042cc:	4619      	mov	r1, r3
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7ff fac6 	bl	8003860 <HAL_UARTEx_RxEventCallback>
 80042d4:	e002      	b.n	80042dc <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7fc f96c 	bl	80005b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80042e2:	e009      	b.n	80042f8 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	8b1b      	ldrh	r3, [r3, #24]
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f042 0208 	orr.w	r2, r2, #8
 80042f4:	b292      	uxth	r2, r2
 80042f6:	831a      	strh	r2, [r3, #24]
}
 80042f8:	bf00      	nop
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800430e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004314:	2b22      	cmp	r3, #34	; 0x22
 8004316:	d151      	bne.n	80043bc <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800431e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004324:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004326:	89ba      	ldrh	r2, [r7, #12]
 8004328:	89fb      	ldrh	r3, [r7, #14]
 800432a:	4013      	ands	r3, r2
 800432c:	b29a      	uxth	r2, r3
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004336:	1c9a      	adds	r2, r3, #2
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004342:	b29b      	uxth	r3, r3
 8004344:	3b01      	subs	r3, #1
 8004346:	b29a      	uxth	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004354:	b29b      	uxth	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d13a      	bne.n	80043d0 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004368:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0201 	bic.w	r2, r2, #1
 8004378:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2220      	movs	r2, #32
 800437e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800438a:	2b01      	cmp	r3, #1
 800438c:	d10f      	bne.n	80043ae <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0210 	bic.w	r2, r2, #16
 800439c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80043a4:	4619      	mov	r1, r3
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7ff fa5a 	bl	8003860 <HAL_UARTEx_RxEventCallback>
 80043ac:	e002      	b.n	80043b4 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7fc f900 	bl	80005b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80043ba:	e009      	b.n	80043d0 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	8b1b      	ldrh	r3, [r3, #24]
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f042 0208 	orr.w	r2, r2, #8
 80043cc:	b292      	uxth	r2, r2
 80043ce:	831a      	strh	r2, [r3, #24]
}
 80043d0:	bf00      	nop
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <__errno>:
 80043ec:	4b01      	ldr	r3, [pc, #4]	; (80043f4 <__errno+0x8>)
 80043ee:	6818      	ldr	r0, [r3, #0]
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	2000000c 	.word	0x2000000c

080043f8 <__libc_init_array>:
 80043f8:	b570      	push	{r4, r5, r6, lr}
 80043fa:	4d0d      	ldr	r5, [pc, #52]	; (8004430 <__libc_init_array+0x38>)
 80043fc:	4c0d      	ldr	r4, [pc, #52]	; (8004434 <__libc_init_array+0x3c>)
 80043fe:	1b64      	subs	r4, r4, r5
 8004400:	10a4      	asrs	r4, r4, #2
 8004402:	2600      	movs	r6, #0
 8004404:	42a6      	cmp	r6, r4
 8004406:	d109      	bne.n	800441c <__libc_init_array+0x24>
 8004408:	4d0b      	ldr	r5, [pc, #44]	; (8004438 <__libc_init_array+0x40>)
 800440a:	4c0c      	ldr	r4, [pc, #48]	; (800443c <__libc_init_array+0x44>)
 800440c:	f001 f862 	bl	80054d4 <_init>
 8004410:	1b64      	subs	r4, r4, r5
 8004412:	10a4      	asrs	r4, r4, #2
 8004414:	2600      	movs	r6, #0
 8004416:	42a6      	cmp	r6, r4
 8004418:	d105      	bne.n	8004426 <__libc_init_array+0x2e>
 800441a:	bd70      	pop	{r4, r5, r6, pc}
 800441c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004420:	4798      	blx	r3
 8004422:	3601      	adds	r6, #1
 8004424:	e7ee      	b.n	8004404 <__libc_init_array+0xc>
 8004426:	f855 3b04 	ldr.w	r3, [r5], #4
 800442a:	4798      	blx	r3
 800442c:	3601      	adds	r6, #1
 800442e:	e7f2      	b.n	8004416 <__libc_init_array+0x1e>
 8004430:	08005890 	.word	0x08005890
 8004434:	08005890 	.word	0x08005890
 8004438:	08005890 	.word	0x08005890
 800443c:	08005894 	.word	0x08005894

08004440 <memset>:
 8004440:	4402      	add	r2, r0
 8004442:	4603      	mov	r3, r0
 8004444:	4293      	cmp	r3, r2
 8004446:	d100      	bne.n	800444a <memset+0xa>
 8004448:	4770      	bx	lr
 800444a:	f803 1b01 	strb.w	r1, [r3], #1
 800444e:	e7f9      	b.n	8004444 <memset+0x4>

08004450 <iprintf>:
 8004450:	b40f      	push	{r0, r1, r2, r3}
 8004452:	4b0a      	ldr	r3, [pc, #40]	; (800447c <iprintf+0x2c>)
 8004454:	b513      	push	{r0, r1, r4, lr}
 8004456:	681c      	ldr	r4, [r3, #0]
 8004458:	b124      	cbz	r4, 8004464 <iprintf+0x14>
 800445a:	69a3      	ldr	r3, [r4, #24]
 800445c:	b913      	cbnz	r3, 8004464 <iprintf+0x14>
 800445e:	4620      	mov	r0, r4
 8004460:	f000 fa8c 	bl	800497c <__sinit>
 8004464:	ab05      	add	r3, sp, #20
 8004466:	9a04      	ldr	r2, [sp, #16]
 8004468:	68a1      	ldr	r1, [r4, #8]
 800446a:	9301      	str	r3, [sp, #4]
 800446c:	4620      	mov	r0, r4
 800446e:	f000 fc5d 	bl	8004d2c <_vfiprintf_r>
 8004472:	b002      	add	sp, #8
 8004474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004478:	b004      	add	sp, #16
 800447a:	4770      	bx	lr
 800447c:	2000000c 	.word	0x2000000c

08004480 <putchar>:
 8004480:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <putchar+0x28>)
 8004482:	b513      	push	{r0, r1, r4, lr}
 8004484:	681c      	ldr	r4, [r3, #0]
 8004486:	4601      	mov	r1, r0
 8004488:	b134      	cbz	r4, 8004498 <putchar+0x18>
 800448a:	69a3      	ldr	r3, [r4, #24]
 800448c:	b923      	cbnz	r3, 8004498 <putchar+0x18>
 800448e:	9001      	str	r0, [sp, #4]
 8004490:	4620      	mov	r0, r4
 8004492:	f000 fa73 	bl	800497c <__sinit>
 8004496:	9901      	ldr	r1, [sp, #4]
 8004498:	68a2      	ldr	r2, [r4, #8]
 800449a:	4620      	mov	r0, r4
 800449c:	b002      	add	sp, #8
 800449e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044a2:	f000 bf07 	b.w	80052b4 <_putc_r>
 80044a6:	bf00      	nop
 80044a8:	2000000c 	.word	0x2000000c

080044ac <_puts_r>:
 80044ac:	b570      	push	{r4, r5, r6, lr}
 80044ae:	460e      	mov	r6, r1
 80044b0:	4605      	mov	r5, r0
 80044b2:	b118      	cbz	r0, 80044bc <_puts_r+0x10>
 80044b4:	6983      	ldr	r3, [r0, #24]
 80044b6:	b90b      	cbnz	r3, 80044bc <_puts_r+0x10>
 80044b8:	f000 fa60 	bl	800497c <__sinit>
 80044bc:	69ab      	ldr	r3, [r5, #24]
 80044be:	68ac      	ldr	r4, [r5, #8]
 80044c0:	b913      	cbnz	r3, 80044c8 <_puts_r+0x1c>
 80044c2:	4628      	mov	r0, r5
 80044c4:	f000 fa5a 	bl	800497c <__sinit>
 80044c8:	4b2c      	ldr	r3, [pc, #176]	; (800457c <_puts_r+0xd0>)
 80044ca:	429c      	cmp	r4, r3
 80044cc:	d120      	bne.n	8004510 <_puts_r+0x64>
 80044ce:	686c      	ldr	r4, [r5, #4]
 80044d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044d2:	07db      	lsls	r3, r3, #31
 80044d4:	d405      	bmi.n	80044e2 <_puts_r+0x36>
 80044d6:	89a3      	ldrh	r3, [r4, #12]
 80044d8:	0598      	lsls	r0, r3, #22
 80044da:	d402      	bmi.n	80044e2 <_puts_r+0x36>
 80044dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044de:	f000 faeb 	bl	8004ab8 <__retarget_lock_acquire_recursive>
 80044e2:	89a3      	ldrh	r3, [r4, #12]
 80044e4:	0719      	lsls	r1, r3, #28
 80044e6:	d51d      	bpl.n	8004524 <_puts_r+0x78>
 80044e8:	6923      	ldr	r3, [r4, #16]
 80044ea:	b1db      	cbz	r3, 8004524 <_puts_r+0x78>
 80044ec:	3e01      	subs	r6, #1
 80044ee:	68a3      	ldr	r3, [r4, #8]
 80044f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80044f4:	3b01      	subs	r3, #1
 80044f6:	60a3      	str	r3, [r4, #8]
 80044f8:	bb39      	cbnz	r1, 800454a <_puts_r+0x9e>
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	da38      	bge.n	8004570 <_puts_r+0xc4>
 80044fe:	4622      	mov	r2, r4
 8004500:	210a      	movs	r1, #10
 8004502:	4628      	mov	r0, r5
 8004504:	f000 f860 	bl	80045c8 <__swbuf_r>
 8004508:	3001      	adds	r0, #1
 800450a:	d011      	beq.n	8004530 <_puts_r+0x84>
 800450c:	250a      	movs	r5, #10
 800450e:	e011      	b.n	8004534 <_puts_r+0x88>
 8004510:	4b1b      	ldr	r3, [pc, #108]	; (8004580 <_puts_r+0xd4>)
 8004512:	429c      	cmp	r4, r3
 8004514:	d101      	bne.n	800451a <_puts_r+0x6e>
 8004516:	68ac      	ldr	r4, [r5, #8]
 8004518:	e7da      	b.n	80044d0 <_puts_r+0x24>
 800451a:	4b1a      	ldr	r3, [pc, #104]	; (8004584 <_puts_r+0xd8>)
 800451c:	429c      	cmp	r4, r3
 800451e:	bf08      	it	eq
 8004520:	68ec      	ldreq	r4, [r5, #12]
 8004522:	e7d5      	b.n	80044d0 <_puts_r+0x24>
 8004524:	4621      	mov	r1, r4
 8004526:	4628      	mov	r0, r5
 8004528:	f000 f8a0 	bl	800466c <__swsetup_r>
 800452c:	2800      	cmp	r0, #0
 800452e:	d0dd      	beq.n	80044ec <_puts_r+0x40>
 8004530:	f04f 35ff 	mov.w	r5, #4294967295
 8004534:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004536:	07da      	lsls	r2, r3, #31
 8004538:	d405      	bmi.n	8004546 <_puts_r+0x9a>
 800453a:	89a3      	ldrh	r3, [r4, #12]
 800453c:	059b      	lsls	r3, r3, #22
 800453e:	d402      	bmi.n	8004546 <_puts_r+0x9a>
 8004540:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004542:	f000 faba 	bl	8004aba <__retarget_lock_release_recursive>
 8004546:	4628      	mov	r0, r5
 8004548:	bd70      	pop	{r4, r5, r6, pc}
 800454a:	2b00      	cmp	r3, #0
 800454c:	da04      	bge.n	8004558 <_puts_r+0xac>
 800454e:	69a2      	ldr	r2, [r4, #24]
 8004550:	429a      	cmp	r2, r3
 8004552:	dc06      	bgt.n	8004562 <_puts_r+0xb6>
 8004554:	290a      	cmp	r1, #10
 8004556:	d004      	beq.n	8004562 <_puts_r+0xb6>
 8004558:	6823      	ldr	r3, [r4, #0]
 800455a:	1c5a      	adds	r2, r3, #1
 800455c:	6022      	str	r2, [r4, #0]
 800455e:	7019      	strb	r1, [r3, #0]
 8004560:	e7c5      	b.n	80044ee <_puts_r+0x42>
 8004562:	4622      	mov	r2, r4
 8004564:	4628      	mov	r0, r5
 8004566:	f000 f82f 	bl	80045c8 <__swbuf_r>
 800456a:	3001      	adds	r0, #1
 800456c:	d1bf      	bne.n	80044ee <_puts_r+0x42>
 800456e:	e7df      	b.n	8004530 <_puts_r+0x84>
 8004570:	6823      	ldr	r3, [r4, #0]
 8004572:	250a      	movs	r5, #10
 8004574:	1c5a      	adds	r2, r3, #1
 8004576:	6022      	str	r2, [r4, #0]
 8004578:	701d      	strb	r5, [r3, #0]
 800457a:	e7db      	b.n	8004534 <_puts_r+0x88>
 800457c:	08005814 	.word	0x08005814
 8004580:	08005834 	.word	0x08005834
 8004584:	080057f4 	.word	0x080057f4

08004588 <puts>:
 8004588:	4b02      	ldr	r3, [pc, #8]	; (8004594 <puts+0xc>)
 800458a:	4601      	mov	r1, r0
 800458c:	6818      	ldr	r0, [r3, #0]
 800458e:	f7ff bf8d 	b.w	80044ac <_puts_r>
 8004592:	bf00      	nop
 8004594:	2000000c 	.word	0x2000000c

08004598 <strstr>:
 8004598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800459a:	780c      	ldrb	r4, [r1, #0]
 800459c:	b164      	cbz	r4, 80045b8 <strstr+0x20>
 800459e:	4603      	mov	r3, r0
 80045a0:	781a      	ldrb	r2, [r3, #0]
 80045a2:	4618      	mov	r0, r3
 80045a4:	1c5e      	adds	r6, r3, #1
 80045a6:	b90a      	cbnz	r2, 80045ac <strstr+0x14>
 80045a8:	4610      	mov	r0, r2
 80045aa:	e005      	b.n	80045b8 <strstr+0x20>
 80045ac:	4294      	cmp	r4, r2
 80045ae:	d108      	bne.n	80045c2 <strstr+0x2a>
 80045b0:	460d      	mov	r5, r1
 80045b2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80045b6:	b902      	cbnz	r2, 80045ba <strstr+0x22>
 80045b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045ba:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80045be:	4297      	cmp	r7, r2
 80045c0:	d0f7      	beq.n	80045b2 <strstr+0x1a>
 80045c2:	4633      	mov	r3, r6
 80045c4:	e7ec      	b.n	80045a0 <strstr+0x8>
	...

080045c8 <__swbuf_r>:
 80045c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ca:	460e      	mov	r6, r1
 80045cc:	4614      	mov	r4, r2
 80045ce:	4605      	mov	r5, r0
 80045d0:	b118      	cbz	r0, 80045da <__swbuf_r+0x12>
 80045d2:	6983      	ldr	r3, [r0, #24]
 80045d4:	b90b      	cbnz	r3, 80045da <__swbuf_r+0x12>
 80045d6:	f000 f9d1 	bl	800497c <__sinit>
 80045da:	4b21      	ldr	r3, [pc, #132]	; (8004660 <__swbuf_r+0x98>)
 80045dc:	429c      	cmp	r4, r3
 80045de:	d12b      	bne.n	8004638 <__swbuf_r+0x70>
 80045e0:	686c      	ldr	r4, [r5, #4]
 80045e2:	69a3      	ldr	r3, [r4, #24]
 80045e4:	60a3      	str	r3, [r4, #8]
 80045e6:	89a3      	ldrh	r3, [r4, #12]
 80045e8:	071a      	lsls	r2, r3, #28
 80045ea:	d52f      	bpl.n	800464c <__swbuf_r+0x84>
 80045ec:	6923      	ldr	r3, [r4, #16]
 80045ee:	b36b      	cbz	r3, 800464c <__swbuf_r+0x84>
 80045f0:	6923      	ldr	r3, [r4, #16]
 80045f2:	6820      	ldr	r0, [r4, #0]
 80045f4:	1ac0      	subs	r0, r0, r3
 80045f6:	6963      	ldr	r3, [r4, #20]
 80045f8:	b2f6      	uxtb	r6, r6
 80045fa:	4283      	cmp	r3, r0
 80045fc:	4637      	mov	r7, r6
 80045fe:	dc04      	bgt.n	800460a <__swbuf_r+0x42>
 8004600:	4621      	mov	r1, r4
 8004602:	4628      	mov	r0, r5
 8004604:	f000 f926 	bl	8004854 <_fflush_r>
 8004608:	bb30      	cbnz	r0, 8004658 <__swbuf_r+0x90>
 800460a:	68a3      	ldr	r3, [r4, #8]
 800460c:	3b01      	subs	r3, #1
 800460e:	60a3      	str	r3, [r4, #8]
 8004610:	6823      	ldr	r3, [r4, #0]
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	6022      	str	r2, [r4, #0]
 8004616:	701e      	strb	r6, [r3, #0]
 8004618:	6963      	ldr	r3, [r4, #20]
 800461a:	3001      	adds	r0, #1
 800461c:	4283      	cmp	r3, r0
 800461e:	d004      	beq.n	800462a <__swbuf_r+0x62>
 8004620:	89a3      	ldrh	r3, [r4, #12]
 8004622:	07db      	lsls	r3, r3, #31
 8004624:	d506      	bpl.n	8004634 <__swbuf_r+0x6c>
 8004626:	2e0a      	cmp	r6, #10
 8004628:	d104      	bne.n	8004634 <__swbuf_r+0x6c>
 800462a:	4621      	mov	r1, r4
 800462c:	4628      	mov	r0, r5
 800462e:	f000 f911 	bl	8004854 <_fflush_r>
 8004632:	b988      	cbnz	r0, 8004658 <__swbuf_r+0x90>
 8004634:	4638      	mov	r0, r7
 8004636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004638:	4b0a      	ldr	r3, [pc, #40]	; (8004664 <__swbuf_r+0x9c>)
 800463a:	429c      	cmp	r4, r3
 800463c:	d101      	bne.n	8004642 <__swbuf_r+0x7a>
 800463e:	68ac      	ldr	r4, [r5, #8]
 8004640:	e7cf      	b.n	80045e2 <__swbuf_r+0x1a>
 8004642:	4b09      	ldr	r3, [pc, #36]	; (8004668 <__swbuf_r+0xa0>)
 8004644:	429c      	cmp	r4, r3
 8004646:	bf08      	it	eq
 8004648:	68ec      	ldreq	r4, [r5, #12]
 800464a:	e7ca      	b.n	80045e2 <__swbuf_r+0x1a>
 800464c:	4621      	mov	r1, r4
 800464e:	4628      	mov	r0, r5
 8004650:	f000 f80c 	bl	800466c <__swsetup_r>
 8004654:	2800      	cmp	r0, #0
 8004656:	d0cb      	beq.n	80045f0 <__swbuf_r+0x28>
 8004658:	f04f 37ff 	mov.w	r7, #4294967295
 800465c:	e7ea      	b.n	8004634 <__swbuf_r+0x6c>
 800465e:	bf00      	nop
 8004660:	08005814 	.word	0x08005814
 8004664:	08005834 	.word	0x08005834
 8004668:	080057f4 	.word	0x080057f4

0800466c <__swsetup_r>:
 800466c:	4b32      	ldr	r3, [pc, #200]	; (8004738 <__swsetup_r+0xcc>)
 800466e:	b570      	push	{r4, r5, r6, lr}
 8004670:	681d      	ldr	r5, [r3, #0]
 8004672:	4606      	mov	r6, r0
 8004674:	460c      	mov	r4, r1
 8004676:	b125      	cbz	r5, 8004682 <__swsetup_r+0x16>
 8004678:	69ab      	ldr	r3, [r5, #24]
 800467a:	b913      	cbnz	r3, 8004682 <__swsetup_r+0x16>
 800467c:	4628      	mov	r0, r5
 800467e:	f000 f97d 	bl	800497c <__sinit>
 8004682:	4b2e      	ldr	r3, [pc, #184]	; (800473c <__swsetup_r+0xd0>)
 8004684:	429c      	cmp	r4, r3
 8004686:	d10f      	bne.n	80046a8 <__swsetup_r+0x3c>
 8004688:	686c      	ldr	r4, [r5, #4]
 800468a:	89a3      	ldrh	r3, [r4, #12]
 800468c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004690:	0719      	lsls	r1, r3, #28
 8004692:	d42c      	bmi.n	80046ee <__swsetup_r+0x82>
 8004694:	06dd      	lsls	r5, r3, #27
 8004696:	d411      	bmi.n	80046bc <__swsetup_r+0x50>
 8004698:	2309      	movs	r3, #9
 800469a:	6033      	str	r3, [r6, #0]
 800469c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80046a0:	81a3      	strh	r3, [r4, #12]
 80046a2:	f04f 30ff 	mov.w	r0, #4294967295
 80046a6:	e03e      	b.n	8004726 <__swsetup_r+0xba>
 80046a8:	4b25      	ldr	r3, [pc, #148]	; (8004740 <__swsetup_r+0xd4>)
 80046aa:	429c      	cmp	r4, r3
 80046ac:	d101      	bne.n	80046b2 <__swsetup_r+0x46>
 80046ae:	68ac      	ldr	r4, [r5, #8]
 80046b0:	e7eb      	b.n	800468a <__swsetup_r+0x1e>
 80046b2:	4b24      	ldr	r3, [pc, #144]	; (8004744 <__swsetup_r+0xd8>)
 80046b4:	429c      	cmp	r4, r3
 80046b6:	bf08      	it	eq
 80046b8:	68ec      	ldreq	r4, [r5, #12]
 80046ba:	e7e6      	b.n	800468a <__swsetup_r+0x1e>
 80046bc:	0758      	lsls	r0, r3, #29
 80046be:	d512      	bpl.n	80046e6 <__swsetup_r+0x7a>
 80046c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046c2:	b141      	cbz	r1, 80046d6 <__swsetup_r+0x6a>
 80046c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046c8:	4299      	cmp	r1, r3
 80046ca:	d002      	beq.n	80046d2 <__swsetup_r+0x66>
 80046cc:	4630      	mov	r0, r6
 80046ce:	f000 fa59 	bl	8004b84 <_free_r>
 80046d2:	2300      	movs	r3, #0
 80046d4:	6363      	str	r3, [r4, #52]	; 0x34
 80046d6:	89a3      	ldrh	r3, [r4, #12]
 80046d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80046dc:	81a3      	strh	r3, [r4, #12]
 80046de:	2300      	movs	r3, #0
 80046e0:	6063      	str	r3, [r4, #4]
 80046e2:	6923      	ldr	r3, [r4, #16]
 80046e4:	6023      	str	r3, [r4, #0]
 80046e6:	89a3      	ldrh	r3, [r4, #12]
 80046e8:	f043 0308 	orr.w	r3, r3, #8
 80046ec:	81a3      	strh	r3, [r4, #12]
 80046ee:	6923      	ldr	r3, [r4, #16]
 80046f0:	b94b      	cbnz	r3, 8004706 <__swsetup_r+0x9a>
 80046f2:	89a3      	ldrh	r3, [r4, #12]
 80046f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80046f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046fc:	d003      	beq.n	8004706 <__swsetup_r+0x9a>
 80046fe:	4621      	mov	r1, r4
 8004700:	4630      	mov	r0, r6
 8004702:	f000 f9ff 	bl	8004b04 <__smakebuf_r>
 8004706:	89a0      	ldrh	r0, [r4, #12]
 8004708:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800470c:	f010 0301 	ands.w	r3, r0, #1
 8004710:	d00a      	beq.n	8004728 <__swsetup_r+0xbc>
 8004712:	2300      	movs	r3, #0
 8004714:	60a3      	str	r3, [r4, #8]
 8004716:	6963      	ldr	r3, [r4, #20]
 8004718:	425b      	negs	r3, r3
 800471a:	61a3      	str	r3, [r4, #24]
 800471c:	6923      	ldr	r3, [r4, #16]
 800471e:	b943      	cbnz	r3, 8004732 <__swsetup_r+0xc6>
 8004720:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004724:	d1ba      	bne.n	800469c <__swsetup_r+0x30>
 8004726:	bd70      	pop	{r4, r5, r6, pc}
 8004728:	0781      	lsls	r1, r0, #30
 800472a:	bf58      	it	pl
 800472c:	6963      	ldrpl	r3, [r4, #20]
 800472e:	60a3      	str	r3, [r4, #8]
 8004730:	e7f4      	b.n	800471c <__swsetup_r+0xb0>
 8004732:	2000      	movs	r0, #0
 8004734:	e7f7      	b.n	8004726 <__swsetup_r+0xba>
 8004736:	bf00      	nop
 8004738:	2000000c 	.word	0x2000000c
 800473c:	08005814 	.word	0x08005814
 8004740:	08005834 	.word	0x08005834
 8004744:	080057f4 	.word	0x080057f4

08004748 <__sflush_r>:
 8004748:	898a      	ldrh	r2, [r1, #12]
 800474a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800474e:	4605      	mov	r5, r0
 8004750:	0710      	lsls	r0, r2, #28
 8004752:	460c      	mov	r4, r1
 8004754:	d458      	bmi.n	8004808 <__sflush_r+0xc0>
 8004756:	684b      	ldr	r3, [r1, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	dc05      	bgt.n	8004768 <__sflush_r+0x20>
 800475c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800475e:	2b00      	cmp	r3, #0
 8004760:	dc02      	bgt.n	8004768 <__sflush_r+0x20>
 8004762:	2000      	movs	r0, #0
 8004764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004768:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800476a:	2e00      	cmp	r6, #0
 800476c:	d0f9      	beq.n	8004762 <__sflush_r+0x1a>
 800476e:	2300      	movs	r3, #0
 8004770:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004774:	682f      	ldr	r7, [r5, #0]
 8004776:	602b      	str	r3, [r5, #0]
 8004778:	d032      	beq.n	80047e0 <__sflush_r+0x98>
 800477a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800477c:	89a3      	ldrh	r3, [r4, #12]
 800477e:	075a      	lsls	r2, r3, #29
 8004780:	d505      	bpl.n	800478e <__sflush_r+0x46>
 8004782:	6863      	ldr	r3, [r4, #4]
 8004784:	1ac0      	subs	r0, r0, r3
 8004786:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004788:	b10b      	cbz	r3, 800478e <__sflush_r+0x46>
 800478a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800478c:	1ac0      	subs	r0, r0, r3
 800478e:	2300      	movs	r3, #0
 8004790:	4602      	mov	r2, r0
 8004792:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004794:	6a21      	ldr	r1, [r4, #32]
 8004796:	4628      	mov	r0, r5
 8004798:	47b0      	blx	r6
 800479a:	1c43      	adds	r3, r0, #1
 800479c:	89a3      	ldrh	r3, [r4, #12]
 800479e:	d106      	bne.n	80047ae <__sflush_r+0x66>
 80047a0:	6829      	ldr	r1, [r5, #0]
 80047a2:	291d      	cmp	r1, #29
 80047a4:	d82c      	bhi.n	8004800 <__sflush_r+0xb8>
 80047a6:	4a2a      	ldr	r2, [pc, #168]	; (8004850 <__sflush_r+0x108>)
 80047a8:	40ca      	lsrs	r2, r1
 80047aa:	07d6      	lsls	r6, r2, #31
 80047ac:	d528      	bpl.n	8004800 <__sflush_r+0xb8>
 80047ae:	2200      	movs	r2, #0
 80047b0:	6062      	str	r2, [r4, #4]
 80047b2:	04d9      	lsls	r1, r3, #19
 80047b4:	6922      	ldr	r2, [r4, #16]
 80047b6:	6022      	str	r2, [r4, #0]
 80047b8:	d504      	bpl.n	80047c4 <__sflush_r+0x7c>
 80047ba:	1c42      	adds	r2, r0, #1
 80047bc:	d101      	bne.n	80047c2 <__sflush_r+0x7a>
 80047be:	682b      	ldr	r3, [r5, #0]
 80047c0:	b903      	cbnz	r3, 80047c4 <__sflush_r+0x7c>
 80047c2:	6560      	str	r0, [r4, #84]	; 0x54
 80047c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047c6:	602f      	str	r7, [r5, #0]
 80047c8:	2900      	cmp	r1, #0
 80047ca:	d0ca      	beq.n	8004762 <__sflush_r+0x1a>
 80047cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047d0:	4299      	cmp	r1, r3
 80047d2:	d002      	beq.n	80047da <__sflush_r+0x92>
 80047d4:	4628      	mov	r0, r5
 80047d6:	f000 f9d5 	bl	8004b84 <_free_r>
 80047da:	2000      	movs	r0, #0
 80047dc:	6360      	str	r0, [r4, #52]	; 0x34
 80047de:	e7c1      	b.n	8004764 <__sflush_r+0x1c>
 80047e0:	6a21      	ldr	r1, [r4, #32]
 80047e2:	2301      	movs	r3, #1
 80047e4:	4628      	mov	r0, r5
 80047e6:	47b0      	blx	r6
 80047e8:	1c41      	adds	r1, r0, #1
 80047ea:	d1c7      	bne.n	800477c <__sflush_r+0x34>
 80047ec:	682b      	ldr	r3, [r5, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0c4      	beq.n	800477c <__sflush_r+0x34>
 80047f2:	2b1d      	cmp	r3, #29
 80047f4:	d001      	beq.n	80047fa <__sflush_r+0xb2>
 80047f6:	2b16      	cmp	r3, #22
 80047f8:	d101      	bne.n	80047fe <__sflush_r+0xb6>
 80047fa:	602f      	str	r7, [r5, #0]
 80047fc:	e7b1      	b.n	8004762 <__sflush_r+0x1a>
 80047fe:	89a3      	ldrh	r3, [r4, #12]
 8004800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004804:	81a3      	strh	r3, [r4, #12]
 8004806:	e7ad      	b.n	8004764 <__sflush_r+0x1c>
 8004808:	690f      	ldr	r7, [r1, #16]
 800480a:	2f00      	cmp	r7, #0
 800480c:	d0a9      	beq.n	8004762 <__sflush_r+0x1a>
 800480e:	0793      	lsls	r3, r2, #30
 8004810:	680e      	ldr	r6, [r1, #0]
 8004812:	bf08      	it	eq
 8004814:	694b      	ldreq	r3, [r1, #20]
 8004816:	600f      	str	r7, [r1, #0]
 8004818:	bf18      	it	ne
 800481a:	2300      	movne	r3, #0
 800481c:	eba6 0807 	sub.w	r8, r6, r7
 8004820:	608b      	str	r3, [r1, #8]
 8004822:	f1b8 0f00 	cmp.w	r8, #0
 8004826:	dd9c      	ble.n	8004762 <__sflush_r+0x1a>
 8004828:	6a21      	ldr	r1, [r4, #32]
 800482a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800482c:	4643      	mov	r3, r8
 800482e:	463a      	mov	r2, r7
 8004830:	4628      	mov	r0, r5
 8004832:	47b0      	blx	r6
 8004834:	2800      	cmp	r0, #0
 8004836:	dc06      	bgt.n	8004846 <__sflush_r+0xfe>
 8004838:	89a3      	ldrh	r3, [r4, #12]
 800483a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800483e:	81a3      	strh	r3, [r4, #12]
 8004840:	f04f 30ff 	mov.w	r0, #4294967295
 8004844:	e78e      	b.n	8004764 <__sflush_r+0x1c>
 8004846:	4407      	add	r7, r0
 8004848:	eba8 0800 	sub.w	r8, r8, r0
 800484c:	e7e9      	b.n	8004822 <__sflush_r+0xda>
 800484e:	bf00      	nop
 8004850:	20400001 	.word	0x20400001

08004854 <_fflush_r>:
 8004854:	b538      	push	{r3, r4, r5, lr}
 8004856:	690b      	ldr	r3, [r1, #16]
 8004858:	4605      	mov	r5, r0
 800485a:	460c      	mov	r4, r1
 800485c:	b913      	cbnz	r3, 8004864 <_fflush_r+0x10>
 800485e:	2500      	movs	r5, #0
 8004860:	4628      	mov	r0, r5
 8004862:	bd38      	pop	{r3, r4, r5, pc}
 8004864:	b118      	cbz	r0, 800486e <_fflush_r+0x1a>
 8004866:	6983      	ldr	r3, [r0, #24]
 8004868:	b90b      	cbnz	r3, 800486e <_fflush_r+0x1a>
 800486a:	f000 f887 	bl	800497c <__sinit>
 800486e:	4b14      	ldr	r3, [pc, #80]	; (80048c0 <_fflush_r+0x6c>)
 8004870:	429c      	cmp	r4, r3
 8004872:	d11b      	bne.n	80048ac <_fflush_r+0x58>
 8004874:	686c      	ldr	r4, [r5, #4]
 8004876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d0ef      	beq.n	800485e <_fflush_r+0xa>
 800487e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004880:	07d0      	lsls	r0, r2, #31
 8004882:	d404      	bmi.n	800488e <_fflush_r+0x3a>
 8004884:	0599      	lsls	r1, r3, #22
 8004886:	d402      	bmi.n	800488e <_fflush_r+0x3a>
 8004888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800488a:	f000 f915 	bl	8004ab8 <__retarget_lock_acquire_recursive>
 800488e:	4628      	mov	r0, r5
 8004890:	4621      	mov	r1, r4
 8004892:	f7ff ff59 	bl	8004748 <__sflush_r>
 8004896:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004898:	07da      	lsls	r2, r3, #31
 800489a:	4605      	mov	r5, r0
 800489c:	d4e0      	bmi.n	8004860 <_fflush_r+0xc>
 800489e:	89a3      	ldrh	r3, [r4, #12]
 80048a0:	059b      	lsls	r3, r3, #22
 80048a2:	d4dd      	bmi.n	8004860 <_fflush_r+0xc>
 80048a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048a6:	f000 f908 	bl	8004aba <__retarget_lock_release_recursive>
 80048aa:	e7d9      	b.n	8004860 <_fflush_r+0xc>
 80048ac:	4b05      	ldr	r3, [pc, #20]	; (80048c4 <_fflush_r+0x70>)
 80048ae:	429c      	cmp	r4, r3
 80048b0:	d101      	bne.n	80048b6 <_fflush_r+0x62>
 80048b2:	68ac      	ldr	r4, [r5, #8]
 80048b4:	e7df      	b.n	8004876 <_fflush_r+0x22>
 80048b6:	4b04      	ldr	r3, [pc, #16]	; (80048c8 <_fflush_r+0x74>)
 80048b8:	429c      	cmp	r4, r3
 80048ba:	bf08      	it	eq
 80048bc:	68ec      	ldreq	r4, [r5, #12]
 80048be:	e7da      	b.n	8004876 <_fflush_r+0x22>
 80048c0:	08005814 	.word	0x08005814
 80048c4:	08005834 	.word	0x08005834
 80048c8:	080057f4 	.word	0x080057f4

080048cc <std>:
 80048cc:	2300      	movs	r3, #0
 80048ce:	b510      	push	{r4, lr}
 80048d0:	4604      	mov	r4, r0
 80048d2:	e9c0 3300 	strd	r3, r3, [r0]
 80048d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048da:	6083      	str	r3, [r0, #8]
 80048dc:	8181      	strh	r1, [r0, #12]
 80048de:	6643      	str	r3, [r0, #100]	; 0x64
 80048e0:	81c2      	strh	r2, [r0, #14]
 80048e2:	6183      	str	r3, [r0, #24]
 80048e4:	4619      	mov	r1, r3
 80048e6:	2208      	movs	r2, #8
 80048e8:	305c      	adds	r0, #92	; 0x5c
 80048ea:	f7ff fda9 	bl	8004440 <memset>
 80048ee:	4b05      	ldr	r3, [pc, #20]	; (8004904 <std+0x38>)
 80048f0:	6263      	str	r3, [r4, #36]	; 0x24
 80048f2:	4b05      	ldr	r3, [pc, #20]	; (8004908 <std+0x3c>)
 80048f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80048f6:	4b05      	ldr	r3, [pc, #20]	; (800490c <std+0x40>)
 80048f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80048fa:	4b05      	ldr	r3, [pc, #20]	; (8004910 <std+0x44>)
 80048fc:	6224      	str	r4, [r4, #32]
 80048fe:	6323      	str	r3, [r4, #48]	; 0x30
 8004900:	bd10      	pop	{r4, pc}
 8004902:	bf00      	nop
 8004904:	08005365 	.word	0x08005365
 8004908:	08005387 	.word	0x08005387
 800490c:	080053bf 	.word	0x080053bf
 8004910:	080053e3 	.word	0x080053e3

08004914 <_cleanup_r>:
 8004914:	4901      	ldr	r1, [pc, #4]	; (800491c <_cleanup_r+0x8>)
 8004916:	f000 b8af 	b.w	8004a78 <_fwalk_reent>
 800491a:	bf00      	nop
 800491c:	08004855 	.word	0x08004855

08004920 <__sfmoreglue>:
 8004920:	b570      	push	{r4, r5, r6, lr}
 8004922:	1e4a      	subs	r2, r1, #1
 8004924:	2568      	movs	r5, #104	; 0x68
 8004926:	4355      	muls	r5, r2
 8004928:	460e      	mov	r6, r1
 800492a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800492e:	f000 f979 	bl	8004c24 <_malloc_r>
 8004932:	4604      	mov	r4, r0
 8004934:	b140      	cbz	r0, 8004948 <__sfmoreglue+0x28>
 8004936:	2100      	movs	r1, #0
 8004938:	e9c0 1600 	strd	r1, r6, [r0]
 800493c:	300c      	adds	r0, #12
 800493e:	60a0      	str	r0, [r4, #8]
 8004940:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004944:	f7ff fd7c 	bl	8004440 <memset>
 8004948:	4620      	mov	r0, r4
 800494a:	bd70      	pop	{r4, r5, r6, pc}

0800494c <__sfp_lock_acquire>:
 800494c:	4801      	ldr	r0, [pc, #4]	; (8004954 <__sfp_lock_acquire+0x8>)
 800494e:	f000 b8b3 	b.w	8004ab8 <__retarget_lock_acquire_recursive>
 8004952:	bf00      	nop
 8004954:	200005b4 	.word	0x200005b4

08004958 <__sfp_lock_release>:
 8004958:	4801      	ldr	r0, [pc, #4]	; (8004960 <__sfp_lock_release+0x8>)
 800495a:	f000 b8ae 	b.w	8004aba <__retarget_lock_release_recursive>
 800495e:	bf00      	nop
 8004960:	200005b4 	.word	0x200005b4

08004964 <__sinit_lock_acquire>:
 8004964:	4801      	ldr	r0, [pc, #4]	; (800496c <__sinit_lock_acquire+0x8>)
 8004966:	f000 b8a7 	b.w	8004ab8 <__retarget_lock_acquire_recursive>
 800496a:	bf00      	nop
 800496c:	200005af 	.word	0x200005af

08004970 <__sinit_lock_release>:
 8004970:	4801      	ldr	r0, [pc, #4]	; (8004978 <__sinit_lock_release+0x8>)
 8004972:	f000 b8a2 	b.w	8004aba <__retarget_lock_release_recursive>
 8004976:	bf00      	nop
 8004978:	200005af 	.word	0x200005af

0800497c <__sinit>:
 800497c:	b510      	push	{r4, lr}
 800497e:	4604      	mov	r4, r0
 8004980:	f7ff fff0 	bl	8004964 <__sinit_lock_acquire>
 8004984:	69a3      	ldr	r3, [r4, #24]
 8004986:	b11b      	cbz	r3, 8004990 <__sinit+0x14>
 8004988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800498c:	f7ff bff0 	b.w	8004970 <__sinit_lock_release>
 8004990:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004994:	6523      	str	r3, [r4, #80]	; 0x50
 8004996:	4b13      	ldr	r3, [pc, #76]	; (80049e4 <__sinit+0x68>)
 8004998:	4a13      	ldr	r2, [pc, #76]	; (80049e8 <__sinit+0x6c>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	62a2      	str	r2, [r4, #40]	; 0x28
 800499e:	42a3      	cmp	r3, r4
 80049a0:	bf04      	itt	eq
 80049a2:	2301      	moveq	r3, #1
 80049a4:	61a3      	streq	r3, [r4, #24]
 80049a6:	4620      	mov	r0, r4
 80049a8:	f000 f820 	bl	80049ec <__sfp>
 80049ac:	6060      	str	r0, [r4, #4]
 80049ae:	4620      	mov	r0, r4
 80049b0:	f000 f81c 	bl	80049ec <__sfp>
 80049b4:	60a0      	str	r0, [r4, #8]
 80049b6:	4620      	mov	r0, r4
 80049b8:	f000 f818 	bl	80049ec <__sfp>
 80049bc:	2200      	movs	r2, #0
 80049be:	60e0      	str	r0, [r4, #12]
 80049c0:	2104      	movs	r1, #4
 80049c2:	6860      	ldr	r0, [r4, #4]
 80049c4:	f7ff ff82 	bl	80048cc <std>
 80049c8:	68a0      	ldr	r0, [r4, #8]
 80049ca:	2201      	movs	r2, #1
 80049cc:	2109      	movs	r1, #9
 80049ce:	f7ff ff7d 	bl	80048cc <std>
 80049d2:	68e0      	ldr	r0, [r4, #12]
 80049d4:	2202      	movs	r2, #2
 80049d6:	2112      	movs	r1, #18
 80049d8:	f7ff ff78 	bl	80048cc <std>
 80049dc:	2301      	movs	r3, #1
 80049de:	61a3      	str	r3, [r4, #24]
 80049e0:	e7d2      	b.n	8004988 <__sinit+0xc>
 80049e2:	bf00      	nop
 80049e4:	080057f0 	.word	0x080057f0
 80049e8:	08004915 	.word	0x08004915

080049ec <__sfp>:
 80049ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ee:	4607      	mov	r7, r0
 80049f0:	f7ff ffac 	bl	800494c <__sfp_lock_acquire>
 80049f4:	4b1e      	ldr	r3, [pc, #120]	; (8004a70 <__sfp+0x84>)
 80049f6:	681e      	ldr	r6, [r3, #0]
 80049f8:	69b3      	ldr	r3, [r6, #24]
 80049fa:	b913      	cbnz	r3, 8004a02 <__sfp+0x16>
 80049fc:	4630      	mov	r0, r6
 80049fe:	f7ff ffbd 	bl	800497c <__sinit>
 8004a02:	3648      	adds	r6, #72	; 0x48
 8004a04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	d503      	bpl.n	8004a14 <__sfp+0x28>
 8004a0c:	6833      	ldr	r3, [r6, #0]
 8004a0e:	b30b      	cbz	r3, 8004a54 <__sfp+0x68>
 8004a10:	6836      	ldr	r6, [r6, #0]
 8004a12:	e7f7      	b.n	8004a04 <__sfp+0x18>
 8004a14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004a18:	b9d5      	cbnz	r5, 8004a50 <__sfp+0x64>
 8004a1a:	4b16      	ldr	r3, [pc, #88]	; (8004a74 <__sfp+0x88>)
 8004a1c:	60e3      	str	r3, [r4, #12]
 8004a1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004a22:	6665      	str	r5, [r4, #100]	; 0x64
 8004a24:	f000 f847 	bl	8004ab6 <__retarget_lock_init_recursive>
 8004a28:	f7ff ff96 	bl	8004958 <__sfp_lock_release>
 8004a2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004a30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004a34:	6025      	str	r5, [r4, #0]
 8004a36:	61a5      	str	r5, [r4, #24]
 8004a38:	2208      	movs	r2, #8
 8004a3a:	4629      	mov	r1, r5
 8004a3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004a40:	f7ff fcfe 	bl	8004440 <memset>
 8004a44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004a48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004a4c:	4620      	mov	r0, r4
 8004a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a50:	3468      	adds	r4, #104	; 0x68
 8004a52:	e7d9      	b.n	8004a08 <__sfp+0x1c>
 8004a54:	2104      	movs	r1, #4
 8004a56:	4638      	mov	r0, r7
 8004a58:	f7ff ff62 	bl	8004920 <__sfmoreglue>
 8004a5c:	4604      	mov	r4, r0
 8004a5e:	6030      	str	r0, [r6, #0]
 8004a60:	2800      	cmp	r0, #0
 8004a62:	d1d5      	bne.n	8004a10 <__sfp+0x24>
 8004a64:	f7ff ff78 	bl	8004958 <__sfp_lock_release>
 8004a68:	230c      	movs	r3, #12
 8004a6a:	603b      	str	r3, [r7, #0]
 8004a6c:	e7ee      	b.n	8004a4c <__sfp+0x60>
 8004a6e:	bf00      	nop
 8004a70:	080057f0 	.word	0x080057f0
 8004a74:	ffff0001 	.word	0xffff0001

08004a78 <_fwalk_reent>:
 8004a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a7c:	4606      	mov	r6, r0
 8004a7e:	4688      	mov	r8, r1
 8004a80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004a84:	2700      	movs	r7, #0
 8004a86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a8a:	f1b9 0901 	subs.w	r9, r9, #1
 8004a8e:	d505      	bpl.n	8004a9c <_fwalk_reent+0x24>
 8004a90:	6824      	ldr	r4, [r4, #0]
 8004a92:	2c00      	cmp	r4, #0
 8004a94:	d1f7      	bne.n	8004a86 <_fwalk_reent+0xe>
 8004a96:	4638      	mov	r0, r7
 8004a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a9c:	89ab      	ldrh	r3, [r5, #12]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d907      	bls.n	8004ab2 <_fwalk_reent+0x3a>
 8004aa2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	d003      	beq.n	8004ab2 <_fwalk_reent+0x3a>
 8004aaa:	4629      	mov	r1, r5
 8004aac:	4630      	mov	r0, r6
 8004aae:	47c0      	blx	r8
 8004ab0:	4307      	orrs	r7, r0
 8004ab2:	3568      	adds	r5, #104	; 0x68
 8004ab4:	e7e9      	b.n	8004a8a <_fwalk_reent+0x12>

08004ab6 <__retarget_lock_init_recursive>:
 8004ab6:	4770      	bx	lr

08004ab8 <__retarget_lock_acquire_recursive>:
 8004ab8:	4770      	bx	lr

08004aba <__retarget_lock_release_recursive>:
 8004aba:	4770      	bx	lr

08004abc <__swhatbuf_r>:
 8004abc:	b570      	push	{r4, r5, r6, lr}
 8004abe:	460e      	mov	r6, r1
 8004ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ac4:	2900      	cmp	r1, #0
 8004ac6:	b096      	sub	sp, #88	; 0x58
 8004ac8:	4614      	mov	r4, r2
 8004aca:	461d      	mov	r5, r3
 8004acc:	da07      	bge.n	8004ade <__swhatbuf_r+0x22>
 8004ace:	2300      	movs	r3, #0
 8004ad0:	602b      	str	r3, [r5, #0]
 8004ad2:	89b3      	ldrh	r3, [r6, #12]
 8004ad4:	061a      	lsls	r2, r3, #24
 8004ad6:	d410      	bmi.n	8004afa <__swhatbuf_r+0x3e>
 8004ad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004adc:	e00e      	b.n	8004afc <__swhatbuf_r+0x40>
 8004ade:	466a      	mov	r2, sp
 8004ae0:	f000 fca6 	bl	8005430 <_fstat_r>
 8004ae4:	2800      	cmp	r0, #0
 8004ae6:	dbf2      	blt.n	8004ace <__swhatbuf_r+0x12>
 8004ae8:	9a01      	ldr	r2, [sp, #4]
 8004aea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004aee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004af2:	425a      	negs	r2, r3
 8004af4:	415a      	adcs	r2, r3
 8004af6:	602a      	str	r2, [r5, #0]
 8004af8:	e7ee      	b.n	8004ad8 <__swhatbuf_r+0x1c>
 8004afa:	2340      	movs	r3, #64	; 0x40
 8004afc:	2000      	movs	r0, #0
 8004afe:	6023      	str	r3, [r4, #0]
 8004b00:	b016      	add	sp, #88	; 0x58
 8004b02:	bd70      	pop	{r4, r5, r6, pc}

08004b04 <__smakebuf_r>:
 8004b04:	898b      	ldrh	r3, [r1, #12]
 8004b06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b08:	079d      	lsls	r5, r3, #30
 8004b0a:	4606      	mov	r6, r0
 8004b0c:	460c      	mov	r4, r1
 8004b0e:	d507      	bpl.n	8004b20 <__smakebuf_r+0x1c>
 8004b10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b14:	6023      	str	r3, [r4, #0]
 8004b16:	6123      	str	r3, [r4, #16]
 8004b18:	2301      	movs	r3, #1
 8004b1a:	6163      	str	r3, [r4, #20]
 8004b1c:	b002      	add	sp, #8
 8004b1e:	bd70      	pop	{r4, r5, r6, pc}
 8004b20:	ab01      	add	r3, sp, #4
 8004b22:	466a      	mov	r2, sp
 8004b24:	f7ff ffca 	bl	8004abc <__swhatbuf_r>
 8004b28:	9900      	ldr	r1, [sp, #0]
 8004b2a:	4605      	mov	r5, r0
 8004b2c:	4630      	mov	r0, r6
 8004b2e:	f000 f879 	bl	8004c24 <_malloc_r>
 8004b32:	b948      	cbnz	r0, 8004b48 <__smakebuf_r+0x44>
 8004b34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b38:	059a      	lsls	r2, r3, #22
 8004b3a:	d4ef      	bmi.n	8004b1c <__smakebuf_r+0x18>
 8004b3c:	f023 0303 	bic.w	r3, r3, #3
 8004b40:	f043 0302 	orr.w	r3, r3, #2
 8004b44:	81a3      	strh	r3, [r4, #12]
 8004b46:	e7e3      	b.n	8004b10 <__smakebuf_r+0xc>
 8004b48:	4b0d      	ldr	r3, [pc, #52]	; (8004b80 <__smakebuf_r+0x7c>)
 8004b4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004b4c:	89a3      	ldrh	r3, [r4, #12]
 8004b4e:	6020      	str	r0, [r4, #0]
 8004b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b54:	81a3      	strh	r3, [r4, #12]
 8004b56:	9b00      	ldr	r3, [sp, #0]
 8004b58:	6163      	str	r3, [r4, #20]
 8004b5a:	9b01      	ldr	r3, [sp, #4]
 8004b5c:	6120      	str	r0, [r4, #16]
 8004b5e:	b15b      	cbz	r3, 8004b78 <__smakebuf_r+0x74>
 8004b60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b64:	4630      	mov	r0, r6
 8004b66:	f000 fc75 	bl	8005454 <_isatty_r>
 8004b6a:	b128      	cbz	r0, 8004b78 <__smakebuf_r+0x74>
 8004b6c:	89a3      	ldrh	r3, [r4, #12]
 8004b6e:	f023 0303 	bic.w	r3, r3, #3
 8004b72:	f043 0301 	orr.w	r3, r3, #1
 8004b76:	81a3      	strh	r3, [r4, #12]
 8004b78:	89a0      	ldrh	r0, [r4, #12]
 8004b7a:	4305      	orrs	r5, r0
 8004b7c:	81a5      	strh	r5, [r4, #12]
 8004b7e:	e7cd      	b.n	8004b1c <__smakebuf_r+0x18>
 8004b80:	08004915 	.word	0x08004915

08004b84 <_free_r>:
 8004b84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b86:	2900      	cmp	r1, #0
 8004b88:	d048      	beq.n	8004c1c <_free_r+0x98>
 8004b8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b8e:	9001      	str	r0, [sp, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f1a1 0404 	sub.w	r4, r1, #4
 8004b96:	bfb8      	it	lt
 8004b98:	18e4      	addlt	r4, r4, r3
 8004b9a:	f000 fc7d 	bl	8005498 <__malloc_lock>
 8004b9e:	4a20      	ldr	r2, [pc, #128]	; (8004c20 <_free_r+0x9c>)
 8004ba0:	9801      	ldr	r0, [sp, #4]
 8004ba2:	6813      	ldr	r3, [r2, #0]
 8004ba4:	4615      	mov	r5, r2
 8004ba6:	b933      	cbnz	r3, 8004bb6 <_free_r+0x32>
 8004ba8:	6063      	str	r3, [r4, #4]
 8004baa:	6014      	str	r4, [r2, #0]
 8004bac:	b003      	add	sp, #12
 8004bae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004bb2:	f000 bc77 	b.w	80054a4 <__malloc_unlock>
 8004bb6:	42a3      	cmp	r3, r4
 8004bb8:	d90b      	bls.n	8004bd2 <_free_r+0x4e>
 8004bba:	6821      	ldr	r1, [r4, #0]
 8004bbc:	1862      	adds	r2, r4, r1
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	bf04      	itt	eq
 8004bc2:	681a      	ldreq	r2, [r3, #0]
 8004bc4:	685b      	ldreq	r3, [r3, #4]
 8004bc6:	6063      	str	r3, [r4, #4]
 8004bc8:	bf04      	itt	eq
 8004bca:	1852      	addeq	r2, r2, r1
 8004bcc:	6022      	streq	r2, [r4, #0]
 8004bce:	602c      	str	r4, [r5, #0]
 8004bd0:	e7ec      	b.n	8004bac <_free_r+0x28>
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	b10b      	cbz	r3, 8004bdc <_free_r+0x58>
 8004bd8:	42a3      	cmp	r3, r4
 8004bda:	d9fa      	bls.n	8004bd2 <_free_r+0x4e>
 8004bdc:	6811      	ldr	r1, [r2, #0]
 8004bde:	1855      	adds	r5, r2, r1
 8004be0:	42a5      	cmp	r5, r4
 8004be2:	d10b      	bne.n	8004bfc <_free_r+0x78>
 8004be4:	6824      	ldr	r4, [r4, #0]
 8004be6:	4421      	add	r1, r4
 8004be8:	1854      	adds	r4, r2, r1
 8004bea:	42a3      	cmp	r3, r4
 8004bec:	6011      	str	r1, [r2, #0]
 8004bee:	d1dd      	bne.n	8004bac <_free_r+0x28>
 8004bf0:	681c      	ldr	r4, [r3, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	6053      	str	r3, [r2, #4]
 8004bf6:	4421      	add	r1, r4
 8004bf8:	6011      	str	r1, [r2, #0]
 8004bfa:	e7d7      	b.n	8004bac <_free_r+0x28>
 8004bfc:	d902      	bls.n	8004c04 <_free_r+0x80>
 8004bfe:	230c      	movs	r3, #12
 8004c00:	6003      	str	r3, [r0, #0]
 8004c02:	e7d3      	b.n	8004bac <_free_r+0x28>
 8004c04:	6825      	ldr	r5, [r4, #0]
 8004c06:	1961      	adds	r1, r4, r5
 8004c08:	428b      	cmp	r3, r1
 8004c0a:	bf04      	itt	eq
 8004c0c:	6819      	ldreq	r1, [r3, #0]
 8004c0e:	685b      	ldreq	r3, [r3, #4]
 8004c10:	6063      	str	r3, [r4, #4]
 8004c12:	bf04      	itt	eq
 8004c14:	1949      	addeq	r1, r1, r5
 8004c16:	6021      	streq	r1, [r4, #0]
 8004c18:	6054      	str	r4, [r2, #4]
 8004c1a:	e7c7      	b.n	8004bac <_free_r+0x28>
 8004c1c:	b003      	add	sp, #12
 8004c1e:	bd30      	pop	{r4, r5, pc}
 8004c20:	20000498 	.word	0x20000498

08004c24 <_malloc_r>:
 8004c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c26:	1ccd      	adds	r5, r1, #3
 8004c28:	f025 0503 	bic.w	r5, r5, #3
 8004c2c:	3508      	adds	r5, #8
 8004c2e:	2d0c      	cmp	r5, #12
 8004c30:	bf38      	it	cc
 8004c32:	250c      	movcc	r5, #12
 8004c34:	2d00      	cmp	r5, #0
 8004c36:	4606      	mov	r6, r0
 8004c38:	db01      	blt.n	8004c3e <_malloc_r+0x1a>
 8004c3a:	42a9      	cmp	r1, r5
 8004c3c:	d903      	bls.n	8004c46 <_malloc_r+0x22>
 8004c3e:	230c      	movs	r3, #12
 8004c40:	6033      	str	r3, [r6, #0]
 8004c42:	2000      	movs	r0, #0
 8004c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c46:	f000 fc27 	bl	8005498 <__malloc_lock>
 8004c4a:	4921      	ldr	r1, [pc, #132]	; (8004cd0 <_malloc_r+0xac>)
 8004c4c:	680a      	ldr	r2, [r1, #0]
 8004c4e:	4614      	mov	r4, r2
 8004c50:	b99c      	cbnz	r4, 8004c7a <_malloc_r+0x56>
 8004c52:	4f20      	ldr	r7, [pc, #128]	; (8004cd4 <_malloc_r+0xb0>)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	b923      	cbnz	r3, 8004c62 <_malloc_r+0x3e>
 8004c58:	4621      	mov	r1, r4
 8004c5a:	4630      	mov	r0, r6
 8004c5c:	f000 fb72 	bl	8005344 <_sbrk_r>
 8004c60:	6038      	str	r0, [r7, #0]
 8004c62:	4629      	mov	r1, r5
 8004c64:	4630      	mov	r0, r6
 8004c66:	f000 fb6d 	bl	8005344 <_sbrk_r>
 8004c6a:	1c43      	adds	r3, r0, #1
 8004c6c:	d123      	bne.n	8004cb6 <_malloc_r+0x92>
 8004c6e:	230c      	movs	r3, #12
 8004c70:	6033      	str	r3, [r6, #0]
 8004c72:	4630      	mov	r0, r6
 8004c74:	f000 fc16 	bl	80054a4 <__malloc_unlock>
 8004c78:	e7e3      	b.n	8004c42 <_malloc_r+0x1e>
 8004c7a:	6823      	ldr	r3, [r4, #0]
 8004c7c:	1b5b      	subs	r3, r3, r5
 8004c7e:	d417      	bmi.n	8004cb0 <_malloc_r+0x8c>
 8004c80:	2b0b      	cmp	r3, #11
 8004c82:	d903      	bls.n	8004c8c <_malloc_r+0x68>
 8004c84:	6023      	str	r3, [r4, #0]
 8004c86:	441c      	add	r4, r3
 8004c88:	6025      	str	r5, [r4, #0]
 8004c8a:	e004      	b.n	8004c96 <_malloc_r+0x72>
 8004c8c:	6863      	ldr	r3, [r4, #4]
 8004c8e:	42a2      	cmp	r2, r4
 8004c90:	bf0c      	ite	eq
 8004c92:	600b      	streq	r3, [r1, #0]
 8004c94:	6053      	strne	r3, [r2, #4]
 8004c96:	4630      	mov	r0, r6
 8004c98:	f000 fc04 	bl	80054a4 <__malloc_unlock>
 8004c9c:	f104 000b 	add.w	r0, r4, #11
 8004ca0:	1d23      	adds	r3, r4, #4
 8004ca2:	f020 0007 	bic.w	r0, r0, #7
 8004ca6:	1ac2      	subs	r2, r0, r3
 8004ca8:	d0cc      	beq.n	8004c44 <_malloc_r+0x20>
 8004caa:	1a1b      	subs	r3, r3, r0
 8004cac:	50a3      	str	r3, [r4, r2]
 8004cae:	e7c9      	b.n	8004c44 <_malloc_r+0x20>
 8004cb0:	4622      	mov	r2, r4
 8004cb2:	6864      	ldr	r4, [r4, #4]
 8004cb4:	e7cc      	b.n	8004c50 <_malloc_r+0x2c>
 8004cb6:	1cc4      	adds	r4, r0, #3
 8004cb8:	f024 0403 	bic.w	r4, r4, #3
 8004cbc:	42a0      	cmp	r0, r4
 8004cbe:	d0e3      	beq.n	8004c88 <_malloc_r+0x64>
 8004cc0:	1a21      	subs	r1, r4, r0
 8004cc2:	4630      	mov	r0, r6
 8004cc4:	f000 fb3e 	bl	8005344 <_sbrk_r>
 8004cc8:	3001      	adds	r0, #1
 8004cca:	d1dd      	bne.n	8004c88 <_malloc_r+0x64>
 8004ccc:	e7cf      	b.n	8004c6e <_malloc_r+0x4a>
 8004cce:	bf00      	nop
 8004cd0:	20000498 	.word	0x20000498
 8004cd4:	2000049c 	.word	0x2000049c

08004cd8 <__sfputc_r>:
 8004cd8:	6893      	ldr	r3, [r2, #8]
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	b410      	push	{r4}
 8004ce0:	6093      	str	r3, [r2, #8]
 8004ce2:	da08      	bge.n	8004cf6 <__sfputc_r+0x1e>
 8004ce4:	6994      	ldr	r4, [r2, #24]
 8004ce6:	42a3      	cmp	r3, r4
 8004ce8:	db01      	blt.n	8004cee <__sfputc_r+0x16>
 8004cea:	290a      	cmp	r1, #10
 8004cec:	d103      	bne.n	8004cf6 <__sfputc_r+0x1e>
 8004cee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004cf2:	f7ff bc69 	b.w	80045c8 <__swbuf_r>
 8004cf6:	6813      	ldr	r3, [r2, #0]
 8004cf8:	1c58      	adds	r0, r3, #1
 8004cfa:	6010      	str	r0, [r2, #0]
 8004cfc:	7019      	strb	r1, [r3, #0]
 8004cfe:	4608      	mov	r0, r1
 8004d00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <__sfputs_r>:
 8004d06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d08:	4606      	mov	r6, r0
 8004d0a:	460f      	mov	r7, r1
 8004d0c:	4614      	mov	r4, r2
 8004d0e:	18d5      	adds	r5, r2, r3
 8004d10:	42ac      	cmp	r4, r5
 8004d12:	d101      	bne.n	8004d18 <__sfputs_r+0x12>
 8004d14:	2000      	movs	r0, #0
 8004d16:	e007      	b.n	8004d28 <__sfputs_r+0x22>
 8004d18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d1c:	463a      	mov	r2, r7
 8004d1e:	4630      	mov	r0, r6
 8004d20:	f7ff ffda 	bl	8004cd8 <__sfputc_r>
 8004d24:	1c43      	adds	r3, r0, #1
 8004d26:	d1f3      	bne.n	8004d10 <__sfputs_r+0xa>
 8004d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d2c <_vfiprintf_r>:
 8004d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d30:	460d      	mov	r5, r1
 8004d32:	b09d      	sub	sp, #116	; 0x74
 8004d34:	4614      	mov	r4, r2
 8004d36:	4698      	mov	r8, r3
 8004d38:	4606      	mov	r6, r0
 8004d3a:	b118      	cbz	r0, 8004d44 <_vfiprintf_r+0x18>
 8004d3c:	6983      	ldr	r3, [r0, #24]
 8004d3e:	b90b      	cbnz	r3, 8004d44 <_vfiprintf_r+0x18>
 8004d40:	f7ff fe1c 	bl	800497c <__sinit>
 8004d44:	4b89      	ldr	r3, [pc, #548]	; (8004f6c <_vfiprintf_r+0x240>)
 8004d46:	429d      	cmp	r5, r3
 8004d48:	d11b      	bne.n	8004d82 <_vfiprintf_r+0x56>
 8004d4a:	6875      	ldr	r5, [r6, #4]
 8004d4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d4e:	07d9      	lsls	r1, r3, #31
 8004d50:	d405      	bmi.n	8004d5e <_vfiprintf_r+0x32>
 8004d52:	89ab      	ldrh	r3, [r5, #12]
 8004d54:	059a      	lsls	r2, r3, #22
 8004d56:	d402      	bmi.n	8004d5e <_vfiprintf_r+0x32>
 8004d58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d5a:	f7ff fead 	bl	8004ab8 <__retarget_lock_acquire_recursive>
 8004d5e:	89ab      	ldrh	r3, [r5, #12]
 8004d60:	071b      	lsls	r3, r3, #28
 8004d62:	d501      	bpl.n	8004d68 <_vfiprintf_r+0x3c>
 8004d64:	692b      	ldr	r3, [r5, #16]
 8004d66:	b9eb      	cbnz	r3, 8004da4 <_vfiprintf_r+0x78>
 8004d68:	4629      	mov	r1, r5
 8004d6a:	4630      	mov	r0, r6
 8004d6c:	f7ff fc7e 	bl	800466c <__swsetup_r>
 8004d70:	b1c0      	cbz	r0, 8004da4 <_vfiprintf_r+0x78>
 8004d72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d74:	07dc      	lsls	r4, r3, #31
 8004d76:	d50e      	bpl.n	8004d96 <_vfiprintf_r+0x6a>
 8004d78:	f04f 30ff 	mov.w	r0, #4294967295
 8004d7c:	b01d      	add	sp, #116	; 0x74
 8004d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d82:	4b7b      	ldr	r3, [pc, #492]	; (8004f70 <_vfiprintf_r+0x244>)
 8004d84:	429d      	cmp	r5, r3
 8004d86:	d101      	bne.n	8004d8c <_vfiprintf_r+0x60>
 8004d88:	68b5      	ldr	r5, [r6, #8]
 8004d8a:	e7df      	b.n	8004d4c <_vfiprintf_r+0x20>
 8004d8c:	4b79      	ldr	r3, [pc, #484]	; (8004f74 <_vfiprintf_r+0x248>)
 8004d8e:	429d      	cmp	r5, r3
 8004d90:	bf08      	it	eq
 8004d92:	68f5      	ldreq	r5, [r6, #12]
 8004d94:	e7da      	b.n	8004d4c <_vfiprintf_r+0x20>
 8004d96:	89ab      	ldrh	r3, [r5, #12]
 8004d98:	0598      	lsls	r0, r3, #22
 8004d9a:	d4ed      	bmi.n	8004d78 <_vfiprintf_r+0x4c>
 8004d9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d9e:	f7ff fe8c 	bl	8004aba <__retarget_lock_release_recursive>
 8004da2:	e7e9      	b.n	8004d78 <_vfiprintf_r+0x4c>
 8004da4:	2300      	movs	r3, #0
 8004da6:	9309      	str	r3, [sp, #36]	; 0x24
 8004da8:	2320      	movs	r3, #32
 8004daa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004dae:	f8cd 800c 	str.w	r8, [sp, #12]
 8004db2:	2330      	movs	r3, #48	; 0x30
 8004db4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004f78 <_vfiprintf_r+0x24c>
 8004db8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004dbc:	f04f 0901 	mov.w	r9, #1
 8004dc0:	4623      	mov	r3, r4
 8004dc2:	469a      	mov	sl, r3
 8004dc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dc8:	b10a      	cbz	r2, 8004dce <_vfiprintf_r+0xa2>
 8004dca:	2a25      	cmp	r2, #37	; 0x25
 8004dcc:	d1f9      	bne.n	8004dc2 <_vfiprintf_r+0x96>
 8004dce:	ebba 0b04 	subs.w	fp, sl, r4
 8004dd2:	d00b      	beq.n	8004dec <_vfiprintf_r+0xc0>
 8004dd4:	465b      	mov	r3, fp
 8004dd6:	4622      	mov	r2, r4
 8004dd8:	4629      	mov	r1, r5
 8004dda:	4630      	mov	r0, r6
 8004ddc:	f7ff ff93 	bl	8004d06 <__sfputs_r>
 8004de0:	3001      	adds	r0, #1
 8004de2:	f000 80aa 	beq.w	8004f3a <_vfiprintf_r+0x20e>
 8004de6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004de8:	445a      	add	r2, fp
 8004dea:	9209      	str	r2, [sp, #36]	; 0x24
 8004dec:	f89a 3000 	ldrb.w	r3, [sl]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f000 80a2 	beq.w	8004f3a <_vfiprintf_r+0x20e>
 8004df6:	2300      	movs	r3, #0
 8004df8:	f04f 32ff 	mov.w	r2, #4294967295
 8004dfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e00:	f10a 0a01 	add.w	sl, sl, #1
 8004e04:	9304      	str	r3, [sp, #16]
 8004e06:	9307      	str	r3, [sp, #28]
 8004e08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e0c:	931a      	str	r3, [sp, #104]	; 0x68
 8004e0e:	4654      	mov	r4, sl
 8004e10:	2205      	movs	r2, #5
 8004e12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e16:	4858      	ldr	r0, [pc, #352]	; (8004f78 <_vfiprintf_r+0x24c>)
 8004e18:	f7fb f9f2 	bl	8000200 <memchr>
 8004e1c:	9a04      	ldr	r2, [sp, #16]
 8004e1e:	b9d8      	cbnz	r0, 8004e58 <_vfiprintf_r+0x12c>
 8004e20:	06d1      	lsls	r1, r2, #27
 8004e22:	bf44      	itt	mi
 8004e24:	2320      	movmi	r3, #32
 8004e26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e2a:	0713      	lsls	r3, r2, #28
 8004e2c:	bf44      	itt	mi
 8004e2e:	232b      	movmi	r3, #43	; 0x2b
 8004e30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e34:	f89a 3000 	ldrb.w	r3, [sl]
 8004e38:	2b2a      	cmp	r3, #42	; 0x2a
 8004e3a:	d015      	beq.n	8004e68 <_vfiprintf_r+0x13c>
 8004e3c:	9a07      	ldr	r2, [sp, #28]
 8004e3e:	4654      	mov	r4, sl
 8004e40:	2000      	movs	r0, #0
 8004e42:	f04f 0c0a 	mov.w	ip, #10
 8004e46:	4621      	mov	r1, r4
 8004e48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e4c:	3b30      	subs	r3, #48	; 0x30
 8004e4e:	2b09      	cmp	r3, #9
 8004e50:	d94e      	bls.n	8004ef0 <_vfiprintf_r+0x1c4>
 8004e52:	b1b0      	cbz	r0, 8004e82 <_vfiprintf_r+0x156>
 8004e54:	9207      	str	r2, [sp, #28]
 8004e56:	e014      	b.n	8004e82 <_vfiprintf_r+0x156>
 8004e58:	eba0 0308 	sub.w	r3, r0, r8
 8004e5c:	fa09 f303 	lsl.w	r3, r9, r3
 8004e60:	4313      	orrs	r3, r2
 8004e62:	9304      	str	r3, [sp, #16]
 8004e64:	46a2      	mov	sl, r4
 8004e66:	e7d2      	b.n	8004e0e <_vfiprintf_r+0xe2>
 8004e68:	9b03      	ldr	r3, [sp, #12]
 8004e6a:	1d19      	adds	r1, r3, #4
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	9103      	str	r1, [sp, #12]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	bfbb      	ittet	lt
 8004e74:	425b      	neglt	r3, r3
 8004e76:	f042 0202 	orrlt.w	r2, r2, #2
 8004e7a:	9307      	strge	r3, [sp, #28]
 8004e7c:	9307      	strlt	r3, [sp, #28]
 8004e7e:	bfb8      	it	lt
 8004e80:	9204      	strlt	r2, [sp, #16]
 8004e82:	7823      	ldrb	r3, [r4, #0]
 8004e84:	2b2e      	cmp	r3, #46	; 0x2e
 8004e86:	d10c      	bne.n	8004ea2 <_vfiprintf_r+0x176>
 8004e88:	7863      	ldrb	r3, [r4, #1]
 8004e8a:	2b2a      	cmp	r3, #42	; 0x2a
 8004e8c:	d135      	bne.n	8004efa <_vfiprintf_r+0x1ce>
 8004e8e:	9b03      	ldr	r3, [sp, #12]
 8004e90:	1d1a      	adds	r2, r3, #4
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	9203      	str	r2, [sp, #12]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	bfb8      	it	lt
 8004e9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e9e:	3402      	adds	r4, #2
 8004ea0:	9305      	str	r3, [sp, #20]
 8004ea2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004f88 <_vfiprintf_r+0x25c>
 8004ea6:	7821      	ldrb	r1, [r4, #0]
 8004ea8:	2203      	movs	r2, #3
 8004eaa:	4650      	mov	r0, sl
 8004eac:	f7fb f9a8 	bl	8000200 <memchr>
 8004eb0:	b140      	cbz	r0, 8004ec4 <_vfiprintf_r+0x198>
 8004eb2:	2340      	movs	r3, #64	; 0x40
 8004eb4:	eba0 000a 	sub.w	r0, r0, sl
 8004eb8:	fa03 f000 	lsl.w	r0, r3, r0
 8004ebc:	9b04      	ldr	r3, [sp, #16]
 8004ebe:	4303      	orrs	r3, r0
 8004ec0:	3401      	adds	r4, #1
 8004ec2:	9304      	str	r3, [sp, #16]
 8004ec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ec8:	482c      	ldr	r0, [pc, #176]	; (8004f7c <_vfiprintf_r+0x250>)
 8004eca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ece:	2206      	movs	r2, #6
 8004ed0:	f7fb f996 	bl	8000200 <memchr>
 8004ed4:	2800      	cmp	r0, #0
 8004ed6:	d03f      	beq.n	8004f58 <_vfiprintf_r+0x22c>
 8004ed8:	4b29      	ldr	r3, [pc, #164]	; (8004f80 <_vfiprintf_r+0x254>)
 8004eda:	bb1b      	cbnz	r3, 8004f24 <_vfiprintf_r+0x1f8>
 8004edc:	9b03      	ldr	r3, [sp, #12]
 8004ede:	3307      	adds	r3, #7
 8004ee0:	f023 0307 	bic.w	r3, r3, #7
 8004ee4:	3308      	adds	r3, #8
 8004ee6:	9303      	str	r3, [sp, #12]
 8004ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eea:	443b      	add	r3, r7
 8004eec:	9309      	str	r3, [sp, #36]	; 0x24
 8004eee:	e767      	b.n	8004dc0 <_vfiprintf_r+0x94>
 8004ef0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ef4:	460c      	mov	r4, r1
 8004ef6:	2001      	movs	r0, #1
 8004ef8:	e7a5      	b.n	8004e46 <_vfiprintf_r+0x11a>
 8004efa:	2300      	movs	r3, #0
 8004efc:	3401      	adds	r4, #1
 8004efe:	9305      	str	r3, [sp, #20]
 8004f00:	4619      	mov	r1, r3
 8004f02:	f04f 0c0a 	mov.w	ip, #10
 8004f06:	4620      	mov	r0, r4
 8004f08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f0c:	3a30      	subs	r2, #48	; 0x30
 8004f0e:	2a09      	cmp	r2, #9
 8004f10:	d903      	bls.n	8004f1a <_vfiprintf_r+0x1ee>
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d0c5      	beq.n	8004ea2 <_vfiprintf_r+0x176>
 8004f16:	9105      	str	r1, [sp, #20]
 8004f18:	e7c3      	b.n	8004ea2 <_vfiprintf_r+0x176>
 8004f1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f1e:	4604      	mov	r4, r0
 8004f20:	2301      	movs	r3, #1
 8004f22:	e7f0      	b.n	8004f06 <_vfiprintf_r+0x1da>
 8004f24:	ab03      	add	r3, sp, #12
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	462a      	mov	r2, r5
 8004f2a:	4b16      	ldr	r3, [pc, #88]	; (8004f84 <_vfiprintf_r+0x258>)
 8004f2c:	a904      	add	r1, sp, #16
 8004f2e:	4630      	mov	r0, r6
 8004f30:	f3af 8000 	nop.w
 8004f34:	4607      	mov	r7, r0
 8004f36:	1c78      	adds	r0, r7, #1
 8004f38:	d1d6      	bne.n	8004ee8 <_vfiprintf_r+0x1bc>
 8004f3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f3c:	07d9      	lsls	r1, r3, #31
 8004f3e:	d405      	bmi.n	8004f4c <_vfiprintf_r+0x220>
 8004f40:	89ab      	ldrh	r3, [r5, #12]
 8004f42:	059a      	lsls	r2, r3, #22
 8004f44:	d402      	bmi.n	8004f4c <_vfiprintf_r+0x220>
 8004f46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f48:	f7ff fdb7 	bl	8004aba <__retarget_lock_release_recursive>
 8004f4c:	89ab      	ldrh	r3, [r5, #12]
 8004f4e:	065b      	lsls	r3, r3, #25
 8004f50:	f53f af12 	bmi.w	8004d78 <_vfiprintf_r+0x4c>
 8004f54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f56:	e711      	b.n	8004d7c <_vfiprintf_r+0x50>
 8004f58:	ab03      	add	r3, sp, #12
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	462a      	mov	r2, r5
 8004f5e:	4b09      	ldr	r3, [pc, #36]	; (8004f84 <_vfiprintf_r+0x258>)
 8004f60:	a904      	add	r1, sp, #16
 8004f62:	4630      	mov	r0, r6
 8004f64:	f000 f880 	bl	8005068 <_printf_i>
 8004f68:	e7e4      	b.n	8004f34 <_vfiprintf_r+0x208>
 8004f6a:	bf00      	nop
 8004f6c:	08005814 	.word	0x08005814
 8004f70:	08005834 	.word	0x08005834
 8004f74:	080057f4 	.word	0x080057f4
 8004f78:	08005854 	.word	0x08005854
 8004f7c:	0800585e 	.word	0x0800585e
 8004f80:	00000000 	.word	0x00000000
 8004f84:	08004d07 	.word	0x08004d07
 8004f88:	0800585a 	.word	0x0800585a

08004f8c <_printf_common>:
 8004f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f90:	4616      	mov	r6, r2
 8004f92:	4699      	mov	r9, r3
 8004f94:	688a      	ldr	r2, [r1, #8]
 8004f96:	690b      	ldr	r3, [r1, #16]
 8004f98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	bfb8      	it	lt
 8004fa0:	4613      	movlt	r3, r2
 8004fa2:	6033      	str	r3, [r6, #0]
 8004fa4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fa8:	4607      	mov	r7, r0
 8004faa:	460c      	mov	r4, r1
 8004fac:	b10a      	cbz	r2, 8004fb2 <_printf_common+0x26>
 8004fae:	3301      	adds	r3, #1
 8004fb0:	6033      	str	r3, [r6, #0]
 8004fb2:	6823      	ldr	r3, [r4, #0]
 8004fb4:	0699      	lsls	r1, r3, #26
 8004fb6:	bf42      	ittt	mi
 8004fb8:	6833      	ldrmi	r3, [r6, #0]
 8004fba:	3302      	addmi	r3, #2
 8004fbc:	6033      	strmi	r3, [r6, #0]
 8004fbe:	6825      	ldr	r5, [r4, #0]
 8004fc0:	f015 0506 	ands.w	r5, r5, #6
 8004fc4:	d106      	bne.n	8004fd4 <_printf_common+0x48>
 8004fc6:	f104 0a19 	add.w	sl, r4, #25
 8004fca:	68e3      	ldr	r3, [r4, #12]
 8004fcc:	6832      	ldr	r2, [r6, #0]
 8004fce:	1a9b      	subs	r3, r3, r2
 8004fd0:	42ab      	cmp	r3, r5
 8004fd2:	dc26      	bgt.n	8005022 <_printf_common+0x96>
 8004fd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004fd8:	1e13      	subs	r3, r2, #0
 8004fda:	6822      	ldr	r2, [r4, #0]
 8004fdc:	bf18      	it	ne
 8004fde:	2301      	movne	r3, #1
 8004fe0:	0692      	lsls	r2, r2, #26
 8004fe2:	d42b      	bmi.n	800503c <_printf_common+0xb0>
 8004fe4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fe8:	4649      	mov	r1, r9
 8004fea:	4638      	mov	r0, r7
 8004fec:	47c0      	blx	r8
 8004fee:	3001      	adds	r0, #1
 8004ff0:	d01e      	beq.n	8005030 <_printf_common+0xa4>
 8004ff2:	6823      	ldr	r3, [r4, #0]
 8004ff4:	68e5      	ldr	r5, [r4, #12]
 8004ff6:	6832      	ldr	r2, [r6, #0]
 8004ff8:	f003 0306 	and.w	r3, r3, #6
 8004ffc:	2b04      	cmp	r3, #4
 8004ffe:	bf08      	it	eq
 8005000:	1aad      	subeq	r5, r5, r2
 8005002:	68a3      	ldr	r3, [r4, #8]
 8005004:	6922      	ldr	r2, [r4, #16]
 8005006:	bf0c      	ite	eq
 8005008:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800500c:	2500      	movne	r5, #0
 800500e:	4293      	cmp	r3, r2
 8005010:	bfc4      	itt	gt
 8005012:	1a9b      	subgt	r3, r3, r2
 8005014:	18ed      	addgt	r5, r5, r3
 8005016:	2600      	movs	r6, #0
 8005018:	341a      	adds	r4, #26
 800501a:	42b5      	cmp	r5, r6
 800501c:	d11a      	bne.n	8005054 <_printf_common+0xc8>
 800501e:	2000      	movs	r0, #0
 8005020:	e008      	b.n	8005034 <_printf_common+0xa8>
 8005022:	2301      	movs	r3, #1
 8005024:	4652      	mov	r2, sl
 8005026:	4649      	mov	r1, r9
 8005028:	4638      	mov	r0, r7
 800502a:	47c0      	blx	r8
 800502c:	3001      	adds	r0, #1
 800502e:	d103      	bne.n	8005038 <_printf_common+0xac>
 8005030:	f04f 30ff 	mov.w	r0, #4294967295
 8005034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005038:	3501      	adds	r5, #1
 800503a:	e7c6      	b.n	8004fca <_printf_common+0x3e>
 800503c:	18e1      	adds	r1, r4, r3
 800503e:	1c5a      	adds	r2, r3, #1
 8005040:	2030      	movs	r0, #48	; 0x30
 8005042:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005046:	4422      	add	r2, r4
 8005048:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800504c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005050:	3302      	adds	r3, #2
 8005052:	e7c7      	b.n	8004fe4 <_printf_common+0x58>
 8005054:	2301      	movs	r3, #1
 8005056:	4622      	mov	r2, r4
 8005058:	4649      	mov	r1, r9
 800505a:	4638      	mov	r0, r7
 800505c:	47c0      	blx	r8
 800505e:	3001      	adds	r0, #1
 8005060:	d0e6      	beq.n	8005030 <_printf_common+0xa4>
 8005062:	3601      	adds	r6, #1
 8005064:	e7d9      	b.n	800501a <_printf_common+0x8e>
	...

08005068 <_printf_i>:
 8005068:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800506c:	460c      	mov	r4, r1
 800506e:	4691      	mov	r9, r2
 8005070:	7e27      	ldrb	r7, [r4, #24]
 8005072:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005074:	2f78      	cmp	r7, #120	; 0x78
 8005076:	4680      	mov	r8, r0
 8005078:	469a      	mov	sl, r3
 800507a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800507e:	d807      	bhi.n	8005090 <_printf_i+0x28>
 8005080:	2f62      	cmp	r7, #98	; 0x62
 8005082:	d80a      	bhi.n	800509a <_printf_i+0x32>
 8005084:	2f00      	cmp	r7, #0
 8005086:	f000 80d8 	beq.w	800523a <_printf_i+0x1d2>
 800508a:	2f58      	cmp	r7, #88	; 0x58
 800508c:	f000 80a3 	beq.w	80051d6 <_printf_i+0x16e>
 8005090:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005094:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005098:	e03a      	b.n	8005110 <_printf_i+0xa8>
 800509a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800509e:	2b15      	cmp	r3, #21
 80050a0:	d8f6      	bhi.n	8005090 <_printf_i+0x28>
 80050a2:	a001      	add	r0, pc, #4	; (adr r0, 80050a8 <_printf_i+0x40>)
 80050a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80050a8:	08005101 	.word	0x08005101
 80050ac:	08005115 	.word	0x08005115
 80050b0:	08005091 	.word	0x08005091
 80050b4:	08005091 	.word	0x08005091
 80050b8:	08005091 	.word	0x08005091
 80050bc:	08005091 	.word	0x08005091
 80050c0:	08005115 	.word	0x08005115
 80050c4:	08005091 	.word	0x08005091
 80050c8:	08005091 	.word	0x08005091
 80050cc:	08005091 	.word	0x08005091
 80050d0:	08005091 	.word	0x08005091
 80050d4:	08005221 	.word	0x08005221
 80050d8:	08005145 	.word	0x08005145
 80050dc:	08005203 	.word	0x08005203
 80050e0:	08005091 	.word	0x08005091
 80050e4:	08005091 	.word	0x08005091
 80050e8:	08005243 	.word	0x08005243
 80050ec:	08005091 	.word	0x08005091
 80050f0:	08005145 	.word	0x08005145
 80050f4:	08005091 	.word	0x08005091
 80050f8:	08005091 	.word	0x08005091
 80050fc:	0800520b 	.word	0x0800520b
 8005100:	680b      	ldr	r3, [r1, #0]
 8005102:	1d1a      	adds	r2, r3, #4
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	600a      	str	r2, [r1, #0]
 8005108:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800510c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005110:	2301      	movs	r3, #1
 8005112:	e0a3      	b.n	800525c <_printf_i+0x1f4>
 8005114:	6825      	ldr	r5, [r4, #0]
 8005116:	6808      	ldr	r0, [r1, #0]
 8005118:	062e      	lsls	r6, r5, #24
 800511a:	f100 0304 	add.w	r3, r0, #4
 800511e:	d50a      	bpl.n	8005136 <_printf_i+0xce>
 8005120:	6805      	ldr	r5, [r0, #0]
 8005122:	600b      	str	r3, [r1, #0]
 8005124:	2d00      	cmp	r5, #0
 8005126:	da03      	bge.n	8005130 <_printf_i+0xc8>
 8005128:	232d      	movs	r3, #45	; 0x2d
 800512a:	426d      	negs	r5, r5
 800512c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005130:	485e      	ldr	r0, [pc, #376]	; (80052ac <_printf_i+0x244>)
 8005132:	230a      	movs	r3, #10
 8005134:	e019      	b.n	800516a <_printf_i+0x102>
 8005136:	f015 0f40 	tst.w	r5, #64	; 0x40
 800513a:	6805      	ldr	r5, [r0, #0]
 800513c:	600b      	str	r3, [r1, #0]
 800513e:	bf18      	it	ne
 8005140:	b22d      	sxthne	r5, r5
 8005142:	e7ef      	b.n	8005124 <_printf_i+0xbc>
 8005144:	680b      	ldr	r3, [r1, #0]
 8005146:	6825      	ldr	r5, [r4, #0]
 8005148:	1d18      	adds	r0, r3, #4
 800514a:	6008      	str	r0, [r1, #0]
 800514c:	0628      	lsls	r0, r5, #24
 800514e:	d501      	bpl.n	8005154 <_printf_i+0xec>
 8005150:	681d      	ldr	r5, [r3, #0]
 8005152:	e002      	b.n	800515a <_printf_i+0xf2>
 8005154:	0669      	lsls	r1, r5, #25
 8005156:	d5fb      	bpl.n	8005150 <_printf_i+0xe8>
 8005158:	881d      	ldrh	r5, [r3, #0]
 800515a:	4854      	ldr	r0, [pc, #336]	; (80052ac <_printf_i+0x244>)
 800515c:	2f6f      	cmp	r7, #111	; 0x6f
 800515e:	bf0c      	ite	eq
 8005160:	2308      	moveq	r3, #8
 8005162:	230a      	movne	r3, #10
 8005164:	2100      	movs	r1, #0
 8005166:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800516a:	6866      	ldr	r6, [r4, #4]
 800516c:	60a6      	str	r6, [r4, #8]
 800516e:	2e00      	cmp	r6, #0
 8005170:	bfa2      	ittt	ge
 8005172:	6821      	ldrge	r1, [r4, #0]
 8005174:	f021 0104 	bicge.w	r1, r1, #4
 8005178:	6021      	strge	r1, [r4, #0]
 800517a:	b90d      	cbnz	r5, 8005180 <_printf_i+0x118>
 800517c:	2e00      	cmp	r6, #0
 800517e:	d04d      	beq.n	800521c <_printf_i+0x1b4>
 8005180:	4616      	mov	r6, r2
 8005182:	fbb5 f1f3 	udiv	r1, r5, r3
 8005186:	fb03 5711 	mls	r7, r3, r1, r5
 800518a:	5dc7      	ldrb	r7, [r0, r7]
 800518c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005190:	462f      	mov	r7, r5
 8005192:	42bb      	cmp	r3, r7
 8005194:	460d      	mov	r5, r1
 8005196:	d9f4      	bls.n	8005182 <_printf_i+0x11a>
 8005198:	2b08      	cmp	r3, #8
 800519a:	d10b      	bne.n	80051b4 <_printf_i+0x14c>
 800519c:	6823      	ldr	r3, [r4, #0]
 800519e:	07df      	lsls	r7, r3, #31
 80051a0:	d508      	bpl.n	80051b4 <_printf_i+0x14c>
 80051a2:	6923      	ldr	r3, [r4, #16]
 80051a4:	6861      	ldr	r1, [r4, #4]
 80051a6:	4299      	cmp	r1, r3
 80051a8:	bfde      	ittt	le
 80051aa:	2330      	movle	r3, #48	; 0x30
 80051ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80051b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80051b4:	1b92      	subs	r2, r2, r6
 80051b6:	6122      	str	r2, [r4, #16]
 80051b8:	f8cd a000 	str.w	sl, [sp]
 80051bc:	464b      	mov	r3, r9
 80051be:	aa03      	add	r2, sp, #12
 80051c0:	4621      	mov	r1, r4
 80051c2:	4640      	mov	r0, r8
 80051c4:	f7ff fee2 	bl	8004f8c <_printf_common>
 80051c8:	3001      	adds	r0, #1
 80051ca:	d14c      	bne.n	8005266 <_printf_i+0x1fe>
 80051cc:	f04f 30ff 	mov.w	r0, #4294967295
 80051d0:	b004      	add	sp, #16
 80051d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051d6:	4835      	ldr	r0, [pc, #212]	; (80052ac <_printf_i+0x244>)
 80051d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80051dc:	6823      	ldr	r3, [r4, #0]
 80051de:	680e      	ldr	r6, [r1, #0]
 80051e0:	061f      	lsls	r7, r3, #24
 80051e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80051e6:	600e      	str	r6, [r1, #0]
 80051e8:	d514      	bpl.n	8005214 <_printf_i+0x1ac>
 80051ea:	07d9      	lsls	r1, r3, #31
 80051ec:	bf44      	itt	mi
 80051ee:	f043 0320 	orrmi.w	r3, r3, #32
 80051f2:	6023      	strmi	r3, [r4, #0]
 80051f4:	b91d      	cbnz	r5, 80051fe <_printf_i+0x196>
 80051f6:	6823      	ldr	r3, [r4, #0]
 80051f8:	f023 0320 	bic.w	r3, r3, #32
 80051fc:	6023      	str	r3, [r4, #0]
 80051fe:	2310      	movs	r3, #16
 8005200:	e7b0      	b.n	8005164 <_printf_i+0xfc>
 8005202:	6823      	ldr	r3, [r4, #0]
 8005204:	f043 0320 	orr.w	r3, r3, #32
 8005208:	6023      	str	r3, [r4, #0]
 800520a:	2378      	movs	r3, #120	; 0x78
 800520c:	4828      	ldr	r0, [pc, #160]	; (80052b0 <_printf_i+0x248>)
 800520e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005212:	e7e3      	b.n	80051dc <_printf_i+0x174>
 8005214:	065e      	lsls	r6, r3, #25
 8005216:	bf48      	it	mi
 8005218:	b2ad      	uxthmi	r5, r5
 800521a:	e7e6      	b.n	80051ea <_printf_i+0x182>
 800521c:	4616      	mov	r6, r2
 800521e:	e7bb      	b.n	8005198 <_printf_i+0x130>
 8005220:	680b      	ldr	r3, [r1, #0]
 8005222:	6826      	ldr	r6, [r4, #0]
 8005224:	6960      	ldr	r0, [r4, #20]
 8005226:	1d1d      	adds	r5, r3, #4
 8005228:	600d      	str	r5, [r1, #0]
 800522a:	0635      	lsls	r5, r6, #24
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	d501      	bpl.n	8005234 <_printf_i+0x1cc>
 8005230:	6018      	str	r0, [r3, #0]
 8005232:	e002      	b.n	800523a <_printf_i+0x1d2>
 8005234:	0671      	lsls	r1, r6, #25
 8005236:	d5fb      	bpl.n	8005230 <_printf_i+0x1c8>
 8005238:	8018      	strh	r0, [r3, #0]
 800523a:	2300      	movs	r3, #0
 800523c:	6123      	str	r3, [r4, #16]
 800523e:	4616      	mov	r6, r2
 8005240:	e7ba      	b.n	80051b8 <_printf_i+0x150>
 8005242:	680b      	ldr	r3, [r1, #0]
 8005244:	1d1a      	adds	r2, r3, #4
 8005246:	600a      	str	r2, [r1, #0]
 8005248:	681e      	ldr	r6, [r3, #0]
 800524a:	6862      	ldr	r2, [r4, #4]
 800524c:	2100      	movs	r1, #0
 800524e:	4630      	mov	r0, r6
 8005250:	f7fa ffd6 	bl	8000200 <memchr>
 8005254:	b108      	cbz	r0, 800525a <_printf_i+0x1f2>
 8005256:	1b80      	subs	r0, r0, r6
 8005258:	6060      	str	r0, [r4, #4]
 800525a:	6863      	ldr	r3, [r4, #4]
 800525c:	6123      	str	r3, [r4, #16]
 800525e:	2300      	movs	r3, #0
 8005260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005264:	e7a8      	b.n	80051b8 <_printf_i+0x150>
 8005266:	6923      	ldr	r3, [r4, #16]
 8005268:	4632      	mov	r2, r6
 800526a:	4649      	mov	r1, r9
 800526c:	4640      	mov	r0, r8
 800526e:	47d0      	blx	sl
 8005270:	3001      	adds	r0, #1
 8005272:	d0ab      	beq.n	80051cc <_printf_i+0x164>
 8005274:	6823      	ldr	r3, [r4, #0]
 8005276:	079b      	lsls	r3, r3, #30
 8005278:	d413      	bmi.n	80052a2 <_printf_i+0x23a>
 800527a:	68e0      	ldr	r0, [r4, #12]
 800527c:	9b03      	ldr	r3, [sp, #12]
 800527e:	4298      	cmp	r0, r3
 8005280:	bfb8      	it	lt
 8005282:	4618      	movlt	r0, r3
 8005284:	e7a4      	b.n	80051d0 <_printf_i+0x168>
 8005286:	2301      	movs	r3, #1
 8005288:	4632      	mov	r2, r6
 800528a:	4649      	mov	r1, r9
 800528c:	4640      	mov	r0, r8
 800528e:	47d0      	blx	sl
 8005290:	3001      	adds	r0, #1
 8005292:	d09b      	beq.n	80051cc <_printf_i+0x164>
 8005294:	3501      	adds	r5, #1
 8005296:	68e3      	ldr	r3, [r4, #12]
 8005298:	9903      	ldr	r1, [sp, #12]
 800529a:	1a5b      	subs	r3, r3, r1
 800529c:	42ab      	cmp	r3, r5
 800529e:	dcf2      	bgt.n	8005286 <_printf_i+0x21e>
 80052a0:	e7eb      	b.n	800527a <_printf_i+0x212>
 80052a2:	2500      	movs	r5, #0
 80052a4:	f104 0619 	add.w	r6, r4, #25
 80052a8:	e7f5      	b.n	8005296 <_printf_i+0x22e>
 80052aa:	bf00      	nop
 80052ac:	08005865 	.word	0x08005865
 80052b0:	08005876 	.word	0x08005876

080052b4 <_putc_r>:
 80052b4:	b570      	push	{r4, r5, r6, lr}
 80052b6:	460d      	mov	r5, r1
 80052b8:	4614      	mov	r4, r2
 80052ba:	4606      	mov	r6, r0
 80052bc:	b118      	cbz	r0, 80052c6 <_putc_r+0x12>
 80052be:	6983      	ldr	r3, [r0, #24]
 80052c0:	b90b      	cbnz	r3, 80052c6 <_putc_r+0x12>
 80052c2:	f7ff fb5b 	bl	800497c <__sinit>
 80052c6:	4b1c      	ldr	r3, [pc, #112]	; (8005338 <_putc_r+0x84>)
 80052c8:	429c      	cmp	r4, r3
 80052ca:	d124      	bne.n	8005316 <_putc_r+0x62>
 80052cc:	6874      	ldr	r4, [r6, #4]
 80052ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052d0:	07d8      	lsls	r0, r3, #31
 80052d2:	d405      	bmi.n	80052e0 <_putc_r+0x2c>
 80052d4:	89a3      	ldrh	r3, [r4, #12]
 80052d6:	0599      	lsls	r1, r3, #22
 80052d8:	d402      	bmi.n	80052e0 <_putc_r+0x2c>
 80052da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052dc:	f7ff fbec 	bl	8004ab8 <__retarget_lock_acquire_recursive>
 80052e0:	68a3      	ldr	r3, [r4, #8]
 80052e2:	3b01      	subs	r3, #1
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	60a3      	str	r3, [r4, #8]
 80052e8:	da05      	bge.n	80052f6 <_putc_r+0x42>
 80052ea:	69a2      	ldr	r2, [r4, #24]
 80052ec:	4293      	cmp	r3, r2
 80052ee:	db1c      	blt.n	800532a <_putc_r+0x76>
 80052f0:	b2eb      	uxtb	r3, r5
 80052f2:	2b0a      	cmp	r3, #10
 80052f4:	d019      	beq.n	800532a <_putc_r+0x76>
 80052f6:	6823      	ldr	r3, [r4, #0]
 80052f8:	1c5a      	adds	r2, r3, #1
 80052fa:	6022      	str	r2, [r4, #0]
 80052fc:	701d      	strb	r5, [r3, #0]
 80052fe:	b2ed      	uxtb	r5, r5
 8005300:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005302:	07da      	lsls	r2, r3, #31
 8005304:	d405      	bmi.n	8005312 <_putc_r+0x5e>
 8005306:	89a3      	ldrh	r3, [r4, #12]
 8005308:	059b      	lsls	r3, r3, #22
 800530a:	d402      	bmi.n	8005312 <_putc_r+0x5e>
 800530c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800530e:	f7ff fbd4 	bl	8004aba <__retarget_lock_release_recursive>
 8005312:	4628      	mov	r0, r5
 8005314:	bd70      	pop	{r4, r5, r6, pc}
 8005316:	4b09      	ldr	r3, [pc, #36]	; (800533c <_putc_r+0x88>)
 8005318:	429c      	cmp	r4, r3
 800531a:	d101      	bne.n	8005320 <_putc_r+0x6c>
 800531c:	68b4      	ldr	r4, [r6, #8]
 800531e:	e7d6      	b.n	80052ce <_putc_r+0x1a>
 8005320:	4b07      	ldr	r3, [pc, #28]	; (8005340 <_putc_r+0x8c>)
 8005322:	429c      	cmp	r4, r3
 8005324:	bf08      	it	eq
 8005326:	68f4      	ldreq	r4, [r6, #12]
 8005328:	e7d1      	b.n	80052ce <_putc_r+0x1a>
 800532a:	4629      	mov	r1, r5
 800532c:	4622      	mov	r2, r4
 800532e:	4630      	mov	r0, r6
 8005330:	f7ff f94a 	bl	80045c8 <__swbuf_r>
 8005334:	4605      	mov	r5, r0
 8005336:	e7e3      	b.n	8005300 <_putc_r+0x4c>
 8005338:	08005814 	.word	0x08005814
 800533c:	08005834 	.word	0x08005834
 8005340:	080057f4 	.word	0x080057f4

08005344 <_sbrk_r>:
 8005344:	b538      	push	{r3, r4, r5, lr}
 8005346:	4d06      	ldr	r5, [pc, #24]	; (8005360 <_sbrk_r+0x1c>)
 8005348:	2300      	movs	r3, #0
 800534a:	4604      	mov	r4, r0
 800534c:	4608      	mov	r0, r1
 800534e:	602b      	str	r3, [r5, #0]
 8005350:	f7fb fc38 	bl	8000bc4 <_sbrk>
 8005354:	1c43      	adds	r3, r0, #1
 8005356:	d102      	bne.n	800535e <_sbrk_r+0x1a>
 8005358:	682b      	ldr	r3, [r5, #0]
 800535a:	b103      	cbz	r3, 800535e <_sbrk_r+0x1a>
 800535c:	6023      	str	r3, [r4, #0]
 800535e:	bd38      	pop	{r3, r4, r5, pc}
 8005360:	200005b8 	.word	0x200005b8

08005364 <__sread>:
 8005364:	b510      	push	{r4, lr}
 8005366:	460c      	mov	r4, r1
 8005368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800536c:	f000 f8a0 	bl	80054b0 <_read_r>
 8005370:	2800      	cmp	r0, #0
 8005372:	bfab      	itete	ge
 8005374:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005376:	89a3      	ldrhlt	r3, [r4, #12]
 8005378:	181b      	addge	r3, r3, r0
 800537a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800537e:	bfac      	ite	ge
 8005380:	6563      	strge	r3, [r4, #84]	; 0x54
 8005382:	81a3      	strhlt	r3, [r4, #12]
 8005384:	bd10      	pop	{r4, pc}

08005386 <__swrite>:
 8005386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800538a:	461f      	mov	r7, r3
 800538c:	898b      	ldrh	r3, [r1, #12]
 800538e:	05db      	lsls	r3, r3, #23
 8005390:	4605      	mov	r5, r0
 8005392:	460c      	mov	r4, r1
 8005394:	4616      	mov	r6, r2
 8005396:	d505      	bpl.n	80053a4 <__swrite+0x1e>
 8005398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800539c:	2302      	movs	r3, #2
 800539e:	2200      	movs	r2, #0
 80053a0:	f000 f868 	bl	8005474 <_lseek_r>
 80053a4:	89a3      	ldrh	r3, [r4, #12]
 80053a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053ae:	81a3      	strh	r3, [r4, #12]
 80053b0:	4632      	mov	r2, r6
 80053b2:	463b      	mov	r3, r7
 80053b4:	4628      	mov	r0, r5
 80053b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053ba:	f000 b817 	b.w	80053ec <_write_r>

080053be <__sseek>:
 80053be:	b510      	push	{r4, lr}
 80053c0:	460c      	mov	r4, r1
 80053c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053c6:	f000 f855 	bl	8005474 <_lseek_r>
 80053ca:	1c43      	adds	r3, r0, #1
 80053cc:	89a3      	ldrh	r3, [r4, #12]
 80053ce:	bf15      	itete	ne
 80053d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80053d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80053d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80053da:	81a3      	strheq	r3, [r4, #12]
 80053dc:	bf18      	it	ne
 80053de:	81a3      	strhne	r3, [r4, #12]
 80053e0:	bd10      	pop	{r4, pc}

080053e2 <__sclose>:
 80053e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053e6:	f000 b813 	b.w	8005410 <_close_r>
	...

080053ec <_write_r>:
 80053ec:	b538      	push	{r3, r4, r5, lr}
 80053ee:	4d07      	ldr	r5, [pc, #28]	; (800540c <_write_r+0x20>)
 80053f0:	4604      	mov	r4, r0
 80053f2:	4608      	mov	r0, r1
 80053f4:	4611      	mov	r1, r2
 80053f6:	2200      	movs	r2, #0
 80053f8:	602a      	str	r2, [r5, #0]
 80053fa:	461a      	mov	r2, r3
 80053fc:	f7fb fa95 	bl	800092a <_write>
 8005400:	1c43      	adds	r3, r0, #1
 8005402:	d102      	bne.n	800540a <_write_r+0x1e>
 8005404:	682b      	ldr	r3, [r5, #0]
 8005406:	b103      	cbz	r3, 800540a <_write_r+0x1e>
 8005408:	6023      	str	r3, [r4, #0]
 800540a:	bd38      	pop	{r3, r4, r5, pc}
 800540c:	200005b8 	.word	0x200005b8

08005410 <_close_r>:
 8005410:	b538      	push	{r3, r4, r5, lr}
 8005412:	4d06      	ldr	r5, [pc, #24]	; (800542c <_close_r+0x1c>)
 8005414:	2300      	movs	r3, #0
 8005416:	4604      	mov	r4, r0
 8005418:	4608      	mov	r0, r1
 800541a:	602b      	str	r3, [r5, #0]
 800541c:	f7fb fb9d 	bl	8000b5a <_close>
 8005420:	1c43      	adds	r3, r0, #1
 8005422:	d102      	bne.n	800542a <_close_r+0x1a>
 8005424:	682b      	ldr	r3, [r5, #0]
 8005426:	b103      	cbz	r3, 800542a <_close_r+0x1a>
 8005428:	6023      	str	r3, [r4, #0]
 800542a:	bd38      	pop	{r3, r4, r5, pc}
 800542c:	200005b8 	.word	0x200005b8

08005430 <_fstat_r>:
 8005430:	b538      	push	{r3, r4, r5, lr}
 8005432:	4d07      	ldr	r5, [pc, #28]	; (8005450 <_fstat_r+0x20>)
 8005434:	2300      	movs	r3, #0
 8005436:	4604      	mov	r4, r0
 8005438:	4608      	mov	r0, r1
 800543a:	4611      	mov	r1, r2
 800543c:	602b      	str	r3, [r5, #0]
 800543e:	f7fb fb98 	bl	8000b72 <_fstat>
 8005442:	1c43      	adds	r3, r0, #1
 8005444:	d102      	bne.n	800544c <_fstat_r+0x1c>
 8005446:	682b      	ldr	r3, [r5, #0]
 8005448:	b103      	cbz	r3, 800544c <_fstat_r+0x1c>
 800544a:	6023      	str	r3, [r4, #0]
 800544c:	bd38      	pop	{r3, r4, r5, pc}
 800544e:	bf00      	nop
 8005450:	200005b8 	.word	0x200005b8

08005454 <_isatty_r>:
 8005454:	b538      	push	{r3, r4, r5, lr}
 8005456:	4d06      	ldr	r5, [pc, #24]	; (8005470 <_isatty_r+0x1c>)
 8005458:	2300      	movs	r3, #0
 800545a:	4604      	mov	r4, r0
 800545c:	4608      	mov	r0, r1
 800545e:	602b      	str	r3, [r5, #0]
 8005460:	f7fb fb97 	bl	8000b92 <_isatty>
 8005464:	1c43      	adds	r3, r0, #1
 8005466:	d102      	bne.n	800546e <_isatty_r+0x1a>
 8005468:	682b      	ldr	r3, [r5, #0]
 800546a:	b103      	cbz	r3, 800546e <_isatty_r+0x1a>
 800546c:	6023      	str	r3, [r4, #0]
 800546e:	bd38      	pop	{r3, r4, r5, pc}
 8005470:	200005b8 	.word	0x200005b8

08005474 <_lseek_r>:
 8005474:	b538      	push	{r3, r4, r5, lr}
 8005476:	4d07      	ldr	r5, [pc, #28]	; (8005494 <_lseek_r+0x20>)
 8005478:	4604      	mov	r4, r0
 800547a:	4608      	mov	r0, r1
 800547c:	4611      	mov	r1, r2
 800547e:	2200      	movs	r2, #0
 8005480:	602a      	str	r2, [r5, #0]
 8005482:	461a      	mov	r2, r3
 8005484:	f7fb fb90 	bl	8000ba8 <_lseek>
 8005488:	1c43      	adds	r3, r0, #1
 800548a:	d102      	bne.n	8005492 <_lseek_r+0x1e>
 800548c:	682b      	ldr	r3, [r5, #0]
 800548e:	b103      	cbz	r3, 8005492 <_lseek_r+0x1e>
 8005490:	6023      	str	r3, [r4, #0]
 8005492:	bd38      	pop	{r3, r4, r5, pc}
 8005494:	200005b8 	.word	0x200005b8

08005498 <__malloc_lock>:
 8005498:	4801      	ldr	r0, [pc, #4]	; (80054a0 <__malloc_lock+0x8>)
 800549a:	f7ff bb0d 	b.w	8004ab8 <__retarget_lock_acquire_recursive>
 800549e:	bf00      	nop
 80054a0:	200005b0 	.word	0x200005b0

080054a4 <__malloc_unlock>:
 80054a4:	4801      	ldr	r0, [pc, #4]	; (80054ac <__malloc_unlock+0x8>)
 80054a6:	f7ff bb08 	b.w	8004aba <__retarget_lock_release_recursive>
 80054aa:	bf00      	nop
 80054ac:	200005b0 	.word	0x200005b0

080054b0 <_read_r>:
 80054b0:	b538      	push	{r3, r4, r5, lr}
 80054b2:	4d07      	ldr	r5, [pc, #28]	; (80054d0 <_read_r+0x20>)
 80054b4:	4604      	mov	r4, r0
 80054b6:	4608      	mov	r0, r1
 80054b8:	4611      	mov	r1, r2
 80054ba:	2200      	movs	r2, #0
 80054bc:	602a      	str	r2, [r5, #0]
 80054be:	461a      	mov	r2, r3
 80054c0:	f7fb fb2e 	bl	8000b20 <_read>
 80054c4:	1c43      	adds	r3, r0, #1
 80054c6:	d102      	bne.n	80054ce <_read_r+0x1e>
 80054c8:	682b      	ldr	r3, [r5, #0]
 80054ca:	b103      	cbz	r3, 80054ce <_read_r+0x1e>
 80054cc:	6023      	str	r3, [r4, #0]
 80054ce:	bd38      	pop	{r3, r4, r5, pc}
 80054d0:	200005b8 	.word	0x200005b8

080054d4 <_init>:
 80054d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d6:	bf00      	nop
 80054d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054da:	bc08      	pop	{r3}
 80054dc:	469e      	mov	lr, r3
 80054de:	4770      	bx	lr

080054e0 <_fini>:
 80054e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054e2:	bf00      	nop
 80054e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054e6:	bc08      	pop	{r3}
 80054e8:	469e      	mov	lr, r3
 80054ea:	4770      	bx	lr
