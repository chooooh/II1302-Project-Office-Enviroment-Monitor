
OEM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bd0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  08005d60  08005d60  00015d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006284  08006284  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006284  08006284  00016284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800628c  0800628c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800628c  0800628c  0001628c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006290  08006290  00016290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006294  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000114c  20000070  08006304  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011bc  08006304  000211bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136ac  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bc1  00000000  00000000  0003374c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  00036310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba8  00000000  00000000  00036fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002961f  00000000  00000000  00037b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f0fa  00000000  00000000  00061197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001069a6  00000000  00000000  00070291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00176c37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c60  00000000  00000000  00176c8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d48 	.word	0x08005d48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005d48 	.word	0x08005d48

080001d0 <setjmp>:
 80001d0:	46ec      	mov	ip, sp
 80001d2:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80001d6:	f04f 0000 	mov.w	r0, #0
 80001da:	4770      	bx	lr

080001dc <longjmp>:
 80001dc:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80001e0:	46e5      	mov	sp, ip
 80001e2:	0008      	movs	r0, r1
 80001e4:	bf08      	it	eq
 80001e6:	2001      	moveq	r0, #1
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop

080001ec <strcmp>:
 80001ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f4:	2a01      	cmp	r2, #1
 80001f6:	bf28      	it	cs
 80001f8:	429a      	cmpcs	r2, r3
 80001fa:	d0f7      	beq.n	80001ec <strcmp>
 80001fc:	1ad0      	subs	r0, r2, r3
 80001fe:	4770      	bx	lr

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <init_uart_interrupt>:
static bool error_flag = false;
static bool fail_flag = false;


void
init_uart_interrupt(void){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart4, &rx_variable, 1);
 80005ac:	2201      	movs	r2, #1
 80005ae:	4903      	ldr	r1, [pc, #12]	; (80005bc <init_uart_interrupt+0x14>)
 80005b0:	4803      	ldr	r0, [pc, #12]	; (80005c0 <init_uart_interrupt+0x18>)
 80005b2:	f003 f963 	bl	800387c <HAL_UART_Receive_IT>
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	2000008c 	.word	0x2000008c
 80005c0:	20001124 	.word	0x20001124

080005c4 <HAL_UART_RxCpltCallback>:

/* Probably not the most efficient solution */
void
HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]

   if (huart->Instance == UART4) {
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a0b      	ldr	r2, [pc, #44]	; (8000600 <HAL_UART_RxCpltCallback+0x3c>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d10a      	bne.n	80005ec <HAL_UART_RxCpltCallback+0x28>
      rx_buffer[rx_buffer_index++] = rx_variable;    // Add 1 byte to rx_Buffer
 80005d6:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <HAL_UART_RxCpltCallback+0x40>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	1c5a      	adds	r2, r3, #1
 80005dc:	b2d1      	uxtb	r1, r2
 80005de:	4a09      	ldr	r2, [pc, #36]	; (8000604 <HAL_UART_RxCpltCallback+0x40>)
 80005e0:	7011      	strb	r1, [r2, #0]
 80005e2:	461a      	mov	r2, r3
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <HAL_UART_RxCpltCallback+0x44>)
 80005e6:	7819      	ldrb	r1, [r3, #0]
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <HAL_UART_RxCpltCallback+0x48>)
 80005ea:	5499      	strb	r1, [r3, r2]
    }
      HAL_UART_Receive_IT(&huart4, &rx_variable, 1); // Clear flags and read next byte
 80005ec:	2201      	movs	r2, #1
 80005ee:	4906      	ldr	r1, [pc, #24]	; (8000608 <HAL_UART_RxCpltCallback+0x44>)
 80005f0:	4807      	ldr	r0, [pc, #28]	; (8000610 <HAL_UART_RxCpltCallback+0x4c>)
 80005f2:	f003 f943 	bl	800387c <HAL_UART_Receive_IT>
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40004c00 	.word	0x40004c00
 8000604:	20001090 	.word	0x20001090
 8000608:	2000008c 	.word	0x2000008c
 800060c:	20000090 	.word	0x20000090
 8000610:	20001124 	.word	0x20001124

08000614 <hash>:

/* djb2 hashing algorithm which is used in mapping sent commands to the right ESP8266 response code */
const unsigned long
hash(const char *str) {
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
    unsigned long hash = 5381;
 800061c:	f241 5305 	movw	r3, #5381	; 0x1505
 8000620:	60fb      	str	r3, [r7, #12]
    int c;

    while ((c = *str++))
 8000622:	e006      	b.n	8000632 <hash+0x1e>
        hash = ((hash << 5) + hash) + c;
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	015a      	lsls	r2, r3, #5
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	441a      	add	r2, r3
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	4413      	add	r3, r2
 8000630:	60fb      	str	r3, [r7, #12]
    while ((c = *str++))
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	1c5a      	adds	r2, r3, #1
 8000636:	607a      	str	r2, [r7, #4]
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d1f0      	bne.n	8000624 <hash+0x10>
    return hash;
 8000642:	68fb      	ldr	r3, [r7, #12]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3714      	adds	r7, #20
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <esp8266_send_command>:

const char*
esp8266_send_command(const char* command){
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]

	rx_buffer_index = 0;
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <esp8266_send_command+0x88>)
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
	error_flag = false;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <esp8266_send_command+0x8c>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
	fail_flag = false;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <esp8266_send_command+0x90>)
 8000666:	2200      	movs	r2, #0
 8000668:	701a      	strb	r2, [r3, #0]

	memset(rx_buffer, 0, RX_BUFFER_SIZE);
 800066a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800066e:	2100      	movs	r1, #0
 8000670:	481c      	ldr	r0, [pc, #112]	; (80006e4 <esp8266_send_command+0x94>)
 8000672:	f004 f94d 	bl	8004910 <memset>
	HAL_UART_Transmit(&huart4, (uint8_t*) command, strlen(command), 100);
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f7ff fdc2 	bl	8000200 <strlen>
 800067c:	4603      	mov	r3, r0
 800067e:	b29a      	uxth	r2, r3
 8000680:	2364      	movs	r3, #100	; 0x64
 8000682:	6879      	ldr	r1, [r7, #4]
 8000684:	4818      	ldr	r0, [pc, #96]	; (80006e8 <esp8266_send_command+0x98>)
 8000686:	f003 f865 	bl	8003754 <HAL_UART_Transmit>

	// wait for OK or ERROR/FAIL
	while((strstr(rx_buffer, ESP8266_AT_OK_TERMINATOR) == NULL)){
 800068a:	e015      	b.n	80006b8 <esp8266_send_command+0x68>
		if(strstr(rx_buffer, ESP8266_AT_ERROR) != NULL){
 800068c:	4917      	ldr	r1, [pc, #92]	; (80006ec <esp8266_send_command+0x9c>)
 800068e:	4815      	ldr	r0, [pc, #84]	; (80006e4 <esp8266_send_command+0x94>)
 8000690:	f004 fa0a 	bl	8004aa8 <strstr>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d003      	beq.n	80006a2 <esp8266_send_command+0x52>
			error_flag = true;
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <esp8266_send_command+0x8c>)
 800069c:	2201      	movs	r2, #1
 800069e:	701a      	strb	r2, [r3, #0]
			break;
 80006a0:	e011      	b.n	80006c6 <esp8266_send_command+0x76>
		}
		if(strstr(rx_buffer, ESP8266_AT_FAIL) != NULL){
 80006a2:	4913      	ldr	r1, [pc, #76]	; (80006f0 <esp8266_send_command+0xa0>)
 80006a4:	480f      	ldr	r0, [pc, #60]	; (80006e4 <esp8266_send_command+0x94>)
 80006a6:	f004 f9ff 	bl	8004aa8 <strstr>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d003      	beq.n	80006b8 <esp8266_send_command+0x68>
			fail_flag = true;
 80006b0:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <esp8266_send_command+0x90>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
			break;
 80006b6:	e006      	b.n	80006c6 <esp8266_send_command+0x76>
	while((strstr(rx_buffer, ESP8266_AT_OK_TERMINATOR) == NULL)){
 80006b8:	490e      	ldr	r1, [pc, #56]	; (80006f4 <esp8266_send_command+0xa4>)
 80006ba:	480a      	ldr	r0, [pc, #40]	; (80006e4 <esp8266_send_command+0x94>)
 80006bc:	f004 f9f4 	bl	8004aa8 <strstr>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d0e2      	beq.n	800068c <esp8266_send_command+0x3c>
		}
	}

	//return evaluate(); would more efficient but not as clear in debugging
	return get_return(command);
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f000 f94e 	bl	8000968 <get_return>
 80006cc:	4603      	mov	r3, r0
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20001090 	.word	0x20001090
 80006dc:	20001091 	.word	0x20001091
 80006e0:	20001092 	.word	0x20001092
 80006e4:	20000090 	.word	0x20000090
 80006e8:	20001124 	.word	0x20001124
 80006ec:	08005f00 	.word	0x08005f00
 80006f0:	08005f08 	.word	0x08005f08
 80006f4:	08005ef4 	.word	0x08005ef4

080006f8 <esp8266_send_data>:

const char*
esp8266_send_data(const char* data){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]

	/* if the function is called after an error, cancel */
	if(error_flag || fail_flag)
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <esp8266_send_data+0x5c>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d103      	bne.n	8000710 <esp8266_send_data+0x18>
 8000708:	4b13      	ldr	r3, [pc, #76]	; (8000758 <esp8266_send_data+0x60>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <esp8266_send_data+0x1c>
		return ESP8266_AT_ERROR;
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <esp8266_send_data+0x64>)
 8000712:	e01b      	b.n	800074c <esp8266_send_data+0x54>

	rx_buffer_index = 0;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <esp8266_send_data+0x68>)
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]

	memset(rx_buffer, 0, RX_BUFFER_SIZE);
 800071a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800071e:	2100      	movs	r1, #0
 8000720:	4810      	ldr	r0, [pc, #64]	; (8000764 <esp8266_send_data+0x6c>)
 8000722:	f004 f8f5 	bl	8004910 <memset>
	HAL_UART_Transmit(&huart4, (uint8_t*) data, strlen(data), 100);
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f7ff fd6a 	bl	8000200 <strlen>
 800072c:	4603      	mov	r3, r0
 800072e:	b29a      	uxth	r2, r3
 8000730:	2364      	movs	r3, #100	; 0x64
 8000732:	6879      	ldr	r1, [r7, #4]
 8000734:	480c      	ldr	r0, [pc, #48]	; (8000768 <esp8266_send_data+0x70>)
 8000736:	f003 f80d 	bl	8003754 <HAL_UART_Transmit>

	while((strstr(rx_buffer, ESP8266_AT_CLOSED) == NULL));
 800073a:	bf00      	nop
 800073c:	490b      	ldr	r1, [pc, #44]	; (800076c <esp8266_send_data+0x74>)
 800073e:	4809      	ldr	r0, [pc, #36]	; (8000764 <esp8266_send_data+0x6c>)
 8000740:	f004 f9b2 	bl	8004aa8 <strstr>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d0f8      	beq.n	800073c <esp8266_send_data+0x44>

	return ESP8266_AT_CLOSED;
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <esp8266_send_data+0x74>)
}
 800074c:	4618      	mov	r0, r3
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20001091 	.word	0x20001091
 8000758:	20001092 	.word	0x20001092
 800075c:	08005f00 	.word	0x08005f00
 8000760:	20001090 	.word	0x20001090
 8000764:	20000090 	.word	0x20000090
 8000768:	20001124 	.word	0x20001124
 800076c:	08005f3c 	.word	0x08005f3c

08000770 <esp8266_init>:

const char*
esp8266_init(void){
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0

	/* Reset the esp8266 */
	if(strcmp(esp8266_send_command(ESP8266_AT_RST), ESP8266_AT_OK) != 0)
 8000774:	482e      	ldr	r0, [pc, #184]	; (8000830 <esp8266_init+0xc0>)
 8000776:	f7ff ff6b 	bl	8000650 <esp8266_send_command>
 800077a:	4603      	mov	r3, r0
 800077c:	492d      	ldr	r1, [pc, #180]	; (8000834 <esp8266_init+0xc4>)
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff fd34 	bl	80001ec <strcmp>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <esp8266_init+0x1e>
		return ESP8266_AT_ERROR;
 800078a:	4b2b      	ldr	r3, [pc, #172]	; (8000838 <esp8266_init+0xc8>)
 800078c:	e04e      	b.n	800082c <esp8266_init+0xbc>

	/* Get OK from esp8266 */
	if(strcmp(esp8266_send_command(ESP8266_AT), ESP8266_AT_OK) != 0)
 800078e:	482b      	ldr	r0, [pc, #172]	; (800083c <esp8266_init+0xcc>)
 8000790:	f7ff ff5e 	bl	8000650 <esp8266_send_command>
 8000794:	4603      	mov	r3, r0
 8000796:	4927      	ldr	r1, [pc, #156]	; (8000834 <esp8266_init+0xc4>)
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff fd27 	bl	80001ec <strcmp>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <esp8266_init+0x38>
		return ESP8266_AT_ERROR;
 80007a4:	4b24      	ldr	r3, [pc, #144]	; (8000838 <esp8266_init+0xc8>)
 80007a6:	e041      	b.n	800082c <esp8266_init+0xbc>

	/* Disconnect the esp8266 if it auto connects... */
	if(strcmp(esp8266_send_command(ESP8266_AT_CWQAP), ESP8266_AT_OK) != 0)
 80007a8:	4825      	ldr	r0, [pc, #148]	; (8000840 <esp8266_init+0xd0>)
 80007aa:	f7ff ff51 	bl	8000650 <esp8266_send_command>
 80007ae:	4603      	mov	r3, r0
 80007b0:	4920      	ldr	r1, [pc, #128]	; (8000834 <esp8266_init+0xc4>)
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff fd1a 	bl	80001ec <strcmp>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <esp8266_init+0x52>
		return ESP8266_AT_ERROR;
 80007be:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <esp8266_init+0xc8>)
 80007c0:	e034      	b.n	800082c <esp8266_init+0xbc>

	/* Set the esp8266 to client mode */
	if(strcmp(esp8266_send_command(ESP8266_AT_CWMODE_STATION_MODE), ESP8266_AT_OK) != 0)
 80007c2:	4820      	ldr	r0, [pc, #128]	; (8000844 <esp8266_init+0xd4>)
 80007c4:	f7ff ff44 	bl	8000650 <esp8266_send_command>
 80007c8:	4603      	mov	r3, r0
 80007ca:	491a      	ldr	r1, [pc, #104]	; (8000834 <esp8266_init+0xc4>)
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff fd0d 	bl	80001ec <strcmp>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <esp8266_init+0x6c>
		return ESP8266_AT_ERROR;
 80007d8:	4b17      	ldr	r3, [pc, #92]	; (8000838 <esp8266_init+0xc8>)
 80007da:	e027      	b.n	800082c <esp8266_init+0xbc>

	/* Verify that the esp8266 is configured as client */
	if(strcmp(esp8266_send_command(ESP8266_AT_CWMODE_TEST), ESP8266_AT_CWMODE_1) != 0)
 80007dc:	481a      	ldr	r0, [pc, #104]	; (8000848 <esp8266_init+0xd8>)
 80007de:	f7ff ff37 	bl	8000650 <esp8266_send_command>
 80007e2:	4603      	mov	r3, r0
 80007e4:	4919      	ldr	r1, [pc, #100]	; (800084c <esp8266_init+0xdc>)
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff fd00 	bl	80001ec <strcmp>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <esp8266_init+0x86>
		return ESP8266_AT_ERROR;
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <esp8266_init+0xc8>)
 80007f4:	e01a      	b.n	800082c <esp8266_init+0xbc>

	/* Set the esp8266 to use single mode connection */
	if(strcmp(esp8266_send_command(ESP8266_AT_CIPMUX_SINGLE), ESP8266_AT_OK) != 0)
 80007f6:	4816      	ldr	r0, [pc, #88]	; (8000850 <esp8266_init+0xe0>)
 80007f8:	f7ff ff2a 	bl	8000650 <esp8266_send_command>
 80007fc:	4603      	mov	r3, r0
 80007fe:	490d      	ldr	r1, [pc, #52]	; (8000834 <esp8266_init+0xc4>)
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff fcf3 	bl	80001ec <strcmp>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <esp8266_init+0xa0>
		return ESP8266_AT_ERROR;
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <esp8266_init+0xc8>)
 800080e:	e00d      	b.n	800082c <esp8266_init+0xbc>

	/* Verify that the esp8266 is configured as single mode*/
	if(strcmp(esp8266_send_command(ESP8266_AT_CIPMUX_TEST), ESP8266_AT_CIPMUX_0) != 0)
 8000810:	4810      	ldr	r0, [pc, #64]	; (8000854 <esp8266_init+0xe4>)
 8000812:	f7ff ff1d 	bl	8000650 <esp8266_send_command>
 8000816:	4603      	mov	r3, r0
 8000818:	490f      	ldr	r1, [pc, #60]	; (8000858 <esp8266_init+0xe8>)
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff fce6 	bl	80001ec <strcmp>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <esp8266_init+0xba>
		return ESP8266_AT_ERROR;
 8000826:	4b04      	ldr	r3, [pc, #16]	; (8000838 <esp8266_init+0xc8>)
 8000828:	e000      	b.n	800082c <esp8266_init+0xbc>

	/* No errors, return OK */
	return ESP8266_AT_OK;
 800082a:	4b02      	ldr	r3, [pc, #8]	; (8000834 <esp8266_init+0xc4>)
}
 800082c:	4618      	mov	r0, r3
 800082e:	bd80      	pop	{r7, pc}
 8000830:	08006048 	.word	0x08006048
 8000834:	08005efc 	.word	0x08005efc
 8000838:	08005f00 	.word	0x08005f00
 800083c:	08006040 	.word	0x08006040
 8000840:	08006084 	.word	0x08006084
 8000844:	08006068 	.word	0x08006068
 8000848:	08006054 	.word	0x08006054
 800084c:	08005f5c 	.word	0x08005f5c
 8000850:	08006090 	.word	0x08006090
 8000854:	080060a0 	.word	0x080060a0
 8000858:	08006000 	.word	0x08006000

0800085c <esp8266_wifi_init>:

const char*
esp8266_wifi_init(void){
 800085c:	b580      	push	{r7, lr}
 800085e:	b0c0      	sub	sp, #256	; 0x100
 8000860:	af00      	add	r7, sp, #0

	/* Buffers */
	char wifi_command[256] = {0};
 8000862:	463b      	mov	r3, r7
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	3304      	adds	r3, #4
 800086a:	22fc      	movs	r2, #252	; 0xfc
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f004 f84e 	bl	8004910 <memset>

	/* Build the command */
	esp8266_get_wifi_command(wifi_command);
 8000874:	463b      	mov	r3, r7
 8000876:	4618      	mov	r0, r3
 8000878:	f000 f80a 	bl	8000890 <esp8266_get_wifi_command>

	/* Connect and return result */
	return esp8266_send_command(wifi_command);
 800087c:	463b      	mov	r3, r7
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff fee6 	bl	8000650 <esp8266_send_command>
 8000884:	4603      	mov	r3, r0
}
 8000886:	4618      	mov	r0, r3
 8000888:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <esp8266_get_wifi_command>:

void
esp8266_get_wifi_command(char* ref){
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af02      	add	r7, sp, #8
 8000896:	6078      	str	r0, [r7, #4]
	sprintf (ref, "%s\"%s\",\"%s\"\r\n", ESP8266_AT_CWJAP_SET, SSID, PWD);
 8000898:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <esp8266_get_wifi_command+0x20>)
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <esp8266_get_wifi_command+0x24>)
 800089e:	4a06      	ldr	r2, [pc, #24]	; (80008b8 <esp8266_get_wifi_command+0x28>)
 80008a0:	4906      	ldr	r1, [pc, #24]	; (80008bc <esp8266_get_wifi_command+0x2c>)
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f004 f8e0 	bl	8004a68 <siprintf>
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	08005ecc 	.word	0x08005ecc
 80008b4:	08005ebc 	.word	0x08005ebc
 80008b8:	08006078 	.word	0x08006078
 80008bc:	08005d60 	.word	0x08005d60

080008c0 <esp8266_get_connection_command>:

void
esp8266_get_connection_command(char* ref, char* connection_type, char* remote_ip, char* remote_port){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af02      	add	r7, sp, #8
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
 80008cc:	603b      	str	r3, [r7, #0]
	sprintf(ref, "%s\"%s\",\"%s\",%s\r\n", ESP8266_AT_START, connection_type, remote_ip, remote_port);
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	9301      	str	r3, [sp, #4]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	9300      	str	r3, [sp, #0]
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	4a04      	ldr	r2, [pc, #16]	; (80008ec <esp8266_get_connection_command+0x2c>)
 80008da:	4905      	ldr	r1, [pc, #20]	; (80008f0 <esp8266_get_connection_command+0x30>)
 80008dc:	68f8      	ldr	r0, [r7, #12]
 80008de:	f004 f8c3 	bl	8004a68 <siprintf>
}
 80008e2:	bf00      	nop
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	080060b0 	.word	0x080060b0
 80008f0:	08005d70 	.word	0x08005d70

080008f4 <esp8266_get_at_send_command>:

void
esp8266_get_at_send_command(char* ref, uint8_t len){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	460b      	mov	r3, r1
 80008fe:	70fb      	strb	r3, [r7, #3]
	sprintf(ref, "%s%d\r\n", ESP8266_AT_SEND, len);
 8000900:	78fb      	ldrb	r3, [r7, #3]
 8000902:	4a04      	ldr	r2, [pc, #16]	; (8000914 <esp8266_get_at_send_command+0x20>)
 8000904:	4904      	ldr	r1, [pc, #16]	; (8000918 <esp8266_get_at_send_command+0x24>)
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f004 f8ae 	bl	8004a68 <siprintf>
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	080060c0 	.word	0x080060c0
 8000918:	08005d84 	.word	0x08005d84

0800091c <esp8266_http_get_request>:

uint8_t
esp8266_http_get_request(char* ref, const char* http_type, char* uri, char* host){
 800091c:	b580      	push	{r7, lr}
 800091e:	b088      	sub	sp, #32
 8000920:	af04      	add	r7, sp, #16
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
 8000928:	603b      	str	r3, [r7, #0]
	sprintf(ref, "%s%s %s\r\n%s%s\r\n%s\r\n\r\n", http_type, uri, HTTP_VERSION, HTTP_HOST, host, HTTP_CONNECTION_CLOSE);
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <esp8266_http_get_request+0x3c>)
 800092c:	9303      	str	r3, [sp, #12]
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	9302      	str	r3, [sp, #8]
 8000932:	4b0a      	ldr	r3, [pc, #40]	; (800095c <esp8266_http_get_request+0x40>)
 8000934:	9301      	str	r3, [sp, #4]
 8000936:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <esp8266_http_get_request+0x44>)
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	68ba      	ldr	r2, [r7, #8]
 800093e:	4909      	ldr	r1, [pc, #36]	; (8000964 <esp8266_http_get_request+0x48>)
 8000940:	68f8      	ldr	r0, [r7, #12]
 8000942:	f004 f891 	bl	8004a68 <siprintf>
	return (strlen(ref));
 8000946:	68f8      	ldr	r0, [r7, #12]
 8000948:	f7ff fc5a 	bl	8000200 <strlen>
 800094c:	4603      	mov	r3, r0
 800094e:	b2db      	uxtb	r3, r3
}
 8000950:	4618      	mov	r0, r3
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	0800602c 	.word	0x0800602c
 800095c:	08006024 	.word	0x08006024
 8000960:	08006018 	.word	0x08006018
 8000964:	08005d8c 	.word	0x08005d8c

08000968 <get_return>:
/* Returns the ESP8266 response code that is in the rx_buffer as a string,
 * this makes debugging and verification through testing easier, at the
 * cost of simplicity.
 */
const char*
get_return(const char* command){
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]

	if(strstr(command, ESP8266_AT_CWJAP_SET) != NULL)
 8000970:	4994      	ldr	r1, [pc, #592]	; (8000bc4 <get_return+0x25c>)
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f004 f898 	bl	8004aa8 <strstr>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d002      	beq.n	8000984 <get_return+0x1c>
		command = ESP8266_AT_CWJAP_SET;
 800097e:	4b91      	ldr	r3, [pc, #580]	; (8000bc4 <get_return+0x25c>)
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	e012      	b.n	80009aa <get_return+0x42>
	else if(strstr(command, ESP8266_AT_START) != NULL)
 8000984:	4990      	ldr	r1, [pc, #576]	; (8000bc8 <get_return+0x260>)
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f004 f88e 	bl	8004aa8 <strstr>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d002      	beq.n	8000998 <get_return+0x30>
		command = ESP8266_AT_START;
 8000992:	4b8d      	ldr	r3, [pc, #564]	; (8000bc8 <get_return+0x260>)
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	e008      	b.n	80009aa <get_return+0x42>
	else if(strstr(command, ESP8266_AT_SEND) != NULL)
 8000998:	498c      	ldr	r1, [pc, #560]	; (8000bcc <get_return+0x264>)
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f004 f884 	bl	8004aa8 <strstr>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <get_return+0x42>
		command = ESP8266_AT_SEND;
 80009a6:	4b89      	ldr	r3, [pc, #548]	; (8000bcc <get_return+0x264>)
 80009a8:	607b      	str	r3, [r7, #4]

	KEYS return_type = hash(command);
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff fe32 	bl	8000614 <hash>
 80009b0:	60f8      	str	r0, [r7, #12]
	switch (return_type) {
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	4a86      	ldr	r2, [pc, #536]	; (8000bd0 <get_return+0x268>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d066      	beq.n	8000a88 <get_return+0x120>
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	4a84      	ldr	r2, [pc, #528]	; (8000bd0 <get_return+0x268>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	f200 80fb 	bhi.w	8000bba <get_return+0x252>
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	4a83      	ldr	r2, [pc, #524]	; (8000bd4 <get_return+0x26c>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	f000 80de 	beq.w	8000b8a <get_return+0x222>
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	4a80      	ldr	r2, [pc, #512]	; (8000bd4 <get_return+0x26c>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	f200 80f1 	bhi.w	8000bba <get_return+0x252>
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	4a7f      	ldr	r2, [pc, #508]	; (8000bd8 <get_return+0x270>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	f000 80bf 	beq.w	8000b60 <get_return+0x1f8>
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	4a7c      	ldr	r2, [pc, #496]	; (8000bd8 <get_return+0x270>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	f200 80e7 	bhi.w	8000bba <get_return+0x252>
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	4a7b      	ldr	r2, [pc, #492]	; (8000bdc <get_return+0x274>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	f000 8085 	beq.w	8000b00 <get_return+0x198>
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	4a78      	ldr	r2, [pc, #480]	; (8000bdc <get_return+0x274>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	f200 80dd 	bhi.w	8000bba <get_return+0x252>
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	4a77      	ldr	r2, [pc, #476]	; (8000be0 <get_return+0x278>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d03b      	beq.n	8000a80 <get_return+0x118>
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	4a75      	ldr	r2, [pc, #468]	; (8000be0 <get_return+0x278>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	f200 80d4 	bhi.w	8000bba <get_return+0x252>
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	4a73      	ldr	r2, [pc, #460]	; (8000be4 <get_return+0x27c>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d05d      	beq.n	8000ad6 <get_return+0x16e>
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	4a71      	ldr	r2, [pc, #452]	; (8000be4 <get_return+0x27c>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	f200 80cb 	bhi.w	8000bba <get_return+0x252>
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	4a70      	ldr	r2, [pc, #448]	; (8000be8 <get_return+0x280>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	f000 80ba 	beq.w	8000ba2 <get_return+0x23a>
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	4a6d      	ldr	r2, [pc, #436]	; (8000be8 <get_return+0x280>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	f200 80c1 	bhi.w	8000bba <get_return+0x252>
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	4a6c      	ldr	r2, [pc, #432]	; (8000bec <get_return+0x284>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d01f      	beq.n	8000a80 <get_return+0x118>
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	4a6a      	ldr	r2, [pc, #424]	; (8000bec <get_return+0x284>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	f200 80b8 	bhi.w	8000bba <get_return+0x252>
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	4a68      	ldr	r2, [pc, #416]	; (8000bf0 <get_return+0x288>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d016      	beq.n	8000a80 <get_return+0x118>
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	4a66      	ldr	r2, [pc, #408]	; (8000bf0 <get_return+0x288>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	f200 80af 	bhi.w	8000bba <get_return+0x252>
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	4a65      	ldr	r2, [pc, #404]	; (8000bf4 <get_return+0x28c>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d00d      	beq.n	8000a80 <get_return+0x118>
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	4a63      	ldr	r2, [pc, #396]	; (8000bf4 <get_return+0x28c>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	f200 80a6 	bhi.w	8000bba <get_return+0x252>
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	4a61      	ldr	r2, [pc, #388]	; (8000bf8 <get_return+0x290>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d004      	beq.n	8000a80 <get_return+0x118>
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	4a60      	ldr	r2, [pc, #384]	; (8000bfc <get_return+0x294>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	f040 809d 	bne.w	8000bba <get_return+0x252>
		case ESP8266_AT_CWMODE_STATION_MODE_KEY:

		case ESP8266_AT_CIPMUX_KEY:

		case ESP8266_AT_CWQAP_KEY:
			return evaluate();
 8000a80:	f000 f8ee 	bl	8000c60 <evaluate>
 8000a84:	4603      	mov	r3, r0
 8000a86:	e099      	b.n	8000bbc <get_return+0x254>

		case ESP8266_AT_CWMODE_TEST_KEY:
			if(error_flag || fail_flag)
 8000a88:	4b5d      	ldr	r3, [pc, #372]	; (8000c00 <get_return+0x298>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d103      	bne.n	8000a98 <get_return+0x130>
 8000a90:	4b5c      	ldr	r3, [pc, #368]	; (8000c04 <get_return+0x29c>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <get_return+0x134>
				return ESP8266_AT_ERROR;
 8000a98:	4b5b      	ldr	r3, [pc, #364]	; (8000c08 <get_return+0x2a0>)
 8000a9a:	e08f      	b.n	8000bbc <get_return+0x254>
			else {
				if (strstr(rx_buffer, ESP8266_AT_CWMODE_1) != NULL)
 8000a9c:	495b      	ldr	r1, [pc, #364]	; (8000c0c <get_return+0x2a4>)
 8000a9e:	485c      	ldr	r0, [pc, #368]	; (8000c10 <get_return+0x2a8>)
 8000aa0:	f004 f802 	bl	8004aa8 <strstr>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <get_return+0x146>
					return ESP8266_AT_CWMODE_1;
 8000aaa:	4b58      	ldr	r3, [pc, #352]	; (8000c0c <get_return+0x2a4>)
 8000aac:	e086      	b.n	8000bbc <get_return+0x254>
				else if(strstr(rx_buffer, ESP8266_AT_CWMODE_2) != NULL)
 8000aae:	4959      	ldr	r1, [pc, #356]	; (8000c14 <get_return+0x2ac>)
 8000ab0:	4857      	ldr	r0, [pc, #348]	; (8000c10 <get_return+0x2a8>)
 8000ab2:	f003 fff9 	bl	8004aa8 <strstr>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <get_return+0x158>
					return ESP8266_AT_CWMODE_2;
 8000abc:	4b55      	ldr	r3, [pc, #340]	; (8000c14 <get_return+0x2ac>)
 8000abe:	e07d      	b.n	8000bbc <get_return+0x254>
				else if(strstr(rx_buffer, ESP8266_AT_CWMODE_3) != NULL)
 8000ac0:	4955      	ldr	r1, [pc, #340]	; (8000c18 <get_return+0x2b0>)
 8000ac2:	4853      	ldr	r0, [pc, #332]	; (8000c10 <get_return+0x2a8>)
 8000ac4:	f003 fff0 	bl	8004aa8 <strstr>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <get_return+0x16a>
					return ESP8266_AT_CWMODE_3;
 8000ace:	4b52      	ldr	r3, [pc, #328]	; (8000c18 <get_return+0x2b0>)
 8000ad0:	e074      	b.n	8000bbc <get_return+0x254>
				else
					return ESP8266_AT_UNKNOWN;
 8000ad2:	4b52      	ldr	r3, [pc, #328]	; (8000c1c <get_return+0x2b4>)
 8000ad4:	e072      	b.n	8000bbc <get_return+0x254>
			}

		case ESP8266_AT_CWJAP_TEST_KEY:
			if(error_flag || fail_flag)
 8000ad6:	4b4a      	ldr	r3, [pc, #296]	; (8000c00 <get_return+0x298>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d103      	bne.n	8000ae6 <get_return+0x17e>
 8000ade:	4b49      	ldr	r3, [pc, #292]	; (8000c04 <get_return+0x29c>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <get_return+0x182>
				return ESP8266_AT_ERROR;
 8000ae6:	4b48      	ldr	r3, [pc, #288]	; (8000c08 <get_return+0x2a0>)
 8000ae8:	e068      	b.n	8000bbc <get_return+0x254>
			else {
				if(strstr(rx_buffer, ESP8266_AT_NO_AP))
 8000aea:	494d      	ldr	r1, [pc, #308]	; (8000c20 <get_return+0x2b8>)
 8000aec:	4848      	ldr	r0, [pc, #288]	; (8000c10 <get_return+0x2a8>)
 8000aee:	f003 ffdb 	bl	8004aa8 <strstr>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <get_return+0x194>
					return ESP8266_AT_WIFI_DISCONNECTED;
 8000af8:	4b4a      	ldr	r3, [pc, #296]	; (8000c24 <get_return+0x2bc>)
 8000afa:	e05f      	b.n	8000bbc <get_return+0x254>
				else
					return ESP8266_AT_WIFI_CONNECTED;
 8000afc:	4b4a      	ldr	r3, [pc, #296]	; (8000c28 <get_return+0x2c0>)
 8000afe:	e05d      	b.n	8000bbc <get_return+0x254>
			}

		case ESP8266_AT_CWJAP_SET_KEY:
			if(fail_flag || error_flag){
 8000b00:	4b40      	ldr	r3, [pc, #256]	; (8000c04 <get_return+0x29c>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d103      	bne.n	8000b10 <get_return+0x1a8>
 8000b08:	4b3d      	ldr	r3, [pc, #244]	; (8000c00 <get_return+0x298>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d025      	beq.n	8000b5c <get_return+0x1f4>
				if (strstr(rx_buffer, ESP8266_AT_CWJAP_1) != NULL)
 8000b10:	4946      	ldr	r1, [pc, #280]	; (8000c2c <get_return+0x2c4>)
 8000b12:	483f      	ldr	r0, [pc, #252]	; (8000c10 <get_return+0x2a8>)
 8000b14:	f003 ffc8 	bl	8004aa8 <strstr>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <get_return+0x1ba>
					return ESP8266_AT_TIMEOUT;
 8000b1e:	4b44      	ldr	r3, [pc, #272]	; (8000c30 <get_return+0x2c8>)
 8000b20:	e04c      	b.n	8000bbc <get_return+0x254>
				else if((strstr(rx_buffer, ESP8266_AT_CWJAP_2) != NULL))
 8000b22:	4944      	ldr	r1, [pc, #272]	; (8000c34 <get_return+0x2cc>)
 8000b24:	483a      	ldr	r0, [pc, #232]	; (8000c10 <get_return+0x2a8>)
 8000b26:	f003 ffbf 	bl	8004aa8 <strstr>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <get_return+0x1cc>
					return ESP8266_AT_WRONG_PWD;
 8000b30:	4b41      	ldr	r3, [pc, #260]	; (8000c38 <get_return+0x2d0>)
 8000b32:	e043      	b.n	8000bbc <get_return+0x254>
				else if((strstr(rx_buffer, ESP8266_AT_CWJAP_3) != NULL))
 8000b34:	4941      	ldr	r1, [pc, #260]	; (8000c3c <get_return+0x2d4>)
 8000b36:	4836      	ldr	r0, [pc, #216]	; (8000c10 <get_return+0x2a8>)
 8000b38:	f003 ffb6 	bl	8004aa8 <strstr>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <get_return+0x1de>
					return ESP8266_AT_NO_TARGET;
 8000b42:	4b3f      	ldr	r3, [pc, #252]	; (8000c40 <get_return+0x2d8>)
 8000b44:	e03a      	b.n	8000bbc <get_return+0x254>
				else if((strstr(rx_buffer, ESP8266_AT_CWJAP_4) != NULL))
 8000b46:	493f      	ldr	r1, [pc, #252]	; (8000c44 <get_return+0x2dc>)
 8000b48:	4831      	ldr	r0, [pc, #196]	; (8000c10 <get_return+0x2a8>)
 8000b4a:	f003 ffad 	bl	8004aa8 <strstr>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <get_return+0x1f0>
					return ESP8266_AT_CONNECTION_FAIL;
 8000b54:	4b3c      	ldr	r3, [pc, #240]	; (8000c48 <get_return+0x2e0>)
 8000b56:	e031      	b.n	8000bbc <get_return+0x254>
				else
					return ESP8266_AT_ERROR;
 8000b58:	4b2b      	ldr	r3, [pc, #172]	; (8000c08 <get_return+0x2a0>)
 8000b5a:	e02f      	b.n	8000bbc <get_return+0x254>
			}
			else
				return ESP8266_AT_WIFI_CONNECTED;
 8000b5c:	4b32      	ldr	r3, [pc, #200]	; (8000c28 <get_return+0x2c0>)
 8000b5e:	e02d      	b.n	8000bbc <get_return+0x254>

		case ESP8266_AT_CIPMUX_TEST_KEY:
			if(error_flag || fail_flag)
 8000b60:	4b27      	ldr	r3, [pc, #156]	; (8000c00 <get_return+0x298>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d103      	bne.n	8000b70 <get_return+0x208>
 8000b68:	4b26      	ldr	r3, [pc, #152]	; (8000c04 <get_return+0x29c>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <get_return+0x20c>
				return ESP8266_AT_ERROR;
 8000b70:	4b25      	ldr	r3, [pc, #148]	; (8000c08 <get_return+0x2a0>)
 8000b72:	e023      	b.n	8000bbc <get_return+0x254>
			else {
				if (strstr(rx_buffer, ESP8266_AT_CIPMUX_0) != NULL)
 8000b74:	4935      	ldr	r1, [pc, #212]	; (8000c4c <get_return+0x2e4>)
 8000b76:	4826      	ldr	r0, [pc, #152]	; (8000c10 <get_return+0x2a8>)
 8000b78:	f003 ff96 	bl	8004aa8 <strstr>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <get_return+0x21e>
					return ESP8266_AT_CIPMUX_0;
 8000b82:	4b32      	ldr	r3, [pc, #200]	; (8000c4c <get_return+0x2e4>)
 8000b84:	e01a      	b.n	8000bbc <get_return+0x254>
				else
					return ESP8266_AT_CIPMUX_1;
 8000b86:	4b32      	ldr	r3, [pc, #200]	; (8000c50 <get_return+0x2e8>)
 8000b88:	e018      	b.n	8000bbc <get_return+0x254>
			}

		case ESP8266_AT_START_KEY:
			if(error_flag || fail_flag)
 8000b8a:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <get_return+0x298>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d103      	bne.n	8000b9a <get_return+0x232>
 8000b92:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <get_return+0x29c>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <get_return+0x236>
				return ESP8266_AT_ERROR;
 8000b9a:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <get_return+0x2a0>)
 8000b9c:	e00e      	b.n	8000bbc <get_return+0x254>
			return ESP8266_AT_CONNECT;
 8000b9e:	4b2d      	ldr	r3, [pc, #180]	; (8000c54 <get_return+0x2ec>)
 8000ba0:	e00c      	b.n	8000bbc <get_return+0x254>

		case ESP8266_AT_SEND_KEY:
			if(error_flag || fail_flag)
 8000ba2:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <get_return+0x298>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d103      	bne.n	8000bb2 <get_return+0x24a>
 8000baa:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <get_return+0x29c>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <get_return+0x24e>
				return ESP8266_AT_ERROR;
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <get_return+0x2a0>)
 8000bb4:	e002      	b.n	8000bbc <get_return+0x254>
			return ESP8266_AT_SEND_OK;
 8000bb6:	4b28      	ldr	r3, [pc, #160]	; (8000c58 <get_return+0x2f0>)
 8000bb8:	e000      	b.n	8000bbc <get_return+0x254>

		default:
			return ESP8266_NOT_IMPLEMENTED;
 8000bba:	4b28      	ldr	r3, [pc, #160]	; (8000c5c <get_return+0x2f4>)
			break;
	}
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	08006078 	.word	0x08006078
 8000bc8:	080060b0 	.word	0x080060b0
 8000bcc:	080060c0 	.word	0x080060c0
 8000bd0:	f5600f43 	.word	0xf5600f43
 8000bd4:	e7dadacc 	.word	0xe7dadacc
 8000bd8:	d9fa4211 	.word	0xd9fa4211
 8000bdc:	9bf0f337 	.word	0x9bf0f337
 8000be0:	7c821b31 	.word	0x7c821b31
 8000be4:	5bfaa730 	.word	0x5bfaa730
 8000be8:	358a4068 	.word	0x358a4068
 8000bec:	24cedd55 	.word	0x24cedd55
 8000bf0:	243fa9a9 	.word	0x243fa9a9
 8000bf4:	24047d02 	.word	0x24047d02
 8000bf8:	194200bf 	.word	0x194200bf
 8000bfc:	1a8dff78 	.word	0x1a8dff78
 8000c00:	20001091 	.word	0x20001091
 8000c04:	20001092 	.word	0x20001092
 8000c08:	08005f00 	.word	0x08005f00
 8000c0c:	08005f5c 	.word	0x08005f5c
 8000c10:	20000090 	.word	0x20000090
 8000c14:	08005f6c 	.word	0x08005f6c
 8000c18:	08005f7c 	.word	0x08005f7c
 8000c1c:	08005f54 	.word	0x08005f54
 8000c20:	08005f4c 	.word	0x08005f4c
 8000c24:	08005f20 	.word	0x08005f20
 8000c28:	08005f10 	.word	0x08005f10
 8000c2c:	08005f8c 	.word	0x08005f8c
 8000c30:	08005fac 	.word	0x08005fac
 8000c34:	08005f94 	.word	0x08005f94
 8000c38:	08005fc0 	.word	0x08005fc0
 8000c3c:	08005f9c 	.word	0x08005f9c
 8000c40:	08005fd0 	.word	0x08005fd0
 8000c44:	08005fa4 	.word	0x08005fa4
 8000c48:	08005fec 	.word	0x08005fec
 8000c4c:	08006000 	.word	0x08006000
 8000c50:	0800600c 	.word	0x0800600c
 8000c54:	08005f34 	.word	0x08005f34
 8000c58:	08005f44 	.word	0x08005f44
 8000c5c:	08005ee4 	.word	0x08005ee4

08000c60 <evaluate>:

const char*
evaluate(void){
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
	if(error_flag || fail_flag)
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <evaluate+0x24>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d103      	bne.n	8000c74 <evaluate+0x14>
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <evaluate+0x28>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <evaluate+0x18>
		return ESP8266_AT_ERROR;
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <evaluate+0x2c>)
 8000c76:	e000      	b.n	8000c7a <evaluate+0x1a>
	return ESP8266_AT_OK;
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <evaluate+0x30>)
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	20001091 	.word	0x20001091
 8000c88:	20001092 	.word	0x20001092
 8000c8c:	08005f00 	.word	0x08005f00
 8000c90:	08005efc 	.word	0x08005efc

08000c94 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_GPIO_Init+0x2c>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9e:	4a08      	ldr	r2, [pc, #32]	; (8000cc0 <MX_GPIO_Init+0x2c>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_GPIO_Init+0x2c>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]

}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	40021000 	.word	0x40021000

08000cc4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ccc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000cd0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d013      	beq.n	8000d04 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000cdc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ce0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000ce4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d00b      	beq.n	8000d04 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000cec:	e000      	b.n	8000cf0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000cee:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000cf0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d0f9      	beq.n	8000cee <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000cfa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	b2d2      	uxtb	r2, r2
 8000d02:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d04:	687b      	ldr	r3, [r7, #4]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	60f8      	str	r0, [r7, #12]
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
 8000d22:	e009      	b.n	8000d38 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	1c5a      	adds	r2, r3, #1
 8000d28:	60ba      	str	r2, [r7, #8]
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ffc9 	bl	8000cc4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	3301      	adds	r3, #1
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	697a      	ldr	r2, [r7, #20]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	dbf1      	blt.n	8000d24 <_write+0x12>
	}
	return len;
 8000d40:	687b      	ldr	r3, [r7, #4]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d4e:	f000 fdd4 	bl	80018fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d52:	f000 f807 	bl	8000d64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d56:	f7ff ff9d 	bl	8000c94 <MX_GPIO_Init>
  MX_UART4_Init();
 8000d5a:	f000 fd2b 	bl	80017b4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  #ifdef RUN_UNIT_TEST
  	  unit_test();
 8000d5e:	f000 fa57 	bl	8001210 <unit_test>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d62:	e7fe      	b.n	8000d62 <main+0x18>

08000d64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b0b8      	sub	sp, #224	; 0xe0
 8000d68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d6e:	2244      	movs	r2, #68	; 0x44
 8000d70:	2100      	movs	r1, #0
 8000d72:	4618      	mov	r0, r3
 8000d74:	f003 fdcc 	bl	8004910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d78:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d88:	463b      	mov	r3, r7
 8000d8a:	2288      	movs	r2, #136	; 0x88
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f003 fdbe 	bl	8004910 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d94:	2302      	movs	r3, #2
 8000d96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000da2:	2310      	movs	r3, #16
 8000da4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da8:	2302      	movs	r3, #2
 8000daa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dae:	2302      	movs	r3, #2
 8000db0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000db4:	2301      	movs	r3, #1
 8000db6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000dba:	230a      	movs	r3, #10
 8000dbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000dc0:	2307      	movs	r3, #7
 8000dc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f001 f9c6 	bl	8002168 <HAL_RCC_OscConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000de2:	f000 f834 	bl	8000e4e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de6:	230f      	movs	r3, #15
 8000de8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dec:	2303      	movs	r3, #3
 8000dee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df2:	2300      	movs	r3, #0
 8000df4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e04:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000e08:	2104      	movs	r1, #4
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f001 fd92 	bl	8002934 <HAL_RCC_ClockConfig>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000e16:	f000 f81a 	bl	8000e4e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000e1a:	2308      	movs	r3, #8
 8000e1c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 8000e1e:	2340      	movs	r3, #64	; 0x40
 8000e20:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e22:	463b      	mov	r3, r7
 8000e24:	4618      	mov	r0, r3
 8000e26:	f001 ff8b 	bl	8002d40 <HAL_RCCEx_PeriphCLKConfig>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000e30:	f000 f80d 	bl	8000e4e <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e34:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e38:	f001 f940 	bl	80020bc <HAL_PWREx_ControlVoltageScaling>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000e42:	f000 f804 	bl	8000e4e <Error_Handler>
  }
}
 8000e46:	bf00      	nop
 8000e48:	37e0      	adds	r7, #224	; 0xe0
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e52:	b672      	cpsid	i
}
 8000e54:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <Error_Handler+0x8>

08000e58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <HAL_MspInit+0x44>)
 8000e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e62:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <HAL_MspInit+0x44>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6613      	str	r3, [r2, #96]	; 0x60
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <HAL_MspInit+0x44>)
 8000e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <HAL_MspInit+0x44>)
 8000e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7a:	4a08      	ldr	r2, [pc, #32]	; (8000e9c <HAL_MspInit+0x44>)
 8000e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e80:	6593      	str	r3, [r2, #88]	; 0x58
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_MspInit+0x44>)
 8000e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	40021000 	.word	0x40021000

08000ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <NMI_Handler+0x4>

08000ea6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <HardFault_Handler+0x4>

08000eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <MemManage_Handler+0x4>

08000eb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <BusFault_Handler+0x4>

08000eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <UsageFault_Handler+0x4>

08000ebe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eec:	f000 fd5a 	bl	80019a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000ef8:	4802      	ldr	r0, [pc, #8]	; (8000f04 <UART4_IRQHandler+0x10>)
 8000efa:	f002 fd03 	bl	8003904 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20001124 	.word	0x20001124

08000f08 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	e00a      	b.n	8000f30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f1a:	f3af 8000 	nop.w
 8000f1e:	4601      	mov	r1, r0
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	1c5a      	adds	r2, r3, #1
 8000f24:	60ba      	str	r2, [r7, #8]
 8000f26:	b2ca      	uxtb	r2, r1
 8000f28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	697a      	ldr	r2, [r7, #20]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	dbf0      	blt.n	8000f1a <_read+0x12>
	}

return len;
 8000f38:	687b      	ldr	r3, [r7, #4]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3718      	adds	r7, #24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000f42:	b480      	push	{r7}
 8000f44:	b083      	sub	sp, #12
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
	return -1;
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	b083      	sub	sp, #12
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
 8000f62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f6a:	605a      	str	r2, [r3, #4]
	return 0;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <_isatty>:

int _isatty(int file)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
	return 1;
 8000f82:	2301      	movs	r3, #1
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
	return 0;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fb4:	4a14      	ldr	r2, [pc, #80]	; (8001008 <_sbrk+0x5c>)
 8000fb6:	4b15      	ldr	r3, [pc, #84]	; (800100c <_sbrk+0x60>)
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fc0:	4b13      	ldr	r3, [pc, #76]	; (8001010 <_sbrk+0x64>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d102      	bne.n	8000fce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fc8:	4b11      	ldr	r3, [pc, #68]	; (8001010 <_sbrk+0x64>)
 8000fca:	4a12      	ldr	r2, [pc, #72]	; (8001014 <_sbrk+0x68>)
 8000fcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fce:	4b10      	ldr	r3, [pc, #64]	; (8001010 <_sbrk+0x64>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d207      	bcs.n	8000fec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fdc:	f003 fc6e 	bl	80048bc <__errno>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	220c      	movs	r2, #12
 8000fe4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fea:	e009      	b.n	8001000 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <_sbrk+0x64>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ff2:	4b07      	ldr	r3, [pc, #28]	; (8001010 <_sbrk+0x64>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	4a05      	ldr	r2, [pc, #20]	; (8001010 <_sbrk+0x64>)
 8000ffc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20018000 	.word	0x20018000
 800100c:	00000400 	.word	0x00000400
 8001010:	20001094 	.word	0x20001094
 8001014:	200011c0 	.word	0x200011c0

08001018 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800101c:	4b15      	ldr	r3, [pc, #84]	; (8001074 <SystemInit+0x5c>)
 800101e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001022:	4a14      	ldr	r2, [pc, #80]	; (8001074 <SystemInit+0x5c>)
 8001024:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001028:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800102c:	4b12      	ldr	r3, [pc, #72]	; (8001078 <SystemInit+0x60>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a11      	ldr	r2, [pc, #68]	; (8001078 <SystemInit+0x60>)
 8001032:	f043 0301 	orr.w	r3, r3, #1
 8001036:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <SystemInit+0x60>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <SystemInit+0x60>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a0d      	ldr	r2, [pc, #52]	; (8001078 <SystemInit+0x60>)
 8001044:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001048:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800104c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <SystemInit+0x60>)
 8001050:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001054:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <SystemInit+0x60>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a07      	ldr	r2, [pc, #28]	; (8001078 <SystemInit+0x60>)
 800105c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001060:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001062:	4b05      	ldr	r3, [pc, #20]	; (8001078 <SystemInit+0x60>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000ed00 	.word	0xe000ed00
 8001078:	40021000 	.word	0x40021000

0800107c <setUp>:
#include "unit_test.h"
#include "ESP8266.h"
#include "usart.h"
#include "stdio.h"

void setUp(void){
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <tearDown>:

void tearDown(void){
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <test_esp8266_init>:

void test_esp8266_init(void){
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	TEST_ASSERT_EQUAL_STRING(ESP8266_AT_OK, esp8266_init());
 800109c:	f7ff fb68 	bl	8000770 <esp8266_init>
 80010a0:	4601      	mov	r1, r0
 80010a2:	2319      	movs	r3, #25
 80010a4:	2200      	movs	r2, #0
 80010a6:	4802      	ldr	r0, [pc, #8]	; (80010b0 <test_esp8266_init+0x18>)
 80010a8:	f000 fa84 	bl	80015b4 <UnityAssertEqualString>
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	08006114 	.word	0x08006114

080010b4 <test_esp8266_wifi_connect>:

void test_esp8266_wifi_connect(void){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	TEST_ASSERT_EQUAL_STRING(ESP8266_AT_WIFI_CONNECTED, esp8266_wifi_init());
 80010b8:	f7ff fbd0 	bl	800085c <esp8266_wifi_init>
 80010bc:	4601      	mov	r1, r0
 80010be:	231d      	movs	r3, #29
 80010c0:	2200      	movs	r2, #0
 80010c2:	4802      	ldr	r0, [pc, #8]	; (80010cc <test_esp8266_wifi_connect+0x18>)
 80010c4:	f000 fa76 	bl	80015b4 <UnityAssertEqualString>
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	08006118 	.word	0x08006118

080010d0 <test_esp8266_web_connection>:

void test_esp8266_web_connection(void){
 80010d0:	b5b0      	push	{r4, r5, r7, lr}
 80010d2:	b0d2      	sub	sp, #328	; 0x148
 80010d4:	af00      	add	r7, sp, #0
	char connection_command[256] = {0};
 80010d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	3304      	adds	r3, #4
 80010e0:	22fc      	movs	r2, #252	; 0xfc
 80010e2:	2100      	movs	r1, #0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f003 fc13 	bl	8004910 <memset>
	char remote_ip[] = "ii1302-project-office-enviroment-monitor.eu-gb.mybluemix.net";
 80010ea:	f107 0308 	add.w	r3, r7, #8
 80010ee:	4a18      	ldr	r2, [pc, #96]	; (8001150 <test_esp8266_web_connection+0x80>)
 80010f0:	461c      	mov	r4, r3
 80010f2:	4615      	mov	r5, r2
 80010f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001100:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001104:	c407      	stmia	r4!, {r0, r1, r2}
 8001106:	7023      	strb	r3, [r4, #0]
	char type[] = "TCP";
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	4a12      	ldr	r2, [pc, #72]	; (8001154 <test_esp8266_web_connection+0x84>)
 800110c:	601a      	str	r2, [r3, #0]
	char remote_port[] = "80";
 800110e:	463b      	mov	r3, r7
 8001110:	4a11      	ldr	r2, [pc, #68]	; (8001158 <test_esp8266_web_connection+0x88>)
 8001112:	6812      	ldr	r2, [r2, #0]
 8001114:	4611      	mov	r1, r2
 8001116:	8019      	strh	r1, [r3, #0]
 8001118:	3302      	adds	r3, #2
 800111a:	0c12      	lsrs	r2, r2, #16
 800111c:	701a      	strb	r2, [r3, #0]
	esp8266_get_connection_command(connection_command, type, remote_ip, remote_port);
 800111e:	463b      	mov	r3, r7
 8001120:	f107 0208 	add.w	r2, r7, #8
 8001124:	1d39      	adds	r1, r7, #4
 8001126:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800112a:	f7ff fbc9 	bl	80008c0 <esp8266_get_connection_command>
	TEST_ASSERT_EQUAL_STRING(ESP8266_AT_CONNECT, esp8266_send_command(connection_command));
 800112e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fa8c 	bl	8000650 <esp8266_send_command>
 8001138:	4601      	mov	r1, r0
 800113a:	2326      	movs	r3, #38	; 0x26
 800113c:	2200      	movs	r2, #0
 800113e:	4807      	ldr	r0, [pc, #28]	; (800115c <test_esp8266_web_connection+0x8c>)
 8001140:	f000 fa38 	bl	80015b4 <UnityAssertEqualString>
}
 8001144:	bf00      	nop
 8001146:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800114a:	46bd      	mov	sp, r7
 800114c:	bdb0      	pop	{r4, r5, r7, pc}
 800114e:	bf00      	nop
 8001150:	08005da4 	.word	0x08005da4
 8001154:	00504354 	.word	0x00504354
 8001158:	08005de4 	.word	0x08005de4
 800115c:	08006128 	.word	0x08006128

08001160 <test_esp8266_web_request>:

void test_esp8266_web_request(void){
 8001160:	b5b0      	push	{r4, r5, r7, lr}
 8001162:	b0ea      	sub	sp, #424	; 0x1a8
 8001164:	af00      	add	r7, sp, #0
	//"GET /api/sensor HTTP/1.1\r\nHost: ii1302-project-office-enviroment-monitor.eu-gb.mybluemix.net\r\nConnection: close\r\n\r\n";
	char request[256] = {0};
 8001166:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	3304      	adds	r3, #4
 8001170:	22fc      	movs	r2, #252	; 0xfc
 8001172:	2100      	movs	r1, #0
 8001174:	4618      	mov	r0, r3
 8001176:	f003 fbcb 	bl	8004910 <memset>
	char init_send[64] = {0};
 800117a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	3304      	adds	r3, #4
 8001184:	223c      	movs	r2, #60	; 0x3c
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f003 fbc1 	bl	8004910 <memset>
	char uri[] = "/api/sensor/airquality?data=22335";
 800118e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001192:	4a1c      	ldr	r2, [pc, #112]	; (8001204 <test_esp8266_web_request+0xa4>)
 8001194:	461c      	mov	r4, r3
 8001196:	4615      	mov	r5, r2
 8001198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800119a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800119c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800119e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a0:	682b      	ldr	r3, [r5, #0]
 80011a2:	8023      	strh	r3, [r4, #0]
	//char uri[] = "/api/sensor";
	char host[] = "ii1302-project-office-enviroment-monitor.eu-gb.mybluemix.net";
 80011a4:	463b      	mov	r3, r7
 80011a6:	4a18      	ldr	r2, [pc, #96]	; (8001208 <test_esp8266_web_request+0xa8>)
 80011a8:	461c      	mov	r4, r3
 80011aa:	4615      	mov	r5, r2
 80011ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011b8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011bc:	c407      	stmia	r4!, {r0, r1, r2}
 80011be:	7023      	strb	r3, [r4, #0]

//	uint8_t len = esp8266_http_get_request(request, HTTP_GET, uri, host);
	uint8_t len = esp8266_http_get_request(request, HTTP_POST, uri, host);
 80011c0:	463b      	mov	r3, r7
 80011c2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80011c6:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 80011ca:	4910      	ldr	r1, [pc, #64]	; (800120c <test_esp8266_web_request+0xac>)
 80011cc:	f7ff fba6 	bl	800091c <esp8266_http_get_request>
 80011d0:	4603      	mov	r3, r0
 80011d2:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
	esp8266_get_at_send_command(init_send, len);
 80011d6:	f897 21a7 	ldrb.w	r2, [r7, #423]	; 0x1a7
 80011da:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011de:	4611      	mov	r1, r2
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff fb87 	bl	80008f4 <esp8266_get_at_send_command>

	test_esp8266_at_send(init_send);
 80011e6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 f846 	bl	800127c <test_esp8266_at_send>
	test_esp8266_send_data(request);
 80011f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011f4:	4618      	mov	r0, r3
 80011f6:	f000 f855 	bl	80012a4 <test_esp8266_send_data>
}
 80011fa:	bf00      	nop
 80011fc:	f507 77d4 	add.w	r7, r7, #424	; 0x1a8
 8001200:	46bd      	mov	sp, r7
 8001202:	bdb0      	pop	{r4, r5, r7, pc}
 8001204:	08005de8 	.word	0x08005de8
 8001208:	08005da4 	.word	0x08005da4
 800120c:	08006140 	.word	0x08006140

08001210 <unit_test>:

void unit_test(void){
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0

	/* Set up */
	init_uart_interrupt();
 8001214:	f7ff f9c8 	bl	80005a8 <init_uart_interrupt>

	/* Test begin */
	UNITY_BEGIN();
 8001218:	480f      	ldr	r0, [pc, #60]	; (8001258 <unit_test+0x48>)
 800121a:	f000 fa55 	bl	80016c8 <UnityBegin>

	/* Test initiation of ESP8266 */
	RUN_TEST(test_esp8266_init);
 800121e:	2242      	movs	r2, #66	; 0x42
 8001220:	490e      	ldr	r1, [pc, #56]	; (800125c <unit_test+0x4c>)
 8001222:	480f      	ldr	r0, [pc, #60]	; (8001260 <unit_test+0x50>)
 8001224:	f000 fa1c 	bl	8001660 <UnityDefaultTestRun>
	HAL_Delay(2000);
 8001228:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800122c:	f000 fbda 	bl	80019e4 <HAL_Delay>

	/* Test connecting to wifi */
	RUN_TEST(test_esp8266_wifi_connect);
 8001230:	2246      	movs	r2, #70	; 0x46
 8001232:	490c      	ldr	r1, [pc, #48]	; (8001264 <unit_test+0x54>)
 8001234:	480c      	ldr	r0, [pc, #48]	; (8001268 <unit_test+0x58>)
 8001236:	f000 fa13 	bl	8001660 <UnityDefaultTestRun>

	/* Test connecting to a website */
	RUN_TEST(test_esp8266_web_connection);
 800123a:	2249      	movs	r2, #73	; 0x49
 800123c:	490b      	ldr	r1, [pc, #44]	; (800126c <unit_test+0x5c>)
 800123e:	480c      	ldr	r0, [pc, #48]	; (8001270 <unit_test+0x60>)
 8001240:	f000 fa0e 	bl	8001660 <UnityDefaultTestRun>

	/* Test making a http web request to connected website */
	RUN_TEST(test_esp8266_web_request);
 8001244:	224c      	movs	r2, #76	; 0x4c
 8001246:	490b      	ldr	r1, [pc, #44]	; (8001274 <unit_test+0x64>)
 8001248:	480b      	ldr	r0, [pc, #44]	; (8001278 <unit_test+0x68>)
 800124a:	f000 fa09 	bl	8001660 <UnityDefaultTestRun>

	/* Test end*/
	UNITY_END();
 800124e:	f000 fa65 	bl	800171c <UnityEnd>
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	08005e0c 	.word	0x08005e0c
 800125c:	08005e24 	.word	0x08005e24
 8001260:	08001099 	.word	0x08001099
 8001264:	08005e38 	.word	0x08005e38
 8001268:	080010b5 	.word	0x080010b5
 800126c:	08005e54 	.word	0x08005e54
 8001270:	080010d1 	.word	0x080010d1
 8001274:	08005e70 	.word	0x08005e70
 8001278:	08001161 	.word	0x08001161

0800127c <test_esp8266_at_send>:

void test_esp8266_at_cwjap_verify(void){
	TEST_ASSERT_EQUAL_STRING(ESP8266_AT_WIFI_CONNECTED, esp8266_send_command(ESP8266_AT_CWJAP_TEST));
}

void test_esp8266_at_send(char* init_send){
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	TEST_ASSERT_EQUAL_STRING(ESP8266_AT_SEND_OK, esp8266_send_command(init_send));
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff f9e3 	bl	8000650 <esp8266_send_command>
 800128a:	4601      	mov	r1, r0
 800128c:	2357      	movs	r3, #87	; 0x57
 800128e:	2200      	movs	r2, #0
 8001290:	4803      	ldr	r0, [pc, #12]	; (80012a0 <test_esp8266_at_send+0x24>)
 8001292:	f000 f98f 	bl	80015b4 <UnityAssertEqualString>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	08006138 	.word	0x08006138

080012a4 <test_esp8266_send_data>:

void test_esp8266_send_data(char* request) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	TEST_ASSERT_EQUAL_STRING(ESP8266_AT_CLOSED, esp8266_send_data(request));
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff fa23 	bl	80006f8 <esp8266_send_data>
 80012b2:	4601      	mov	r1, r0
 80012b4:	235b      	movs	r3, #91	; 0x5b
 80012b6:	2200      	movs	r2, #0
 80012b8:	4803      	ldr	r0, [pc, #12]	; (80012c8 <test_esp8266_send_data+0x24>)
 80012ba:	f000 f97b 	bl	80015b4 <UnityAssertEqualString>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	08006130 	.word	0x08006130

080012cc <UnityPrintChar>:
 *-----------------------------------------------*/

/*-----------------------------------------------*/
/* Local helper function to print characters. */
static void UnityPrintChar(const char* pch)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
    /* printable characters plus CR & LF are printed */
    if ((*pch <= 126) && (*pch >= 32))
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b7e      	cmp	r3, #126	; 0x7e
 80012da:	d80a      	bhi.n	80012f2 <UnityPrintChar+0x26>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b1f      	cmp	r3, #31
 80012e2:	d906      	bls.n	80012f2 <UnityPrintChar+0x26>
    {
        UNITY_OUTPUT_CHAR(*pch);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f003 fb31 	bl	8004950 <putchar>
 80012ee:	bf00      	nop
    {
        UNITY_OUTPUT_CHAR('\\');
        UNITY_OUTPUT_CHAR('x');
        UnityPrintNumberHex((UNITY_UINT)*pch, 2);
    }
}
 80012f0:	e021      	b.n	8001336 <UnityPrintChar+0x6a>
    else if (*pch == 13)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b0d      	cmp	r3, #13
 80012f8:	d106      	bne.n	8001308 <UnityPrintChar+0x3c>
        UNITY_OUTPUT_CHAR('\\');
 80012fa:	205c      	movs	r0, #92	; 0x5c
 80012fc:	f003 fb28 	bl	8004950 <putchar>
        UNITY_OUTPUT_CHAR('r');
 8001300:	2072      	movs	r0, #114	; 0x72
 8001302:	f003 fb25 	bl	8004950 <putchar>
}
 8001306:	e016      	b.n	8001336 <UnityPrintChar+0x6a>
    else if (*pch == 10)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b0a      	cmp	r3, #10
 800130e:	d106      	bne.n	800131e <UnityPrintChar+0x52>
        UNITY_OUTPUT_CHAR('\\');
 8001310:	205c      	movs	r0, #92	; 0x5c
 8001312:	f003 fb1d 	bl	8004950 <putchar>
        UNITY_OUTPUT_CHAR('n');
 8001316:	206e      	movs	r0, #110	; 0x6e
 8001318:	f003 fb1a 	bl	8004950 <putchar>
}
 800131c:	e00b      	b.n	8001336 <UnityPrintChar+0x6a>
        UNITY_OUTPUT_CHAR('\\');
 800131e:	205c      	movs	r0, #92	; 0x5c
 8001320:	f003 fb16 	bl	8004950 <putchar>
        UNITY_OUTPUT_CHAR('x');
 8001324:	2078      	movs	r0, #120	; 0x78
 8001326:	f003 fb13 	bl	8004950 <putchar>
        UnityPrintNumberHex((UNITY_UINT)*pch, 2);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2102      	movs	r1, #2
 8001330:	4618      	mov	r0, r3
 8001332:	f000 f869 	bl	8001408 <UnityPrintNumberHex>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <UnityPrint>:
}
#endif

/*-----------------------------------------------*/
void UnityPrint(const char* string)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b084      	sub	sp, #16
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
    const char* pch = string;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	60fb      	str	r3, [r7, #12]

    if (pch != NULL)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d00a      	beq.n	8001366 <UnityPrint+0x28>
    {
        while (*pch)
 8001350:	e005      	b.n	800135e <UnityPrint+0x20>
            {
                pch += UnityPrintAnsiEscapeString(pch);
                continue;
            }
#endif
            UnityPrintChar(pch);
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f7ff ffba 	bl	80012cc <UnityPrintChar>
            pch++;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	3301      	adds	r3, #1
 800135c:	60fb      	str	r3, [r7, #12]
        while (*pch)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f5      	bne.n	8001352 <UnityPrint+0x14>
        }
    }
}
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <UnityPrintNumber>:
    }
}

/*-----------------------------------------------*/
void UnityPrintNumber(const UNITY_INT number_to_print)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b084      	sub	sp, #16
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
    UNITY_UINT number = (UNITY_UINT)number_to_print;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	60fb      	str	r3, [r7, #12]

    if (number_to_print < 0)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	da05      	bge.n	800138c <UnityPrintNumber+0x1e>
    {
        /* A negative number, including MIN negative */
        UNITY_OUTPUT_CHAR('-');
 8001380:	202d      	movs	r0, #45	; 0x2d
 8001382:	f003 fae5 	bl	8004950 <putchar>
        number = (~number) + 1;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	425b      	negs	r3, r3
 800138a:	60fb      	str	r3, [r7, #12]
    }
    UnityPrintNumberUnsigned(number);
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f000 f805 	bl	800139c <UnityPrintNumberUnsigned>
}
 8001392:	bf00      	nop
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <UnityPrintNumberUnsigned>:

/*-----------------------------------------------
 * basically do an itoa using as little ram as possible */
void UnityPrintNumberUnsigned(const UNITY_UINT number)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
    UNITY_UINT divisor = 1;
 80013a4:	2301      	movs	r3, #1
 80013a6:	60fb      	str	r3, [r7, #12]

    /* figure out initial divisor */
    while (number / divisor > 9)
 80013a8:	e005      	b.n	80013b6 <UnityPrintNumberUnsigned+0x1a>
    {
        divisor *= 10;
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	4613      	mov	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	60fb      	str	r3, [r7, #12]
    while (number / divisor > 9)
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80013be:	2b09      	cmp	r3, #9
 80013c0:	d8f3      	bhi.n	80013aa <UnityPrintNumberUnsigned+0xe>
    }

    /* now mod and print, then divide divisor */
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	fbb2 f1f3 	udiv	r1, r2, r3
 80013ca:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <UnityPrintNumberUnsigned+0x68>)
 80013cc:	fba3 2301 	umull	r2, r3, r3, r1
 80013d0:	08da      	lsrs	r2, r3, #3
 80013d2:	4613      	mov	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	1aca      	subs	r2, r1, r3
 80013dc:	b2d3      	uxtb	r3, r2
 80013de:	3330      	adds	r3, #48	; 0x30
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	4618      	mov	r0, r3
 80013e4:	f003 fab4 	bl	8004950 <putchar>
        divisor /= 10;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	4a06      	ldr	r2, [pc, #24]	; (8001404 <UnityPrintNumberUnsigned+0x68>)
 80013ec:	fba2 2303 	umull	r2, r3, r2, r3
 80013f0:	08db      	lsrs	r3, r3, #3
 80013f2:	60fb      	str	r3, [r7, #12]
    } while (divisor > 0);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1e3      	bne.n	80013c2 <UnityPrintNumberUnsigned+0x26>
}
 80013fa:	bf00      	nop
 80013fc:	bf00      	nop
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	cccccccd 	.word	0xcccccccd

08001408 <UnityPrintNumberHex>:

/*-----------------------------------------------*/
void UnityPrintNumberHex(const UNITY_UINT number, const char nibbles_to_print)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	70fb      	strb	r3, [r7, #3]
    int nibble;
    char nibbles = nibbles_to_print;
 8001414:	78fb      	ldrb	r3, [r7, #3]
 8001416:	73fb      	strb	r3, [r7, #15]

    if ((unsigned)nibbles > UNITY_MAX_NIBBLES)
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	2b08      	cmp	r3, #8
 800141c:	d91f      	bls.n	800145e <UnityPrintNumberHex+0x56>
    {
        nibbles = UNITY_MAX_NIBBLES;
 800141e:	2308      	movs	r3, #8
 8001420:	73fb      	strb	r3, [r7, #15]
    }

    while (nibbles > 0)
 8001422:	e01c      	b.n	800145e <UnityPrintNumberHex+0x56>
    {
        nibbles--;
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	3b01      	subs	r3, #1
 8001428:	73fb      	strb	r3, [r7, #15]
        nibble = (int)(number >> (nibbles * 4)) & 0x0F;
 800142a:	7bfb      	ldrb	r3, [r7, #15]
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	fa22 f303 	lsr.w	r3, r2, r3
 8001434:	f003 030f 	and.w	r3, r3, #15
 8001438:	60bb      	str	r3, [r7, #8]
        if (nibble <= 9)
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	2b09      	cmp	r3, #9
 800143e:	dc07      	bgt.n	8001450 <UnityPrintNumberHex+0x48>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	b2db      	uxtb	r3, r3
 8001444:	3330      	adds	r3, #48	; 0x30
 8001446:	b2db      	uxtb	r3, r3
 8001448:	4618      	mov	r0, r3
 800144a:	f003 fa81 	bl	8004950 <putchar>
 800144e:	e006      	b.n	800145e <UnityPrintNumberHex+0x56>
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	3337      	adds	r3, #55	; 0x37
 8001456:	b2db      	uxtb	r3, r3
 8001458:	4618      	mov	r0, r3
 800145a:	f003 fa79 	bl	8004950 <putchar>
    while (nibbles > 0)
 800145e:	7bfb      	ldrb	r3, [r7, #15]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1df      	bne.n	8001424 <UnityPrintNumberHex+0x1c>
        }
    }
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <UnityTestResultsBegin>:
}
#endif /* ! UNITY_EXCLUDE_FLOAT_PRINT */

/*-----------------------------------------------*/
static void UnityTestResultsBegin(const char* file, const UNITY_LINE_TYPE line)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
    UnityPrintNumber((UNITY_INT)line);
    UNITY_OUTPUT_CHAR(' ');
    UnityPrint(Unity.CurrentTestName);
    UNITY_OUTPUT_CHAR(':');
#else
    UnityPrint(file);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff ff5f 	bl	800133e <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
 8001480:	203a      	movs	r0, #58	; 0x3a
 8001482:	f003 fa65 	bl	8004950 <putchar>
    UnityPrintNumber((UNITY_INT)line);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ff70 	bl	800136e <UnityPrintNumber>
    UNITY_OUTPUT_CHAR(':');
 800148e:	203a      	movs	r0, #58	; 0x3a
 8001490:	f003 fa5e 	bl	8004950 <putchar>
    UnityPrint(Unity.CurrentTestName);
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <UnityTestResultsBegin+0x3c>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff50 	bl	800133e <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
 800149e:	203a      	movs	r0, #58	; 0x3a
 80014a0:	f003 fa56 	bl	8004950 <putchar>
#endif
#endif
#endif
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	200010a0 	.word	0x200010a0

080014b0 <UnityTestResultsFailBegin>:

/*-----------------------------------------------*/
static void UnityTestResultsFailBegin(const UNITY_LINE_TYPE line)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
    UnityTestResultsBegin(Unity.TestFile, line);
 80014b8:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <UnityTestResultsFailBegin+0x28>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff ffd6 	bl	8001470 <UnityTestResultsBegin>
    //UnityPrint(UnityStrFail);
    printf(UnityStrFail);
 80014c4:	4805      	ldr	r0, [pc, #20]	; (80014dc <UnityTestResultsFailBegin+0x2c>)
 80014c6:	f003 fa2b 	bl	8004920 <iprintf>
    UNITY_OUTPUT_CHAR(':');
 80014ca:	203a      	movs	r0, #58	; 0x3a
 80014cc:	f003 fa40 	bl	8004950 <putchar>
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	200010a0 	.word	0x200010a0
 80014dc:	08006154 	.word	0x08006154

080014e0 <UnityConcludeTest>:

/*-----------------------------------------------*/
void UnityConcludeTest(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
    if (Unity.CurrentTestIgnored)
 80014e4:	4b14      	ldr	r3, [pc, #80]	; (8001538 <UnityConcludeTest+0x58>)
 80014e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d005      	beq.n	80014f8 <UnityConcludeTest+0x18>
    {
        Unity.TestIgnores++;
 80014ec:	4b12      	ldr	r3, [pc, #72]	; (8001538 <UnityConcludeTest+0x58>)
 80014ee:	69db      	ldr	r3, [r3, #28]
 80014f0:	3301      	adds	r3, #1
 80014f2:	4a11      	ldr	r2, [pc, #68]	; (8001538 <UnityConcludeTest+0x58>)
 80014f4:	61d3      	str	r3, [r2, #28]
 80014f6:	e014      	b.n	8001522 <UnityConcludeTest+0x42>
    }
    else if (!Unity.CurrentTestFailed)
 80014f8:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <UnityConcludeTest+0x58>)
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d10b      	bne.n	8001518 <UnityConcludeTest+0x38>
    {
        UnityTestResultsBegin(Unity.TestFile, Unity.CurrentTestLineNumber);
 8001500:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <UnityConcludeTest+0x58>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a0c      	ldr	r2, [pc, #48]	; (8001538 <UnityConcludeTest+0x58>)
 8001506:	6912      	ldr	r2, [r2, #16]
 8001508:	4611      	mov	r1, r2
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff ffb0 	bl	8001470 <UnityTestResultsBegin>
        //UnityPrint(UnityStrPass);
        printf(UnityStrPass);
 8001510:	480a      	ldr	r0, [pc, #40]	; (800153c <UnityConcludeTest+0x5c>)
 8001512:	f003 fa05 	bl	8004920 <iprintf>
 8001516:	e004      	b.n	8001522 <UnityConcludeTest+0x42>
    }
    else
    {
        Unity.TestFailures++;
 8001518:	4b07      	ldr	r3, [pc, #28]	; (8001538 <UnityConcludeTest+0x58>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	3301      	adds	r3, #1
 800151e:	4a06      	ldr	r2, [pc, #24]	; (8001538 <UnityConcludeTest+0x58>)
 8001520:	6193      	str	r3, [r2, #24]
    }

    Unity.CurrentTestFailed = 0;
 8001522:	4b05      	ldr	r3, [pc, #20]	; (8001538 <UnityConcludeTest+0x58>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
    Unity.CurrentTestIgnored = 0;
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <UnityConcludeTest+0x58>)
 800152a:	2200      	movs	r2, #0
 800152c:	625a      	str	r2, [r3, #36]	; 0x24
    //printf("%d\n", (Unity.CurrentTestStopTime - Unity.CurrentTestStartTime));
    UNITY_PRINT_EXEC_TIME();
    UNITY_PRINT_EOL();
 800152e:	200a      	movs	r0, #10
 8001530:	f003 fa0e 	bl	8004950 <putchar>
    UNITY_FLUSH_CALL();
}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}
 8001538:	200010a0 	.word	0x200010a0
 800153c:	0800614c 	.word	0x0800614c

08001540 <UnityPrintExpectedAndActualStrings>:
    }
}

/*-----------------------------------------------*/
static void UnityPrintExpectedAndActualStrings(const char* expected, const char* actual)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
	printf("\n");
 800154a:	200a      	movs	r0, #10
 800154c:	f003 fa00 	bl	8004950 <putchar>
	UnityPrint(UnityStrExpected);
 8001550:	4814      	ldr	r0, [pc, #80]	; (80015a4 <UnityPrintExpectedAndActualStrings+0x64>)
 8001552:	f7ff fef4 	bl	800133e <UnityPrint>
    if (expected != NULL)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d009      	beq.n	8001570 <UnityPrintExpectedAndActualStrings+0x30>
    {
        //UNITY_OUTPUT_CHAR('\'');
        //UnityPrint(expected);
    	printf("\'");
 800155c:	2027      	movs	r0, #39	; 0x27
 800155e:	f003 f9f7 	bl	8004950 <putchar>
    	printf(expected);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f003 f9dc 	bl	8004920 <iprintf>
    	printf("\'\n");
 8001568:	480f      	ldr	r0, [pc, #60]	; (80015a8 <UnityPrintExpectedAndActualStrings+0x68>)
 800156a:	f003 fa75 	bl	8004a58 <puts>
 800156e:	e002      	b.n	8001576 <UnityPrintExpectedAndActualStrings+0x36>
    	//UNITY_OUTPUT_CHAR('\'');
    }
    else
    {
        //UnityPrint(UnityStrNull);
    	printf(UnityStrNull);
 8001570:	480e      	ldr	r0, [pc, #56]	; (80015ac <UnityPrintExpectedAndActualStrings+0x6c>)
 8001572:	f003 f9d5 	bl	8004920 <iprintf>
    }
    //UnityPrint(UnityStrWas);
    printf(UnityStrWas);
 8001576:	480e      	ldr	r0, [pc, #56]	; (80015b0 <UnityPrintExpectedAndActualStrings+0x70>)
 8001578:	f003 f9d2 	bl	8004920 <iprintf>
    if (actual != NULL)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d009      	beq.n	8001596 <UnityPrintExpectedAndActualStrings+0x56>
    {
        printf("\'");
 8001582:	2027      	movs	r0, #39	; 0x27
 8001584:	f003 f9e4 	bl	8004950 <putchar>
    	printf(actual);
 8001588:	6838      	ldr	r0, [r7, #0]
 800158a:	f003 f9c9 	bl	8004920 <iprintf>
    	printf("\'");
 800158e:	2027      	movs	r0, #39	; 0x27
 8001590:	f003 f9de 	bl	8004950 <putchar>
    else
    {
        //UnityPrint(UnityStrNull);
    	printf(UnityStrNull);
    }
}
 8001594:	e002      	b.n	800159c <UnityPrintExpectedAndActualStrings+0x5c>
    	printf(UnityStrNull);
 8001596:	4805      	ldr	r0, [pc, #20]	; (80015ac <UnityPrintExpectedAndActualStrings+0x6c>)
 8001598:	f003 f9c2 	bl	8004920 <iprintf>
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	08006164 	.word	0x08006164
 80015a8:	08005e98 	.word	0x08005e98
 80015ac:	0800615c 	.word	0x0800615c
 80015b0:	08006170 	.word	0x08006170

080015b4 <UnityAssertEqualString>:
/*-----------------------------------------------*/
void UnityAssertEqualString(const char* expected,
                            const char* actual,
                            const char* msg,
                            const UNITY_LINE_TYPE lineNumber)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
 80015c0:	603b      	str	r3, [r7, #0]
    UNITY_UINT32 i;

    RETURN_IF_FAIL_OR_IGNORE;
 80015c2:	4b25      	ldr	r3, [pc, #148]	; (8001658 <UnityAssertEqualString+0xa4>)
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d103      	bne.n	80015d2 <UnityAssertEqualString+0x1e>
 80015ca:	4b23      	ldr	r3, [pc, #140]	; (8001658 <UnityAssertEqualString+0xa4>)
 80015cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <UnityAssertEqualString+0x26>
 80015d2:	2101      	movs	r1, #1
 80015d4:	4821      	ldr	r0, [pc, #132]	; (800165c <UnityAssertEqualString+0xa8>)
 80015d6:	f7fe fe01 	bl	80001dc <longjmp>

    /* if both pointers not null compare the strings */
    if (expected && actual)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d024      	beq.n	800162a <UnityAssertEqualString+0x76>
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d021      	beq.n	800162a <UnityAssertEqualString+0x76>
    {
        for (i = 0; expected[i] || actual[i]; i++)
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	e011      	b.n	8001610 <UnityAssertEqualString+0x5c>
        {
            if (expected[i] != actual[i])
 80015ec:	68fa      	ldr	r2, [r7, #12]
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	4413      	add	r3, r2
 80015f2:	781a      	ldrb	r2, [r3, #0]
 80015f4:	68b9      	ldr	r1, [r7, #8]
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	440b      	add	r3, r1
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d004      	beq.n	800160a <UnityAssertEqualString+0x56>
            {
                Unity.CurrentTestFailed = 1;
 8001600:	4b15      	ldr	r3, [pc, #84]	; (8001658 <UnityAssertEqualString+0xa4>)
 8001602:	2201      	movs	r2, #1
 8001604:	621a      	str	r2, [r3, #32]
                break;
 8001606:	bf00      	nop
    if (expected && actual)
 8001608:	e016      	b.n	8001638 <UnityAssertEqualString+0x84>
        for (i = 0; expected[i] || actual[i]; i++)
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	3301      	adds	r3, #1
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	4413      	add	r3, r2
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1e7      	bne.n	80015ec <UnityAssertEqualString+0x38>
 800161c:	68ba      	ldr	r2, [r7, #8]
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	4413      	add	r3, r2
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1e1      	bne.n	80015ec <UnityAssertEqualString+0x38>
    if (expected && actual)
 8001628:	e006      	b.n	8001638 <UnityAssertEqualString+0x84>
            }
        }
    }
    else
    { /* handle case of one pointers being null (if both null, test should pass) */
        if (expected != actual)
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	429a      	cmp	r2, r3
 8001630:	d002      	beq.n	8001638 <UnityAssertEqualString+0x84>
        {
            Unity.CurrentTestFailed = 1;
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <UnityAssertEqualString+0xa4>)
 8001634:	2201      	movs	r2, #1
 8001636:	621a      	str	r2, [r3, #32]
        }
    }

    if (Unity.CurrentTestFailed)
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <UnityAssertEqualString+0xa4>)
 800163a:	6a1b      	ldr	r3, [r3, #32]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d006      	beq.n	800164e <UnityAssertEqualString+0x9a>
    {
    	UnityTestResultsFailBegin(lineNumber);
 8001640:	6838      	ldr	r0, [r7, #0]
 8001642:	f7ff ff35 	bl	80014b0 <UnityTestResultsFailBegin>
        UnityPrintExpectedAndActualStrings(expected, actual);
 8001646:	68b9      	ldr	r1, [r7, #8]
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f7ff ff79 	bl	8001540 <UnityPrintExpectedAndActualStrings>
        UnityPrintExpectedAndActualStrings(expected, actual);
        UnityAddMsgIfSpecified(msg);
        UNITY_FAIL_AND_BAIL;
    	*/
    }
}
 800164e:	bf00      	nop
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	200010a0 	.word	0x200010a0
 800165c:	200010c8 	.word	0x200010c8

08001660 <UnityDefaultTestRun>:
/*-----------------------------------------------*/
/* If we have not defined our own test runner, then include our default test runner to make life easier */
#ifndef UNITY_SKIP_DEFAULT_RUNNER

void UnityDefaultTestRun(UnityTestFunction Func, const char* FuncName, const int FuncLineNum)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
    Unity.CurrentTestName = FuncName;
 800166c:	4a14      	ldr	r2, [pc, #80]	; (80016c0 <UnityDefaultTestRun+0x60>)
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	6053      	str	r3, [r2, #4]
    Unity.CurrentTestLineNumber = (UNITY_LINE_TYPE)FuncLineNum;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <UnityDefaultTestRun+0x60>)
 8001676:	6113      	str	r3, [r2, #16]
    Unity.NumberOfTests++;
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <UnityDefaultTestRun+0x60>)
 800167a:	695b      	ldr	r3, [r3, #20]
 800167c:	3301      	adds	r3, #1
 800167e:	4a10      	ldr	r2, [pc, #64]	; (80016c0 <UnityDefaultTestRun+0x60>)
 8001680:	6153      	str	r3, [r2, #20]
    UNITY_CLR_DETAILS();
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <UnityDefaultTestRun+0x60>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <UnityDefaultTestRun+0x60>)
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]

    //UNITY_EXEC_TIME_START();
    if (TEST_PROTECT())
 800168e:	480d      	ldr	r0, [pc, #52]	; (80016c4 <UnityDefaultTestRun+0x64>)
 8001690:	f7fe fd9e 	bl	80001d0 <setjmp>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d103      	bne.n	80016a2 <UnityDefaultTestRun+0x42>
    {
        setUp();
 800169a:	f7ff fcef 	bl	800107c <setUp>
        Func();
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4798      	blx	r3
    }
    if (TEST_PROTECT())
 80016a2:	4808      	ldr	r0, [pc, #32]	; (80016c4 <UnityDefaultTestRun+0x64>)
 80016a4:	f7fe fd94 	bl	80001d0 <setjmp>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <UnityDefaultTestRun+0x52>
    {
        tearDown();
 80016ae:	f7ff fcec 	bl	800108a <tearDown>
    }
    //UNITY_EXEC_TIME_STOP();

    UnityConcludeTest();
 80016b2:	f7ff ff15 	bl	80014e0 <UnityConcludeTest>
}
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200010a0 	.word	0x200010a0
 80016c4:	200010c8 	.word	0x200010c8

080016c8 <UnityBegin>:
	Unity.TestFile = filename;
}

/*-----------------------------------------------*/
void UnityBegin(const char* filename)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
    Unity.TestFile = filename;
 80016d0:	4a11      	ldr	r2, [pc, #68]	; (8001718 <UnityBegin+0x50>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6013      	str	r3, [r2, #0]
    Unity.CurrentTestName = NULL;
 80016d6:	4b10      	ldr	r3, [pc, #64]	; (8001718 <UnityBegin+0x50>)
 80016d8:	2200      	movs	r2, #0
 80016da:	605a      	str	r2, [r3, #4]
    Unity.CurrentTestLineNumber = 0;
 80016dc:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <UnityBegin+0x50>)
 80016de:	2200      	movs	r2, #0
 80016e0:	611a      	str	r2, [r3, #16]
    Unity.NumberOfTests = 0;
 80016e2:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <UnityBegin+0x50>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	615a      	str	r2, [r3, #20]
    Unity.TestFailures = 0;
 80016e8:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <UnityBegin+0x50>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	619a      	str	r2, [r3, #24]
    Unity.TestIgnores = 0;
 80016ee:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <UnityBegin+0x50>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	61da      	str	r2, [r3, #28]
    Unity.CurrentTestFailed = 0;
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <UnityBegin+0x50>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	621a      	str	r2, [r3, #32]
    Unity.CurrentTestIgnored = 0;
 80016fa:	4b07      	ldr	r3, [pc, #28]	; (8001718 <UnityBegin+0x50>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	625a      	str	r2, [r3, #36]	; 0x24

    UNITY_CLR_DETAILS();
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <UnityBegin+0x50>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	4b04      	ldr	r3, [pc, #16]	; (8001718 <UnityBegin+0x50>)
 8001708:	2200      	movs	r2, #0
 800170a:	60da      	str	r2, [r3, #12]
    UNITY_OUTPUT_START();
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	200010a0 	.word	0x200010a0

0800171c <UnityEnd>:

/*-----------------------------------------------*/
int UnityEnd(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
    printf(UnityStrBreaker);
 8001720:	481c      	ldr	r0, [pc, #112]	; (8001794 <UnityEnd+0x78>)
 8001722:	f003 f8fd 	bl	8004920 <iprintf>
    printf("\n");
 8001726:	200a      	movs	r0, #10
 8001728:	f003 f912 	bl	8004950 <putchar>
    printf(UnityStrResultsTests);
 800172c:	481a      	ldr	r0, [pc, #104]	; (8001798 <UnityEnd+0x7c>)
 800172e:	f003 f8f7 	bl	8004920 <iprintf>
    printf("%d\n", (UNITY_INT)(Unity.NumberOfTests));
 8001732:	4b1a      	ldr	r3, [pc, #104]	; (800179c <UnityEnd+0x80>)
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	4619      	mov	r1, r3
 8001738:	4819      	ldr	r0, [pc, #100]	; (80017a0 <UnityEnd+0x84>)
 800173a:	f003 f8f1 	bl	8004920 <iprintf>
    printf(UnityStrResultsFailures);
 800173e:	4819      	ldr	r0, [pc, #100]	; (80017a4 <UnityEnd+0x88>)
 8001740:	f003 f8ee 	bl	8004920 <iprintf>
    printf("%d\n", (UNITY_INT)(Unity.TestFailures));
 8001744:	4b15      	ldr	r3, [pc, #84]	; (800179c <UnityEnd+0x80>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	4619      	mov	r1, r3
 800174a:	4815      	ldr	r0, [pc, #84]	; (80017a0 <UnityEnd+0x84>)
 800174c:	f003 f8e8 	bl	8004920 <iprintf>
    printf(UnityStrResultsIgnored);
 8001750:	4815      	ldr	r0, [pc, #84]	; (80017a8 <UnityEnd+0x8c>)
 8001752:	f003 f8e5 	bl	8004920 <iprintf>
    printf("%d\n", (UNITY_INT)(Unity.TestIgnores));
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <UnityEnd+0x80>)
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	4619      	mov	r1, r3
 800175c:	4810      	ldr	r0, [pc, #64]	; (80017a0 <UnityEnd+0x84>)
 800175e:	f003 f8df 	bl	8004920 <iprintf>
    printf("\n");
 8001762:	200a      	movs	r0, #10
 8001764:	f003 f8f4 	bl	8004950 <putchar>
    if (Unity.TestFailures == 0U)
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <UnityEnd+0x80>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d106      	bne.n	800177e <UnityEnd+0x62>
    {
        printf(UnityStrOk);
 8001770:	480e      	ldr	r0, [pc, #56]	; (80017ac <UnityEnd+0x90>)
 8001772:	f003 f8d5 	bl	8004920 <iprintf>
        printf("\n");
 8001776:	200a      	movs	r0, #10
 8001778:	f003 f8ea 	bl	8004950 <putchar>
 800177c:	e002      	b.n	8001784 <UnityEnd+0x68>
    }
    else
    {
        printf(UnityStrFail);
 800177e:	480c      	ldr	r0, [pc, #48]	; (80017b0 <UnityEnd+0x94>)
 8001780:	f003 f8ce 	bl	8004920 <iprintf>
		#ifdef UNITY_DIFFERENTIATE_FINAL_FAIL
        printf('E'); printf('D');
		#endif
    }
    printf("\n");
 8001784:	200a      	movs	r0, #10
 8001786:	f003 f8e3 	bl	8004950 <putchar>
    UNITY_FLUSH_CALL();
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures);
 800178a:	4b04      	ldr	r3, [pc, #16]	; (800179c <UnityEnd+0x80>)
 800178c:	699b      	ldr	r3, [r3, #24]
    UNITY_PRINT_EOL();
    UNITY_FLUSH_CALL();
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures); */

}
 800178e:	4618      	mov	r0, r3
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	080061a8 	.word	0x080061a8
 8001798:	080061c0 	.word	0x080061c0
 800179c:	200010a0 	.word	0x200010a0
 80017a0:	08005e9c 	.word	0x08005e9c
 80017a4:	080061d4 	.word	0x080061d4
 80017a8:	080061e0 	.word	0x080061e0
 80017ac:	08006148 	.word	0x08006148
 80017b0:	08006154 	.word	0x08006154

080017b4 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80017b8:	4b14      	ldr	r3, [pc, #80]	; (800180c <MX_UART4_Init+0x58>)
 80017ba:	4a15      	ldr	r2, [pc, #84]	; (8001810 <MX_UART4_Init+0x5c>)
 80017bc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80017be:	4b13      	ldr	r3, [pc, #76]	; (800180c <MX_UART4_Init+0x58>)
 80017c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017c4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <MX_UART4_Init+0x58>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <MX_UART4_Init+0x58>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <MX_UART4_Init+0x58>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <MX_UART4_Init+0x58>)
 80017da:	220c      	movs	r2, #12
 80017dc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <MX_UART4_Init+0x58>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <MX_UART4_Init+0x58>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ea:	4b08      	ldr	r3, [pc, #32]	; (800180c <MX_UART4_Init+0x58>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <MX_UART4_Init+0x58>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80017f6:	4805      	ldr	r0, [pc, #20]	; (800180c <MX_UART4_Init+0x58>)
 80017f8:	f001 ff5e 	bl	80036b8 <HAL_UART_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001802:	f7ff fb24 	bl	8000e4e <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20001124 	.word	0x20001124
 8001810:	40004c00 	.word	0x40004c00

08001814 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	; 0x28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a1b      	ldr	r2, [pc, #108]	; (80018a0 <HAL_UART_MspInit+0x8c>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d130      	bne.n	8001898 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001836:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <HAL_UART_MspInit+0x90>)
 8001838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183a:	4a1a      	ldr	r2, [pc, #104]	; (80018a4 <HAL_UART_MspInit+0x90>)
 800183c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001840:	6593      	str	r3, [r2, #88]	; 0x58
 8001842:	4b18      	ldr	r3, [pc, #96]	; (80018a4 <HAL_UART_MspInit+0x90>)
 8001844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001846:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <HAL_UART_MspInit+0x90>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001852:	4a14      	ldr	r2, [pc, #80]	; (80018a4 <HAL_UART_MspInit+0x90>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800185a:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <HAL_UART_MspInit+0x90>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001866:	2303      	movs	r3, #3
 8001868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186a:	2302      	movs	r3, #2
 800186c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001872:	2303      	movs	r3, #3
 8001874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001876:	2308      	movs	r3, #8
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187a:	f107 0314 	add.w	r3, r7, #20
 800187e:	4619      	mov	r1, r3
 8001880:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001884:	f000 fa62 	bl	8001d4c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001888:	2200      	movs	r2, #0
 800188a:	2100      	movs	r1, #0
 800188c:	2034      	movs	r0, #52	; 0x34
 800188e:	f000 f9a8 	bl	8001be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001892:	2034      	movs	r0, #52	; 0x34
 8001894:	f000 f9c1 	bl	8001c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001898:	bf00      	nop
 800189a:	3728      	adds	r7, #40	; 0x28
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40004c00 	.word	0x40004c00
 80018a4:	40021000 	.word	0x40021000

080018a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018e0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018ac:	f7ff fbb4 	bl	8001018 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80018b0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80018b2:	e003      	b.n	80018bc <LoopCopyDataInit>

080018b4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80018b4:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80018b6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80018b8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80018ba:	3104      	adds	r1, #4

080018bc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80018bc:	480a      	ldr	r0, [pc, #40]	; (80018e8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80018be:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <LoopForever+0xe>)
	adds	r2, r0, r1
 80018c0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80018c2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80018c4:	d3f6      	bcc.n	80018b4 <CopyDataInit>
	ldr	r2, =_sbss
 80018c6:	4a0a      	ldr	r2, [pc, #40]	; (80018f0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80018c8:	e002      	b.n	80018d0 <LoopFillZerobss>

080018ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80018ca:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80018cc:	f842 3b04 	str.w	r3, [r2], #4

080018d0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <LoopForever+0x16>)
	cmp	r2, r3
 80018d2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80018d4:	d3f9      	bcc.n	80018ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018d6:	f002 fff7 	bl	80048c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018da:	f7ff fa36 	bl	8000d4a <main>

080018de <LoopForever>:

LoopForever:
    b LoopForever
 80018de:	e7fe      	b.n	80018de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018e0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80018e4:	08006294 	.word	0x08006294
	ldr	r0, =_sdata
 80018e8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80018ec:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80018f0:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80018f4:	200011bc 	.word	0x200011bc

080018f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018f8:	e7fe      	b.n	80018f8 <ADC1_2_IRQHandler>

080018fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001900:	2300      	movs	r3, #0
 8001902:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001904:	2003      	movs	r0, #3
 8001906:	f000 f961 	bl	8001bcc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800190a:	2000      	movs	r0, #0
 800190c:	f000 f80e 	bl	800192c <HAL_InitTick>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d002      	beq.n	800191c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	71fb      	strb	r3, [r7, #7]
 800191a:	e001      	b.n	8001920 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800191c:	f7ff fa9c 	bl	8000e58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001920:	79fb      	ldrb	r3, [r7, #7]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001934:	2300      	movs	r3, #0
 8001936:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001938:	4b17      	ldr	r3, [pc, #92]	; (8001998 <HAL_InitTick+0x6c>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d023      	beq.n	8001988 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001940:	4b16      	ldr	r3, [pc, #88]	; (800199c <HAL_InitTick+0x70>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4b14      	ldr	r3, [pc, #80]	; (8001998 <HAL_InitTick+0x6c>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	4619      	mov	r1, r3
 800194a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800194e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001952:	fbb2 f3f3 	udiv	r3, r2, r3
 8001956:	4618      	mov	r0, r3
 8001958:	f000 f96d 	bl	8001c36 <HAL_SYSTICK_Config>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d10f      	bne.n	8001982 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b0f      	cmp	r3, #15
 8001966:	d809      	bhi.n	800197c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001968:	2200      	movs	r2, #0
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	f04f 30ff 	mov.w	r0, #4294967295
 8001970:	f000 f937 	bl	8001be2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001974:	4a0a      	ldr	r2, [pc, #40]	; (80019a0 <HAL_InitTick+0x74>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	e007      	b.n	800198c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	73fb      	strb	r3, [r7, #15]
 8001980:	e004      	b.n	800198c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	73fb      	strb	r3, [r7, #15]
 8001986:	e001      	b.n	800198c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800198c:	7bfb      	ldrb	r3, [r7, #15]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000008 	.word	0x20000008
 800199c:	20000000 	.word	0x20000000
 80019a0:	20000004 	.word	0x20000004

080019a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <HAL_IncTick+0x20>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	461a      	mov	r2, r3
 80019ae:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <HAL_IncTick+0x24>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4413      	add	r3, r2
 80019b4:	4a04      	ldr	r2, [pc, #16]	; (80019c8 <HAL_IncTick+0x24>)
 80019b6:	6013      	str	r3, [r2, #0]
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	20000008 	.word	0x20000008
 80019c8:	200011a8 	.word	0x200011a8

080019cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return uwTick;
 80019d0:	4b03      	ldr	r3, [pc, #12]	; (80019e0 <HAL_GetTick+0x14>)
 80019d2:	681b      	ldr	r3, [r3, #0]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	200011a8 	.word	0x200011a8

080019e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019ec:	f7ff ffee 	bl	80019cc <HAL_GetTick>
 80019f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019fc:	d005      	beq.n	8001a0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80019fe:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <HAL_Delay+0x44>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	461a      	mov	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	4413      	add	r3, r2
 8001a08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a0a:	bf00      	nop
 8001a0c:	f7ff ffde 	bl	80019cc <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d8f7      	bhi.n	8001a0c <HAL_Delay+0x28>
  {
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	bf00      	nop
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000008 	.word	0x20000008

08001a2c <__NVIC_SetPriorityGrouping>:
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <__NVIC_SetPriorityGrouping+0x44>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a48:	4013      	ands	r3, r2
 8001a4a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a5e:	4a04      	ldr	r2, [pc, #16]	; (8001a70 <__NVIC_SetPriorityGrouping+0x44>)
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	60d3      	str	r3, [r2, #12]
}
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <__NVIC_GetPriorityGrouping>:
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a78:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <__NVIC_GetPriorityGrouping+0x18>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	0a1b      	lsrs	r3, r3, #8
 8001a7e:	f003 0307 	and.w	r3, r3, #7
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <__NVIC_EnableIRQ>:
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	db0b      	blt.n	8001aba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	f003 021f 	and.w	r2, r3, #31
 8001aa8:	4907      	ldr	r1, [pc, #28]	; (8001ac8 <__NVIC_EnableIRQ+0x38>)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	095b      	lsrs	r3, r3, #5
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	e000e100 	.word	0xe000e100

08001acc <__NVIC_SetPriority>:
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	6039      	str	r1, [r7, #0]
 8001ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	db0a      	blt.n	8001af6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	490c      	ldr	r1, [pc, #48]	; (8001b18 <__NVIC_SetPriority+0x4c>)
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	0112      	lsls	r2, r2, #4
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	440b      	add	r3, r1
 8001af0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001af4:	e00a      	b.n	8001b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	4908      	ldr	r1, [pc, #32]	; (8001b1c <__NVIC_SetPriority+0x50>)
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	3b04      	subs	r3, #4
 8001b04:	0112      	lsls	r2, r2, #4
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	440b      	add	r3, r1
 8001b0a:	761a      	strb	r2, [r3, #24]
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	e000e100 	.word	0xe000e100
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <NVIC_EncodePriority>:
{
 8001b20:	b480      	push	{r7}
 8001b22:	b089      	sub	sp, #36	; 0x24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f1c3 0307 	rsb	r3, r3, #7
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	bf28      	it	cs
 8001b3e:	2304      	movcs	r3, #4
 8001b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3304      	adds	r3, #4
 8001b46:	2b06      	cmp	r3, #6
 8001b48:	d902      	bls.n	8001b50 <NVIC_EncodePriority+0x30>
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	3b03      	subs	r3, #3
 8001b4e:	e000      	b.n	8001b52 <NVIC_EncodePriority+0x32>
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b54:	f04f 32ff 	mov.w	r2, #4294967295
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43da      	mvns	r2, r3
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	401a      	ands	r2, r3
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b68:	f04f 31ff 	mov.w	r1, #4294967295
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b72:	43d9      	mvns	r1, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b78:	4313      	orrs	r3, r2
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3724      	adds	r7, #36	; 0x24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
	...

08001b88 <SysTick_Config>:
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b98:	d301      	bcc.n	8001b9e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e00f      	b.n	8001bbe <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b9e:	4a0a      	ldr	r2, [pc, #40]	; (8001bc8 <SysTick_Config+0x40>)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ba6:	210f      	movs	r1, #15
 8001ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bac:	f7ff ff8e 	bl	8001acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bb0:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <SysTick_Config+0x40>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bb6:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <SysTick_Config+0x40>)
 8001bb8:	2207      	movs	r2, #7
 8001bba:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	e000e010 	.word	0xe000e010

08001bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f7ff ff29 	bl	8001a2c <__NVIC_SetPriorityGrouping>
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b086      	sub	sp, #24
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	4603      	mov	r3, r0
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	607a      	str	r2, [r7, #4]
 8001bee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf4:	f7ff ff3e 	bl	8001a74 <__NVIC_GetPriorityGrouping>
 8001bf8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	68b9      	ldr	r1, [r7, #8]
 8001bfe:	6978      	ldr	r0, [r7, #20]
 8001c00:	f7ff ff8e 	bl	8001b20 <NVIC_EncodePriority>
 8001c04:	4602      	mov	r2, r0
 8001c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ff5d 	bl	8001acc <__NVIC_SetPriority>
}
 8001c12:	bf00      	nop
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	4603      	mov	r3, r0
 8001c22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff ff31 	bl	8001a90 <__NVIC_EnableIRQ>
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff ffa2 	bl	8001b88 <SysTick_Config>
 8001c44:	4603      	mov	r3, r0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b085      	sub	sp, #20
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c56:	2300      	movs	r3, #0
 8001c58:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d008      	beq.n	8001c78 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2204      	movs	r2, #4
 8001c6a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e022      	b.n	8001cbe <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f022 020e 	bic.w	r2, r2, #14
 8001c86:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0201 	bic.w	r2, r2, #1
 8001c96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9c:	f003 021c 	and.w	r2, r3, #28
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8001caa:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b084      	sub	sp, #16
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d005      	beq.n	8001cee <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2204      	movs	r2, #4
 8001ce6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	73fb      	strb	r3, [r7, #15]
 8001cec:	e029      	b.n	8001d42 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 020e 	bic.w	r2, r2, #14
 8001cfc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 0201 	bic.w	r2, r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d12:	f003 021c 	and.w	r2, r3, #28
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d20:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	4798      	blx	r3
    }
  }
  return status;
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b087      	sub	sp, #28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d5a:	e17f      	b.n	800205c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	2101      	movs	r1, #1
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	fa01 f303 	lsl.w	r3, r1, r3
 8001d68:	4013      	ands	r3, r2
 8001d6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 8171 	beq.w	8002056 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d00b      	beq.n	8001d94 <HAL_GPIO_Init+0x48>
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d007      	beq.n	8001d94 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d88:	2b11      	cmp	r3, #17
 8001d8a:	d003      	beq.n	8001d94 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b12      	cmp	r3, #18
 8001d92:	d130      	bne.n	8001df6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	2203      	movs	r2, #3
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4013      	ands	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dca:	2201      	movs	r2, #1
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	091b      	lsrs	r3, r3, #4
 8001de0:	f003 0201 	and.w	r2, r3, #1
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d118      	bne.n	8001e34 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e08:	2201      	movs	r2, #1
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4013      	ands	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	08db      	lsrs	r3, r3, #3
 8001e1e:	f003 0201 	and.w	r2, r3, #1
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	2203      	movs	r2, #3
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d003      	beq.n	8001e74 <HAL_GPIO_Init+0x128>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b12      	cmp	r3, #18
 8001e72:	d123      	bne.n	8001ebc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	08da      	lsrs	r2, r3, #3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3208      	adds	r2, #8
 8001e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e80:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	220f      	movs	r2, #15
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4013      	ands	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	691a      	ldr	r2, [r3, #16]
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	08da      	lsrs	r2, r3, #3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3208      	adds	r2, #8
 8001eb6:	6939      	ldr	r1, [r7, #16]
 8001eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 0203 	and.w	r2, r3, #3
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 80ac 	beq.w	8002056 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efe:	4b5f      	ldr	r3, [pc, #380]	; (800207c <HAL_GPIO_Init+0x330>)
 8001f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f02:	4a5e      	ldr	r2, [pc, #376]	; (800207c <HAL_GPIO_Init+0x330>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6613      	str	r3, [r2, #96]	; 0x60
 8001f0a:	4b5c      	ldr	r3, [pc, #368]	; (800207c <HAL_GPIO_Init+0x330>)
 8001f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f16:	4a5a      	ldr	r2, [pc, #360]	; (8002080 <HAL_GPIO_Init+0x334>)
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	089b      	lsrs	r3, r3, #2
 8001f1c:	3302      	adds	r3, #2
 8001f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f22:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	220f      	movs	r2, #15
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4013      	ands	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f40:	d025      	beq.n	8001f8e <HAL_GPIO_Init+0x242>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a4f      	ldr	r2, [pc, #316]	; (8002084 <HAL_GPIO_Init+0x338>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d01f      	beq.n	8001f8a <HAL_GPIO_Init+0x23e>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a4e      	ldr	r2, [pc, #312]	; (8002088 <HAL_GPIO_Init+0x33c>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d019      	beq.n	8001f86 <HAL_GPIO_Init+0x23a>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a4d      	ldr	r2, [pc, #308]	; (800208c <HAL_GPIO_Init+0x340>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d013      	beq.n	8001f82 <HAL_GPIO_Init+0x236>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a4c      	ldr	r2, [pc, #304]	; (8002090 <HAL_GPIO_Init+0x344>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d00d      	beq.n	8001f7e <HAL_GPIO_Init+0x232>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a4b      	ldr	r2, [pc, #300]	; (8002094 <HAL_GPIO_Init+0x348>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d007      	beq.n	8001f7a <HAL_GPIO_Init+0x22e>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a4a      	ldr	r2, [pc, #296]	; (8002098 <HAL_GPIO_Init+0x34c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d101      	bne.n	8001f76 <HAL_GPIO_Init+0x22a>
 8001f72:	2306      	movs	r3, #6
 8001f74:	e00c      	b.n	8001f90 <HAL_GPIO_Init+0x244>
 8001f76:	2307      	movs	r3, #7
 8001f78:	e00a      	b.n	8001f90 <HAL_GPIO_Init+0x244>
 8001f7a:	2305      	movs	r3, #5
 8001f7c:	e008      	b.n	8001f90 <HAL_GPIO_Init+0x244>
 8001f7e:	2304      	movs	r3, #4
 8001f80:	e006      	b.n	8001f90 <HAL_GPIO_Init+0x244>
 8001f82:	2303      	movs	r3, #3
 8001f84:	e004      	b.n	8001f90 <HAL_GPIO_Init+0x244>
 8001f86:	2302      	movs	r3, #2
 8001f88:	e002      	b.n	8001f90 <HAL_GPIO_Init+0x244>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <HAL_GPIO_Init+0x244>
 8001f8e:	2300      	movs	r3, #0
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	f002 0203 	and.w	r2, r2, #3
 8001f96:	0092      	lsls	r2, r2, #2
 8001f98:	4093      	lsls	r3, r2
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fa0:	4937      	ldr	r1, [pc, #220]	; (8002080 <HAL_GPIO_Init+0x334>)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	089b      	lsrs	r3, r3, #2
 8001fa6:	3302      	adds	r3, #2
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001fae:	4b3b      	ldr	r3, [pc, #236]	; (800209c <HAL_GPIO_Init+0x350>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fd2:	4a32      	ldr	r2, [pc, #200]	; (800209c <HAL_GPIO_Init+0x350>)
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001fd8:	4b30      	ldr	r3, [pc, #192]	; (800209c <HAL_GPIO_Init+0x350>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ffc:	4a27      	ldr	r2, [pc, #156]	; (800209c <HAL_GPIO_Init+0x350>)
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002002:	4b26      	ldr	r3, [pc, #152]	; (800209c <HAL_GPIO_Init+0x350>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	43db      	mvns	r3, r3
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4013      	ands	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4313      	orrs	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002026:	4a1d      	ldr	r2, [pc, #116]	; (800209c <HAL_GPIO_Init+0x350>)
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800202c:	4b1b      	ldr	r3, [pc, #108]	; (800209c <HAL_GPIO_Init+0x350>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	43db      	mvns	r3, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4313      	orrs	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002050:	4a12      	ldr	r2, [pc, #72]	; (800209c <HAL_GPIO_Init+0x350>)
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	3301      	adds	r3, #1
 800205a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	fa22 f303 	lsr.w	r3, r2, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	f47f ae78 	bne.w	8001d5c <HAL_GPIO_Init+0x10>
  }
}
 800206c:	bf00      	nop
 800206e:	bf00      	nop
 8002070:	371c      	adds	r7, #28
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	40021000 	.word	0x40021000
 8002080:	40010000 	.word	0x40010000
 8002084:	48000400 	.word	0x48000400
 8002088:	48000800 	.word	0x48000800
 800208c:	48000c00 	.word	0x48000c00
 8002090:	48001000 	.word	0x48001000
 8002094:	48001400 	.word	0x48001400
 8002098:	48001800 	.word	0x48001800
 800209c:	40010400 	.word	0x40010400

080020a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80020a4:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	40007000 	.word	0x40007000

080020bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020ca:	d130      	bne.n	800212e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80020cc:	4b23      	ldr	r3, [pc, #140]	; (800215c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020d8:	d038      	beq.n	800214c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020da:	4b20      	ldr	r3, [pc, #128]	; (800215c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020e2:	4a1e      	ldr	r2, [pc, #120]	; (800215c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020ea:	4b1d      	ldr	r3, [pc, #116]	; (8002160 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2232      	movs	r2, #50	; 0x32
 80020f0:	fb02 f303 	mul.w	r3, r2, r3
 80020f4:	4a1b      	ldr	r2, [pc, #108]	; (8002164 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80020f6:	fba2 2303 	umull	r2, r3, r2, r3
 80020fa:	0c9b      	lsrs	r3, r3, #18
 80020fc:	3301      	adds	r3, #1
 80020fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002100:	e002      	b.n	8002108 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	3b01      	subs	r3, #1
 8002106:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002108:	4b14      	ldr	r3, [pc, #80]	; (800215c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002114:	d102      	bne.n	800211c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1f2      	bne.n	8002102 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800211c:	4b0f      	ldr	r3, [pc, #60]	; (800215c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002128:	d110      	bne.n	800214c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e00f      	b.n	800214e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800212e:	4b0b      	ldr	r3, [pc, #44]	; (800215c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800213a:	d007      	beq.n	800214c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800213c:	4b07      	ldr	r3, [pc, #28]	; (800215c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002144:	4a05      	ldr	r2, [pc, #20]	; (800215c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002146:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800214a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	40007000 	.word	0x40007000
 8002160:	20000000 	.word	0x20000000
 8002164:	431bde83 	.word	0x431bde83

08002168 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b088      	sub	sp, #32
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e3d4      	b.n	8002924 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800217a:	4ba1      	ldr	r3, [pc, #644]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 030c 	and.w	r3, r3, #12
 8002182:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002184:	4b9e      	ldr	r3, [pc, #632]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f003 0303 	and.w	r3, r3, #3
 800218c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0310 	and.w	r3, r3, #16
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 80e4 	beq.w	8002364 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d007      	beq.n	80021b2 <HAL_RCC_OscConfig+0x4a>
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	2b0c      	cmp	r3, #12
 80021a6:	f040 808b 	bne.w	80022c0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	f040 8087 	bne.w	80022c0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021b2:	4b93      	ldr	r3, [pc, #588]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d005      	beq.n	80021ca <HAL_RCC_OscConfig+0x62>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e3ac      	b.n	8002924 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a1a      	ldr	r2, [r3, #32]
 80021ce:	4b8c      	ldr	r3, [pc, #560]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d004      	beq.n	80021e4 <HAL_RCC_OscConfig+0x7c>
 80021da:	4b89      	ldr	r3, [pc, #548]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021e2:	e005      	b.n	80021f0 <HAL_RCC_OscConfig+0x88>
 80021e4:	4b86      	ldr	r3, [pc, #536]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 80021e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ea:	091b      	lsrs	r3, r3, #4
 80021ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d223      	bcs.n	800223c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f000 fd41 	bl	8002c80 <RCC_SetFlashLatencyFromMSIRange>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e38d      	b.n	8002924 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002208:	4b7d      	ldr	r3, [pc, #500]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a7c      	ldr	r2, [pc, #496]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 800220e:	f043 0308 	orr.w	r3, r3, #8
 8002212:	6013      	str	r3, [r2, #0]
 8002214:	4b7a      	ldr	r3, [pc, #488]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	4977      	ldr	r1, [pc, #476]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 8002222:	4313      	orrs	r3, r2
 8002224:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002226:	4b76      	ldr	r3, [pc, #472]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	021b      	lsls	r3, r3, #8
 8002234:	4972      	ldr	r1, [pc, #456]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 8002236:	4313      	orrs	r3, r2
 8002238:	604b      	str	r3, [r1, #4]
 800223a:	e025      	b.n	8002288 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800223c:	4b70      	ldr	r3, [pc, #448]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a6f      	ldr	r2, [pc, #444]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 8002242:	f043 0308 	orr.w	r3, r3, #8
 8002246:	6013      	str	r3, [r2, #0]
 8002248:	4b6d      	ldr	r3, [pc, #436]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	496a      	ldr	r1, [pc, #424]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 8002256:	4313      	orrs	r3, r2
 8002258:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800225a:	4b69      	ldr	r3, [pc, #420]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	021b      	lsls	r3, r3, #8
 8002268:	4965      	ldr	r1, [pc, #404]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 800226a:	4313      	orrs	r3, r2
 800226c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d109      	bne.n	8002288 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	4618      	mov	r0, r3
 800227a:	f000 fd01 	bl	8002c80 <RCC_SetFlashLatencyFromMSIRange>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e34d      	b.n	8002924 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002288:	f000 fc36 	bl	8002af8 <HAL_RCC_GetSysClockFreq>
 800228c:	4602      	mov	r2, r0
 800228e:	4b5c      	ldr	r3, [pc, #368]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	091b      	lsrs	r3, r3, #4
 8002294:	f003 030f 	and.w	r3, r3, #15
 8002298:	495a      	ldr	r1, [pc, #360]	; (8002404 <HAL_RCC_OscConfig+0x29c>)
 800229a:	5ccb      	ldrb	r3, [r1, r3]
 800229c:	f003 031f 	and.w	r3, r3, #31
 80022a0:	fa22 f303 	lsr.w	r3, r2, r3
 80022a4:	4a58      	ldr	r2, [pc, #352]	; (8002408 <HAL_RCC_OscConfig+0x2a0>)
 80022a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80022a8:	4b58      	ldr	r3, [pc, #352]	; (800240c <HAL_RCC_OscConfig+0x2a4>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff fb3d 	bl	800192c <HAL_InitTick>
 80022b2:	4603      	mov	r3, r0
 80022b4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d052      	beq.n	8002362 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80022bc:	7bfb      	ldrb	r3, [r7, #15]
 80022be:	e331      	b.n	8002924 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d032      	beq.n	800232e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022c8:	4b4d      	ldr	r3, [pc, #308]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a4c      	ldr	r2, [pc, #304]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022d4:	f7ff fb7a 	bl	80019cc <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022dc:	f7ff fb76 	bl	80019cc <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e31a      	b.n	8002924 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022ee:	4b44      	ldr	r3, [pc, #272]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022fa:	4b41      	ldr	r3, [pc, #260]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a40      	ldr	r2, [pc, #256]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 8002300:	f043 0308 	orr.w	r3, r3, #8
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	4b3e      	ldr	r3, [pc, #248]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	493b      	ldr	r1, [pc, #236]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 8002314:	4313      	orrs	r3, r2
 8002316:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002318:	4b39      	ldr	r3, [pc, #228]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	021b      	lsls	r3, r3, #8
 8002326:	4936      	ldr	r1, [pc, #216]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 8002328:	4313      	orrs	r3, r2
 800232a:	604b      	str	r3, [r1, #4]
 800232c:	e01a      	b.n	8002364 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800232e:	4b34      	ldr	r3, [pc, #208]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a33      	ldr	r2, [pc, #204]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 8002334:	f023 0301 	bic.w	r3, r3, #1
 8002338:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800233a:	f7ff fb47 	bl	80019cc <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002342:	f7ff fb43 	bl	80019cc <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e2e7      	b.n	8002924 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002354:	4b2a      	ldr	r3, [pc, #168]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1f0      	bne.n	8002342 <HAL_RCC_OscConfig+0x1da>
 8002360:	e000      	b.n	8002364 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002362:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	2b00      	cmp	r3, #0
 800236e:	d074      	beq.n	800245a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	2b08      	cmp	r3, #8
 8002374:	d005      	beq.n	8002382 <HAL_RCC_OscConfig+0x21a>
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	2b0c      	cmp	r3, #12
 800237a:	d10e      	bne.n	800239a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	2b03      	cmp	r3, #3
 8002380:	d10b      	bne.n	800239a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002382:	4b1f      	ldr	r3, [pc, #124]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d064      	beq.n	8002458 <HAL_RCC_OscConfig+0x2f0>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d160      	bne.n	8002458 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e2c4      	b.n	8002924 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a2:	d106      	bne.n	80023b2 <HAL_RCC_OscConfig+0x24a>
 80023a4:	4b16      	ldr	r3, [pc, #88]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a15      	ldr	r2, [pc, #84]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 80023aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ae:	6013      	str	r3, [r2, #0]
 80023b0:	e01d      	b.n	80023ee <HAL_RCC_OscConfig+0x286>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023ba:	d10c      	bne.n	80023d6 <HAL_RCC_OscConfig+0x26e>
 80023bc:	4b10      	ldr	r3, [pc, #64]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a0f      	ldr	r2, [pc, #60]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 80023c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c6:	6013      	str	r3, [r2, #0]
 80023c8:	4b0d      	ldr	r3, [pc, #52]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a0c      	ldr	r2, [pc, #48]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 80023ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d2:	6013      	str	r3, [r2, #0]
 80023d4:	e00b      	b.n	80023ee <HAL_RCC_OscConfig+0x286>
 80023d6:	4b0a      	ldr	r3, [pc, #40]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a09      	ldr	r2, [pc, #36]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 80023dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	4b07      	ldr	r3, [pc, #28]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a06      	ldr	r2, [pc, #24]	; (8002400 <HAL_RCC_OscConfig+0x298>)
 80023e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d01c      	beq.n	8002430 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f6:	f7ff fae9 	bl	80019cc <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023fc:	e011      	b.n	8002422 <HAL_RCC_OscConfig+0x2ba>
 80023fe:	bf00      	nop
 8002400:	40021000 	.word	0x40021000
 8002404:	080060cc 	.word	0x080060cc
 8002408:	20000000 	.word	0x20000000
 800240c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002410:	f7ff fadc 	bl	80019cc <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b64      	cmp	r3, #100	; 0x64
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e280      	b.n	8002924 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002422:	4baf      	ldr	r3, [pc, #700]	; (80026e0 <HAL_RCC_OscConfig+0x578>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0f0      	beq.n	8002410 <HAL_RCC_OscConfig+0x2a8>
 800242e:	e014      	b.n	800245a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002430:	f7ff facc 	bl	80019cc <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002438:	f7ff fac8 	bl	80019cc <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b64      	cmp	r3, #100	; 0x64
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e26c      	b.n	8002924 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800244a:	4ba5      	ldr	r3, [pc, #660]	; (80026e0 <HAL_RCC_OscConfig+0x578>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1f0      	bne.n	8002438 <HAL_RCC_OscConfig+0x2d0>
 8002456:	e000      	b.n	800245a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d060      	beq.n	8002528 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	2b04      	cmp	r3, #4
 800246a:	d005      	beq.n	8002478 <HAL_RCC_OscConfig+0x310>
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	2b0c      	cmp	r3, #12
 8002470:	d119      	bne.n	80024a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	2b02      	cmp	r3, #2
 8002476:	d116      	bne.n	80024a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002478:	4b99      	ldr	r3, [pc, #612]	; (80026e0 <HAL_RCC_OscConfig+0x578>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002480:	2b00      	cmp	r3, #0
 8002482:	d005      	beq.n	8002490 <HAL_RCC_OscConfig+0x328>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e249      	b.n	8002924 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002490:	4b93      	ldr	r3, [pc, #588]	; (80026e0 <HAL_RCC_OscConfig+0x578>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	061b      	lsls	r3, r3, #24
 800249e:	4990      	ldr	r1, [pc, #576]	; (80026e0 <HAL_RCC_OscConfig+0x578>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024a4:	e040      	b.n	8002528 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d023      	beq.n	80024f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024ae:	4b8c      	ldr	r3, [pc, #560]	; (80026e0 <HAL_RCC_OscConfig+0x578>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a8b      	ldr	r2, [pc, #556]	; (80026e0 <HAL_RCC_OscConfig+0x578>)
 80024b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ba:	f7ff fa87 	bl	80019cc <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024c2:	f7ff fa83 	bl	80019cc <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e227      	b.n	8002924 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024d4:	4b82      	ldr	r3, [pc, #520]	; (80026e0 <HAL_RCC_OscConfig+0x578>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0f0      	beq.n	80024c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e0:	4b7f      	ldr	r3, [pc, #508]	; (80026e0 <HAL_RCC_OscConfig+0x578>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	061b      	lsls	r3, r3, #24
 80024ee:	497c      	ldr	r1, [pc, #496]	; (80026e0 <HAL_RCC_OscConfig+0x578>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	604b      	str	r3, [r1, #4]
 80024f4:	e018      	b.n	8002528 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024f6:	4b7a      	ldr	r3, [pc, #488]	; (80026e0 <HAL_RCC_OscConfig+0x578>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a79      	ldr	r2, [pc, #484]	; (80026e0 <HAL_RCC_OscConfig+0x578>)
 80024fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002502:	f7ff fa63 	bl	80019cc <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800250a:	f7ff fa5f 	bl	80019cc <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e203      	b.n	8002924 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800251c:	4b70      	ldr	r3, [pc, #448]	; (80026e0 <HAL_RCC_OscConfig+0x578>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1f0      	bne.n	800250a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0308 	and.w	r3, r3, #8
 8002530:	2b00      	cmp	r3, #0
 8002532:	d03c      	beq.n	80025ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d01c      	beq.n	8002576 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800253c:	4b68      	ldr	r3, [pc, #416]	; (80026e0 <HAL_RCC_OscConfig+0x578>)
 800253e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002542:	4a67      	ldr	r2, [pc, #412]	; (80026e0 <HAL_RCC_OscConfig+0x578>)
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254c:	f7ff fa3e 	bl	80019cc <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002554:	f7ff fa3a 	bl	80019cc <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e1de      	b.n	8002924 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002566:	4b5e      	ldr	r3, [pc, #376]	; (80026e0 <HAL_RCC_OscConfig+0x578>)
 8002568:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0ef      	beq.n	8002554 <HAL_RCC_OscConfig+0x3ec>
 8002574:	e01b      	b.n	80025ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002576:	4b5a      	ldr	r3, [pc, #360]	; (80026e0 <HAL_RCC_OscConfig+0x578>)
 8002578:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800257c:	4a58      	ldr	r2, [pc, #352]	; (80026e0 <HAL_RCC_OscConfig+0x578>)
 800257e:	f023 0301 	bic.w	r3, r3, #1
 8002582:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002586:	f7ff fa21 	bl	80019cc <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800258e:	f7ff fa1d 	bl	80019cc <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e1c1      	b.n	8002924 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025a0:	4b4f      	ldr	r3, [pc, #316]	; (80026e0 <HAL_RCC_OscConfig+0x578>)
 80025a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1ef      	bne.n	800258e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0304 	and.w	r3, r3, #4
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 80a6 	beq.w	8002708 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025bc:	2300      	movs	r3, #0
 80025be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80025c0:	4b47      	ldr	r3, [pc, #284]	; (80026e0 <HAL_RCC_OscConfig+0x578>)
 80025c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10d      	bne.n	80025e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025cc:	4b44      	ldr	r3, [pc, #272]	; (80026e0 <HAL_RCC_OscConfig+0x578>)
 80025ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d0:	4a43      	ldr	r2, [pc, #268]	; (80026e0 <HAL_RCC_OscConfig+0x578>)
 80025d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d6:	6593      	str	r3, [r2, #88]	; 0x58
 80025d8:	4b41      	ldr	r3, [pc, #260]	; (80026e0 <HAL_RCC_OscConfig+0x578>)
 80025da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025e4:	2301      	movs	r3, #1
 80025e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025e8:	4b3e      	ldr	r3, [pc, #248]	; (80026e4 <HAL_RCC_OscConfig+0x57c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d118      	bne.n	8002626 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025f4:	4b3b      	ldr	r3, [pc, #236]	; (80026e4 <HAL_RCC_OscConfig+0x57c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a3a      	ldr	r2, [pc, #232]	; (80026e4 <HAL_RCC_OscConfig+0x57c>)
 80025fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002600:	f7ff f9e4 	bl	80019cc <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002608:	f7ff f9e0 	bl	80019cc <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e184      	b.n	8002924 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800261a:	4b32      	ldr	r3, [pc, #200]	; (80026e4 <HAL_RCC_OscConfig+0x57c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002622:	2b00      	cmp	r3, #0
 8002624:	d0f0      	beq.n	8002608 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d108      	bne.n	8002640 <HAL_RCC_OscConfig+0x4d8>
 800262e:	4b2c      	ldr	r3, [pc, #176]	; (80026e0 <HAL_RCC_OscConfig+0x578>)
 8002630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002634:	4a2a      	ldr	r2, [pc, #168]	; (80026e0 <HAL_RCC_OscConfig+0x578>)
 8002636:	f043 0301 	orr.w	r3, r3, #1
 800263a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800263e:	e024      	b.n	800268a <HAL_RCC_OscConfig+0x522>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	2b05      	cmp	r3, #5
 8002646:	d110      	bne.n	800266a <HAL_RCC_OscConfig+0x502>
 8002648:	4b25      	ldr	r3, [pc, #148]	; (80026e0 <HAL_RCC_OscConfig+0x578>)
 800264a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264e:	4a24      	ldr	r2, [pc, #144]	; (80026e0 <HAL_RCC_OscConfig+0x578>)
 8002650:	f043 0304 	orr.w	r3, r3, #4
 8002654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002658:	4b21      	ldr	r3, [pc, #132]	; (80026e0 <HAL_RCC_OscConfig+0x578>)
 800265a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265e:	4a20      	ldr	r2, [pc, #128]	; (80026e0 <HAL_RCC_OscConfig+0x578>)
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002668:	e00f      	b.n	800268a <HAL_RCC_OscConfig+0x522>
 800266a:	4b1d      	ldr	r3, [pc, #116]	; (80026e0 <HAL_RCC_OscConfig+0x578>)
 800266c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002670:	4a1b      	ldr	r2, [pc, #108]	; (80026e0 <HAL_RCC_OscConfig+0x578>)
 8002672:	f023 0301 	bic.w	r3, r3, #1
 8002676:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800267a:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <HAL_RCC_OscConfig+0x578>)
 800267c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002680:	4a17      	ldr	r2, [pc, #92]	; (80026e0 <HAL_RCC_OscConfig+0x578>)
 8002682:	f023 0304 	bic.w	r3, r3, #4
 8002686:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d016      	beq.n	80026c0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002692:	f7ff f99b 	bl	80019cc <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002698:	e00a      	b.n	80026b0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800269a:	f7ff f997 	bl	80019cc <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e139      	b.n	8002924 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026b0:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <HAL_RCC_OscConfig+0x578>)
 80026b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0ed      	beq.n	800269a <HAL_RCC_OscConfig+0x532>
 80026be:	e01a      	b.n	80026f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c0:	f7ff f984 	bl	80019cc <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026c6:	e00f      	b.n	80026e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c8:	f7ff f980 	bl	80019cc <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d906      	bls.n	80026e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e122      	b.n	8002924 <HAL_RCC_OscConfig+0x7bc>
 80026de:	bf00      	nop
 80026e0:	40021000 	.word	0x40021000
 80026e4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026e8:	4b90      	ldr	r3, [pc, #576]	; (800292c <HAL_RCC_OscConfig+0x7c4>)
 80026ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1e8      	bne.n	80026c8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026f6:	7ffb      	ldrb	r3, [r7, #31]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d105      	bne.n	8002708 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026fc:	4b8b      	ldr	r3, [pc, #556]	; (800292c <HAL_RCC_OscConfig+0x7c4>)
 80026fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002700:	4a8a      	ldr	r2, [pc, #552]	; (800292c <HAL_RCC_OscConfig+0x7c4>)
 8002702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002706:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 8108 	beq.w	8002922 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002716:	2b02      	cmp	r3, #2
 8002718:	f040 80d0 	bne.w	80028bc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800271c:	4b83      	ldr	r3, [pc, #524]	; (800292c <HAL_RCC_OscConfig+0x7c4>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f003 0203 	and.w	r2, r3, #3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272c:	429a      	cmp	r2, r3
 800272e:	d130      	bne.n	8002792 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	3b01      	subs	r3, #1
 800273c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800273e:	429a      	cmp	r2, r3
 8002740:	d127      	bne.n	8002792 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800274c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800274e:	429a      	cmp	r2, r3
 8002750:	d11f      	bne.n	8002792 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800275c:	2a07      	cmp	r2, #7
 800275e:	bf14      	ite	ne
 8002760:	2201      	movne	r2, #1
 8002762:	2200      	moveq	r2, #0
 8002764:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002766:	4293      	cmp	r3, r2
 8002768:	d113      	bne.n	8002792 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002774:	085b      	lsrs	r3, r3, #1
 8002776:	3b01      	subs	r3, #1
 8002778:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800277a:	429a      	cmp	r2, r3
 800277c:	d109      	bne.n	8002792 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	085b      	lsrs	r3, r3, #1
 800278a:	3b01      	subs	r3, #1
 800278c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800278e:	429a      	cmp	r2, r3
 8002790:	d06e      	beq.n	8002870 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	2b0c      	cmp	r3, #12
 8002796:	d069      	beq.n	800286c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002798:	4b64      	ldr	r3, [pc, #400]	; (800292c <HAL_RCC_OscConfig+0x7c4>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d105      	bne.n	80027b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80027a4:	4b61      	ldr	r3, [pc, #388]	; (800292c <HAL_RCC_OscConfig+0x7c4>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e0b7      	b.n	8002924 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80027b4:	4b5d      	ldr	r3, [pc, #372]	; (800292c <HAL_RCC_OscConfig+0x7c4>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a5c      	ldr	r2, [pc, #368]	; (800292c <HAL_RCC_OscConfig+0x7c4>)
 80027ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027c0:	f7ff f904 	bl	80019cc <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c8:	f7ff f900 	bl	80019cc <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e0a4      	b.n	8002924 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027da:	4b54      	ldr	r3, [pc, #336]	; (800292c <HAL_RCC_OscConfig+0x7c4>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1f0      	bne.n	80027c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027e6:	4b51      	ldr	r3, [pc, #324]	; (800292c <HAL_RCC_OscConfig+0x7c4>)
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	4b51      	ldr	r3, [pc, #324]	; (8002930 <HAL_RCC_OscConfig+0x7c8>)
 80027ec:	4013      	ands	r3, r2
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80027f6:	3a01      	subs	r2, #1
 80027f8:	0112      	lsls	r2, r2, #4
 80027fa:	4311      	orrs	r1, r2
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002800:	0212      	lsls	r2, r2, #8
 8002802:	4311      	orrs	r1, r2
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002808:	0852      	lsrs	r2, r2, #1
 800280a:	3a01      	subs	r2, #1
 800280c:	0552      	lsls	r2, r2, #21
 800280e:	4311      	orrs	r1, r2
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002814:	0852      	lsrs	r2, r2, #1
 8002816:	3a01      	subs	r2, #1
 8002818:	0652      	lsls	r2, r2, #25
 800281a:	4311      	orrs	r1, r2
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002820:	0912      	lsrs	r2, r2, #4
 8002822:	0452      	lsls	r2, r2, #17
 8002824:	430a      	orrs	r2, r1
 8002826:	4941      	ldr	r1, [pc, #260]	; (800292c <HAL_RCC_OscConfig+0x7c4>)
 8002828:	4313      	orrs	r3, r2
 800282a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800282c:	4b3f      	ldr	r3, [pc, #252]	; (800292c <HAL_RCC_OscConfig+0x7c4>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a3e      	ldr	r2, [pc, #248]	; (800292c <HAL_RCC_OscConfig+0x7c4>)
 8002832:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002836:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002838:	4b3c      	ldr	r3, [pc, #240]	; (800292c <HAL_RCC_OscConfig+0x7c4>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	4a3b      	ldr	r2, [pc, #236]	; (800292c <HAL_RCC_OscConfig+0x7c4>)
 800283e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002842:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002844:	f7ff f8c2 	bl	80019cc <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800284c:	f7ff f8be 	bl	80019cc <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e062      	b.n	8002924 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800285e:	4b33      	ldr	r3, [pc, #204]	; (800292c <HAL_RCC_OscConfig+0x7c4>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800286a:	e05a      	b.n	8002922 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e059      	b.n	8002924 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002870:	4b2e      	ldr	r3, [pc, #184]	; (800292c <HAL_RCC_OscConfig+0x7c4>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d152      	bne.n	8002922 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800287c:	4b2b      	ldr	r3, [pc, #172]	; (800292c <HAL_RCC_OscConfig+0x7c4>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a2a      	ldr	r2, [pc, #168]	; (800292c <HAL_RCC_OscConfig+0x7c4>)
 8002882:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002886:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002888:	4b28      	ldr	r3, [pc, #160]	; (800292c <HAL_RCC_OscConfig+0x7c4>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	4a27      	ldr	r2, [pc, #156]	; (800292c <HAL_RCC_OscConfig+0x7c4>)
 800288e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002892:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002894:	f7ff f89a 	bl	80019cc <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800289c:	f7ff f896 	bl	80019cc <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e03a      	b.n	8002924 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ae:	4b1f      	ldr	r3, [pc, #124]	; (800292c <HAL_RCC_OscConfig+0x7c4>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0f0      	beq.n	800289c <HAL_RCC_OscConfig+0x734>
 80028ba:	e032      	b.n	8002922 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	2b0c      	cmp	r3, #12
 80028c0:	d02d      	beq.n	800291e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c2:	4b1a      	ldr	r3, [pc, #104]	; (800292c <HAL_RCC_OscConfig+0x7c4>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a19      	ldr	r2, [pc, #100]	; (800292c <HAL_RCC_OscConfig+0x7c4>)
 80028c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028cc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80028ce:	4b17      	ldr	r3, [pc, #92]	; (800292c <HAL_RCC_OscConfig+0x7c4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d105      	bne.n	80028e6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80028da:	4b14      	ldr	r3, [pc, #80]	; (800292c <HAL_RCC_OscConfig+0x7c4>)
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	4a13      	ldr	r2, [pc, #76]	; (800292c <HAL_RCC_OscConfig+0x7c4>)
 80028e0:	f023 0303 	bic.w	r3, r3, #3
 80028e4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80028e6:	4b11      	ldr	r3, [pc, #68]	; (800292c <HAL_RCC_OscConfig+0x7c4>)
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	4a10      	ldr	r2, [pc, #64]	; (800292c <HAL_RCC_OscConfig+0x7c4>)
 80028ec:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80028f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f6:	f7ff f869 	bl	80019cc <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028fe:	f7ff f865 	bl	80019cc <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e009      	b.n	8002924 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002910:	4b06      	ldr	r3, [pc, #24]	; (800292c <HAL_RCC_OscConfig+0x7c4>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1f0      	bne.n	80028fe <HAL_RCC_OscConfig+0x796>
 800291c:	e001      	b.n	8002922 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3720      	adds	r7, #32
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40021000 	.word	0x40021000
 8002930:	f99d808c 	.word	0xf99d808c

08002934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0c8      	b.n	8002ada <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002948:	4b66      	ldr	r3, [pc, #408]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b0>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d910      	bls.n	8002978 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002956:	4b63      	ldr	r3, [pc, #396]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b0>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f023 0207 	bic.w	r2, r3, #7
 800295e:	4961      	ldr	r1, [pc, #388]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b0>)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	4313      	orrs	r3, r2
 8002964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002966:	4b5f      	ldr	r3, [pc, #380]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b0>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	429a      	cmp	r2, r3
 8002972:	d001      	beq.n	8002978 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e0b0      	b.n	8002ada <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b00      	cmp	r3, #0
 8002982:	d04c      	beq.n	8002a1e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b03      	cmp	r3, #3
 800298a:	d107      	bne.n	800299c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800298c:	4b56      	ldr	r3, [pc, #344]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b4>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d121      	bne.n	80029dc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e09e      	b.n	8002ada <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d107      	bne.n	80029b4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029a4:	4b50      	ldr	r3, [pc, #320]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b4>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d115      	bne.n	80029dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e092      	b.n	8002ada <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d107      	bne.n	80029cc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029bc:	4b4a      	ldr	r3, [pc, #296]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b4>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d109      	bne.n	80029dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e086      	b.n	8002ada <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029cc:	4b46      	ldr	r3, [pc, #280]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b4>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e07e      	b.n	8002ada <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029dc:	4b42      	ldr	r3, [pc, #264]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b4>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f023 0203 	bic.w	r2, r3, #3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	493f      	ldr	r1, [pc, #252]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b4>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ee:	f7fe ffed 	bl	80019cc <HAL_GetTick>
 80029f2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f4:	e00a      	b.n	8002a0c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f6:	f7fe ffe9 	bl	80019cc <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e066      	b.n	8002ada <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0c:	4b36      	ldr	r3, [pc, #216]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b4>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 020c 	and.w	r2, r3, #12
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d1eb      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d008      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a2a:	4b2f      	ldr	r3, [pc, #188]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b4>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	492c      	ldr	r1, [pc, #176]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b4>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a3c:	4b29      	ldr	r3, [pc, #164]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b0>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d210      	bcs.n	8002a6c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4a:	4b26      	ldr	r3, [pc, #152]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b0>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f023 0207 	bic.w	r2, r3, #7
 8002a52:	4924      	ldr	r1, [pc, #144]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b0>)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5a:	4b22      	ldr	r3, [pc, #136]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b0>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d001      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e036      	b.n	8002ada <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a78:	4b1b      	ldr	r3, [pc, #108]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b4>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	4918      	ldr	r1, [pc, #96]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b4>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d009      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a96:	4b14      	ldr	r3, [pc, #80]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b4>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	4910      	ldr	r1, [pc, #64]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b4>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002aaa:	f000 f825 	bl	8002af8 <HAL_RCC_GetSysClockFreq>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	4b0d      	ldr	r3, [pc, #52]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b4>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	091b      	lsrs	r3, r3, #4
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	490c      	ldr	r1, [pc, #48]	; (8002aec <HAL_RCC_ClockConfig+0x1b8>)
 8002abc:	5ccb      	ldrb	r3, [r1, r3]
 8002abe:	f003 031f 	and.w	r3, r3, #31
 8002ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac6:	4a0a      	ldr	r2, [pc, #40]	; (8002af0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002aca:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <HAL_RCC_ClockConfig+0x1c0>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fe ff2c 	bl	800192c <HAL_InitTick>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ad8:	7afb      	ldrb	r3, [r7, #11]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40022000 	.word	0x40022000
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	080060cc 	.word	0x080060cc
 8002af0:	20000000 	.word	0x20000000
 8002af4:	20000004 	.word	0x20000004

08002af8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b089      	sub	sp, #36	; 0x24
 8002afc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002afe:	2300      	movs	r3, #0
 8002b00:	61fb      	str	r3, [r7, #28]
 8002b02:	2300      	movs	r3, #0
 8002b04:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b06:	4b3e      	ldr	r3, [pc, #248]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
 8002b0e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b10:	4b3b      	ldr	r3, [pc, #236]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f003 0303 	and.w	r3, r3, #3
 8002b18:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_RCC_GetSysClockFreq+0x34>
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	2b0c      	cmp	r3, #12
 8002b24:	d121      	bne.n	8002b6a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d11e      	bne.n	8002b6a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b2c:	4b34      	ldr	r3, [pc, #208]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d107      	bne.n	8002b48 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b38:	4b31      	ldr	r3, [pc, #196]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b3e:	0a1b      	lsrs	r3, r3, #8
 8002b40:	f003 030f 	and.w	r3, r3, #15
 8002b44:	61fb      	str	r3, [r7, #28]
 8002b46:	e005      	b.n	8002b54 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b48:	4b2d      	ldr	r3, [pc, #180]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	091b      	lsrs	r3, r3, #4
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b54:	4a2b      	ldr	r2, [pc, #172]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b5c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10d      	bne.n	8002b80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b68:	e00a      	b.n	8002b80 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	2b04      	cmp	r3, #4
 8002b6e:	d102      	bne.n	8002b76 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b70:	4b25      	ldr	r3, [pc, #148]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b72:	61bb      	str	r3, [r7, #24]
 8002b74:	e004      	b.n	8002b80 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	d101      	bne.n	8002b80 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b7c:	4b23      	ldr	r3, [pc, #140]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x114>)
 8002b7e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	2b0c      	cmp	r3, #12
 8002b84:	d134      	bne.n	8002bf0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b86:	4b1e      	ldr	r3, [pc, #120]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d003      	beq.n	8002b9e <HAL_RCC_GetSysClockFreq+0xa6>
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d003      	beq.n	8002ba4 <HAL_RCC_GetSysClockFreq+0xac>
 8002b9c:	e005      	b.n	8002baa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b9e:	4b1a      	ldr	r3, [pc, #104]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ba0:	617b      	str	r3, [r7, #20]
      break;
 8002ba2:	e005      	b.n	8002bb0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ba4:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x114>)
 8002ba6:	617b      	str	r3, [r7, #20]
      break;
 8002ba8:	e002      	b.n	8002bb0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	617b      	str	r3, [r7, #20]
      break;
 8002bae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bb0:	4b13      	ldr	r3, [pc, #76]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	091b      	lsrs	r3, r3, #4
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	3301      	adds	r3, #1
 8002bbc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002bbe:	4b10      	ldr	r3, [pc, #64]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	0a1b      	lsrs	r3, r3, #8
 8002bc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	fb02 f203 	mul.w	r2, r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bd6:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	0e5b      	lsrs	r3, r3, #25
 8002bdc:	f003 0303 	and.w	r3, r3, #3
 8002be0:	3301      	adds	r3, #1
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002bf0:	69bb      	ldr	r3, [r7, #24]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3724      	adds	r7, #36	; 0x24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	40021000 	.word	0x40021000
 8002c04:	080060e4 	.word	0x080060e4
 8002c08:	00f42400 	.word	0x00f42400
 8002c0c:	02dc6c00 	.word	0x02dc6c00

08002c10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c14:	4b03      	ldr	r3, [pc, #12]	; (8002c24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c16:	681b      	ldr	r3, [r3, #0]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	20000000 	.word	0x20000000

08002c28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c2c:	f7ff fff0 	bl	8002c10 <HAL_RCC_GetHCLKFreq>
 8002c30:	4602      	mov	r2, r0
 8002c32:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	0a1b      	lsrs	r3, r3, #8
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	4904      	ldr	r1, [pc, #16]	; (8002c50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c3e:	5ccb      	ldrb	r3, [r1, r3]
 8002c40:	f003 031f 	and.w	r3, r3, #31
 8002c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	080060dc 	.word	0x080060dc

08002c54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c58:	f7ff ffda 	bl	8002c10 <HAL_RCC_GetHCLKFreq>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	0adb      	lsrs	r3, r3, #11
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	4904      	ldr	r1, [pc, #16]	; (8002c7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c6a:	5ccb      	ldrb	r3, [r1, r3]
 8002c6c:	f003 031f 	and.w	r3, r3, #31
 8002c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	080060dc 	.word	0x080060dc

08002c80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c88:	2300      	movs	r3, #0
 8002c8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c8c:	4b2a      	ldr	r3, [pc, #168]	; (8002d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c98:	f7ff fa02 	bl	80020a0 <HAL_PWREx_GetVoltageRange>
 8002c9c:	6178      	str	r0, [r7, #20]
 8002c9e:	e014      	b.n	8002cca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ca0:	4b25      	ldr	r3, [pc, #148]	; (8002d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca4:	4a24      	ldr	r2, [pc, #144]	; (8002d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002caa:	6593      	str	r3, [r2, #88]	; 0x58
 8002cac:	4b22      	ldr	r3, [pc, #136]	; (8002d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002cb8:	f7ff f9f2 	bl	80020a0 <HAL_PWREx_GetVoltageRange>
 8002cbc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002cbe:	4b1e      	ldr	r3, [pc, #120]	; (8002d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc2:	4a1d      	ldr	r2, [pc, #116]	; (8002d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cc8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cd0:	d10b      	bne.n	8002cea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b80      	cmp	r3, #128	; 0x80
 8002cd6:	d919      	bls.n	8002d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2ba0      	cmp	r3, #160	; 0xa0
 8002cdc:	d902      	bls.n	8002ce4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cde:	2302      	movs	r3, #2
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	e013      	b.n	8002d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	613b      	str	r3, [r7, #16]
 8002ce8:	e010      	b.n	8002d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b80      	cmp	r3, #128	; 0x80
 8002cee:	d902      	bls.n	8002cf6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	613b      	str	r3, [r7, #16]
 8002cf4:	e00a      	b.n	8002d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b80      	cmp	r3, #128	; 0x80
 8002cfa:	d102      	bne.n	8002d02 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	613b      	str	r3, [r7, #16]
 8002d00:	e004      	b.n	8002d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b70      	cmp	r3, #112	; 0x70
 8002d06:	d101      	bne.n	8002d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d08:	2301      	movs	r3, #1
 8002d0a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f023 0207 	bic.w	r2, r3, #7
 8002d14:	4909      	ldr	r1, [pc, #36]	; (8002d3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d1c:	4b07      	ldr	r3, [pc, #28]	; (8002d3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d001      	beq.n	8002d2e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e000      	b.n	8002d30 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3718      	adds	r7, #24
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	40022000 	.word	0x40022000

08002d40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d48:	2300      	movs	r3, #0
 8002d4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d041      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d60:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d64:	d02a      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002d66:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d6a:	d824      	bhi.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d70:	d008      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d76:	d81e      	bhi.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00a      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002d7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d80:	d010      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d82:	e018      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d84:	4b86      	ldr	r3, [pc, #536]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	4a85      	ldr	r2, [pc, #532]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d8e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d90:	e015      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	3304      	adds	r3, #4
 8002d96:	2100      	movs	r1, #0
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f000 fabb 	bl	8003314 <RCCEx_PLLSAI1_Config>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002da2:	e00c      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3320      	adds	r3, #32
 8002da8:	2100      	movs	r1, #0
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 fba6 	bl	80034fc <RCCEx_PLLSAI2_Config>
 8002db0:	4603      	mov	r3, r0
 8002db2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002db4:	e003      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	74fb      	strb	r3, [r7, #19]
      break;
 8002dba:	e000      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002dbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dbe:	7cfb      	ldrb	r3, [r7, #19]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10b      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002dc4:	4b76      	ldr	r3, [pc, #472]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dd2:	4973      	ldr	r1, [pc, #460]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002dda:	e001      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ddc:	7cfb      	ldrb	r3, [r7, #19]
 8002dde:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d041      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002df0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002df4:	d02a      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002df6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002dfa:	d824      	bhi.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002dfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e00:	d008      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002e02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e06:	d81e      	bhi.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00a      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e10:	d010      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e12:	e018      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e14:	4b62      	ldr	r3, [pc, #392]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	4a61      	ldr	r2, [pc, #388]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e1e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e20:	e015      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	3304      	adds	r3, #4
 8002e26:	2100      	movs	r1, #0
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 fa73 	bl	8003314 <RCCEx_PLLSAI1_Config>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e32:	e00c      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3320      	adds	r3, #32
 8002e38:	2100      	movs	r1, #0
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fb5e 	bl	80034fc <RCCEx_PLLSAI2_Config>
 8002e40:	4603      	mov	r3, r0
 8002e42:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e44:	e003      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	74fb      	strb	r3, [r7, #19]
      break;
 8002e4a:	e000      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002e4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e4e:	7cfb      	ldrb	r3, [r7, #19]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10b      	bne.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e54:	4b52      	ldr	r3, [pc, #328]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e5a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e62:	494f      	ldr	r1, [pc, #316]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e6a:	e001      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e6c:	7cfb      	ldrb	r3, [r7, #19]
 8002e6e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 80a0 	beq.w	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e82:	4b47      	ldr	r3, [pc, #284]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e000      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002e92:	2300      	movs	r3, #0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00d      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e98:	4b41      	ldr	r3, [pc, #260]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9c:	4a40      	ldr	r2, [pc, #256]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ea4:	4b3e      	ldr	r3, [pc, #248]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eac:	60bb      	str	r3, [r7, #8]
 8002eae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002eb4:	4b3b      	ldr	r3, [pc, #236]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a3a      	ldr	r2, [pc, #232]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ebe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ec0:	f7fe fd84 	bl	80019cc <HAL_GetTick>
 8002ec4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ec6:	e009      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ec8:	f7fe fd80 	bl	80019cc <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d902      	bls.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	74fb      	strb	r3, [r7, #19]
        break;
 8002eda:	e005      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002edc:	4b31      	ldr	r3, [pc, #196]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0ef      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002ee8:	7cfb      	ldrb	r3, [r7, #19]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d15c      	bne.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002eee:	4b2c      	ldr	r3, [pc, #176]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ef8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d01f      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d019      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f0c:	4b24      	ldr	r3, [pc, #144]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f18:	4b21      	ldr	r3, [pc, #132]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1e:	4a20      	ldr	r2, [pc, #128]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f28:	4b1d      	ldr	r3, [pc, #116]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2e:	4a1c      	ldr	r2, [pc, #112]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f38:	4a19      	ldr	r2, [pc, #100]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d016      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4a:	f7fe fd3f 	bl	80019cc <HAL_GetTick>
 8002f4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f50:	e00b      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f52:	f7fe fd3b 	bl	80019cc <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d902      	bls.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	74fb      	strb	r3, [r7, #19]
            break;
 8002f68:	e006      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f6a:	4b0d      	ldr	r3, [pc, #52]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d0ec      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002f78:	7cfb      	ldrb	r3, [r7, #19]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10c      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f7e:	4b08      	ldr	r3, [pc, #32]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f8e:	4904      	ldr	r1, [pc, #16]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f96:	e009      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f98:	7cfb      	ldrb	r3, [r7, #19]
 8002f9a:	74bb      	strb	r3, [r7, #18]
 8002f9c:	e006      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002f9e:	bf00      	nop
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fa8:	7cfb      	ldrb	r3, [r7, #19]
 8002faa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fac:	7c7b      	ldrb	r3, [r7, #17]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d105      	bne.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb2:	4b9e      	ldr	r3, [pc, #632]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb6:	4a9d      	ldr	r2, [pc, #628]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fbc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00a      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fca:	4b98      	ldr	r3, [pc, #608]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd0:	f023 0203 	bic.w	r2, r3, #3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd8:	4994      	ldr	r1, [pc, #592]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00a      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fec:	4b8f      	ldr	r3, [pc, #572]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff2:	f023 020c 	bic.w	r2, r3, #12
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ffa:	498c      	ldr	r1, [pc, #560]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0304 	and.w	r3, r3, #4
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800300e:	4b87      	ldr	r3, [pc, #540]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003014:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	4983      	ldr	r1, [pc, #524]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800301e:	4313      	orrs	r3, r2
 8003020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00a      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003030:	4b7e      	ldr	r3, [pc, #504]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003036:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303e:	497b      	ldr	r1, [pc, #492]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0310 	and.w	r3, r3, #16
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00a      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003052:	4b76      	ldr	r3, [pc, #472]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003058:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003060:	4972      	ldr	r1, [pc, #456]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003062:	4313      	orrs	r3, r2
 8003064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0320 	and.w	r3, r3, #32
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00a      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003074:	4b6d      	ldr	r3, [pc, #436]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003082:	496a      	ldr	r1, [pc, #424]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003084:	4313      	orrs	r3, r2
 8003086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00a      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003096:	4b65      	ldr	r3, [pc, #404]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a4:	4961      	ldr	r1, [pc, #388]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00a      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030b8:	4b5c      	ldr	r3, [pc, #368]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c6:	4959      	ldr	r1, [pc, #356]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030da:	4b54      	ldr	r3, [pc, #336]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030e8:	4950      	ldr	r1, [pc, #320]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00a      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030fc:	4b4b      	ldr	r3, [pc, #300]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003102:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310a:	4948      	ldr	r1, [pc, #288]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800310c:	4313      	orrs	r3, r2
 800310e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00a      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800311e:	4b43      	ldr	r3, [pc, #268]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003124:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312c:	493f      	ldr	r1, [pc, #252]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800312e:	4313      	orrs	r3, r2
 8003130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d028      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003140:	4b3a      	ldr	r3, [pc, #232]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003146:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800314e:	4937      	ldr	r1, [pc, #220]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003150:	4313      	orrs	r3, r2
 8003152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800315a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800315e:	d106      	bne.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003160:	4b32      	ldr	r3, [pc, #200]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	4a31      	ldr	r2, [pc, #196]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003166:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800316a:	60d3      	str	r3, [r2, #12]
 800316c:	e011      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003172:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003176:	d10c      	bne.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3304      	adds	r3, #4
 800317c:	2101      	movs	r1, #1
 800317e:	4618      	mov	r0, r3
 8003180:	f000 f8c8 	bl	8003314 <RCCEx_PLLSAI1_Config>
 8003184:	4603      	mov	r3, r0
 8003186:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003188:	7cfb      	ldrb	r3, [r7, #19]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800318e:	7cfb      	ldrb	r3, [r7, #19]
 8003190:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d028      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800319e:	4b23      	ldr	r3, [pc, #140]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ac:	491f      	ldr	r1, [pc, #124]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031bc:	d106      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031be:	4b1b      	ldr	r3, [pc, #108]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	4a1a      	ldr	r2, [pc, #104]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031c8:	60d3      	str	r3, [r2, #12]
 80031ca:	e011      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031d4:	d10c      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	3304      	adds	r3, #4
 80031da:	2101      	movs	r1, #1
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 f899 	bl	8003314 <RCCEx_PLLSAI1_Config>
 80031e2:	4603      	mov	r3, r0
 80031e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031e6:	7cfb      	ldrb	r3, [r7, #19]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80031ec:	7cfb      	ldrb	r3, [r7, #19]
 80031ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d02b      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031fc:	4b0b      	ldr	r3, [pc, #44]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003202:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800320a:	4908      	ldr	r1, [pc, #32]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320c:	4313      	orrs	r3, r2
 800320e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003216:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800321a:	d109      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800321c:	4b03      	ldr	r3, [pc, #12]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	4a02      	ldr	r2, [pc, #8]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003222:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003226:	60d3      	str	r3, [r2, #12]
 8003228:	e014      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800322a:	bf00      	nop
 800322c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003234:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003238:	d10c      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	3304      	adds	r3, #4
 800323e:	2101      	movs	r1, #1
 8003240:	4618      	mov	r0, r3
 8003242:	f000 f867 	bl	8003314 <RCCEx_PLLSAI1_Config>
 8003246:	4603      	mov	r3, r0
 8003248:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800324a:	7cfb      	ldrb	r3, [r7, #19]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003250:	7cfb      	ldrb	r3, [r7, #19]
 8003252:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d02f      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003260:	4b2b      	ldr	r3, [pc, #172]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003266:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800326e:	4928      	ldr	r1, [pc, #160]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800327a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800327e:	d10d      	bne.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3304      	adds	r3, #4
 8003284:	2102      	movs	r1, #2
 8003286:	4618      	mov	r0, r3
 8003288:	f000 f844 	bl	8003314 <RCCEx_PLLSAI1_Config>
 800328c:	4603      	mov	r3, r0
 800328e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003290:	7cfb      	ldrb	r3, [r7, #19]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d014      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003296:	7cfb      	ldrb	r3, [r7, #19]
 8003298:	74bb      	strb	r3, [r7, #18]
 800329a:	e011      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032a4:	d10c      	bne.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	3320      	adds	r3, #32
 80032aa:	2102      	movs	r1, #2
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 f925 	bl	80034fc <RCCEx_PLLSAI2_Config>
 80032b2:	4603      	mov	r3, r0
 80032b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032b6:	7cfb      	ldrb	r3, [r7, #19]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80032bc:	7cfb      	ldrb	r3, [r7, #19]
 80032be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00a      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80032cc:	4b10      	ldr	r3, [pc, #64]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032da:	490d      	ldr	r1, [pc, #52]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00b      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032ee:	4b08      	ldr	r3, [pc, #32]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032fe:	4904      	ldr	r1, [pc, #16]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003300:	4313      	orrs	r3, r2
 8003302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003306:	7cbb      	ldrb	r3, [r7, #18]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3718      	adds	r7, #24
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40021000 	.word	0x40021000

08003314 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800331e:	2300      	movs	r3, #0
 8003320:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003322:	4b75      	ldr	r3, [pc, #468]	; (80034f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	f003 0303 	and.w	r3, r3, #3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d018      	beq.n	8003360 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800332e:	4b72      	ldr	r3, [pc, #456]	; (80034f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f003 0203 	and.w	r2, r3, #3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	429a      	cmp	r2, r3
 800333c:	d10d      	bne.n	800335a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
       ||
 8003342:	2b00      	cmp	r3, #0
 8003344:	d009      	beq.n	800335a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003346:	4b6c      	ldr	r3, [pc, #432]	; (80034f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	091b      	lsrs	r3, r3, #4
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	1c5a      	adds	r2, r3, #1
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
       ||
 8003356:	429a      	cmp	r2, r3
 8003358:	d047      	beq.n	80033ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	73fb      	strb	r3, [r7, #15]
 800335e:	e044      	b.n	80033ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b03      	cmp	r3, #3
 8003366:	d018      	beq.n	800339a <RCCEx_PLLSAI1_Config+0x86>
 8003368:	2b03      	cmp	r3, #3
 800336a:	d825      	bhi.n	80033b8 <RCCEx_PLLSAI1_Config+0xa4>
 800336c:	2b01      	cmp	r3, #1
 800336e:	d002      	beq.n	8003376 <RCCEx_PLLSAI1_Config+0x62>
 8003370:	2b02      	cmp	r3, #2
 8003372:	d009      	beq.n	8003388 <RCCEx_PLLSAI1_Config+0x74>
 8003374:	e020      	b.n	80033b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003376:	4b60      	ldr	r3, [pc, #384]	; (80034f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d11d      	bne.n	80033be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003386:	e01a      	b.n	80033be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003388:	4b5b      	ldr	r3, [pc, #364]	; (80034f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003390:	2b00      	cmp	r3, #0
 8003392:	d116      	bne.n	80033c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003398:	e013      	b.n	80033c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800339a:	4b57      	ldr	r3, [pc, #348]	; (80034f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10f      	bne.n	80033c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033a6:	4b54      	ldr	r3, [pc, #336]	; (80034f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d109      	bne.n	80033c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033b6:	e006      	b.n	80033c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	73fb      	strb	r3, [r7, #15]
      break;
 80033bc:	e004      	b.n	80033c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033be:	bf00      	nop
 80033c0:	e002      	b.n	80033c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033c2:	bf00      	nop
 80033c4:	e000      	b.n	80033c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80033c8:	7bfb      	ldrb	r3, [r7, #15]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10d      	bne.n	80033ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80033ce:	4b4a      	ldr	r3, [pc, #296]	; (80034f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6819      	ldr	r1, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	3b01      	subs	r3, #1
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	430b      	orrs	r3, r1
 80033e4:	4944      	ldr	r1, [pc, #272]	; (80034f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80033ea:	7bfb      	ldrb	r3, [r7, #15]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d17d      	bne.n	80034ec <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80033f0:	4b41      	ldr	r3, [pc, #260]	; (80034f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a40      	ldr	r2, [pc, #256]	; (80034f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80033fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033fc:	f7fe fae6 	bl	80019cc <HAL_GetTick>
 8003400:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003402:	e009      	b.n	8003418 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003404:	f7fe fae2 	bl	80019cc <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d902      	bls.n	8003418 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	73fb      	strb	r3, [r7, #15]
        break;
 8003416:	e005      	b.n	8003424 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003418:	4b37      	ldr	r3, [pc, #220]	; (80034f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1ef      	bne.n	8003404 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003424:	7bfb      	ldrb	r3, [r7, #15]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d160      	bne.n	80034ec <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d111      	bne.n	8003454 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003430:	4b31      	ldr	r3, [pc, #196]	; (80034f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	6892      	ldr	r2, [r2, #8]
 8003440:	0211      	lsls	r1, r2, #8
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	68d2      	ldr	r2, [r2, #12]
 8003446:	0912      	lsrs	r2, r2, #4
 8003448:	0452      	lsls	r2, r2, #17
 800344a:	430a      	orrs	r2, r1
 800344c:	492a      	ldr	r1, [pc, #168]	; (80034f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800344e:	4313      	orrs	r3, r2
 8003450:	610b      	str	r3, [r1, #16]
 8003452:	e027      	b.n	80034a4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d112      	bne.n	8003480 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800345a:	4b27      	ldr	r3, [pc, #156]	; (80034f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003462:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6892      	ldr	r2, [r2, #8]
 800346a:	0211      	lsls	r1, r2, #8
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6912      	ldr	r2, [r2, #16]
 8003470:	0852      	lsrs	r2, r2, #1
 8003472:	3a01      	subs	r2, #1
 8003474:	0552      	lsls	r2, r2, #21
 8003476:	430a      	orrs	r2, r1
 8003478:	491f      	ldr	r1, [pc, #124]	; (80034f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800347a:	4313      	orrs	r3, r2
 800347c:	610b      	str	r3, [r1, #16]
 800347e:	e011      	b.n	80034a4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003480:	4b1d      	ldr	r3, [pc, #116]	; (80034f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003488:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6892      	ldr	r2, [r2, #8]
 8003490:	0211      	lsls	r1, r2, #8
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6952      	ldr	r2, [r2, #20]
 8003496:	0852      	lsrs	r2, r2, #1
 8003498:	3a01      	subs	r2, #1
 800349a:	0652      	lsls	r2, r2, #25
 800349c:	430a      	orrs	r2, r1
 800349e:	4916      	ldr	r1, [pc, #88]	; (80034f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80034a4:	4b14      	ldr	r3, [pc, #80]	; (80034f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a13      	ldr	r2, [pc, #76]	; (80034f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b0:	f7fe fa8c 	bl	80019cc <HAL_GetTick>
 80034b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034b6:	e009      	b.n	80034cc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034b8:	f7fe fa88 	bl	80019cc <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d902      	bls.n	80034cc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	73fb      	strb	r3, [r7, #15]
          break;
 80034ca:	e005      	b.n	80034d8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034cc:	4b0a      	ldr	r3, [pc, #40]	; (80034f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0ef      	beq.n	80034b8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d106      	bne.n	80034ec <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80034de:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034e0:	691a      	ldr	r2, [r3, #16]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	4904      	ldr	r1, [pc, #16]	; (80034f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80034ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40021000 	.word	0x40021000

080034fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003506:	2300      	movs	r3, #0
 8003508:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800350a:	4b6a      	ldr	r3, [pc, #424]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f003 0303 	and.w	r3, r3, #3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d018      	beq.n	8003548 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003516:	4b67      	ldr	r3, [pc, #412]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f003 0203 	and.w	r2, r3, #3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	429a      	cmp	r2, r3
 8003524:	d10d      	bne.n	8003542 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
       ||
 800352a:	2b00      	cmp	r3, #0
 800352c:	d009      	beq.n	8003542 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800352e:	4b61      	ldr	r3, [pc, #388]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	091b      	lsrs	r3, r3, #4
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	1c5a      	adds	r2, r3, #1
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
       ||
 800353e:	429a      	cmp	r2, r3
 8003540:	d047      	beq.n	80035d2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	73fb      	strb	r3, [r7, #15]
 8003546:	e044      	b.n	80035d2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2b03      	cmp	r3, #3
 800354e:	d018      	beq.n	8003582 <RCCEx_PLLSAI2_Config+0x86>
 8003550:	2b03      	cmp	r3, #3
 8003552:	d825      	bhi.n	80035a0 <RCCEx_PLLSAI2_Config+0xa4>
 8003554:	2b01      	cmp	r3, #1
 8003556:	d002      	beq.n	800355e <RCCEx_PLLSAI2_Config+0x62>
 8003558:	2b02      	cmp	r3, #2
 800355a:	d009      	beq.n	8003570 <RCCEx_PLLSAI2_Config+0x74>
 800355c:	e020      	b.n	80035a0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800355e:	4b55      	ldr	r3, [pc, #340]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d11d      	bne.n	80035a6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800356e:	e01a      	b.n	80035a6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003570:	4b50      	ldr	r3, [pc, #320]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003578:	2b00      	cmp	r3, #0
 800357a:	d116      	bne.n	80035aa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003580:	e013      	b.n	80035aa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003582:	4b4c      	ldr	r3, [pc, #304]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10f      	bne.n	80035ae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800358e:	4b49      	ldr	r3, [pc, #292]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d109      	bne.n	80035ae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800359e:	e006      	b.n	80035ae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	73fb      	strb	r3, [r7, #15]
      break;
 80035a4:	e004      	b.n	80035b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80035a6:	bf00      	nop
 80035a8:	e002      	b.n	80035b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80035aa:	bf00      	nop
 80035ac:	e000      	b.n	80035b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80035ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80035b0:	7bfb      	ldrb	r3, [r7, #15]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10d      	bne.n	80035d2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80035b6:	4b3f      	ldr	r3, [pc, #252]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6819      	ldr	r1, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	430b      	orrs	r3, r1
 80035cc:	4939      	ldr	r1, [pc, #228]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035d2:	7bfb      	ldrb	r3, [r7, #15]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d167      	bne.n	80036a8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80035d8:	4b36      	ldr	r3, [pc, #216]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a35      	ldr	r2, [pc, #212]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035e4:	f7fe f9f2 	bl	80019cc <HAL_GetTick>
 80035e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035ea:	e009      	b.n	8003600 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80035ec:	f7fe f9ee 	bl	80019cc <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d902      	bls.n	8003600 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	73fb      	strb	r3, [r7, #15]
        break;
 80035fe:	e005      	b.n	800360c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003600:	4b2c      	ldr	r3, [pc, #176]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1ef      	bne.n	80035ec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800360c:	7bfb      	ldrb	r3, [r7, #15]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d14a      	bne.n	80036a8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d111      	bne.n	800363c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003618:	4b26      	ldr	r3, [pc, #152]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6892      	ldr	r2, [r2, #8]
 8003628:	0211      	lsls	r1, r2, #8
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	68d2      	ldr	r2, [r2, #12]
 800362e:	0912      	lsrs	r2, r2, #4
 8003630:	0452      	lsls	r2, r2, #17
 8003632:	430a      	orrs	r2, r1
 8003634:	491f      	ldr	r1, [pc, #124]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003636:	4313      	orrs	r3, r2
 8003638:	614b      	str	r3, [r1, #20]
 800363a:	e011      	b.n	8003660 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800363c:	4b1d      	ldr	r3, [pc, #116]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003644:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6892      	ldr	r2, [r2, #8]
 800364c:	0211      	lsls	r1, r2, #8
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6912      	ldr	r2, [r2, #16]
 8003652:	0852      	lsrs	r2, r2, #1
 8003654:	3a01      	subs	r2, #1
 8003656:	0652      	lsls	r2, r2, #25
 8003658:	430a      	orrs	r2, r1
 800365a:	4916      	ldr	r1, [pc, #88]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800365c:	4313      	orrs	r3, r2
 800365e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003660:	4b14      	ldr	r3, [pc, #80]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a13      	ldr	r2, [pc, #76]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800366a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800366c:	f7fe f9ae 	bl	80019cc <HAL_GetTick>
 8003670:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003672:	e009      	b.n	8003688 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003674:	f7fe f9aa 	bl	80019cc <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d902      	bls.n	8003688 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	73fb      	strb	r3, [r7, #15]
          break;
 8003686:	e005      	b.n	8003694 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003688:	4b0a      	ldr	r3, [pc, #40]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0ef      	beq.n	8003674 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003694:	7bfb      	ldrb	r3, [r7, #15]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d106      	bne.n	80036a8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800369a:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800369c:	695a      	ldr	r2, [r3, #20]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	4904      	ldr	r1, [pc, #16]	; (80036b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80036a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40021000 	.word	0x40021000

080036b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e040      	b.n	800374c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d106      	bne.n	80036e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7fe f89a 	bl	8001814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2224      	movs	r2, #36	; 0x24
 80036e4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0201 	bic.w	r2, r2, #1
 80036f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 fb26 	bl	8003d48 <UART_SetConfig>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d101      	bne.n	8003706 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e022      	b.n	800374c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	2b00      	cmp	r3, #0
 800370c:	d002      	beq.n	8003714 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 fda4 	bl	800425c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003722:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689a      	ldr	r2, [r3, #8]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003732:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 0201 	orr.w	r2, r2, #1
 8003742:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 fe2b 	bl	80043a0 <UART_CheckIdleState>
 800374a:	4603      	mov	r3, r0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08a      	sub	sp, #40	; 0x28
 8003758:	af02      	add	r7, sp, #8
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	603b      	str	r3, [r7, #0]
 8003760:	4613      	mov	r3, r2
 8003762:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003768:	2b20      	cmp	r3, #32
 800376a:	f040 8082 	bne.w	8003872 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <HAL_UART_Transmit+0x26>
 8003774:	88fb      	ldrh	r3, [r7, #6]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e07a      	b.n	8003874 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_UART_Transmit+0x38>
 8003788:	2302      	movs	r3, #2
 800378a:	e073      	b.n	8003874 <HAL_UART_Transmit+0x120>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2221      	movs	r2, #33	; 0x21
 80037a0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037a2:	f7fe f913 	bl	80019cc <HAL_GetTick>
 80037a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	88fa      	ldrh	r2, [r7, #6]
 80037ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	88fa      	ldrh	r2, [r7, #6]
 80037b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037c0:	d108      	bne.n	80037d4 <HAL_UART_Transmit+0x80>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d104      	bne.n	80037d4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80037ca:	2300      	movs	r3, #0
 80037cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	61bb      	str	r3, [r7, #24]
 80037d2:	e003      	b.n	80037dc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037d8:	2300      	movs	r3, #0
 80037da:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80037e4:	e02d      	b.n	8003842 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	2200      	movs	r2, #0
 80037ee:	2180      	movs	r1, #128	; 0x80
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 fe1e 	bl	8004432 <UART_WaitOnFlagUntilTimeout>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e039      	b.n	8003874 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10b      	bne.n	800381e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	881a      	ldrh	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003812:	b292      	uxth	r2, r2
 8003814:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	3302      	adds	r3, #2
 800381a:	61bb      	str	r3, [r7, #24]
 800381c:	e008      	b.n	8003830 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	781a      	ldrb	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	b292      	uxth	r2, r2
 8003828:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	3301      	adds	r3, #1
 800382e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003836:	b29b      	uxth	r3, r3
 8003838:	3b01      	subs	r3, #1
 800383a:	b29a      	uxth	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003848:	b29b      	uxth	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1cb      	bne.n	80037e6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	2200      	movs	r2, #0
 8003856:	2140      	movs	r1, #64	; 0x40
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f000 fdea 	bl	8004432 <UART_WaitOnFlagUntilTimeout>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e005      	b.n	8003874 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2220      	movs	r2, #32
 800386c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800386e:	2300      	movs	r3, #0
 8003870:	e000      	b.n	8003874 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003872:	2302      	movs	r3, #2
  }
}
 8003874:	4618      	mov	r0, r3
 8003876:	3720      	adds	r7, #32
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	4613      	mov	r3, r2
 8003888:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800388e:	2b20      	cmp	r3, #32
 8003890:	d131      	bne.n	80038f6 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d002      	beq.n	800389e <HAL_UART_Receive_IT+0x22>
 8003898:	88fb      	ldrh	r3, [r7, #6]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e02a      	b.n	80038f8 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d101      	bne.n	80038b0 <HAL_UART_Receive_IT+0x34>
 80038ac:	2302      	movs	r3, #2
 80038ae:	e023      	b.n	80038f8 <HAL_UART_Receive_IT+0x7c>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a0f      	ldr	r2, [pc, #60]	; (8003900 <HAL_UART_Receive_IT+0x84>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d00e      	beq.n	80038e6 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d007      	beq.n	80038e6 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80038e4:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80038e6:	88fb      	ldrh	r3, [r7, #6]
 80038e8:	461a      	mov	r2, r3
 80038ea:	68b9      	ldr	r1, [r7, #8]
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 fe1d 	bl	800452c <UART_Start_Receive_IT>
 80038f2:	4603      	mov	r3, r0
 80038f4:	e000      	b.n	80038f8 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 80038f6:	2302      	movs	r3, #2
  }
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40008000 	.word	0x40008000

08003904 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b088      	sub	sp, #32
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003924:	69fa      	ldr	r2, [r7, #28]
 8003926:	f640 030f 	movw	r3, #2063	; 0x80f
 800392a:	4013      	ands	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d113      	bne.n	800395c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	f003 0320 	and.w	r3, r3, #32
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00e      	beq.n	800395c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	f003 0320 	and.w	r3, r3, #32
 8003944:	2b00      	cmp	r3, #0
 8003946:	d009      	beq.n	800395c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800394c:	2b00      	cmp	r3, #0
 800394e:	f000 81ce 	beq.w	8003cee <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	4798      	blx	r3
      }
      return;
 800395a:	e1c8      	b.n	8003cee <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 80e3 	beq.w	8003b2a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d105      	bne.n	800397a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	4ba6      	ldr	r3, [pc, #664]	; (8003c0c <HAL_UART_IRQHandler+0x308>)
 8003972:	4013      	ands	r3, r2
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 80d8 	beq.w	8003b2a <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	2b00      	cmp	r3, #0
 8003982:	d010      	beq.n	80039a6 <HAL_UART_IRQHandler+0xa2>
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00b      	beq.n	80039a6 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2201      	movs	r2, #1
 8003994:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800399c:	f043 0201 	orr.w	r2, r3, #1
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d010      	beq.n	80039d2 <HAL_UART_IRQHandler+0xce>
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00b      	beq.n	80039d2 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2202      	movs	r2, #2
 80039c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039c8:	f043 0204 	orr.w	r2, r3, #4
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d010      	beq.n	80039fe <HAL_UART_IRQHandler+0xfa>
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00b      	beq.n	80039fe <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2204      	movs	r2, #4
 80039ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039f4:	f043 0202 	orr.w	r2, r3, #2
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	f003 0308 	and.w	r3, r3, #8
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d015      	beq.n	8003a34 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	f003 0320 	and.w	r3, r3, #32
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d104      	bne.n	8003a1c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00b      	beq.n	8003a34 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2208      	movs	r2, #8
 8003a22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a2a:	f043 0208 	orr.w	r2, r3, #8
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d011      	beq.n	8003a62 <HAL_UART_IRQHandler+0x15e>
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00c      	beq.n	8003a62 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a58:	f043 0220 	orr.w	r2, r3, #32
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 8142 	beq.w	8003cf2 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	f003 0320 	and.w	r3, r3, #32
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00c      	beq.n	8003a92 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	f003 0320 	and.w	r3, r3, #32
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d007      	beq.n	8003a92 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a98:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa4:	2b40      	cmp	r3, #64	; 0x40
 8003aa6:	d004      	beq.n	8003ab2 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d031      	beq.n	8003b16 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fdc2 	bl	800463c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac2:	2b40      	cmp	r3, #64	; 0x40
 8003ac4:	d123      	bne.n	8003b0e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ad4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d013      	beq.n	8003b06 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae2:	4a4b      	ldr	r2, [pc, #300]	; (8003c10 <HAL_UART_IRQHandler+0x30c>)
 8003ae4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fe f8ed 	bl	8001cca <HAL_DMA_Abort_IT>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d017      	beq.n	8003b26 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003b00:	4610      	mov	r0, r2
 8003b02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b04:	e00f      	b.n	8003b26 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f908 	bl	8003d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b0c:	e00b      	b.n	8003b26 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f904 	bl	8003d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b14:	e007      	b.n	8003b26 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f900 	bl	8003d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003b24:	e0e5      	b.n	8003cf2 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b26:	bf00      	nop
    return;
 8003b28:	e0e3      	b.n	8003cf2 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	f040 80a9 	bne.w	8003c86 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	f003 0310 	and.w	r3, r3, #16
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 80a3 	beq.w	8003c86 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	f003 0310 	and.w	r3, r3, #16
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 809d 	beq.w	8003c86 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2210      	movs	r2, #16
 8003b52:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5e:	2b40      	cmp	r3, #64	; 0x40
 8003b60:	d158      	bne.n	8003c14 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003b6c:	893b      	ldrh	r3, [r7, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 80c1 	beq.w	8003cf6 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003b7a:	893a      	ldrh	r2, [r7, #8]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	f080 80ba 	bcs.w	8003cf6 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	893a      	ldrh	r2, [r7, #8]
 8003b86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0320 	and.w	r3, r3, #32
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d12a      	bne.n	8003bf0 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ba8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0201 	bic.w	r2, r2, #1
 8003bb8:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bc8:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 0210 	bic.w	r2, r2, #16
 8003be4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fe f82f 	bl	8001c4e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	4619      	mov	r1, r3
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f893 	bl	8003d30 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003c0a:	e074      	b.n	8003cf6 <HAL_UART_IRQHandler+0x3f2>
 8003c0c:	04000120 	.word	0x04000120
 8003c10:	0800469b 	.word	0x0800469b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d063      	beq.n	8003cfa <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8003c32:	897b      	ldrh	r3, [r7, #10]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d060      	beq.n	8003cfa <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c46:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0201 	bic.w	r2, r2, #1
 8003c56:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0210 	bic.w	r2, r2, #16
 8003c78:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c7a:	897b      	ldrh	r3, [r7, #10]
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f856 	bl	8003d30 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003c84:	e039      	b.n	8003cfa <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00d      	beq.n	8003cac <HAL_UART_IRQHandler+0x3a8>
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d008      	beq.n	8003cac <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003ca2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 fdff 	bl	80048a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003caa:	e029      	b.n	8003d00 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00d      	beq.n	8003cd2 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d008      	beq.n	8003cd2 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d01a      	beq.n	8003cfe <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	4798      	blx	r3
    }
    return;
 8003cd0:	e015      	b.n	8003cfe <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d011      	beq.n	8003d00 <HAL_UART_IRQHandler+0x3fc>
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00c      	beq.n	8003d00 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 fced 	bl	80046c6 <UART_EndTransmit_IT>
    return;
 8003cec:	e008      	b.n	8003d00 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003cee:	bf00      	nop
 8003cf0:	e006      	b.n	8003d00 <HAL_UART_IRQHandler+0x3fc>
    return;
 8003cf2:	bf00      	nop
 8003cf4:	e004      	b.n	8003d00 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003cf6:	bf00      	nop
 8003cf8:	e002      	b.n	8003d00 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003cfa:	bf00      	nop
 8003cfc:	e000      	b.n	8003d00 <HAL_UART_IRQHandler+0x3fc>
    return;
 8003cfe:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003d00:	3720      	adds	r7, #32
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop

08003d08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d48:	b5b0      	push	{r4, r5, r7, lr}
 8003d4a:	b088      	sub	sp, #32
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d50:	2300      	movs	r3, #0
 8003d52:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	69db      	ldr	r3, [r3, #28]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	4bad      	ldr	r3, [pc, #692]	; (8004028 <UART_SetConfig+0x2e0>)
 8003d74:	4013      	ands	r3, r2
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6812      	ldr	r2, [r2, #0]
 8003d7a:	69f9      	ldr	r1, [r7, #28]
 8003d7c:	430b      	orrs	r3, r1
 8003d7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68da      	ldr	r2, [r3, #12]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4aa2      	ldr	r2, [pc, #648]	; (800402c <UART_SetConfig+0x2e4>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d004      	beq.n	8003db0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	69fa      	ldr	r2, [r7, #28]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69fa      	ldr	r2, [r7, #28]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a99      	ldr	r2, [pc, #612]	; (8004030 <UART_SetConfig+0x2e8>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d121      	bne.n	8003e12 <UART_SetConfig+0xca>
 8003dce:	4b99      	ldr	r3, [pc, #612]	; (8004034 <UART_SetConfig+0x2ec>)
 8003dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd4:	f003 0303 	and.w	r3, r3, #3
 8003dd8:	2b03      	cmp	r3, #3
 8003dda:	d817      	bhi.n	8003e0c <UART_SetConfig+0xc4>
 8003ddc:	a201      	add	r2, pc, #4	; (adr r2, 8003de4 <UART_SetConfig+0x9c>)
 8003dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de2:	bf00      	nop
 8003de4:	08003df5 	.word	0x08003df5
 8003de8:	08003e01 	.word	0x08003e01
 8003dec:	08003dfb 	.word	0x08003dfb
 8003df0:	08003e07 	.word	0x08003e07
 8003df4:	2301      	movs	r3, #1
 8003df6:	76fb      	strb	r3, [r7, #27]
 8003df8:	e0e7      	b.n	8003fca <UART_SetConfig+0x282>
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	76fb      	strb	r3, [r7, #27]
 8003dfe:	e0e4      	b.n	8003fca <UART_SetConfig+0x282>
 8003e00:	2304      	movs	r3, #4
 8003e02:	76fb      	strb	r3, [r7, #27]
 8003e04:	e0e1      	b.n	8003fca <UART_SetConfig+0x282>
 8003e06:	2308      	movs	r3, #8
 8003e08:	76fb      	strb	r3, [r7, #27]
 8003e0a:	e0de      	b.n	8003fca <UART_SetConfig+0x282>
 8003e0c:	2310      	movs	r3, #16
 8003e0e:	76fb      	strb	r3, [r7, #27]
 8003e10:	e0db      	b.n	8003fca <UART_SetConfig+0x282>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a88      	ldr	r2, [pc, #544]	; (8004038 <UART_SetConfig+0x2f0>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d132      	bne.n	8003e82 <UART_SetConfig+0x13a>
 8003e1c:	4b85      	ldr	r3, [pc, #532]	; (8004034 <UART_SetConfig+0x2ec>)
 8003e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e22:	f003 030c 	and.w	r3, r3, #12
 8003e26:	2b0c      	cmp	r3, #12
 8003e28:	d828      	bhi.n	8003e7c <UART_SetConfig+0x134>
 8003e2a:	a201      	add	r2, pc, #4	; (adr r2, 8003e30 <UART_SetConfig+0xe8>)
 8003e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e30:	08003e65 	.word	0x08003e65
 8003e34:	08003e7d 	.word	0x08003e7d
 8003e38:	08003e7d 	.word	0x08003e7d
 8003e3c:	08003e7d 	.word	0x08003e7d
 8003e40:	08003e71 	.word	0x08003e71
 8003e44:	08003e7d 	.word	0x08003e7d
 8003e48:	08003e7d 	.word	0x08003e7d
 8003e4c:	08003e7d 	.word	0x08003e7d
 8003e50:	08003e6b 	.word	0x08003e6b
 8003e54:	08003e7d 	.word	0x08003e7d
 8003e58:	08003e7d 	.word	0x08003e7d
 8003e5c:	08003e7d 	.word	0x08003e7d
 8003e60:	08003e77 	.word	0x08003e77
 8003e64:	2300      	movs	r3, #0
 8003e66:	76fb      	strb	r3, [r7, #27]
 8003e68:	e0af      	b.n	8003fca <UART_SetConfig+0x282>
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	76fb      	strb	r3, [r7, #27]
 8003e6e:	e0ac      	b.n	8003fca <UART_SetConfig+0x282>
 8003e70:	2304      	movs	r3, #4
 8003e72:	76fb      	strb	r3, [r7, #27]
 8003e74:	e0a9      	b.n	8003fca <UART_SetConfig+0x282>
 8003e76:	2308      	movs	r3, #8
 8003e78:	76fb      	strb	r3, [r7, #27]
 8003e7a:	e0a6      	b.n	8003fca <UART_SetConfig+0x282>
 8003e7c:	2310      	movs	r3, #16
 8003e7e:	76fb      	strb	r3, [r7, #27]
 8003e80:	e0a3      	b.n	8003fca <UART_SetConfig+0x282>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a6d      	ldr	r2, [pc, #436]	; (800403c <UART_SetConfig+0x2f4>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d120      	bne.n	8003ece <UART_SetConfig+0x186>
 8003e8c:	4b69      	ldr	r3, [pc, #420]	; (8004034 <UART_SetConfig+0x2ec>)
 8003e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e92:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e96:	2b30      	cmp	r3, #48	; 0x30
 8003e98:	d013      	beq.n	8003ec2 <UART_SetConfig+0x17a>
 8003e9a:	2b30      	cmp	r3, #48	; 0x30
 8003e9c:	d814      	bhi.n	8003ec8 <UART_SetConfig+0x180>
 8003e9e:	2b20      	cmp	r3, #32
 8003ea0:	d009      	beq.n	8003eb6 <UART_SetConfig+0x16e>
 8003ea2:	2b20      	cmp	r3, #32
 8003ea4:	d810      	bhi.n	8003ec8 <UART_SetConfig+0x180>
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d002      	beq.n	8003eb0 <UART_SetConfig+0x168>
 8003eaa:	2b10      	cmp	r3, #16
 8003eac:	d006      	beq.n	8003ebc <UART_SetConfig+0x174>
 8003eae:	e00b      	b.n	8003ec8 <UART_SetConfig+0x180>
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	76fb      	strb	r3, [r7, #27]
 8003eb4:	e089      	b.n	8003fca <UART_SetConfig+0x282>
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	76fb      	strb	r3, [r7, #27]
 8003eba:	e086      	b.n	8003fca <UART_SetConfig+0x282>
 8003ebc:	2304      	movs	r3, #4
 8003ebe:	76fb      	strb	r3, [r7, #27]
 8003ec0:	e083      	b.n	8003fca <UART_SetConfig+0x282>
 8003ec2:	2308      	movs	r3, #8
 8003ec4:	76fb      	strb	r3, [r7, #27]
 8003ec6:	e080      	b.n	8003fca <UART_SetConfig+0x282>
 8003ec8:	2310      	movs	r3, #16
 8003eca:	76fb      	strb	r3, [r7, #27]
 8003ecc:	e07d      	b.n	8003fca <UART_SetConfig+0x282>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a5b      	ldr	r2, [pc, #364]	; (8004040 <UART_SetConfig+0x2f8>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d120      	bne.n	8003f1a <UART_SetConfig+0x1d2>
 8003ed8:	4b56      	ldr	r3, [pc, #344]	; (8004034 <UART_SetConfig+0x2ec>)
 8003eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ede:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ee2:	2bc0      	cmp	r3, #192	; 0xc0
 8003ee4:	d013      	beq.n	8003f0e <UART_SetConfig+0x1c6>
 8003ee6:	2bc0      	cmp	r3, #192	; 0xc0
 8003ee8:	d814      	bhi.n	8003f14 <UART_SetConfig+0x1cc>
 8003eea:	2b80      	cmp	r3, #128	; 0x80
 8003eec:	d009      	beq.n	8003f02 <UART_SetConfig+0x1ba>
 8003eee:	2b80      	cmp	r3, #128	; 0x80
 8003ef0:	d810      	bhi.n	8003f14 <UART_SetConfig+0x1cc>
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <UART_SetConfig+0x1b4>
 8003ef6:	2b40      	cmp	r3, #64	; 0x40
 8003ef8:	d006      	beq.n	8003f08 <UART_SetConfig+0x1c0>
 8003efa:	e00b      	b.n	8003f14 <UART_SetConfig+0x1cc>
 8003efc:	2300      	movs	r3, #0
 8003efe:	76fb      	strb	r3, [r7, #27]
 8003f00:	e063      	b.n	8003fca <UART_SetConfig+0x282>
 8003f02:	2302      	movs	r3, #2
 8003f04:	76fb      	strb	r3, [r7, #27]
 8003f06:	e060      	b.n	8003fca <UART_SetConfig+0x282>
 8003f08:	2304      	movs	r3, #4
 8003f0a:	76fb      	strb	r3, [r7, #27]
 8003f0c:	e05d      	b.n	8003fca <UART_SetConfig+0x282>
 8003f0e:	2308      	movs	r3, #8
 8003f10:	76fb      	strb	r3, [r7, #27]
 8003f12:	e05a      	b.n	8003fca <UART_SetConfig+0x282>
 8003f14:	2310      	movs	r3, #16
 8003f16:	76fb      	strb	r3, [r7, #27]
 8003f18:	e057      	b.n	8003fca <UART_SetConfig+0x282>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a49      	ldr	r2, [pc, #292]	; (8004044 <UART_SetConfig+0x2fc>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d125      	bne.n	8003f70 <UART_SetConfig+0x228>
 8003f24:	4b43      	ldr	r3, [pc, #268]	; (8004034 <UART_SetConfig+0x2ec>)
 8003f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f32:	d017      	beq.n	8003f64 <UART_SetConfig+0x21c>
 8003f34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f38:	d817      	bhi.n	8003f6a <UART_SetConfig+0x222>
 8003f3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f3e:	d00b      	beq.n	8003f58 <UART_SetConfig+0x210>
 8003f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f44:	d811      	bhi.n	8003f6a <UART_SetConfig+0x222>
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d003      	beq.n	8003f52 <UART_SetConfig+0x20a>
 8003f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f4e:	d006      	beq.n	8003f5e <UART_SetConfig+0x216>
 8003f50:	e00b      	b.n	8003f6a <UART_SetConfig+0x222>
 8003f52:	2300      	movs	r3, #0
 8003f54:	76fb      	strb	r3, [r7, #27]
 8003f56:	e038      	b.n	8003fca <UART_SetConfig+0x282>
 8003f58:	2302      	movs	r3, #2
 8003f5a:	76fb      	strb	r3, [r7, #27]
 8003f5c:	e035      	b.n	8003fca <UART_SetConfig+0x282>
 8003f5e:	2304      	movs	r3, #4
 8003f60:	76fb      	strb	r3, [r7, #27]
 8003f62:	e032      	b.n	8003fca <UART_SetConfig+0x282>
 8003f64:	2308      	movs	r3, #8
 8003f66:	76fb      	strb	r3, [r7, #27]
 8003f68:	e02f      	b.n	8003fca <UART_SetConfig+0x282>
 8003f6a:	2310      	movs	r3, #16
 8003f6c:	76fb      	strb	r3, [r7, #27]
 8003f6e:	e02c      	b.n	8003fca <UART_SetConfig+0x282>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a2d      	ldr	r2, [pc, #180]	; (800402c <UART_SetConfig+0x2e4>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d125      	bne.n	8003fc6 <UART_SetConfig+0x27e>
 8003f7a:	4b2e      	ldr	r3, [pc, #184]	; (8004034 <UART_SetConfig+0x2ec>)
 8003f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f88:	d017      	beq.n	8003fba <UART_SetConfig+0x272>
 8003f8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f8e:	d817      	bhi.n	8003fc0 <UART_SetConfig+0x278>
 8003f90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f94:	d00b      	beq.n	8003fae <UART_SetConfig+0x266>
 8003f96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f9a:	d811      	bhi.n	8003fc0 <UART_SetConfig+0x278>
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d003      	beq.n	8003fa8 <UART_SetConfig+0x260>
 8003fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa4:	d006      	beq.n	8003fb4 <UART_SetConfig+0x26c>
 8003fa6:	e00b      	b.n	8003fc0 <UART_SetConfig+0x278>
 8003fa8:	2300      	movs	r3, #0
 8003faa:	76fb      	strb	r3, [r7, #27]
 8003fac:	e00d      	b.n	8003fca <UART_SetConfig+0x282>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	76fb      	strb	r3, [r7, #27]
 8003fb2:	e00a      	b.n	8003fca <UART_SetConfig+0x282>
 8003fb4:	2304      	movs	r3, #4
 8003fb6:	76fb      	strb	r3, [r7, #27]
 8003fb8:	e007      	b.n	8003fca <UART_SetConfig+0x282>
 8003fba:	2308      	movs	r3, #8
 8003fbc:	76fb      	strb	r3, [r7, #27]
 8003fbe:	e004      	b.n	8003fca <UART_SetConfig+0x282>
 8003fc0:	2310      	movs	r3, #16
 8003fc2:	76fb      	strb	r3, [r7, #27]
 8003fc4:	e001      	b.n	8003fca <UART_SetConfig+0x282>
 8003fc6:	2310      	movs	r3, #16
 8003fc8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a17      	ldr	r2, [pc, #92]	; (800402c <UART_SetConfig+0x2e4>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	f040 8087 	bne.w	80040e4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003fd6:	7efb      	ldrb	r3, [r7, #27]
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d837      	bhi.n	800404c <UART_SetConfig+0x304>
 8003fdc:	a201      	add	r2, pc, #4	; (adr r2, 8003fe4 <UART_SetConfig+0x29c>)
 8003fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe2:	bf00      	nop
 8003fe4:	08004009 	.word	0x08004009
 8003fe8:	0800404d 	.word	0x0800404d
 8003fec:	08004011 	.word	0x08004011
 8003ff0:	0800404d 	.word	0x0800404d
 8003ff4:	08004017 	.word	0x08004017
 8003ff8:	0800404d 	.word	0x0800404d
 8003ffc:	0800404d 	.word	0x0800404d
 8004000:	0800404d 	.word	0x0800404d
 8004004:	0800401f 	.word	0x0800401f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004008:	f7fe fe0e 	bl	8002c28 <HAL_RCC_GetPCLK1Freq>
 800400c:	6178      	str	r0, [r7, #20]
        break;
 800400e:	e022      	b.n	8004056 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004010:	4b0d      	ldr	r3, [pc, #52]	; (8004048 <UART_SetConfig+0x300>)
 8004012:	617b      	str	r3, [r7, #20]
        break;
 8004014:	e01f      	b.n	8004056 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004016:	f7fe fd6f 	bl	8002af8 <HAL_RCC_GetSysClockFreq>
 800401a:	6178      	str	r0, [r7, #20]
        break;
 800401c:	e01b      	b.n	8004056 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800401e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004022:	617b      	str	r3, [r7, #20]
        break;
 8004024:	e017      	b.n	8004056 <UART_SetConfig+0x30e>
 8004026:	bf00      	nop
 8004028:	efff69f3 	.word	0xefff69f3
 800402c:	40008000 	.word	0x40008000
 8004030:	40013800 	.word	0x40013800
 8004034:	40021000 	.word	0x40021000
 8004038:	40004400 	.word	0x40004400
 800403c:	40004800 	.word	0x40004800
 8004040:	40004c00 	.word	0x40004c00
 8004044:	40005000 	.word	0x40005000
 8004048:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800404c:	2300      	movs	r3, #0
 800404e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	76bb      	strb	r3, [r7, #26]
        break;
 8004054:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 80f1 	beq.w	8004240 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	4613      	mov	r3, r2
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	4413      	add	r3, r2
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	429a      	cmp	r2, r3
 800406c:	d305      	bcc.n	800407a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	429a      	cmp	r2, r3
 8004078:	d902      	bls.n	8004080 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	76bb      	strb	r3, [r7, #26]
 800407e:	e0df      	b.n	8004240 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	4618      	mov	r0, r3
 8004084:	f04f 0100 	mov.w	r1, #0
 8004088:	f04f 0200 	mov.w	r2, #0
 800408c:	f04f 0300 	mov.w	r3, #0
 8004090:	020b      	lsls	r3, r1, #8
 8004092:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004096:	0202      	lsls	r2, r0, #8
 8004098:	6879      	ldr	r1, [r7, #4]
 800409a:	6849      	ldr	r1, [r1, #4]
 800409c:	0849      	lsrs	r1, r1, #1
 800409e:	4608      	mov	r0, r1
 80040a0:	f04f 0100 	mov.w	r1, #0
 80040a4:	1814      	adds	r4, r2, r0
 80040a6:	eb43 0501 	adc.w	r5, r3, r1
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	461a      	mov	r2, r3
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	4620      	mov	r0, r4
 80040b6:	4629      	mov	r1, r5
 80040b8:	f7fc f8fa 	bl	80002b0 <__aeabi_uldivmod>
 80040bc:	4602      	mov	r2, r0
 80040be:	460b      	mov	r3, r1
 80040c0:	4613      	mov	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040ca:	d308      	bcc.n	80040de <UART_SetConfig+0x396>
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040d2:	d204      	bcs.n	80040de <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	60da      	str	r2, [r3, #12]
 80040dc:	e0b0      	b.n	8004240 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	76bb      	strb	r3, [r7, #26]
 80040e2:	e0ad      	b.n	8004240 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	69db      	ldr	r3, [r3, #28]
 80040e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ec:	d15c      	bne.n	80041a8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80040ee:	7efb      	ldrb	r3, [r7, #27]
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d828      	bhi.n	8004146 <UART_SetConfig+0x3fe>
 80040f4:	a201      	add	r2, pc, #4	; (adr r2, 80040fc <UART_SetConfig+0x3b4>)
 80040f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fa:	bf00      	nop
 80040fc:	08004121 	.word	0x08004121
 8004100:	08004129 	.word	0x08004129
 8004104:	08004131 	.word	0x08004131
 8004108:	08004147 	.word	0x08004147
 800410c:	08004137 	.word	0x08004137
 8004110:	08004147 	.word	0x08004147
 8004114:	08004147 	.word	0x08004147
 8004118:	08004147 	.word	0x08004147
 800411c:	0800413f 	.word	0x0800413f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004120:	f7fe fd82 	bl	8002c28 <HAL_RCC_GetPCLK1Freq>
 8004124:	6178      	str	r0, [r7, #20]
        break;
 8004126:	e013      	b.n	8004150 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004128:	f7fe fd94 	bl	8002c54 <HAL_RCC_GetPCLK2Freq>
 800412c:	6178      	str	r0, [r7, #20]
        break;
 800412e:	e00f      	b.n	8004150 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004130:	4b49      	ldr	r3, [pc, #292]	; (8004258 <UART_SetConfig+0x510>)
 8004132:	617b      	str	r3, [r7, #20]
        break;
 8004134:	e00c      	b.n	8004150 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004136:	f7fe fcdf 	bl	8002af8 <HAL_RCC_GetSysClockFreq>
 800413a:	6178      	str	r0, [r7, #20]
        break;
 800413c:	e008      	b.n	8004150 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800413e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004142:	617b      	str	r3, [r7, #20]
        break;
 8004144:	e004      	b.n	8004150 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004146:	2300      	movs	r3, #0
 8004148:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	76bb      	strb	r3, [r7, #26]
        break;
 800414e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d074      	beq.n	8004240 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	005a      	lsls	r2, r3, #1
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	085b      	lsrs	r3, r3, #1
 8004160:	441a      	add	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	fbb2 f3f3 	udiv	r3, r2, r3
 800416a:	b29b      	uxth	r3, r3
 800416c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	2b0f      	cmp	r3, #15
 8004172:	d916      	bls.n	80041a2 <UART_SetConfig+0x45a>
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800417a:	d212      	bcs.n	80041a2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	b29b      	uxth	r3, r3
 8004180:	f023 030f 	bic.w	r3, r3, #15
 8004184:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	085b      	lsrs	r3, r3, #1
 800418a:	b29b      	uxth	r3, r3
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	b29a      	uxth	r2, r3
 8004192:	89fb      	ldrh	r3, [r7, #14]
 8004194:	4313      	orrs	r3, r2
 8004196:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	89fa      	ldrh	r2, [r7, #14]
 800419e:	60da      	str	r2, [r3, #12]
 80041a0:	e04e      	b.n	8004240 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	76bb      	strb	r3, [r7, #26]
 80041a6:	e04b      	b.n	8004240 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041a8:	7efb      	ldrb	r3, [r7, #27]
 80041aa:	2b08      	cmp	r3, #8
 80041ac:	d827      	bhi.n	80041fe <UART_SetConfig+0x4b6>
 80041ae:	a201      	add	r2, pc, #4	; (adr r2, 80041b4 <UART_SetConfig+0x46c>)
 80041b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b4:	080041d9 	.word	0x080041d9
 80041b8:	080041e1 	.word	0x080041e1
 80041bc:	080041e9 	.word	0x080041e9
 80041c0:	080041ff 	.word	0x080041ff
 80041c4:	080041ef 	.word	0x080041ef
 80041c8:	080041ff 	.word	0x080041ff
 80041cc:	080041ff 	.word	0x080041ff
 80041d0:	080041ff 	.word	0x080041ff
 80041d4:	080041f7 	.word	0x080041f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041d8:	f7fe fd26 	bl	8002c28 <HAL_RCC_GetPCLK1Freq>
 80041dc:	6178      	str	r0, [r7, #20]
        break;
 80041de:	e013      	b.n	8004208 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041e0:	f7fe fd38 	bl	8002c54 <HAL_RCC_GetPCLK2Freq>
 80041e4:	6178      	str	r0, [r7, #20]
        break;
 80041e6:	e00f      	b.n	8004208 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041e8:	4b1b      	ldr	r3, [pc, #108]	; (8004258 <UART_SetConfig+0x510>)
 80041ea:	617b      	str	r3, [r7, #20]
        break;
 80041ec:	e00c      	b.n	8004208 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041ee:	f7fe fc83 	bl	8002af8 <HAL_RCC_GetSysClockFreq>
 80041f2:	6178      	str	r0, [r7, #20]
        break;
 80041f4:	e008      	b.n	8004208 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041fa:	617b      	str	r3, [r7, #20]
        break;
 80041fc:	e004      	b.n	8004208 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80041fe:	2300      	movs	r3, #0
 8004200:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	76bb      	strb	r3, [r7, #26]
        break;
 8004206:	bf00      	nop
    }

    if (pclk != 0U)
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d018      	beq.n	8004240 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	085a      	lsrs	r2, r3, #1
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	441a      	add	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004220:	b29b      	uxth	r3, r3
 8004222:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	2b0f      	cmp	r3, #15
 8004228:	d908      	bls.n	800423c <UART_SetConfig+0x4f4>
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004230:	d204      	bcs.n	800423c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	60da      	str	r2, [r3, #12]
 800423a:	e001      	b.n	8004240 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800424c:	7ebb      	ldrb	r3, [r7, #26]
}
 800424e:	4618      	mov	r0, r3
 8004250:	3720      	adds	r7, #32
 8004252:	46bd      	mov	sp, r7
 8004254:	bdb0      	pop	{r4, r5, r7, pc}
 8004256:	bf00      	nop
 8004258:	00f42400 	.word	0x00f42400

0800425c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00a      	beq.n	8004286 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00a      	beq.n	80042a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00a      	beq.n	80042ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	f003 0308 	and.w	r3, r3, #8
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00a      	beq.n	80042ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	f003 0310 	and.w	r3, r3, #16
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00a      	beq.n	800430e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004312:	f003 0320 	and.w	r3, r3, #32
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00a      	beq.n	8004330 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	430a      	orrs	r2, r1
 800432e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004338:	2b00      	cmp	r3, #0
 800433a:	d01a      	beq.n	8004372 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800435a:	d10a      	bne.n	8004372 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00a      	beq.n	8004394 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	430a      	orrs	r2, r1
 8004392:	605a      	str	r2, [r3, #4]
  }
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af02      	add	r7, sp, #8
 80043a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043b0:	f7fd fb0c 	bl	80019cc <HAL_GetTick>
 80043b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0308 	and.w	r3, r3, #8
 80043c0:	2b08      	cmp	r3, #8
 80043c2:	d10e      	bne.n	80043e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f82d 	bl	8004432 <UART_WaitOnFlagUntilTimeout>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e023      	b.n	800442a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0304 	and.w	r3, r3, #4
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	d10e      	bne.n	800440e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f817 	bl	8004432 <UART_WaitOnFlagUntilTimeout>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e00d      	b.n	800442a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2220      	movs	r2, #32
 8004412:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2220      	movs	r2, #32
 8004418:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b084      	sub	sp, #16
 8004436:	af00      	add	r7, sp, #0
 8004438:	60f8      	str	r0, [r7, #12]
 800443a:	60b9      	str	r1, [r7, #8]
 800443c:	603b      	str	r3, [r7, #0]
 800443e:	4613      	mov	r3, r2
 8004440:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004442:	e05e      	b.n	8004502 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444a:	d05a      	beq.n	8004502 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800444c:	f7fd fabe 	bl	80019cc <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	429a      	cmp	r2, r3
 800445a:	d302      	bcc.n	8004462 <UART_WaitOnFlagUntilTimeout+0x30>
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d11b      	bne.n	800449a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004470:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 0201 	bic.w	r2, r2, #1
 8004480:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2220      	movs	r2, #32
 8004486:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2220      	movs	r2, #32
 800448c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e043      	b.n	8004522 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d02c      	beq.n	8004502 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044b6:	d124      	bne.n	8004502 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044c0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044d0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0201 	bic.w	r2, r2, #1
 80044e0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2220      	movs	r2, #32
 80044e6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2220      	movs	r2, #32
 80044ec:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2220      	movs	r2, #32
 80044f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e00f      	b.n	8004522 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	69da      	ldr	r2, [r3, #28]
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	4013      	ands	r3, r2
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	429a      	cmp	r2, r3
 8004510:	bf0c      	ite	eq
 8004512:	2301      	moveq	r3, #1
 8004514:	2300      	movne	r3, #0
 8004516:	b2db      	uxtb	r3, r3
 8004518:	461a      	mov	r2, r3
 800451a:	79fb      	ldrb	r3, [r7, #7]
 800451c:	429a      	cmp	r2, r3
 800451e:	d091      	beq.n	8004444 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
	...

0800452c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	4613      	mov	r3, r2
 8004538:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	88fa      	ldrh	r2, [r7, #6]
 8004544:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	88fa      	ldrh	r2, [r7, #6]
 800454c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800455e:	d10e      	bne.n	800457e <UART_Start_Receive_IT+0x52>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d105      	bne.n	8004574 <UART_Start_Receive_IT+0x48>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800456e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004572:	e02d      	b.n	80045d0 <UART_Start_Receive_IT+0xa4>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	22ff      	movs	r2, #255	; 0xff
 8004578:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800457c:	e028      	b.n	80045d0 <UART_Start_Receive_IT+0xa4>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10d      	bne.n	80045a2 <UART_Start_Receive_IT+0x76>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d104      	bne.n	8004598 <UART_Start_Receive_IT+0x6c>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	22ff      	movs	r2, #255	; 0xff
 8004592:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004596:	e01b      	b.n	80045d0 <UART_Start_Receive_IT+0xa4>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	227f      	movs	r2, #127	; 0x7f
 800459c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045a0:	e016      	b.n	80045d0 <UART_Start_Receive_IT+0xa4>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045aa:	d10d      	bne.n	80045c8 <UART_Start_Receive_IT+0x9c>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d104      	bne.n	80045be <UART_Start_Receive_IT+0x92>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	227f      	movs	r2, #127	; 0x7f
 80045b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045bc:	e008      	b.n	80045d0 <UART_Start_Receive_IT+0xa4>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	223f      	movs	r2, #63	; 0x3f
 80045c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045c6:	e003      	b.n	80045d0 <UART_Start_Receive_IT+0xa4>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2222      	movs	r2, #34	; 0x22
 80045dc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f042 0201 	orr.w	r2, r2, #1
 80045ec:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045f6:	d107      	bne.n	8004608 <UART_Start_Receive_IT+0xdc>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d103      	bne.n	8004608 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4a0c      	ldr	r2, [pc, #48]	; (8004634 <UART_Start_Receive_IT+0x108>)
 8004604:	665a      	str	r2, [r3, #100]	; 0x64
 8004606:	e002      	b.n	800460e <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4a0b      	ldr	r2, [pc, #44]	; (8004638 <UART_Start_Receive_IT+0x10c>)
 800460c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004624:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	080047d1 	.word	0x080047d1
 8004638:	080046f9 	.word	0x080046f9

0800463c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004652:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689a      	ldr	r2, [r3, #8]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 0201 	bic.w	r2, r2, #1
 8004662:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004668:	2b01      	cmp	r3, #1
 800466a:	d107      	bne.n	800467c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f022 0210 	bic.w	r2, r2, #16
 800467a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2220      	movs	r2, #32
 8004680:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b084      	sub	sp, #16
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f7ff fb2f 	bl	8003d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046be:	bf00      	nop
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b082      	sub	sp, #8
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046dc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2220      	movs	r2, #32
 80046e2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7ff fb0c 	bl	8003d08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046f0:	bf00      	nop
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004706:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800470c:	2b22      	cmp	r3, #34	; 0x22
 800470e:	d151      	bne.n	80047b4 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004716:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004718:	89bb      	ldrh	r3, [r7, #12]
 800471a:	b2d9      	uxtb	r1, r3
 800471c:	89fb      	ldrh	r3, [r7, #14]
 800471e:	b2da      	uxtb	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004724:	400a      	ands	r2, r1
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800472e:	1c5a      	adds	r2, r3, #1
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800473a:	b29b      	uxth	r3, r3
 800473c:	3b01      	subs	r3, #1
 800473e:	b29a      	uxth	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800474c:	b29b      	uxth	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d13a      	bne.n	80047c8 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004760:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 0201 	bic.w	r2, r2, #1
 8004770:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2220      	movs	r2, #32
 8004776:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004782:	2b01      	cmp	r3, #1
 8004784:	d10f      	bne.n	80047a6 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 0210 	bic.w	r2, r2, #16
 8004794:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800479c:	4619      	mov	r1, r3
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f7ff fac6 	bl	8003d30 <HAL_UARTEx_RxEventCallback>
 80047a4:	e002      	b.n	80047ac <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7fb ff0c 	bl	80005c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80047b2:	e009      	b.n	80047c8 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	8b1b      	ldrh	r3, [r3, #24]
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f042 0208 	orr.w	r2, r2, #8
 80047c4:	b292      	uxth	r2, r2
 80047c6:	831a      	strh	r2, [r3, #24]
}
 80047c8:	bf00      	nop
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80047de:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047e4:	2b22      	cmp	r3, #34	; 0x22
 80047e6:	d151      	bne.n	800488c <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80047ee:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f4:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80047f6:	89ba      	ldrh	r2, [r7, #12]
 80047f8:	89fb      	ldrh	r3, [r7, #14]
 80047fa:	4013      	ands	r3, r2
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004806:	1c9a      	adds	r2, r3, #2
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004812:	b29b      	uxth	r3, r3
 8004814:	3b01      	subs	r3, #1
 8004816:	b29a      	uxth	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004824:	b29b      	uxth	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d13a      	bne.n	80048a0 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004838:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 0201 	bic.w	r2, r2, #1
 8004848:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2220      	movs	r2, #32
 800484e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800485a:	2b01      	cmp	r3, #1
 800485c:	d10f      	bne.n	800487e <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 0210 	bic.w	r2, r2, #16
 800486c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004874:	4619      	mov	r1, r3
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7ff fa5a 	bl	8003d30 <HAL_UARTEx_RxEventCallback>
 800487c:	e002      	b.n	8004884 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7fb fea0 	bl	80005c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800488a:	e009      	b.n	80048a0 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	8b1b      	ldrh	r3, [r3, #24]
 8004892:	b29a      	uxth	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f042 0208 	orr.w	r2, r2, #8
 800489c:	b292      	uxth	r2, r2
 800489e:	831a      	strh	r2, [r3, #24]
}
 80048a0:	bf00      	nop
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <__errno>:
 80048bc:	4b01      	ldr	r3, [pc, #4]	; (80048c4 <__errno+0x8>)
 80048be:	6818      	ldr	r0, [r3, #0]
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	2000000c 	.word	0x2000000c

080048c8 <__libc_init_array>:
 80048c8:	b570      	push	{r4, r5, r6, lr}
 80048ca:	4d0d      	ldr	r5, [pc, #52]	; (8004900 <__libc_init_array+0x38>)
 80048cc:	4c0d      	ldr	r4, [pc, #52]	; (8004904 <__libc_init_array+0x3c>)
 80048ce:	1b64      	subs	r4, r4, r5
 80048d0:	10a4      	asrs	r4, r4, #2
 80048d2:	2600      	movs	r6, #0
 80048d4:	42a6      	cmp	r6, r4
 80048d6:	d109      	bne.n	80048ec <__libc_init_array+0x24>
 80048d8:	4d0b      	ldr	r5, [pc, #44]	; (8004908 <__libc_init_array+0x40>)
 80048da:	4c0c      	ldr	r4, [pc, #48]	; (800490c <__libc_init_array+0x44>)
 80048dc:	f001 fa34 	bl	8005d48 <_init>
 80048e0:	1b64      	subs	r4, r4, r5
 80048e2:	10a4      	asrs	r4, r4, #2
 80048e4:	2600      	movs	r6, #0
 80048e6:	42a6      	cmp	r6, r4
 80048e8:	d105      	bne.n	80048f6 <__libc_init_array+0x2e>
 80048ea:	bd70      	pop	{r4, r5, r6, pc}
 80048ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80048f0:	4798      	blx	r3
 80048f2:	3601      	adds	r6, #1
 80048f4:	e7ee      	b.n	80048d4 <__libc_init_array+0xc>
 80048f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80048fa:	4798      	blx	r3
 80048fc:	3601      	adds	r6, #1
 80048fe:	e7f2      	b.n	80048e6 <__libc_init_array+0x1e>
 8004900:	0800628c 	.word	0x0800628c
 8004904:	0800628c 	.word	0x0800628c
 8004908:	0800628c 	.word	0x0800628c
 800490c:	08006290 	.word	0x08006290

08004910 <memset>:
 8004910:	4402      	add	r2, r0
 8004912:	4603      	mov	r3, r0
 8004914:	4293      	cmp	r3, r2
 8004916:	d100      	bne.n	800491a <memset+0xa>
 8004918:	4770      	bx	lr
 800491a:	f803 1b01 	strb.w	r1, [r3], #1
 800491e:	e7f9      	b.n	8004914 <memset+0x4>

08004920 <iprintf>:
 8004920:	b40f      	push	{r0, r1, r2, r3}
 8004922:	4b0a      	ldr	r3, [pc, #40]	; (800494c <iprintf+0x2c>)
 8004924:	b513      	push	{r0, r1, r4, lr}
 8004926:	681c      	ldr	r4, [r3, #0]
 8004928:	b124      	cbz	r4, 8004934 <iprintf+0x14>
 800492a:	69a3      	ldr	r3, [r4, #24]
 800492c:	b913      	cbnz	r3, 8004934 <iprintf+0x14>
 800492e:	4620      	mov	r0, r4
 8004930:	f000 faac 	bl	8004e8c <__sinit>
 8004934:	ab05      	add	r3, sp, #20
 8004936:	9a04      	ldr	r2, [sp, #16]
 8004938:	68a1      	ldr	r1, [r4, #8]
 800493a:	9301      	str	r3, [sp, #4]
 800493c:	4620      	mov	r0, r4
 800493e:	f000 fdd9 	bl	80054f4 <_vfiprintf_r>
 8004942:	b002      	add	sp, #8
 8004944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004948:	b004      	add	sp, #16
 800494a:	4770      	bx	lr
 800494c:	2000000c 	.word	0x2000000c

08004950 <putchar>:
 8004950:	4b09      	ldr	r3, [pc, #36]	; (8004978 <putchar+0x28>)
 8004952:	b513      	push	{r0, r1, r4, lr}
 8004954:	681c      	ldr	r4, [r3, #0]
 8004956:	4601      	mov	r1, r0
 8004958:	b134      	cbz	r4, 8004968 <putchar+0x18>
 800495a:	69a3      	ldr	r3, [r4, #24]
 800495c:	b923      	cbnz	r3, 8004968 <putchar+0x18>
 800495e:	9001      	str	r0, [sp, #4]
 8004960:	4620      	mov	r0, r4
 8004962:	f000 fa93 	bl	8004e8c <__sinit>
 8004966:	9901      	ldr	r1, [sp, #4]
 8004968:	68a2      	ldr	r2, [r4, #8]
 800496a:	4620      	mov	r0, r4
 800496c:	b002      	add	sp, #8
 800496e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004972:	f001 b883 	b.w	8005a7c <_putc_r>
 8004976:	bf00      	nop
 8004978:	2000000c 	.word	0x2000000c

0800497c <_puts_r>:
 800497c:	b570      	push	{r4, r5, r6, lr}
 800497e:	460e      	mov	r6, r1
 8004980:	4605      	mov	r5, r0
 8004982:	b118      	cbz	r0, 800498c <_puts_r+0x10>
 8004984:	6983      	ldr	r3, [r0, #24]
 8004986:	b90b      	cbnz	r3, 800498c <_puts_r+0x10>
 8004988:	f000 fa80 	bl	8004e8c <__sinit>
 800498c:	69ab      	ldr	r3, [r5, #24]
 800498e:	68ac      	ldr	r4, [r5, #8]
 8004990:	b913      	cbnz	r3, 8004998 <_puts_r+0x1c>
 8004992:	4628      	mov	r0, r5
 8004994:	f000 fa7a 	bl	8004e8c <__sinit>
 8004998:	4b2c      	ldr	r3, [pc, #176]	; (8004a4c <_puts_r+0xd0>)
 800499a:	429c      	cmp	r4, r3
 800499c:	d120      	bne.n	80049e0 <_puts_r+0x64>
 800499e:	686c      	ldr	r4, [r5, #4]
 80049a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049a2:	07db      	lsls	r3, r3, #31
 80049a4:	d405      	bmi.n	80049b2 <_puts_r+0x36>
 80049a6:	89a3      	ldrh	r3, [r4, #12]
 80049a8:	0598      	lsls	r0, r3, #22
 80049aa:	d402      	bmi.n	80049b2 <_puts_r+0x36>
 80049ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049ae:	f000 fb0b 	bl	8004fc8 <__retarget_lock_acquire_recursive>
 80049b2:	89a3      	ldrh	r3, [r4, #12]
 80049b4:	0719      	lsls	r1, r3, #28
 80049b6:	d51d      	bpl.n	80049f4 <_puts_r+0x78>
 80049b8:	6923      	ldr	r3, [r4, #16]
 80049ba:	b1db      	cbz	r3, 80049f4 <_puts_r+0x78>
 80049bc:	3e01      	subs	r6, #1
 80049be:	68a3      	ldr	r3, [r4, #8]
 80049c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80049c4:	3b01      	subs	r3, #1
 80049c6:	60a3      	str	r3, [r4, #8]
 80049c8:	bb39      	cbnz	r1, 8004a1a <_puts_r+0x9e>
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	da38      	bge.n	8004a40 <_puts_r+0xc4>
 80049ce:	4622      	mov	r2, r4
 80049d0:	210a      	movs	r1, #10
 80049d2:	4628      	mov	r0, r5
 80049d4:	f000 f880 	bl	8004ad8 <__swbuf_r>
 80049d8:	3001      	adds	r0, #1
 80049da:	d011      	beq.n	8004a00 <_puts_r+0x84>
 80049dc:	250a      	movs	r5, #10
 80049de:	e011      	b.n	8004a04 <_puts_r+0x88>
 80049e0:	4b1b      	ldr	r3, [pc, #108]	; (8004a50 <_puts_r+0xd4>)
 80049e2:	429c      	cmp	r4, r3
 80049e4:	d101      	bne.n	80049ea <_puts_r+0x6e>
 80049e6:	68ac      	ldr	r4, [r5, #8]
 80049e8:	e7da      	b.n	80049a0 <_puts_r+0x24>
 80049ea:	4b1a      	ldr	r3, [pc, #104]	; (8004a54 <_puts_r+0xd8>)
 80049ec:	429c      	cmp	r4, r3
 80049ee:	bf08      	it	eq
 80049f0:	68ec      	ldreq	r4, [r5, #12]
 80049f2:	e7d5      	b.n	80049a0 <_puts_r+0x24>
 80049f4:	4621      	mov	r1, r4
 80049f6:	4628      	mov	r0, r5
 80049f8:	f000 f8c0 	bl	8004b7c <__swsetup_r>
 80049fc:	2800      	cmp	r0, #0
 80049fe:	d0dd      	beq.n	80049bc <_puts_r+0x40>
 8004a00:	f04f 35ff 	mov.w	r5, #4294967295
 8004a04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a06:	07da      	lsls	r2, r3, #31
 8004a08:	d405      	bmi.n	8004a16 <_puts_r+0x9a>
 8004a0a:	89a3      	ldrh	r3, [r4, #12]
 8004a0c:	059b      	lsls	r3, r3, #22
 8004a0e:	d402      	bmi.n	8004a16 <_puts_r+0x9a>
 8004a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a12:	f000 fada 	bl	8004fca <__retarget_lock_release_recursive>
 8004a16:	4628      	mov	r0, r5
 8004a18:	bd70      	pop	{r4, r5, r6, pc}
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	da04      	bge.n	8004a28 <_puts_r+0xac>
 8004a1e:	69a2      	ldr	r2, [r4, #24]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	dc06      	bgt.n	8004a32 <_puts_r+0xb6>
 8004a24:	290a      	cmp	r1, #10
 8004a26:	d004      	beq.n	8004a32 <_puts_r+0xb6>
 8004a28:	6823      	ldr	r3, [r4, #0]
 8004a2a:	1c5a      	adds	r2, r3, #1
 8004a2c:	6022      	str	r2, [r4, #0]
 8004a2e:	7019      	strb	r1, [r3, #0]
 8004a30:	e7c5      	b.n	80049be <_puts_r+0x42>
 8004a32:	4622      	mov	r2, r4
 8004a34:	4628      	mov	r0, r5
 8004a36:	f000 f84f 	bl	8004ad8 <__swbuf_r>
 8004a3a:	3001      	adds	r0, #1
 8004a3c:	d1bf      	bne.n	80049be <_puts_r+0x42>
 8004a3e:	e7df      	b.n	8004a00 <_puts_r+0x84>
 8004a40:	6823      	ldr	r3, [r4, #0]
 8004a42:	250a      	movs	r5, #10
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	6022      	str	r2, [r4, #0]
 8004a48:	701d      	strb	r5, [r3, #0]
 8004a4a:	e7db      	b.n	8004a04 <_puts_r+0x88>
 8004a4c:	08006210 	.word	0x08006210
 8004a50:	08006230 	.word	0x08006230
 8004a54:	080061f0 	.word	0x080061f0

08004a58 <puts>:
 8004a58:	4b02      	ldr	r3, [pc, #8]	; (8004a64 <puts+0xc>)
 8004a5a:	4601      	mov	r1, r0
 8004a5c:	6818      	ldr	r0, [r3, #0]
 8004a5e:	f7ff bf8d 	b.w	800497c <_puts_r>
 8004a62:	bf00      	nop
 8004a64:	2000000c 	.word	0x2000000c

08004a68 <siprintf>:
 8004a68:	b40e      	push	{r1, r2, r3}
 8004a6a:	b500      	push	{lr}
 8004a6c:	b09c      	sub	sp, #112	; 0x70
 8004a6e:	ab1d      	add	r3, sp, #116	; 0x74
 8004a70:	9002      	str	r0, [sp, #8]
 8004a72:	9006      	str	r0, [sp, #24]
 8004a74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a78:	4809      	ldr	r0, [pc, #36]	; (8004aa0 <siprintf+0x38>)
 8004a7a:	9107      	str	r1, [sp, #28]
 8004a7c:	9104      	str	r1, [sp, #16]
 8004a7e:	4909      	ldr	r1, [pc, #36]	; (8004aa4 <siprintf+0x3c>)
 8004a80:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a84:	9105      	str	r1, [sp, #20]
 8004a86:	6800      	ldr	r0, [r0, #0]
 8004a88:	9301      	str	r3, [sp, #4]
 8004a8a:	a902      	add	r1, sp, #8
 8004a8c:	f000 fc08 	bl	80052a0 <_svfiprintf_r>
 8004a90:	9b02      	ldr	r3, [sp, #8]
 8004a92:	2200      	movs	r2, #0
 8004a94:	701a      	strb	r2, [r3, #0]
 8004a96:	b01c      	add	sp, #112	; 0x70
 8004a98:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a9c:	b003      	add	sp, #12
 8004a9e:	4770      	bx	lr
 8004aa0:	2000000c 	.word	0x2000000c
 8004aa4:	ffff0208 	.word	0xffff0208

08004aa8 <strstr>:
 8004aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aaa:	780c      	ldrb	r4, [r1, #0]
 8004aac:	b164      	cbz	r4, 8004ac8 <strstr+0x20>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	781a      	ldrb	r2, [r3, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	1c5e      	adds	r6, r3, #1
 8004ab6:	b90a      	cbnz	r2, 8004abc <strstr+0x14>
 8004ab8:	4610      	mov	r0, r2
 8004aba:	e005      	b.n	8004ac8 <strstr+0x20>
 8004abc:	4294      	cmp	r4, r2
 8004abe:	d108      	bne.n	8004ad2 <strstr+0x2a>
 8004ac0:	460d      	mov	r5, r1
 8004ac2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8004ac6:	b902      	cbnz	r2, 8004aca <strstr+0x22>
 8004ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004aca:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8004ace:	4297      	cmp	r7, r2
 8004ad0:	d0f7      	beq.n	8004ac2 <strstr+0x1a>
 8004ad2:	4633      	mov	r3, r6
 8004ad4:	e7ec      	b.n	8004ab0 <strstr+0x8>
	...

08004ad8 <__swbuf_r>:
 8004ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ada:	460e      	mov	r6, r1
 8004adc:	4614      	mov	r4, r2
 8004ade:	4605      	mov	r5, r0
 8004ae0:	b118      	cbz	r0, 8004aea <__swbuf_r+0x12>
 8004ae2:	6983      	ldr	r3, [r0, #24]
 8004ae4:	b90b      	cbnz	r3, 8004aea <__swbuf_r+0x12>
 8004ae6:	f000 f9d1 	bl	8004e8c <__sinit>
 8004aea:	4b21      	ldr	r3, [pc, #132]	; (8004b70 <__swbuf_r+0x98>)
 8004aec:	429c      	cmp	r4, r3
 8004aee:	d12b      	bne.n	8004b48 <__swbuf_r+0x70>
 8004af0:	686c      	ldr	r4, [r5, #4]
 8004af2:	69a3      	ldr	r3, [r4, #24]
 8004af4:	60a3      	str	r3, [r4, #8]
 8004af6:	89a3      	ldrh	r3, [r4, #12]
 8004af8:	071a      	lsls	r2, r3, #28
 8004afa:	d52f      	bpl.n	8004b5c <__swbuf_r+0x84>
 8004afc:	6923      	ldr	r3, [r4, #16]
 8004afe:	b36b      	cbz	r3, 8004b5c <__swbuf_r+0x84>
 8004b00:	6923      	ldr	r3, [r4, #16]
 8004b02:	6820      	ldr	r0, [r4, #0]
 8004b04:	1ac0      	subs	r0, r0, r3
 8004b06:	6963      	ldr	r3, [r4, #20]
 8004b08:	b2f6      	uxtb	r6, r6
 8004b0a:	4283      	cmp	r3, r0
 8004b0c:	4637      	mov	r7, r6
 8004b0e:	dc04      	bgt.n	8004b1a <__swbuf_r+0x42>
 8004b10:	4621      	mov	r1, r4
 8004b12:	4628      	mov	r0, r5
 8004b14:	f000 f926 	bl	8004d64 <_fflush_r>
 8004b18:	bb30      	cbnz	r0, 8004b68 <__swbuf_r+0x90>
 8004b1a:	68a3      	ldr	r3, [r4, #8]
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	60a3      	str	r3, [r4, #8]
 8004b20:	6823      	ldr	r3, [r4, #0]
 8004b22:	1c5a      	adds	r2, r3, #1
 8004b24:	6022      	str	r2, [r4, #0]
 8004b26:	701e      	strb	r6, [r3, #0]
 8004b28:	6963      	ldr	r3, [r4, #20]
 8004b2a:	3001      	adds	r0, #1
 8004b2c:	4283      	cmp	r3, r0
 8004b2e:	d004      	beq.n	8004b3a <__swbuf_r+0x62>
 8004b30:	89a3      	ldrh	r3, [r4, #12]
 8004b32:	07db      	lsls	r3, r3, #31
 8004b34:	d506      	bpl.n	8004b44 <__swbuf_r+0x6c>
 8004b36:	2e0a      	cmp	r6, #10
 8004b38:	d104      	bne.n	8004b44 <__swbuf_r+0x6c>
 8004b3a:	4621      	mov	r1, r4
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	f000 f911 	bl	8004d64 <_fflush_r>
 8004b42:	b988      	cbnz	r0, 8004b68 <__swbuf_r+0x90>
 8004b44:	4638      	mov	r0, r7
 8004b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b48:	4b0a      	ldr	r3, [pc, #40]	; (8004b74 <__swbuf_r+0x9c>)
 8004b4a:	429c      	cmp	r4, r3
 8004b4c:	d101      	bne.n	8004b52 <__swbuf_r+0x7a>
 8004b4e:	68ac      	ldr	r4, [r5, #8]
 8004b50:	e7cf      	b.n	8004af2 <__swbuf_r+0x1a>
 8004b52:	4b09      	ldr	r3, [pc, #36]	; (8004b78 <__swbuf_r+0xa0>)
 8004b54:	429c      	cmp	r4, r3
 8004b56:	bf08      	it	eq
 8004b58:	68ec      	ldreq	r4, [r5, #12]
 8004b5a:	e7ca      	b.n	8004af2 <__swbuf_r+0x1a>
 8004b5c:	4621      	mov	r1, r4
 8004b5e:	4628      	mov	r0, r5
 8004b60:	f000 f80c 	bl	8004b7c <__swsetup_r>
 8004b64:	2800      	cmp	r0, #0
 8004b66:	d0cb      	beq.n	8004b00 <__swbuf_r+0x28>
 8004b68:	f04f 37ff 	mov.w	r7, #4294967295
 8004b6c:	e7ea      	b.n	8004b44 <__swbuf_r+0x6c>
 8004b6e:	bf00      	nop
 8004b70:	08006210 	.word	0x08006210
 8004b74:	08006230 	.word	0x08006230
 8004b78:	080061f0 	.word	0x080061f0

08004b7c <__swsetup_r>:
 8004b7c:	4b32      	ldr	r3, [pc, #200]	; (8004c48 <__swsetup_r+0xcc>)
 8004b7e:	b570      	push	{r4, r5, r6, lr}
 8004b80:	681d      	ldr	r5, [r3, #0]
 8004b82:	4606      	mov	r6, r0
 8004b84:	460c      	mov	r4, r1
 8004b86:	b125      	cbz	r5, 8004b92 <__swsetup_r+0x16>
 8004b88:	69ab      	ldr	r3, [r5, #24]
 8004b8a:	b913      	cbnz	r3, 8004b92 <__swsetup_r+0x16>
 8004b8c:	4628      	mov	r0, r5
 8004b8e:	f000 f97d 	bl	8004e8c <__sinit>
 8004b92:	4b2e      	ldr	r3, [pc, #184]	; (8004c4c <__swsetup_r+0xd0>)
 8004b94:	429c      	cmp	r4, r3
 8004b96:	d10f      	bne.n	8004bb8 <__swsetup_r+0x3c>
 8004b98:	686c      	ldr	r4, [r5, #4]
 8004b9a:	89a3      	ldrh	r3, [r4, #12]
 8004b9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ba0:	0719      	lsls	r1, r3, #28
 8004ba2:	d42c      	bmi.n	8004bfe <__swsetup_r+0x82>
 8004ba4:	06dd      	lsls	r5, r3, #27
 8004ba6:	d411      	bmi.n	8004bcc <__swsetup_r+0x50>
 8004ba8:	2309      	movs	r3, #9
 8004baa:	6033      	str	r3, [r6, #0]
 8004bac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004bb0:	81a3      	strh	r3, [r4, #12]
 8004bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb6:	e03e      	b.n	8004c36 <__swsetup_r+0xba>
 8004bb8:	4b25      	ldr	r3, [pc, #148]	; (8004c50 <__swsetup_r+0xd4>)
 8004bba:	429c      	cmp	r4, r3
 8004bbc:	d101      	bne.n	8004bc2 <__swsetup_r+0x46>
 8004bbe:	68ac      	ldr	r4, [r5, #8]
 8004bc0:	e7eb      	b.n	8004b9a <__swsetup_r+0x1e>
 8004bc2:	4b24      	ldr	r3, [pc, #144]	; (8004c54 <__swsetup_r+0xd8>)
 8004bc4:	429c      	cmp	r4, r3
 8004bc6:	bf08      	it	eq
 8004bc8:	68ec      	ldreq	r4, [r5, #12]
 8004bca:	e7e6      	b.n	8004b9a <__swsetup_r+0x1e>
 8004bcc:	0758      	lsls	r0, r3, #29
 8004bce:	d512      	bpl.n	8004bf6 <__swsetup_r+0x7a>
 8004bd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bd2:	b141      	cbz	r1, 8004be6 <__swsetup_r+0x6a>
 8004bd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bd8:	4299      	cmp	r1, r3
 8004bda:	d002      	beq.n	8004be2 <__swsetup_r+0x66>
 8004bdc:	4630      	mov	r0, r6
 8004bde:	f000 fa59 	bl	8005094 <_free_r>
 8004be2:	2300      	movs	r3, #0
 8004be4:	6363      	str	r3, [r4, #52]	; 0x34
 8004be6:	89a3      	ldrh	r3, [r4, #12]
 8004be8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004bec:	81a3      	strh	r3, [r4, #12]
 8004bee:	2300      	movs	r3, #0
 8004bf0:	6063      	str	r3, [r4, #4]
 8004bf2:	6923      	ldr	r3, [r4, #16]
 8004bf4:	6023      	str	r3, [r4, #0]
 8004bf6:	89a3      	ldrh	r3, [r4, #12]
 8004bf8:	f043 0308 	orr.w	r3, r3, #8
 8004bfc:	81a3      	strh	r3, [r4, #12]
 8004bfe:	6923      	ldr	r3, [r4, #16]
 8004c00:	b94b      	cbnz	r3, 8004c16 <__swsetup_r+0x9a>
 8004c02:	89a3      	ldrh	r3, [r4, #12]
 8004c04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c0c:	d003      	beq.n	8004c16 <__swsetup_r+0x9a>
 8004c0e:	4621      	mov	r1, r4
 8004c10:	4630      	mov	r0, r6
 8004c12:	f000 f9ff 	bl	8005014 <__smakebuf_r>
 8004c16:	89a0      	ldrh	r0, [r4, #12]
 8004c18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c1c:	f010 0301 	ands.w	r3, r0, #1
 8004c20:	d00a      	beq.n	8004c38 <__swsetup_r+0xbc>
 8004c22:	2300      	movs	r3, #0
 8004c24:	60a3      	str	r3, [r4, #8]
 8004c26:	6963      	ldr	r3, [r4, #20]
 8004c28:	425b      	negs	r3, r3
 8004c2a:	61a3      	str	r3, [r4, #24]
 8004c2c:	6923      	ldr	r3, [r4, #16]
 8004c2e:	b943      	cbnz	r3, 8004c42 <__swsetup_r+0xc6>
 8004c30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c34:	d1ba      	bne.n	8004bac <__swsetup_r+0x30>
 8004c36:	bd70      	pop	{r4, r5, r6, pc}
 8004c38:	0781      	lsls	r1, r0, #30
 8004c3a:	bf58      	it	pl
 8004c3c:	6963      	ldrpl	r3, [r4, #20]
 8004c3e:	60a3      	str	r3, [r4, #8]
 8004c40:	e7f4      	b.n	8004c2c <__swsetup_r+0xb0>
 8004c42:	2000      	movs	r0, #0
 8004c44:	e7f7      	b.n	8004c36 <__swsetup_r+0xba>
 8004c46:	bf00      	nop
 8004c48:	2000000c 	.word	0x2000000c
 8004c4c:	08006210 	.word	0x08006210
 8004c50:	08006230 	.word	0x08006230
 8004c54:	080061f0 	.word	0x080061f0

08004c58 <__sflush_r>:
 8004c58:	898a      	ldrh	r2, [r1, #12]
 8004c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c5e:	4605      	mov	r5, r0
 8004c60:	0710      	lsls	r0, r2, #28
 8004c62:	460c      	mov	r4, r1
 8004c64:	d458      	bmi.n	8004d18 <__sflush_r+0xc0>
 8004c66:	684b      	ldr	r3, [r1, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	dc05      	bgt.n	8004c78 <__sflush_r+0x20>
 8004c6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	dc02      	bgt.n	8004c78 <__sflush_r+0x20>
 8004c72:	2000      	movs	r0, #0
 8004c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c7a:	2e00      	cmp	r6, #0
 8004c7c:	d0f9      	beq.n	8004c72 <__sflush_r+0x1a>
 8004c7e:	2300      	movs	r3, #0
 8004c80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004c84:	682f      	ldr	r7, [r5, #0]
 8004c86:	602b      	str	r3, [r5, #0]
 8004c88:	d032      	beq.n	8004cf0 <__sflush_r+0x98>
 8004c8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c8c:	89a3      	ldrh	r3, [r4, #12]
 8004c8e:	075a      	lsls	r2, r3, #29
 8004c90:	d505      	bpl.n	8004c9e <__sflush_r+0x46>
 8004c92:	6863      	ldr	r3, [r4, #4]
 8004c94:	1ac0      	subs	r0, r0, r3
 8004c96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c98:	b10b      	cbz	r3, 8004c9e <__sflush_r+0x46>
 8004c9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c9c:	1ac0      	subs	r0, r0, r3
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ca4:	6a21      	ldr	r1, [r4, #32]
 8004ca6:	4628      	mov	r0, r5
 8004ca8:	47b0      	blx	r6
 8004caa:	1c43      	adds	r3, r0, #1
 8004cac:	89a3      	ldrh	r3, [r4, #12]
 8004cae:	d106      	bne.n	8004cbe <__sflush_r+0x66>
 8004cb0:	6829      	ldr	r1, [r5, #0]
 8004cb2:	291d      	cmp	r1, #29
 8004cb4:	d82c      	bhi.n	8004d10 <__sflush_r+0xb8>
 8004cb6:	4a2a      	ldr	r2, [pc, #168]	; (8004d60 <__sflush_r+0x108>)
 8004cb8:	40ca      	lsrs	r2, r1
 8004cba:	07d6      	lsls	r6, r2, #31
 8004cbc:	d528      	bpl.n	8004d10 <__sflush_r+0xb8>
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	6062      	str	r2, [r4, #4]
 8004cc2:	04d9      	lsls	r1, r3, #19
 8004cc4:	6922      	ldr	r2, [r4, #16]
 8004cc6:	6022      	str	r2, [r4, #0]
 8004cc8:	d504      	bpl.n	8004cd4 <__sflush_r+0x7c>
 8004cca:	1c42      	adds	r2, r0, #1
 8004ccc:	d101      	bne.n	8004cd2 <__sflush_r+0x7a>
 8004cce:	682b      	ldr	r3, [r5, #0]
 8004cd0:	b903      	cbnz	r3, 8004cd4 <__sflush_r+0x7c>
 8004cd2:	6560      	str	r0, [r4, #84]	; 0x54
 8004cd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cd6:	602f      	str	r7, [r5, #0]
 8004cd8:	2900      	cmp	r1, #0
 8004cda:	d0ca      	beq.n	8004c72 <__sflush_r+0x1a>
 8004cdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ce0:	4299      	cmp	r1, r3
 8004ce2:	d002      	beq.n	8004cea <__sflush_r+0x92>
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	f000 f9d5 	bl	8005094 <_free_r>
 8004cea:	2000      	movs	r0, #0
 8004cec:	6360      	str	r0, [r4, #52]	; 0x34
 8004cee:	e7c1      	b.n	8004c74 <__sflush_r+0x1c>
 8004cf0:	6a21      	ldr	r1, [r4, #32]
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	4628      	mov	r0, r5
 8004cf6:	47b0      	blx	r6
 8004cf8:	1c41      	adds	r1, r0, #1
 8004cfa:	d1c7      	bne.n	8004c8c <__sflush_r+0x34>
 8004cfc:	682b      	ldr	r3, [r5, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0c4      	beq.n	8004c8c <__sflush_r+0x34>
 8004d02:	2b1d      	cmp	r3, #29
 8004d04:	d001      	beq.n	8004d0a <__sflush_r+0xb2>
 8004d06:	2b16      	cmp	r3, #22
 8004d08:	d101      	bne.n	8004d0e <__sflush_r+0xb6>
 8004d0a:	602f      	str	r7, [r5, #0]
 8004d0c:	e7b1      	b.n	8004c72 <__sflush_r+0x1a>
 8004d0e:	89a3      	ldrh	r3, [r4, #12]
 8004d10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d14:	81a3      	strh	r3, [r4, #12]
 8004d16:	e7ad      	b.n	8004c74 <__sflush_r+0x1c>
 8004d18:	690f      	ldr	r7, [r1, #16]
 8004d1a:	2f00      	cmp	r7, #0
 8004d1c:	d0a9      	beq.n	8004c72 <__sflush_r+0x1a>
 8004d1e:	0793      	lsls	r3, r2, #30
 8004d20:	680e      	ldr	r6, [r1, #0]
 8004d22:	bf08      	it	eq
 8004d24:	694b      	ldreq	r3, [r1, #20]
 8004d26:	600f      	str	r7, [r1, #0]
 8004d28:	bf18      	it	ne
 8004d2a:	2300      	movne	r3, #0
 8004d2c:	eba6 0807 	sub.w	r8, r6, r7
 8004d30:	608b      	str	r3, [r1, #8]
 8004d32:	f1b8 0f00 	cmp.w	r8, #0
 8004d36:	dd9c      	ble.n	8004c72 <__sflush_r+0x1a>
 8004d38:	6a21      	ldr	r1, [r4, #32]
 8004d3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d3c:	4643      	mov	r3, r8
 8004d3e:	463a      	mov	r2, r7
 8004d40:	4628      	mov	r0, r5
 8004d42:	47b0      	blx	r6
 8004d44:	2800      	cmp	r0, #0
 8004d46:	dc06      	bgt.n	8004d56 <__sflush_r+0xfe>
 8004d48:	89a3      	ldrh	r3, [r4, #12]
 8004d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d4e:	81a3      	strh	r3, [r4, #12]
 8004d50:	f04f 30ff 	mov.w	r0, #4294967295
 8004d54:	e78e      	b.n	8004c74 <__sflush_r+0x1c>
 8004d56:	4407      	add	r7, r0
 8004d58:	eba8 0800 	sub.w	r8, r8, r0
 8004d5c:	e7e9      	b.n	8004d32 <__sflush_r+0xda>
 8004d5e:	bf00      	nop
 8004d60:	20400001 	.word	0x20400001

08004d64 <_fflush_r>:
 8004d64:	b538      	push	{r3, r4, r5, lr}
 8004d66:	690b      	ldr	r3, [r1, #16]
 8004d68:	4605      	mov	r5, r0
 8004d6a:	460c      	mov	r4, r1
 8004d6c:	b913      	cbnz	r3, 8004d74 <_fflush_r+0x10>
 8004d6e:	2500      	movs	r5, #0
 8004d70:	4628      	mov	r0, r5
 8004d72:	bd38      	pop	{r3, r4, r5, pc}
 8004d74:	b118      	cbz	r0, 8004d7e <_fflush_r+0x1a>
 8004d76:	6983      	ldr	r3, [r0, #24]
 8004d78:	b90b      	cbnz	r3, 8004d7e <_fflush_r+0x1a>
 8004d7a:	f000 f887 	bl	8004e8c <__sinit>
 8004d7e:	4b14      	ldr	r3, [pc, #80]	; (8004dd0 <_fflush_r+0x6c>)
 8004d80:	429c      	cmp	r4, r3
 8004d82:	d11b      	bne.n	8004dbc <_fflush_r+0x58>
 8004d84:	686c      	ldr	r4, [r5, #4]
 8004d86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d0ef      	beq.n	8004d6e <_fflush_r+0xa>
 8004d8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004d90:	07d0      	lsls	r0, r2, #31
 8004d92:	d404      	bmi.n	8004d9e <_fflush_r+0x3a>
 8004d94:	0599      	lsls	r1, r3, #22
 8004d96:	d402      	bmi.n	8004d9e <_fflush_r+0x3a>
 8004d98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d9a:	f000 f915 	bl	8004fc8 <__retarget_lock_acquire_recursive>
 8004d9e:	4628      	mov	r0, r5
 8004da0:	4621      	mov	r1, r4
 8004da2:	f7ff ff59 	bl	8004c58 <__sflush_r>
 8004da6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004da8:	07da      	lsls	r2, r3, #31
 8004daa:	4605      	mov	r5, r0
 8004dac:	d4e0      	bmi.n	8004d70 <_fflush_r+0xc>
 8004dae:	89a3      	ldrh	r3, [r4, #12]
 8004db0:	059b      	lsls	r3, r3, #22
 8004db2:	d4dd      	bmi.n	8004d70 <_fflush_r+0xc>
 8004db4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004db6:	f000 f908 	bl	8004fca <__retarget_lock_release_recursive>
 8004dba:	e7d9      	b.n	8004d70 <_fflush_r+0xc>
 8004dbc:	4b05      	ldr	r3, [pc, #20]	; (8004dd4 <_fflush_r+0x70>)
 8004dbe:	429c      	cmp	r4, r3
 8004dc0:	d101      	bne.n	8004dc6 <_fflush_r+0x62>
 8004dc2:	68ac      	ldr	r4, [r5, #8]
 8004dc4:	e7df      	b.n	8004d86 <_fflush_r+0x22>
 8004dc6:	4b04      	ldr	r3, [pc, #16]	; (8004dd8 <_fflush_r+0x74>)
 8004dc8:	429c      	cmp	r4, r3
 8004dca:	bf08      	it	eq
 8004dcc:	68ec      	ldreq	r4, [r5, #12]
 8004dce:	e7da      	b.n	8004d86 <_fflush_r+0x22>
 8004dd0:	08006210 	.word	0x08006210
 8004dd4:	08006230 	.word	0x08006230
 8004dd8:	080061f0 	.word	0x080061f0

08004ddc <std>:
 8004ddc:	2300      	movs	r3, #0
 8004dde:	b510      	push	{r4, lr}
 8004de0:	4604      	mov	r4, r0
 8004de2:	e9c0 3300 	strd	r3, r3, [r0]
 8004de6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004dea:	6083      	str	r3, [r0, #8]
 8004dec:	8181      	strh	r1, [r0, #12]
 8004dee:	6643      	str	r3, [r0, #100]	; 0x64
 8004df0:	81c2      	strh	r2, [r0, #14]
 8004df2:	6183      	str	r3, [r0, #24]
 8004df4:	4619      	mov	r1, r3
 8004df6:	2208      	movs	r2, #8
 8004df8:	305c      	adds	r0, #92	; 0x5c
 8004dfa:	f7ff fd89 	bl	8004910 <memset>
 8004dfe:	4b05      	ldr	r3, [pc, #20]	; (8004e14 <std+0x38>)
 8004e00:	6263      	str	r3, [r4, #36]	; 0x24
 8004e02:	4b05      	ldr	r3, [pc, #20]	; (8004e18 <std+0x3c>)
 8004e04:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e06:	4b05      	ldr	r3, [pc, #20]	; (8004e1c <std+0x40>)
 8004e08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e0a:	4b05      	ldr	r3, [pc, #20]	; (8004e20 <std+0x44>)
 8004e0c:	6224      	str	r4, [r4, #32]
 8004e0e:	6323      	str	r3, [r4, #48]	; 0x30
 8004e10:	bd10      	pop	{r4, pc}
 8004e12:	bf00      	nop
 8004e14:	08005b2d 	.word	0x08005b2d
 8004e18:	08005b4f 	.word	0x08005b4f
 8004e1c:	08005b87 	.word	0x08005b87
 8004e20:	08005bab 	.word	0x08005bab

08004e24 <_cleanup_r>:
 8004e24:	4901      	ldr	r1, [pc, #4]	; (8004e2c <_cleanup_r+0x8>)
 8004e26:	f000 b8af 	b.w	8004f88 <_fwalk_reent>
 8004e2a:	bf00      	nop
 8004e2c:	08004d65 	.word	0x08004d65

08004e30 <__sfmoreglue>:
 8004e30:	b570      	push	{r4, r5, r6, lr}
 8004e32:	1e4a      	subs	r2, r1, #1
 8004e34:	2568      	movs	r5, #104	; 0x68
 8004e36:	4355      	muls	r5, r2
 8004e38:	460e      	mov	r6, r1
 8004e3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004e3e:	f000 f979 	bl	8005134 <_malloc_r>
 8004e42:	4604      	mov	r4, r0
 8004e44:	b140      	cbz	r0, 8004e58 <__sfmoreglue+0x28>
 8004e46:	2100      	movs	r1, #0
 8004e48:	e9c0 1600 	strd	r1, r6, [r0]
 8004e4c:	300c      	adds	r0, #12
 8004e4e:	60a0      	str	r0, [r4, #8]
 8004e50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004e54:	f7ff fd5c 	bl	8004910 <memset>
 8004e58:	4620      	mov	r0, r4
 8004e5a:	bd70      	pop	{r4, r5, r6, pc}

08004e5c <__sfp_lock_acquire>:
 8004e5c:	4801      	ldr	r0, [pc, #4]	; (8004e64 <__sfp_lock_acquire+0x8>)
 8004e5e:	f000 b8b3 	b.w	8004fc8 <__retarget_lock_acquire_recursive>
 8004e62:	bf00      	nop
 8004e64:	200011b4 	.word	0x200011b4

08004e68 <__sfp_lock_release>:
 8004e68:	4801      	ldr	r0, [pc, #4]	; (8004e70 <__sfp_lock_release+0x8>)
 8004e6a:	f000 b8ae 	b.w	8004fca <__retarget_lock_release_recursive>
 8004e6e:	bf00      	nop
 8004e70:	200011b4 	.word	0x200011b4

08004e74 <__sinit_lock_acquire>:
 8004e74:	4801      	ldr	r0, [pc, #4]	; (8004e7c <__sinit_lock_acquire+0x8>)
 8004e76:	f000 b8a7 	b.w	8004fc8 <__retarget_lock_acquire_recursive>
 8004e7a:	bf00      	nop
 8004e7c:	200011af 	.word	0x200011af

08004e80 <__sinit_lock_release>:
 8004e80:	4801      	ldr	r0, [pc, #4]	; (8004e88 <__sinit_lock_release+0x8>)
 8004e82:	f000 b8a2 	b.w	8004fca <__retarget_lock_release_recursive>
 8004e86:	bf00      	nop
 8004e88:	200011af 	.word	0x200011af

08004e8c <__sinit>:
 8004e8c:	b510      	push	{r4, lr}
 8004e8e:	4604      	mov	r4, r0
 8004e90:	f7ff fff0 	bl	8004e74 <__sinit_lock_acquire>
 8004e94:	69a3      	ldr	r3, [r4, #24]
 8004e96:	b11b      	cbz	r3, 8004ea0 <__sinit+0x14>
 8004e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e9c:	f7ff bff0 	b.w	8004e80 <__sinit_lock_release>
 8004ea0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004ea4:	6523      	str	r3, [r4, #80]	; 0x50
 8004ea6:	4b13      	ldr	r3, [pc, #76]	; (8004ef4 <__sinit+0x68>)
 8004ea8:	4a13      	ldr	r2, [pc, #76]	; (8004ef8 <__sinit+0x6c>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	62a2      	str	r2, [r4, #40]	; 0x28
 8004eae:	42a3      	cmp	r3, r4
 8004eb0:	bf04      	itt	eq
 8004eb2:	2301      	moveq	r3, #1
 8004eb4:	61a3      	streq	r3, [r4, #24]
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	f000 f820 	bl	8004efc <__sfp>
 8004ebc:	6060      	str	r0, [r4, #4]
 8004ebe:	4620      	mov	r0, r4
 8004ec0:	f000 f81c 	bl	8004efc <__sfp>
 8004ec4:	60a0      	str	r0, [r4, #8]
 8004ec6:	4620      	mov	r0, r4
 8004ec8:	f000 f818 	bl	8004efc <__sfp>
 8004ecc:	2200      	movs	r2, #0
 8004ece:	60e0      	str	r0, [r4, #12]
 8004ed0:	2104      	movs	r1, #4
 8004ed2:	6860      	ldr	r0, [r4, #4]
 8004ed4:	f7ff ff82 	bl	8004ddc <std>
 8004ed8:	68a0      	ldr	r0, [r4, #8]
 8004eda:	2201      	movs	r2, #1
 8004edc:	2109      	movs	r1, #9
 8004ede:	f7ff ff7d 	bl	8004ddc <std>
 8004ee2:	68e0      	ldr	r0, [r4, #12]
 8004ee4:	2202      	movs	r2, #2
 8004ee6:	2112      	movs	r1, #18
 8004ee8:	f7ff ff78 	bl	8004ddc <std>
 8004eec:	2301      	movs	r3, #1
 8004eee:	61a3      	str	r3, [r4, #24]
 8004ef0:	e7d2      	b.n	8004e98 <__sinit+0xc>
 8004ef2:	bf00      	nop
 8004ef4:	080061ec 	.word	0x080061ec
 8004ef8:	08004e25 	.word	0x08004e25

08004efc <__sfp>:
 8004efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efe:	4607      	mov	r7, r0
 8004f00:	f7ff ffac 	bl	8004e5c <__sfp_lock_acquire>
 8004f04:	4b1e      	ldr	r3, [pc, #120]	; (8004f80 <__sfp+0x84>)
 8004f06:	681e      	ldr	r6, [r3, #0]
 8004f08:	69b3      	ldr	r3, [r6, #24]
 8004f0a:	b913      	cbnz	r3, 8004f12 <__sfp+0x16>
 8004f0c:	4630      	mov	r0, r6
 8004f0e:	f7ff ffbd 	bl	8004e8c <__sinit>
 8004f12:	3648      	adds	r6, #72	; 0x48
 8004f14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	d503      	bpl.n	8004f24 <__sfp+0x28>
 8004f1c:	6833      	ldr	r3, [r6, #0]
 8004f1e:	b30b      	cbz	r3, 8004f64 <__sfp+0x68>
 8004f20:	6836      	ldr	r6, [r6, #0]
 8004f22:	e7f7      	b.n	8004f14 <__sfp+0x18>
 8004f24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f28:	b9d5      	cbnz	r5, 8004f60 <__sfp+0x64>
 8004f2a:	4b16      	ldr	r3, [pc, #88]	; (8004f84 <__sfp+0x88>)
 8004f2c:	60e3      	str	r3, [r4, #12]
 8004f2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f32:	6665      	str	r5, [r4, #100]	; 0x64
 8004f34:	f000 f847 	bl	8004fc6 <__retarget_lock_init_recursive>
 8004f38:	f7ff ff96 	bl	8004e68 <__sfp_lock_release>
 8004f3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004f40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004f44:	6025      	str	r5, [r4, #0]
 8004f46:	61a5      	str	r5, [r4, #24]
 8004f48:	2208      	movs	r2, #8
 8004f4a:	4629      	mov	r1, r5
 8004f4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004f50:	f7ff fcde 	bl	8004910 <memset>
 8004f54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004f58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004f5c:	4620      	mov	r0, r4
 8004f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f60:	3468      	adds	r4, #104	; 0x68
 8004f62:	e7d9      	b.n	8004f18 <__sfp+0x1c>
 8004f64:	2104      	movs	r1, #4
 8004f66:	4638      	mov	r0, r7
 8004f68:	f7ff ff62 	bl	8004e30 <__sfmoreglue>
 8004f6c:	4604      	mov	r4, r0
 8004f6e:	6030      	str	r0, [r6, #0]
 8004f70:	2800      	cmp	r0, #0
 8004f72:	d1d5      	bne.n	8004f20 <__sfp+0x24>
 8004f74:	f7ff ff78 	bl	8004e68 <__sfp_lock_release>
 8004f78:	230c      	movs	r3, #12
 8004f7a:	603b      	str	r3, [r7, #0]
 8004f7c:	e7ee      	b.n	8004f5c <__sfp+0x60>
 8004f7e:	bf00      	nop
 8004f80:	080061ec 	.word	0x080061ec
 8004f84:	ffff0001 	.word	0xffff0001

08004f88 <_fwalk_reent>:
 8004f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f8c:	4606      	mov	r6, r0
 8004f8e:	4688      	mov	r8, r1
 8004f90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004f94:	2700      	movs	r7, #0
 8004f96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f9a:	f1b9 0901 	subs.w	r9, r9, #1
 8004f9e:	d505      	bpl.n	8004fac <_fwalk_reent+0x24>
 8004fa0:	6824      	ldr	r4, [r4, #0]
 8004fa2:	2c00      	cmp	r4, #0
 8004fa4:	d1f7      	bne.n	8004f96 <_fwalk_reent+0xe>
 8004fa6:	4638      	mov	r0, r7
 8004fa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fac:	89ab      	ldrh	r3, [r5, #12]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d907      	bls.n	8004fc2 <_fwalk_reent+0x3a>
 8004fb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	d003      	beq.n	8004fc2 <_fwalk_reent+0x3a>
 8004fba:	4629      	mov	r1, r5
 8004fbc:	4630      	mov	r0, r6
 8004fbe:	47c0      	blx	r8
 8004fc0:	4307      	orrs	r7, r0
 8004fc2:	3568      	adds	r5, #104	; 0x68
 8004fc4:	e7e9      	b.n	8004f9a <_fwalk_reent+0x12>

08004fc6 <__retarget_lock_init_recursive>:
 8004fc6:	4770      	bx	lr

08004fc8 <__retarget_lock_acquire_recursive>:
 8004fc8:	4770      	bx	lr

08004fca <__retarget_lock_release_recursive>:
 8004fca:	4770      	bx	lr

08004fcc <__swhatbuf_r>:
 8004fcc:	b570      	push	{r4, r5, r6, lr}
 8004fce:	460e      	mov	r6, r1
 8004fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fd4:	2900      	cmp	r1, #0
 8004fd6:	b096      	sub	sp, #88	; 0x58
 8004fd8:	4614      	mov	r4, r2
 8004fda:	461d      	mov	r5, r3
 8004fdc:	da07      	bge.n	8004fee <__swhatbuf_r+0x22>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	602b      	str	r3, [r5, #0]
 8004fe2:	89b3      	ldrh	r3, [r6, #12]
 8004fe4:	061a      	lsls	r2, r3, #24
 8004fe6:	d410      	bmi.n	800500a <__swhatbuf_r+0x3e>
 8004fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fec:	e00e      	b.n	800500c <__swhatbuf_r+0x40>
 8004fee:	466a      	mov	r2, sp
 8004ff0:	f000 fe02 	bl	8005bf8 <_fstat_r>
 8004ff4:	2800      	cmp	r0, #0
 8004ff6:	dbf2      	blt.n	8004fde <__swhatbuf_r+0x12>
 8004ff8:	9a01      	ldr	r2, [sp, #4]
 8004ffa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ffe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005002:	425a      	negs	r2, r3
 8005004:	415a      	adcs	r2, r3
 8005006:	602a      	str	r2, [r5, #0]
 8005008:	e7ee      	b.n	8004fe8 <__swhatbuf_r+0x1c>
 800500a:	2340      	movs	r3, #64	; 0x40
 800500c:	2000      	movs	r0, #0
 800500e:	6023      	str	r3, [r4, #0]
 8005010:	b016      	add	sp, #88	; 0x58
 8005012:	bd70      	pop	{r4, r5, r6, pc}

08005014 <__smakebuf_r>:
 8005014:	898b      	ldrh	r3, [r1, #12]
 8005016:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005018:	079d      	lsls	r5, r3, #30
 800501a:	4606      	mov	r6, r0
 800501c:	460c      	mov	r4, r1
 800501e:	d507      	bpl.n	8005030 <__smakebuf_r+0x1c>
 8005020:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005024:	6023      	str	r3, [r4, #0]
 8005026:	6123      	str	r3, [r4, #16]
 8005028:	2301      	movs	r3, #1
 800502a:	6163      	str	r3, [r4, #20]
 800502c:	b002      	add	sp, #8
 800502e:	bd70      	pop	{r4, r5, r6, pc}
 8005030:	ab01      	add	r3, sp, #4
 8005032:	466a      	mov	r2, sp
 8005034:	f7ff ffca 	bl	8004fcc <__swhatbuf_r>
 8005038:	9900      	ldr	r1, [sp, #0]
 800503a:	4605      	mov	r5, r0
 800503c:	4630      	mov	r0, r6
 800503e:	f000 f879 	bl	8005134 <_malloc_r>
 8005042:	b948      	cbnz	r0, 8005058 <__smakebuf_r+0x44>
 8005044:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005048:	059a      	lsls	r2, r3, #22
 800504a:	d4ef      	bmi.n	800502c <__smakebuf_r+0x18>
 800504c:	f023 0303 	bic.w	r3, r3, #3
 8005050:	f043 0302 	orr.w	r3, r3, #2
 8005054:	81a3      	strh	r3, [r4, #12]
 8005056:	e7e3      	b.n	8005020 <__smakebuf_r+0xc>
 8005058:	4b0d      	ldr	r3, [pc, #52]	; (8005090 <__smakebuf_r+0x7c>)
 800505a:	62b3      	str	r3, [r6, #40]	; 0x28
 800505c:	89a3      	ldrh	r3, [r4, #12]
 800505e:	6020      	str	r0, [r4, #0]
 8005060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005064:	81a3      	strh	r3, [r4, #12]
 8005066:	9b00      	ldr	r3, [sp, #0]
 8005068:	6163      	str	r3, [r4, #20]
 800506a:	9b01      	ldr	r3, [sp, #4]
 800506c:	6120      	str	r0, [r4, #16]
 800506e:	b15b      	cbz	r3, 8005088 <__smakebuf_r+0x74>
 8005070:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005074:	4630      	mov	r0, r6
 8005076:	f000 fdd1 	bl	8005c1c <_isatty_r>
 800507a:	b128      	cbz	r0, 8005088 <__smakebuf_r+0x74>
 800507c:	89a3      	ldrh	r3, [r4, #12]
 800507e:	f023 0303 	bic.w	r3, r3, #3
 8005082:	f043 0301 	orr.w	r3, r3, #1
 8005086:	81a3      	strh	r3, [r4, #12]
 8005088:	89a0      	ldrh	r0, [r4, #12]
 800508a:	4305      	orrs	r5, r0
 800508c:	81a5      	strh	r5, [r4, #12]
 800508e:	e7cd      	b.n	800502c <__smakebuf_r+0x18>
 8005090:	08004e25 	.word	0x08004e25

08005094 <_free_r>:
 8005094:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005096:	2900      	cmp	r1, #0
 8005098:	d048      	beq.n	800512c <_free_r+0x98>
 800509a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800509e:	9001      	str	r0, [sp, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f1a1 0404 	sub.w	r4, r1, #4
 80050a6:	bfb8      	it	lt
 80050a8:	18e4      	addlt	r4, r4, r3
 80050aa:	f000 fe01 	bl	8005cb0 <__malloc_lock>
 80050ae:	4a20      	ldr	r2, [pc, #128]	; (8005130 <_free_r+0x9c>)
 80050b0:	9801      	ldr	r0, [sp, #4]
 80050b2:	6813      	ldr	r3, [r2, #0]
 80050b4:	4615      	mov	r5, r2
 80050b6:	b933      	cbnz	r3, 80050c6 <_free_r+0x32>
 80050b8:	6063      	str	r3, [r4, #4]
 80050ba:	6014      	str	r4, [r2, #0]
 80050bc:	b003      	add	sp, #12
 80050be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050c2:	f000 bdfb 	b.w	8005cbc <__malloc_unlock>
 80050c6:	42a3      	cmp	r3, r4
 80050c8:	d90b      	bls.n	80050e2 <_free_r+0x4e>
 80050ca:	6821      	ldr	r1, [r4, #0]
 80050cc:	1862      	adds	r2, r4, r1
 80050ce:	4293      	cmp	r3, r2
 80050d0:	bf04      	itt	eq
 80050d2:	681a      	ldreq	r2, [r3, #0]
 80050d4:	685b      	ldreq	r3, [r3, #4]
 80050d6:	6063      	str	r3, [r4, #4]
 80050d8:	bf04      	itt	eq
 80050da:	1852      	addeq	r2, r2, r1
 80050dc:	6022      	streq	r2, [r4, #0]
 80050de:	602c      	str	r4, [r5, #0]
 80050e0:	e7ec      	b.n	80050bc <_free_r+0x28>
 80050e2:	461a      	mov	r2, r3
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	b10b      	cbz	r3, 80050ec <_free_r+0x58>
 80050e8:	42a3      	cmp	r3, r4
 80050ea:	d9fa      	bls.n	80050e2 <_free_r+0x4e>
 80050ec:	6811      	ldr	r1, [r2, #0]
 80050ee:	1855      	adds	r5, r2, r1
 80050f0:	42a5      	cmp	r5, r4
 80050f2:	d10b      	bne.n	800510c <_free_r+0x78>
 80050f4:	6824      	ldr	r4, [r4, #0]
 80050f6:	4421      	add	r1, r4
 80050f8:	1854      	adds	r4, r2, r1
 80050fa:	42a3      	cmp	r3, r4
 80050fc:	6011      	str	r1, [r2, #0]
 80050fe:	d1dd      	bne.n	80050bc <_free_r+0x28>
 8005100:	681c      	ldr	r4, [r3, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	6053      	str	r3, [r2, #4]
 8005106:	4421      	add	r1, r4
 8005108:	6011      	str	r1, [r2, #0]
 800510a:	e7d7      	b.n	80050bc <_free_r+0x28>
 800510c:	d902      	bls.n	8005114 <_free_r+0x80>
 800510e:	230c      	movs	r3, #12
 8005110:	6003      	str	r3, [r0, #0]
 8005112:	e7d3      	b.n	80050bc <_free_r+0x28>
 8005114:	6825      	ldr	r5, [r4, #0]
 8005116:	1961      	adds	r1, r4, r5
 8005118:	428b      	cmp	r3, r1
 800511a:	bf04      	itt	eq
 800511c:	6819      	ldreq	r1, [r3, #0]
 800511e:	685b      	ldreq	r3, [r3, #4]
 8005120:	6063      	str	r3, [r4, #4]
 8005122:	bf04      	itt	eq
 8005124:	1949      	addeq	r1, r1, r5
 8005126:	6021      	streq	r1, [r4, #0]
 8005128:	6054      	str	r4, [r2, #4]
 800512a:	e7c7      	b.n	80050bc <_free_r+0x28>
 800512c:	b003      	add	sp, #12
 800512e:	bd30      	pop	{r4, r5, pc}
 8005130:	20001098 	.word	0x20001098

08005134 <_malloc_r>:
 8005134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005136:	1ccd      	adds	r5, r1, #3
 8005138:	f025 0503 	bic.w	r5, r5, #3
 800513c:	3508      	adds	r5, #8
 800513e:	2d0c      	cmp	r5, #12
 8005140:	bf38      	it	cc
 8005142:	250c      	movcc	r5, #12
 8005144:	2d00      	cmp	r5, #0
 8005146:	4606      	mov	r6, r0
 8005148:	db01      	blt.n	800514e <_malloc_r+0x1a>
 800514a:	42a9      	cmp	r1, r5
 800514c:	d903      	bls.n	8005156 <_malloc_r+0x22>
 800514e:	230c      	movs	r3, #12
 8005150:	6033      	str	r3, [r6, #0]
 8005152:	2000      	movs	r0, #0
 8005154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005156:	f000 fdab 	bl	8005cb0 <__malloc_lock>
 800515a:	4921      	ldr	r1, [pc, #132]	; (80051e0 <_malloc_r+0xac>)
 800515c:	680a      	ldr	r2, [r1, #0]
 800515e:	4614      	mov	r4, r2
 8005160:	b99c      	cbnz	r4, 800518a <_malloc_r+0x56>
 8005162:	4f20      	ldr	r7, [pc, #128]	; (80051e4 <_malloc_r+0xb0>)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	b923      	cbnz	r3, 8005172 <_malloc_r+0x3e>
 8005168:	4621      	mov	r1, r4
 800516a:	4630      	mov	r0, r6
 800516c:	f000 fcce 	bl	8005b0c <_sbrk_r>
 8005170:	6038      	str	r0, [r7, #0]
 8005172:	4629      	mov	r1, r5
 8005174:	4630      	mov	r0, r6
 8005176:	f000 fcc9 	bl	8005b0c <_sbrk_r>
 800517a:	1c43      	adds	r3, r0, #1
 800517c:	d123      	bne.n	80051c6 <_malloc_r+0x92>
 800517e:	230c      	movs	r3, #12
 8005180:	6033      	str	r3, [r6, #0]
 8005182:	4630      	mov	r0, r6
 8005184:	f000 fd9a 	bl	8005cbc <__malloc_unlock>
 8005188:	e7e3      	b.n	8005152 <_malloc_r+0x1e>
 800518a:	6823      	ldr	r3, [r4, #0]
 800518c:	1b5b      	subs	r3, r3, r5
 800518e:	d417      	bmi.n	80051c0 <_malloc_r+0x8c>
 8005190:	2b0b      	cmp	r3, #11
 8005192:	d903      	bls.n	800519c <_malloc_r+0x68>
 8005194:	6023      	str	r3, [r4, #0]
 8005196:	441c      	add	r4, r3
 8005198:	6025      	str	r5, [r4, #0]
 800519a:	e004      	b.n	80051a6 <_malloc_r+0x72>
 800519c:	6863      	ldr	r3, [r4, #4]
 800519e:	42a2      	cmp	r2, r4
 80051a0:	bf0c      	ite	eq
 80051a2:	600b      	streq	r3, [r1, #0]
 80051a4:	6053      	strne	r3, [r2, #4]
 80051a6:	4630      	mov	r0, r6
 80051a8:	f000 fd88 	bl	8005cbc <__malloc_unlock>
 80051ac:	f104 000b 	add.w	r0, r4, #11
 80051b0:	1d23      	adds	r3, r4, #4
 80051b2:	f020 0007 	bic.w	r0, r0, #7
 80051b6:	1ac2      	subs	r2, r0, r3
 80051b8:	d0cc      	beq.n	8005154 <_malloc_r+0x20>
 80051ba:	1a1b      	subs	r3, r3, r0
 80051bc:	50a3      	str	r3, [r4, r2]
 80051be:	e7c9      	b.n	8005154 <_malloc_r+0x20>
 80051c0:	4622      	mov	r2, r4
 80051c2:	6864      	ldr	r4, [r4, #4]
 80051c4:	e7cc      	b.n	8005160 <_malloc_r+0x2c>
 80051c6:	1cc4      	adds	r4, r0, #3
 80051c8:	f024 0403 	bic.w	r4, r4, #3
 80051cc:	42a0      	cmp	r0, r4
 80051ce:	d0e3      	beq.n	8005198 <_malloc_r+0x64>
 80051d0:	1a21      	subs	r1, r4, r0
 80051d2:	4630      	mov	r0, r6
 80051d4:	f000 fc9a 	bl	8005b0c <_sbrk_r>
 80051d8:	3001      	adds	r0, #1
 80051da:	d1dd      	bne.n	8005198 <_malloc_r+0x64>
 80051dc:	e7cf      	b.n	800517e <_malloc_r+0x4a>
 80051de:	bf00      	nop
 80051e0:	20001098 	.word	0x20001098
 80051e4:	2000109c 	.word	0x2000109c

080051e8 <__ssputs_r>:
 80051e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051ec:	688e      	ldr	r6, [r1, #8]
 80051ee:	429e      	cmp	r6, r3
 80051f0:	4682      	mov	sl, r0
 80051f2:	460c      	mov	r4, r1
 80051f4:	4690      	mov	r8, r2
 80051f6:	461f      	mov	r7, r3
 80051f8:	d838      	bhi.n	800526c <__ssputs_r+0x84>
 80051fa:	898a      	ldrh	r2, [r1, #12]
 80051fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005200:	d032      	beq.n	8005268 <__ssputs_r+0x80>
 8005202:	6825      	ldr	r5, [r4, #0]
 8005204:	6909      	ldr	r1, [r1, #16]
 8005206:	eba5 0901 	sub.w	r9, r5, r1
 800520a:	6965      	ldr	r5, [r4, #20]
 800520c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005210:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005214:	3301      	adds	r3, #1
 8005216:	444b      	add	r3, r9
 8005218:	106d      	asrs	r5, r5, #1
 800521a:	429d      	cmp	r5, r3
 800521c:	bf38      	it	cc
 800521e:	461d      	movcc	r5, r3
 8005220:	0553      	lsls	r3, r2, #21
 8005222:	d531      	bpl.n	8005288 <__ssputs_r+0xa0>
 8005224:	4629      	mov	r1, r5
 8005226:	f7ff ff85 	bl	8005134 <_malloc_r>
 800522a:	4606      	mov	r6, r0
 800522c:	b950      	cbnz	r0, 8005244 <__ssputs_r+0x5c>
 800522e:	230c      	movs	r3, #12
 8005230:	f8ca 3000 	str.w	r3, [sl]
 8005234:	89a3      	ldrh	r3, [r4, #12]
 8005236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800523a:	81a3      	strh	r3, [r4, #12]
 800523c:	f04f 30ff 	mov.w	r0, #4294967295
 8005240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005244:	6921      	ldr	r1, [r4, #16]
 8005246:	464a      	mov	r2, r9
 8005248:	f000 fd0a 	bl	8005c60 <memcpy>
 800524c:	89a3      	ldrh	r3, [r4, #12]
 800524e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005256:	81a3      	strh	r3, [r4, #12]
 8005258:	6126      	str	r6, [r4, #16]
 800525a:	6165      	str	r5, [r4, #20]
 800525c:	444e      	add	r6, r9
 800525e:	eba5 0509 	sub.w	r5, r5, r9
 8005262:	6026      	str	r6, [r4, #0]
 8005264:	60a5      	str	r5, [r4, #8]
 8005266:	463e      	mov	r6, r7
 8005268:	42be      	cmp	r6, r7
 800526a:	d900      	bls.n	800526e <__ssputs_r+0x86>
 800526c:	463e      	mov	r6, r7
 800526e:	4632      	mov	r2, r6
 8005270:	6820      	ldr	r0, [r4, #0]
 8005272:	4641      	mov	r1, r8
 8005274:	f000 fd02 	bl	8005c7c <memmove>
 8005278:	68a3      	ldr	r3, [r4, #8]
 800527a:	6822      	ldr	r2, [r4, #0]
 800527c:	1b9b      	subs	r3, r3, r6
 800527e:	4432      	add	r2, r6
 8005280:	60a3      	str	r3, [r4, #8]
 8005282:	6022      	str	r2, [r4, #0]
 8005284:	2000      	movs	r0, #0
 8005286:	e7db      	b.n	8005240 <__ssputs_r+0x58>
 8005288:	462a      	mov	r2, r5
 800528a:	f000 fd1d 	bl	8005cc8 <_realloc_r>
 800528e:	4606      	mov	r6, r0
 8005290:	2800      	cmp	r0, #0
 8005292:	d1e1      	bne.n	8005258 <__ssputs_r+0x70>
 8005294:	6921      	ldr	r1, [r4, #16]
 8005296:	4650      	mov	r0, sl
 8005298:	f7ff fefc 	bl	8005094 <_free_r>
 800529c:	e7c7      	b.n	800522e <__ssputs_r+0x46>
	...

080052a0 <_svfiprintf_r>:
 80052a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052a4:	4698      	mov	r8, r3
 80052a6:	898b      	ldrh	r3, [r1, #12]
 80052a8:	061b      	lsls	r3, r3, #24
 80052aa:	b09d      	sub	sp, #116	; 0x74
 80052ac:	4607      	mov	r7, r0
 80052ae:	460d      	mov	r5, r1
 80052b0:	4614      	mov	r4, r2
 80052b2:	d50e      	bpl.n	80052d2 <_svfiprintf_r+0x32>
 80052b4:	690b      	ldr	r3, [r1, #16]
 80052b6:	b963      	cbnz	r3, 80052d2 <_svfiprintf_r+0x32>
 80052b8:	2140      	movs	r1, #64	; 0x40
 80052ba:	f7ff ff3b 	bl	8005134 <_malloc_r>
 80052be:	6028      	str	r0, [r5, #0]
 80052c0:	6128      	str	r0, [r5, #16]
 80052c2:	b920      	cbnz	r0, 80052ce <_svfiprintf_r+0x2e>
 80052c4:	230c      	movs	r3, #12
 80052c6:	603b      	str	r3, [r7, #0]
 80052c8:	f04f 30ff 	mov.w	r0, #4294967295
 80052cc:	e0d1      	b.n	8005472 <_svfiprintf_r+0x1d2>
 80052ce:	2340      	movs	r3, #64	; 0x40
 80052d0:	616b      	str	r3, [r5, #20]
 80052d2:	2300      	movs	r3, #0
 80052d4:	9309      	str	r3, [sp, #36]	; 0x24
 80052d6:	2320      	movs	r3, #32
 80052d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80052e0:	2330      	movs	r3, #48	; 0x30
 80052e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800548c <_svfiprintf_r+0x1ec>
 80052e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80052ea:	f04f 0901 	mov.w	r9, #1
 80052ee:	4623      	mov	r3, r4
 80052f0:	469a      	mov	sl, r3
 80052f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052f6:	b10a      	cbz	r2, 80052fc <_svfiprintf_r+0x5c>
 80052f8:	2a25      	cmp	r2, #37	; 0x25
 80052fa:	d1f9      	bne.n	80052f0 <_svfiprintf_r+0x50>
 80052fc:	ebba 0b04 	subs.w	fp, sl, r4
 8005300:	d00b      	beq.n	800531a <_svfiprintf_r+0x7a>
 8005302:	465b      	mov	r3, fp
 8005304:	4622      	mov	r2, r4
 8005306:	4629      	mov	r1, r5
 8005308:	4638      	mov	r0, r7
 800530a:	f7ff ff6d 	bl	80051e8 <__ssputs_r>
 800530e:	3001      	adds	r0, #1
 8005310:	f000 80aa 	beq.w	8005468 <_svfiprintf_r+0x1c8>
 8005314:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005316:	445a      	add	r2, fp
 8005318:	9209      	str	r2, [sp, #36]	; 0x24
 800531a:	f89a 3000 	ldrb.w	r3, [sl]
 800531e:	2b00      	cmp	r3, #0
 8005320:	f000 80a2 	beq.w	8005468 <_svfiprintf_r+0x1c8>
 8005324:	2300      	movs	r3, #0
 8005326:	f04f 32ff 	mov.w	r2, #4294967295
 800532a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800532e:	f10a 0a01 	add.w	sl, sl, #1
 8005332:	9304      	str	r3, [sp, #16]
 8005334:	9307      	str	r3, [sp, #28]
 8005336:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800533a:	931a      	str	r3, [sp, #104]	; 0x68
 800533c:	4654      	mov	r4, sl
 800533e:	2205      	movs	r2, #5
 8005340:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005344:	4851      	ldr	r0, [pc, #324]	; (800548c <_svfiprintf_r+0x1ec>)
 8005346:	f7fa ff63 	bl	8000210 <memchr>
 800534a:	9a04      	ldr	r2, [sp, #16]
 800534c:	b9d8      	cbnz	r0, 8005386 <_svfiprintf_r+0xe6>
 800534e:	06d0      	lsls	r0, r2, #27
 8005350:	bf44      	itt	mi
 8005352:	2320      	movmi	r3, #32
 8005354:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005358:	0711      	lsls	r1, r2, #28
 800535a:	bf44      	itt	mi
 800535c:	232b      	movmi	r3, #43	; 0x2b
 800535e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005362:	f89a 3000 	ldrb.w	r3, [sl]
 8005366:	2b2a      	cmp	r3, #42	; 0x2a
 8005368:	d015      	beq.n	8005396 <_svfiprintf_r+0xf6>
 800536a:	9a07      	ldr	r2, [sp, #28]
 800536c:	4654      	mov	r4, sl
 800536e:	2000      	movs	r0, #0
 8005370:	f04f 0c0a 	mov.w	ip, #10
 8005374:	4621      	mov	r1, r4
 8005376:	f811 3b01 	ldrb.w	r3, [r1], #1
 800537a:	3b30      	subs	r3, #48	; 0x30
 800537c:	2b09      	cmp	r3, #9
 800537e:	d94e      	bls.n	800541e <_svfiprintf_r+0x17e>
 8005380:	b1b0      	cbz	r0, 80053b0 <_svfiprintf_r+0x110>
 8005382:	9207      	str	r2, [sp, #28]
 8005384:	e014      	b.n	80053b0 <_svfiprintf_r+0x110>
 8005386:	eba0 0308 	sub.w	r3, r0, r8
 800538a:	fa09 f303 	lsl.w	r3, r9, r3
 800538e:	4313      	orrs	r3, r2
 8005390:	9304      	str	r3, [sp, #16]
 8005392:	46a2      	mov	sl, r4
 8005394:	e7d2      	b.n	800533c <_svfiprintf_r+0x9c>
 8005396:	9b03      	ldr	r3, [sp, #12]
 8005398:	1d19      	adds	r1, r3, #4
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	9103      	str	r1, [sp, #12]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	bfbb      	ittet	lt
 80053a2:	425b      	neglt	r3, r3
 80053a4:	f042 0202 	orrlt.w	r2, r2, #2
 80053a8:	9307      	strge	r3, [sp, #28]
 80053aa:	9307      	strlt	r3, [sp, #28]
 80053ac:	bfb8      	it	lt
 80053ae:	9204      	strlt	r2, [sp, #16]
 80053b0:	7823      	ldrb	r3, [r4, #0]
 80053b2:	2b2e      	cmp	r3, #46	; 0x2e
 80053b4:	d10c      	bne.n	80053d0 <_svfiprintf_r+0x130>
 80053b6:	7863      	ldrb	r3, [r4, #1]
 80053b8:	2b2a      	cmp	r3, #42	; 0x2a
 80053ba:	d135      	bne.n	8005428 <_svfiprintf_r+0x188>
 80053bc:	9b03      	ldr	r3, [sp, #12]
 80053be:	1d1a      	adds	r2, r3, #4
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	9203      	str	r2, [sp, #12]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	bfb8      	it	lt
 80053c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80053cc:	3402      	adds	r4, #2
 80053ce:	9305      	str	r3, [sp, #20]
 80053d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800549c <_svfiprintf_r+0x1fc>
 80053d4:	7821      	ldrb	r1, [r4, #0]
 80053d6:	2203      	movs	r2, #3
 80053d8:	4650      	mov	r0, sl
 80053da:	f7fa ff19 	bl	8000210 <memchr>
 80053de:	b140      	cbz	r0, 80053f2 <_svfiprintf_r+0x152>
 80053e0:	2340      	movs	r3, #64	; 0x40
 80053e2:	eba0 000a 	sub.w	r0, r0, sl
 80053e6:	fa03 f000 	lsl.w	r0, r3, r0
 80053ea:	9b04      	ldr	r3, [sp, #16]
 80053ec:	4303      	orrs	r3, r0
 80053ee:	3401      	adds	r4, #1
 80053f0:	9304      	str	r3, [sp, #16]
 80053f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053f6:	4826      	ldr	r0, [pc, #152]	; (8005490 <_svfiprintf_r+0x1f0>)
 80053f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053fc:	2206      	movs	r2, #6
 80053fe:	f7fa ff07 	bl	8000210 <memchr>
 8005402:	2800      	cmp	r0, #0
 8005404:	d038      	beq.n	8005478 <_svfiprintf_r+0x1d8>
 8005406:	4b23      	ldr	r3, [pc, #140]	; (8005494 <_svfiprintf_r+0x1f4>)
 8005408:	bb1b      	cbnz	r3, 8005452 <_svfiprintf_r+0x1b2>
 800540a:	9b03      	ldr	r3, [sp, #12]
 800540c:	3307      	adds	r3, #7
 800540e:	f023 0307 	bic.w	r3, r3, #7
 8005412:	3308      	adds	r3, #8
 8005414:	9303      	str	r3, [sp, #12]
 8005416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005418:	4433      	add	r3, r6
 800541a:	9309      	str	r3, [sp, #36]	; 0x24
 800541c:	e767      	b.n	80052ee <_svfiprintf_r+0x4e>
 800541e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005422:	460c      	mov	r4, r1
 8005424:	2001      	movs	r0, #1
 8005426:	e7a5      	b.n	8005374 <_svfiprintf_r+0xd4>
 8005428:	2300      	movs	r3, #0
 800542a:	3401      	adds	r4, #1
 800542c:	9305      	str	r3, [sp, #20]
 800542e:	4619      	mov	r1, r3
 8005430:	f04f 0c0a 	mov.w	ip, #10
 8005434:	4620      	mov	r0, r4
 8005436:	f810 2b01 	ldrb.w	r2, [r0], #1
 800543a:	3a30      	subs	r2, #48	; 0x30
 800543c:	2a09      	cmp	r2, #9
 800543e:	d903      	bls.n	8005448 <_svfiprintf_r+0x1a8>
 8005440:	2b00      	cmp	r3, #0
 8005442:	d0c5      	beq.n	80053d0 <_svfiprintf_r+0x130>
 8005444:	9105      	str	r1, [sp, #20]
 8005446:	e7c3      	b.n	80053d0 <_svfiprintf_r+0x130>
 8005448:	fb0c 2101 	mla	r1, ip, r1, r2
 800544c:	4604      	mov	r4, r0
 800544e:	2301      	movs	r3, #1
 8005450:	e7f0      	b.n	8005434 <_svfiprintf_r+0x194>
 8005452:	ab03      	add	r3, sp, #12
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	462a      	mov	r2, r5
 8005458:	4b0f      	ldr	r3, [pc, #60]	; (8005498 <_svfiprintf_r+0x1f8>)
 800545a:	a904      	add	r1, sp, #16
 800545c:	4638      	mov	r0, r7
 800545e:	f3af 8000 	nop.w
 8005462:	1c42      	adds	r2, r0, #1
 8005464:	4606      	mov	r6, r0
 8005466:	d1d6      	bne.n	8005416 <_svfiprintf_r+0x176>
 8005468:	89ab      	ldrh	r3, [r5, #12]
 800546a:	065b      	lsls	r3, r3, #25
 800546c:	f53f af2c 	bmi.w	80052c8 <_svfiprintf_r+0x28>
 8005470:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005472:	b01d      	add	sp, #116	; 0x74
 8005474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005478:	ab03      	add	r3, sp, #12
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	462a      	mov	r2, r5
 800547e:	4b06      	ldr	r3, [pc, #24]	; (8005498 <_svfiprintf_r+0x1f8>)
 8005480:	a904      	add	r1, sp, #16
 8005482:	4638      	mov	r0, r7
 8005484:	f000 f9d4 	bl	8005830 <_printf_i>
 8005488:	e7eb      	b.n	8005462 <_svfiprintf_r+0x1c2>
 800548a:	bf00      	nop
 800548c:	08006250 	.word	0x08006250
 8005490:	0800625a 	.word	0x0800625a
 8005494:	00000000 	.word	0x00000000
 8005498:	080051e9 	.word	0x080051e9
 800549c:	08006256 	.word	0x08006256

080054a0 <__sfputc_r>:
 80054a0:	6893      	ldr	r3, [r2, #8]
 80054a2:	3b01      	subs	r3, #1
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	b410      	push	{r4}
 80054a8:	6093      	str	r3, [r2, #8]
 80054aa:	da08      	bge.n	80054be <__sfputc_r+0x1e>
 80054ac:	6994      	ldr	r4, [r2, #24]
 80054ae:	42a3      	cmp	r3, r4
 80054b0:	db01      	blt.n	80054b6 <__sfputc_r+0x16>
 80054b2:	290a      	cmp	r1, #10
 80054b4:	d103      	bne.n	80054be <__sfputc_r+0x1e>
 80054b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054ba:	f7ff bb0d 	b.w	8004ad8 <__swbuf_r>
 80054be:	6813      	ldr	r3, [r2, #0]
 80054c0:	1c58      	adds	r0, r3, #1
 80054c2:	6010      	str	r0, [r2, #0]
 80054c4:	7019      	strb	r1, [r3, #0]
 80054c6:	4608      	mov	r0, r1
 80054c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <__sfputs_r>:
 80054ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d0:	4606      	mov	r6, r0
 80054d2:	460f      	mov	r7, r1
 80054d4:	4614      	mov	r4, r2
 80054d6:	18d5      	adds	r5, r2, r3
 80054d8:	42ac      	cmp	r4, r5
 80054da:	d101      	bne.n	80054e0 <__sfputs_r+0x12>
 80054dc:	2000      	movs	r0, #0
 80054de:	e007      	b.n	80054f0 <__sfputs_r+0x22>
 80054e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054e4:	463a      	mov	r2, r7
 80054e6:	4630      	mov	r0, r6
 80054e8:	f7ff ffda 	bl	80054a0 <__sfputc_r>
 80054ec:	1c43      	adds	r3, r0, #1
 80054ee:	d1f3      	bne.n	80054d8 <__sfputs_r+0xa>
 80054f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080054f4 <_vfiprintf_r>:
 80054f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054f8:	460d      	mov	r5, r1
 80054fa:	b09d      	sub	sp, #116	; 0x74
 80054fc:	4614      	mov	r4, r2
 80054fe:	4698      	mov	r8, r3
 8005500:	4606      	mov	r6, r0
 8005502:	b118      	cbz	r0, 800550c <_vfiprintf_r+0x18>
 8005504:	6983      	ldr	r3, [r0, #24]
 8005506:	b90b      	cbnz	r3, 800550c <_vfiprintf_r+0x18>
 8005508:	f7ff fcc0 	bl	8004e8c <__sinit>
 800550c:	4b89      	ldr	r3, [pc, #548]	; (8005734 <_vfiprintf_r+0x240>)
 800550e:	429d      	cmp	r5, r3
 8005510:	d11b      	bne.n	800554a <_vfiprintf_r+0x56>
 8005512:	6875      	ldr	r5, [r6, #4]
 8005514:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005516:	07d9      	lsls	r1, r3, #31
 8005518:	d405      	bmi.n	8005526 <_vfiprintf_r+0x32>
 800551a:	89ab      	ldrh	r3, [r5, #12]
 800551c:	059a      	lsls	r2, r3, #22
 800551e:	d402      	bmi.n	8005526 <_vfiprintf_r+0x32>
 8005520:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005522:	f7ff fd51 	bl	8004fc8 <__retarget_lock_acquire_recursive>
 8005526:	89ab      	ldrh	r3, [r5, #12]
 8005528:	071b      	lsls	r3, r3, #28
 800552a:	d501      	bpl.n	8005530 <_vfiprintf_r+0x3c>
 800552c:	692b      	ldr	r3, [r5, #16]
 800552e:	b9eb      	cbnz	r3, 800556c <_vfiprintf_r+0x78>
 8005530:	4629      	mov	r1, r5
 8005532:	4630      	mov	r0, r6
 8005534:	f7ff fb22 	bl	8004b7c <__swsetup_r>
 8005538:	b1c0      	cbz	r0, 800556c <_vfiprintf_r+0x78>
 800553a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800553c:	07dc      	lsls	r4, r3, #31
 800553e:	d50e      	bpl.n	800555e <_vfiprintf_r+0x6a>
 8005540:	f04f 30ff 	mov.w	r0, #4294967295
 8005544:	b01d      	add	sp, #116	; 0x74
 8005546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800554a:	4b7b      	ldr	r3, [pc, #492]	; (8005738 <_vfiprintf_r+0x244>)
 800554c:	429d      	cmp	r5, r3
 800554e:	d101      	bne.n	8005554 <_vfiprintf_r+0x60>
 8005550:	68b5      	ldr	r5, [r6, #8]
 8005552:	e7df      	b.n	8005514 <_vfiprintf_r+0x20>
 8005554:	4b79      	ldr	r3, [pc, #484]	; (800573c <_vfiprintf_r+0x248>)
 8005556:	429d      	cmp	r5, r3
 8005558:	bf08      	it	eq
 800555a:	68f5      	ldreq	r5, [r6, #12]
 800555c:	e7da      	b.n	8005514 <_vfiprintf_r+0x20>
 800555e:	89ab      	ldrh	r3, [r5, #12]
 8005560:	0598      	lsls	r0, r3, #22
 8005562:	d4ed      	bmi.n	8005540 <_vfiprintf_r+0x4c>
 8005564:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005566:	f7ff fd30 	bl	8004fca <__retarget_lock_release_recursive>
 800556a:	e7e9      	b.n	8005540 <_vfiprintf_r+0x4c>
 800556c:	2300      	movs	r3, #0
 800556e:	9309      	str	r3, [sp, #36]	; 0x24
 8005570:	2320      	movs	r3, #32
 8005572:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005576:	f8cd 800c 	str.w	r8, [sp, #12]
 800557a:	2330      	movs	r3, #48	; 0x30
 800557c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005740 <_vfiprintf_r+0x24c>
 8005580:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005584:	f04f 0901 	mov.w	r9, #1
 8005588:	4623      	mov	r3, r4
 800558a:	469a      	mov	sl, r3
 800558c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005590:	b10a      	cbz	r2, 8005596 <_vfiprintf_r+0xa2>
 8005592:	2a25      	cmp	r2, #37	; 0x25
 8005594:	d1f9      	bne.n	800558a <_vfiprintf_r+0x96>
 8005596:	ebba 0b04 	subs.w	fp, sl, r4
 800559a:	d00b      	beq.n	80055b4 <_vfiprintf_r+0xc0>
 800559c:	465b      	mov	r3, fp
 800559e:	4622      	mov	r2, r4
 80055a0:	4629      	mov	r1, r5
 80055a2:	4630      	mov	r0, r6
 80055a4:	f7ff ff93 	bl	80054ce <__sfputs_r>
 80055a8:	3001      	adds	r0, #1
 80055aa:	f000 80aa 	beq.w	8005702 <_vfiprintf_r+0x20e>
 80055ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055b0:	445a      	add	r2, fp
 80055b2:	9209      	str	r2, [sp, #36]	; 0x24
 80055b4:	f89a 3000 	ldrb.w	r3, [sl]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f000 80a2 	beq.w	8005702 <_vfiprintf_r+0x20e>
 80055be:	2300      	movs	r3, #0
 80055c0:	f04f 32ff 	mov.w	r2, #4294967295
 80055c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055c8:	f10a 0a01 	add.w	sl, sl, #1
 80055cc:	9304      	str	r3, [sp, #16]
 80055ce:	9307      	str	r3, [sp, #28]
 80055d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055d4:	931a      	str	r3, [sp, #104]	; 0x68
 80055d6:	4654      	mov	r4, sl
 80055d8:	2205      	movs	r2, #5
 80055da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055de:	4858      	ldr	r0, [pc, #352]	; (8005740 <_vfiprintf_r+0x24c>)
 80055e0:	f7fa fe16 	bl	8000210 <memchr>
 80055e4:	9a04      	ldr	r2, [sp, #16]
 80055e6:	b9d8      	cbnz	r0, 8005620 <_vfiprintf_r+0x12c>
 80055e8:	06d1      	lsls	r1, r2, #27
 80055ea:	bf44      	itt	mi
 80055ec:	2320      	movmi	r3, #32
 80055ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055f2:	0713      	lsls	r3, r2, #28
 80055f4:	bf44      	itt	mi
 80055f6:	232b      	movmi	r3, #43	; 0x2b
 80055f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055fc:	f89a 3000 	ldrb.w	r3, [sl]
 8005600:	2b2a      	cmp	r3, #42	; 0x2a
 8005602:	d015      	beq.n	8005630 <_vfiprintf_r+0x13c>
 8005604:	9a07      	ldr	r2, [sp, #28]
 8005606:	4654      	mov	r4, sl
 8005608:	2000      	movs	r0, #0
 800560a:	f04f 0c0a 	mov.w	ip, #10
 800560e:	4621      	mov	r1, r4
 8005610:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005614:	3b30      	subs	r3, #48	; 0x30
 8005616:	2b09      	cmp	r3, #9
 8005618:	d94e      	bls.n	80056b8 <_vfiprintf_r+0x1c4>
 800561a:	b1b0      	cbz	r0, 800564a <_vfiprintf_r+0x156>
 800561c:	9207      	str	r2, [sp, #28]
 800561e:	e014      	b.n	800564a <_vfiprintf_r+0x156>
 8005620:	eba0 0308 	sub.w	r3, r0, r8
 8005624:	fa09 f303 	lsl.w	r3, r9, r3
 8005628:	4313      	orrs	r3, r2
 800562a:	9304      	str	r3, [sp, #16]
 800562c:	46a2      	mov	sl, r4
 800562e:	e7d2      	b.n	80055d6 <_vfiprintf_r+0xe2>
 8005630:	9b03      	ldr	r3, [sp, #12]
 8005632:	1d19      	adds	r1, r3, #4
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	9103      	str	r1, [sp, #12]
 8005638:	2b00      	cmp	r3, #0
 800563a:	bfbb      	ittet	lt
 800563c:	425b      	neglt	r3, r3
 800563e:	f042 0202 	orrlt.w	r2, r2, #2
 8005642:	9307      	strge	r3, [sp, #28]
 8005644:	9307      	strlt	r3, [sp, #28]
 8005646:	bfb8      	it	lt
 8005648:	9204      	strlt	r2, [sp, #16]
 800564a:	7823      	ldrb	r3, [r4, #0]
 800564c:	2b2e      	cmp	r3, #46	; 0x2e
 800564e:	d10c      	bne.n	800566a <_vfiprintf_r+0x176>
 8005650:	7863      	ldrb	r3, [r4, #1]
 8005652:	2b2a      	cmp	r3, #42	; 0x2a
 8005654:	d135      	bne.n	80056c2 <_vfiprintf_r+0x1ce>
 8005656:	9b03      	ldr	r3, [sp, #12]
 8005658:	1d1a      	adds	r2, r3, #4
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	9203      	str	r2, [sp, #12]
 800565e:	2b00      	cmp	r3, #0
 8005660:	bfb8      	it	lt
 8005662:	f04f 33ff 	movlt.w	r3, #4294967295
 8005666:	3402      	adds	r4, #2
 8005668:	9305      	str	r3, [sp, #20]
 800566a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005750 <_vfiprintf_r+0x25c>
 800566e:	7821      	ldrb	r1, [r4, #0]
 8005670:	2203      	movs	r2, #3
 8005672:	4650      	mov	r0, sl
 8005674:	f7fa fdcc 	bl	8000210 <memchr>
 8005678:	b140      	cbz	r0, 800568c <_vfiprintf_r+0x198>
 800567a:	2340      	movs	r3, #64	; 0x40
 800567c:	eba0 000a 	sub.w	r0, r0, sl
 8005680:	fa03 f000 	lsl.w	r0, r3, r0
 8005684:	9b04      	ldr	r3, [sp, #16]
 8005686:	4303      	orrs	r3, r0
 8005688:	3401      	adds	r4, #1
 800568a:	9304      	str	r3, [sp, #16]
 800568c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005690:	482c      	ldr	r0, [pc, #176]	; (8005744 <_vfiprintf_r+0x250>)
 8005692:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005696:	2206      	movs	r2, #6
 8005698:	f7fa fdba 	bl	8000210 <memchr>
 800569c:	2800      	cmp	r0, #0
 800569e:	d03f      	beq.n	8005720 <_vfiprintf_r+0x22c>
 80056a0:	4b29      	ldr	r3, [pc, #164]	; (8005748 <_vfiprintf_r+0x254>)
 80056a2:	bb1b      	cbnz	r3, 80056ec <_vfiprintf_r+0x1f8>
 80056a4:	9b03      	ldr	r3, [sp, #12]
 80056a6:	3307      	adds	r3, #7
 80056a8:	f023 0307 	bic.w	r3, r3, #7
 80056ac:	3308      	adds	r3, #8
 80056ae:	9303      	str	r3, [sp, #12]
 80056b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056b2:	443b      	add	r3, r7
 80056b4:	9309      	str	r3, [sp, #36]	; 0x24
 80056b6:	e767      	b.n	8005588 <_vfiprintf_r+0x94>
 80056b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80056bc:	460c      	mov	r4, r1
 80056be:	2001      	movs	r0, #1
 80056c0:	e7a5      	b.n	800560e <_vfiprintf_r+0x11a>
 80056c2:	2300      	movs	r3, #0
 80056c4:	3401      	adds	r4, #1
 80056c6:	9305      	str	r3, [sp, #20]
 80056c8:	4619      	mov	r1, r3
 80056ca:	f04f 0c0a 	mov.w	ip, #10
 80056ce:	4620      	mov	r0, r4
 80056d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056d4:	3a30      	subs	r2, #48	; 0x30
 80056d6:	2a09      	cmp	r2, #9
 80056d8:	d903      	bls.n	80056e2 <_vfiprintf_r+0x1ee>
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d0c5      	beq.n	800566a <_vfiprintf_r+0x176>
 80056de:	9105      	str	r1, [sp, #20]
 80056e0:	e7c3      	b.n	800566a <_vfiprintf_r+0x176>
 80056e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80056e6:	4604      	mov	r4, r0
 80056e8:	2301      	movs	r3, #1
 80056ea:	e7f0      	b.n	80056ce <_vfiprintf_r+0x1da>
 80056ec:	ab03      	add	r3, sp, #12
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	462a      	mov	r2, r5
 80056f2:	4b16      	ldr	r3, [pc, #88]	; (800574c <_vfiprintf_r+0x258>)
 80056f4:	a904      	add	r1, sp, #16
 80056f6:	4630      	mov	r0, r6
 80056f8:	f3af 8000 	nop.w
 80056fc:	4607      	mov	r7, r0
 80056fe:	1c78      	adds	r0, r7, #1
 8005700:	d1d6      	bne.n	80056b0 <_vfiprintf_r+0x1bc>
 8005702:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005704:	07d9      	lsls	r1, r3, #31
 8005706:	d405      	bmi.n	8005714 <_vfiprintf_r+0x220>
 8005708:	89ab      	ldrh	r3, [r5, #12]
 800570a:	059a      	lsls	r2, r3, #22
 800570c:	d402      	bmi.n	8005714 <_vfiprintf_r+0x220>
 800570e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005710:	f7ff fc5b 	bl	8004fca <__retarget_lock_release_recursive>
 8005714:	89ab      	ldrh	r3, [r5, #12]
 8005716:	065b      	lsls	r3, r3, #25
 8005718:	f53f af12 	bmi.w	8005540 <_vfiprintf_r+0x4c>
 800571c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800571e:	e711      	b.n	8005544 <_vfiprintf_r+0x50>
 8005720:	ab03      	add	r3, sp, #12
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	462a      	mov	r2, r5
 8005726:	4b09      	ldr	r3, [pc, #36]	; (800574c <_vfiprintf_r+0x258>)
 8005728:	a904      	add	r1, sp, #16
 800572a:	4630      	mov	r0, r6
 800572c:	f000 f880 	bl	8005830 <_printf_i>
 8005730:	e7e4      	b.n	80056fc <_vfiprintf_r+0x208>
 8005732:	bf00      	nop
 8005734:	08006210 	.word	0x08006210
 8005738:	08006230 	.word	0x08006230
 800573c:	080061f0 	.word	0x080061f0
 8005740:	08006250 	.word	0x08006250
 8005744:	0800625a 	.word	0x0800625a
 8005748:	00000000 	.word	0x00000000
 800574c:	080054cf 	.word	0x080054cf
 8005750:	08006256 	.word	0x08006256

08005754 <_printf_common>:
 8005754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005758:	4616      	mov	r6, r2
 800575a:	4699      	mov	r9, r3
 800575c:	688a      	ldr	r2, [r1, #8]
 800575e:	690b      	ldr	r3, [r1, #16]
 8005760:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005764:	4293      	cmp	r3, r2
 8005766:	bfb8      	it	lt
 8005768:	4613      	movlt	r3, r2
 800576a:	6033      	str	r3, [r6, #0]
 800576c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005770:	4607      	mov	r7, r0
 8005772:	460c      	mov	r4, r1
 8005774:	b10a      	cbz	r2, 800577a <_printf_common+0x26>
 8005776:	3301      	adds	r3, #1
 8005778:	6033      	str	r3, [r6, #0]
 800577a:	6823      	ldr	r3, [r4, #0]
 800577c:	0699      	lsls	r1, r3, #26
 800577e:	bf42      	ittt	mi
 8005780:	6833      	ldrmi	r3, [r6, #0]
 8005782:	3302      	addmi	r3, #2
 8005784:	6033      	strmi	r3, [r6, #0]
 8005786:	6825      	ldr	r5, [r4, #0]
 8005788:	f015 0506 	ands.w	r5, r5, #6
 800578c:	d106      	bne.n	800579c <_printf_common+0x48>
 800578e:	f104 0a19 	add.w	sl, r4, #25
 8005792:	68e3      	ldr	r3, [r4, #12]
 8005794:	6832      	ldr	r2, [r6, #0]
 8005796:	1a9b      	subs	r3, r3, r2
 8005798:	42ab      	cmp	r3, r5
 800579a:	dc26      	bgt.n	80057ea <_printf_common+0x96>
 800579c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057a0:	1e13      	subs	r3, r2, #0
 80057a2:	6822      	ldr	r2, [r4, #0]
 80057a4:	bf18      	it	ne
 80057a6:	2301      	movne	r3, #1
 80057a8:	0692      	lsls	r2, r2, #26
 80057aa:	d42b      	bmi.n	8005804 <_printf_common+0xb0>
 80057ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057b0:	4649      	mov	r1, r9
 80057b2:	4638      	mov	r0, r7
 80057b4:	47c0      	blx	r8
 80057b6:	3001      	adds	r0, #1
 80057b8:	d01e      	beq.n	80057f8 <_printf_common+0xa4>
 80057ba:	6823      	ldr	r3, [r4, #0]
 80057bc:	68e5      	ldr	r5, [r4, #12]
 80057be:	6832      	ldr	r2, [r6, #0]
 80057c0:	f003 0306 	and.w	r3, r3, #6
 80057c4:	2b04      	cmp	r3, #4
 80057c6:	bf08      	it	eq
 80057c8:	1aad      	subeq	r5, r5, r2
 80057ca:	68a3      	ldr	r3, [r4, #8]
 80057cc:	6922      	ldr	r2, [r4, #16]
 80057ce:	bf0c      	ite	eq
 80057d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057d4:	2500      	movne	r5, #0
 80057d6:	4293      	cmp	r3, r2
 80057d8:	bfc4      	itt	gt
 80057da:	1a9b      	subgt	r3, r3, r2
 80057dc:	18ed      	addgt	r5, r5, r3
 80057de:	2600      	movs	r6, #0
 80057e0:	341a      	adds	r4, #26
 80057e2:	42b5      	cmp	r5, r6
 80057e4:	d11a      	bne.n	800581c <_printf_common+0xc8>
 80057e6:	2000      	movs	r0, #0
 80057e8:	e008      	b.n	80057fc <_printf_common+0xa8>
 80057ea:	2301      	movs	r3, #1
 80057ec:	4652      	mov	r2, sl
 80057ee:	4649      	mov	r1, r9
 80057f0:	4638      	mov	r0, r7
 80057f2:	47c0      	blx	r8
 80057f4:	3001      	adds	r0, #1
 80057f6:	d103      	bne.n	8005800 <_printf_common+0xac>
 80057f8:	f04f 30ff 	mov.w	r0, #4294967295
 80057fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005800:	3501      	adds	r5, #1
 8005802:	e7c6      	b.n	8005792 <_printf_common+0x3e>
 8005804:	18e1      	adds	r1, r4, r3
 8005806:	1c5a      	adds	r2, r3, #1
 8005808:	2030      	movs	r0, #48	; 0x30
 800580a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800580e:	4422      	add	r2, r4
 8005810:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005814:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005818:	3302      	adds	r3, #2
 800581a:	e7c7      	b.n	80057ac <_printf_common+0x58>
 800581c:	2301      	movs	r3, #1
 800581e:	4622      	mov	r2, r4
 8005820:	4649      	mov	r1, r9
 8005822:	4638      	mov	r0, r7
 8005824:	47c0      	blx	r8
 8005826:	3001      	adds	r0, #1
 8005828:	d0e6      	beq.n	80057f8 <_printf_common+0xa4>
 800582a:	3601      	adds	r6, #1
 800582c:	e7d9      	b.n	80057e2 <_printf_common+0x8e>
	...

08005830 <_printf_i>:
 8005830:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005834:	460c      	mov	r4, r1
 8005836:	4691      	mov	r9, r2
 8005838:	7e27      	ldrb	r7, [r4, #24]
 800583a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800583c:	2f78      	cmp	r7, #120	; 0x78
 800583e:	4680      	mov	r8, r0
 8005840:	469a      	mov	sl, r3
 8005842:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005846:	d807      	bhi.n	8005858 <_printf_i+0x28>
 8005848:	2f62      	cmp	r7, #98	; 0x62
 800584a:	d80a      	bhi.n	8005862 <_printf_i+0x32>
 800584c:	2f00      	cmp	r7, #0
 800584e:	f000 80d8 	beq.w	8005a02 <_printf_i+0x1d2>
 8005852:	2f58      	cmp	r7, #88	; 0x58
 8005854:	f000 80a3 	beq.w	800599e <_printf_i+0x16e>
 8005858:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800585c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005860:	e03a      	b.n	80058d8 <_printf_i+0xa8>
 8005862:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005866:	2b15      	cmp	r3, #21
 8005868:	d8f6      	bhi.n	8005858 <_printf_i+0x28>
 800586a:	a001      	add	r0, pc, #4	; (adr r0, 8005870 <_printf_i+0x40>)
 800586c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005870:	080058c9 	.word	0x080058c9
 8005874:	080058dd 	.word	0x080058dd
 8005878:	08005859 	.word	0x08005859
 800587c:	08005859 	.word	0x08005859
 8005880:	08005859 	.word	0x08005859
 8005884:	08005859 	.word	0x08005859
 8005888:	080058dd 	.word	0x080058dd
 800588c:	08005859 	.word	0x08005859
 8005890:	08005859 	.word	0x08005859
 8005894:	08005859 	.word	0x08005859
 8005898:	08005859 	.word	0x08005859
 800589c:	080059e9 	.word	0x080059e9
 80058a0:	0800590d 	.word	0x0800590d
 80058a4:	080059cb 	.word	0x080059cb
 80058a8:	08005859 	.word	0x08005859
 80058ac:	08005859 	.word	0x08005859
 80058b0:	08005a0b 	.word	0x08005a0b
 80058b4:	08005859 	.word	0x08005859
 80058b8:	0800590d 	.word	0x0800590d
 80058bc:	08005859 	.word	0x08005859
 80058c0:	08005859 	.word	0x08005859
 80058c4:	080059d3 	.word	0x080059d3
 80058c8:	680b      	ldr	r3, [r1, #0]
 80058ca:	1d1a      	adds	r2, r3, #4
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	600a      	str	r2, [r1, #0]
 80058d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80058d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058d8:	2301      	movs	r3, #1
 80058da:	e0a3      	b.n	8005a24 <_printf_i+0x1f4>
 80058dc:	6825      	ldr	r5, [r4, #0]
 80058de:	6808      	ldr	r0, [r1, #0]
 80058e0:	062e      	lsls	r6, r5, #24
 80058e2:	f100 0304 	add.w	r3, r0, #4
 80058e6:	d50a      	bpl.n	80058fe <_printf_i+0xce>
 80058e8:	6805      	ldr	r5, [r0, #0]
 80058ea:	600b      	str	r3, [r1, #0]
 80058ec:	2d00      	cmp	r5, #0
 80058ee:	da03      	bge.n	80058f8 <_printf_i+0xc8>
 80058f0:	232d      	movs	r3, #45	; 0x2d
 80058f2:	426d      	negs	r5, r5
 80058f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058f8:	485e      	ldr	r0, [pc, #376]	; (8005a74 <_printf_i+0x244>)
 80058fa:	230a      	movs	r3, #10
 80058fc:	e019      	b.n	8005932 <_printf_i+0x102>
 80058fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005902:	6805      	ldr	r5, [r0, #0]
 8005904:	600b      	str	r3, [r1, #0]
 8005906:	bf18      	it	ne
 8005908:	b22d      	sxthne	r5, r5
 800590a:	e7ef      	b.n	80058ec <_printf_i+0xbc>
 800590c:	680b      	ldr	r3, [r1, #0]
 800590e:	6825      	ldr	r5, [r4, #0]
 8005910:	1d18      	adds	r0, r3, #4
 8005912:	6008      	str	r0, [r1, #0]
 8005914:	0628      	lsls	r0, r5, #24
 8005916:	d501      	bpl.n	800591c <_printf_i+0xec>
 8005918:	681d      	ldr	r5, [r3, #0]
 800591a:	e002      	b.n	8005922 <_printf_i+0xf2>
 800591c:	0669      	lsls	r1, r5, #25
 800591e:	d5fb      	bpl.n	8005918 <_printf_i+0xe8>
 8005920:	881d      	ldrh	r5, [r3, #0]
 8005922:	4854      	ldr	r0, [pc, #336]	; (8005a74 <_printf_i+0x244>)
 8005924:	2f6f      	cmp	r7, #111	; 0x6f
 8005926:	bf0c      	ite	eq
 8005928:	2308      	moveq	r3, #8
 800592a:	230a      	movne	r3, #10
 800592c:	2100      	movs	r1, #0
 800592e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005932:	6866      	ldr	r6, [r4, #4]
 8005934:	60a6      	str	r6, [r4, #8]
 8005936:	2e00      	cmp	r6, #0
 8005938:	bfa2      	ittt	ge
 800593a:	6821      	ldrge	r1, [r4, #0]
 800593c:	f021 0104 	bicge.w	r1, r1, #4
 8005940:	6021      	strge	r1, [r4, #0]
 8005942:	b90d      	cbnz	r5, 8005948 <_printf_i+0x118>
 8005944:	2e00      	cmp	r6, #0
 8005946:	d04d      	beq.n	80059e4 <_printf_i+0x1b4>
 8005948:	4616      	mov	r6, r2
 800594a:	fbb5 f1f3 	udiv	r1, r5, r3
 800594e:	fb03 5711 	mls	r7, r3, r1, r5
 8005952:	5dc7      	ldrb	r7, [r0, r7]
 8005954:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005958:	462f      	mov	r7, r5
 800595a:	42bb      	cmp	r3, r7
 800595c:	460d      	mov	r5, r1
 800595e:	d9f4      	bls.n	800594a <_printf_i+0x11a>
 8005960:	2b08      	cmp	r3, #8
 8005962:	d10b      	bne.n	800597c <_printf_i+0x14c>
 8005964:	6823      	ldr	r3, [r4, #0]
 8005966:	07df      	lsls	r7, r3, #31
 8005968:	d508      	bpl.n	800597c <_printf_i+0x14c>
 800596a:	6923      	ldr	r3, [r4, #16]
 800596c:	6861      	ldr	r1, [r4, #4]
 800596e:	4299      	cmp	r1, r3
 8005970:	bfde      	ittt	le
 8005972:	2330      	movle	r3, #48	; 0x30
 8005974:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005978:	f106 36ff 	addle.w	r6, r6, #4294967295
 800597c:	1b92      	subs	r2, r2, r6
 800597e:	6122      	str	r2, [r4, #16]
 8005980:	f8cd a000 	str.w	sl, [sp]
 8005984:	464b      	mov	r3, r9
 8005986:	aa03      	add	r2, sp, #12
 8005988:	4621      	mov	r1, r4
 800598a:	4640      	mov	r0, r8
 800598c:	f7ff fee2 	bl	8005754 <_printf_common>
 8005990:	3001      	adds	r0, #1
 8005992:	d14c      	bne.n	8005a2e <_printf_i+0x1fe>
 8005994:	f04f 30ff 	mov.w	r0, #4294967295
 8005998:	b004      	add	sp, #16
 800599a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800599e:	4835      	ldr	r0, [pc, #212]	; (8005a74 <_printf_i+0x244>)
 80059a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80059a4:	6823      	ldr	r3, [r4, #0]
 80059a6:	680e      	ldr	r6, [r1, #0]
 80059a8:	061f      	lsls	r7, r3, #24
 80059aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80059ae:	600e      	str	r6, [r1, #0]
 80059b0:	d514      	bpl.n	80059dc <_printf_i+0x1ac>
 80059b2:	07d9      	lsls	r1, r3, #31
 80059b4:	bf44      	itt	mi
 80059b6:	f043 0320 	orrmi.w	r3, r3, #32
 80059ba:	6023      	strmi	r3, [r4, #0]
 80059bc:	b91d      	cbnz	r5, 80059c6 <_printf_i+0x196>
 80059be:	6823      	ldr	r3, [r4, #0]
 80059c0:	f023 0320 	bic.w	r3, r3, #32
 80059c4:	6023      	str	r3, [r4, #0]
 80059c6:	2310      	movs	r3, #16
 80059c8:	e7b0      	b.n	800592c <_printf_i+0xfc>
 80059ca:	6823      	ldr	r3, [r4, #0]
 80059cc:	f043 0320 	orr.w	r3, r3, #32
 80059d0:	6023      	str	r3, [r4, #0]
 80059d2:	2378      	movs	r3, #120	; 0x78
 80059d4:	4828      	ldr	r0, [pc, #160]	; (8005a78 <_printf_i+0x248>)
 80059d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059da:	e7e3      	b.n	80059a4 <_printf_i+0x174>
 80059dc:	065e      	lsls	r6, r3, #25
 80059de:	bf48      	it	mi
 80059e0:	b2ad      	uxthmi	r5, r5
 80059e2:	e7e6      	b.n	80059b2 <_printf_i+0x182>
 80059e4:	4616      	mov	r6, r2
 80059e6:	e7bb      	b.n	8005960 <_printf_i+0x130>
 80059e8:	680b      	ldr	r3, [r1, #0]
 80059ea:	6826      	ldr	r6, [r4, #0]
 80059ec:	6960      	ldr	r0, [r4, #20]
 80059ee:	1d1d      	adds	r5, r3, #4
 80059f0:	600d      	str	r5, [r1, #0]
 80059f2:	0635      	lsls	r5, r6, #24
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	d501      	bpl.n	80059fc <_printf_i+0x1cc>
 80059f8:	6018      	str	r0, [r3, #0]
 80059fa:	e002      	b.n	8005a02 <_printf_i+0x1d2>
 80059fc:	0671      	lsls	r1, r6, #25
 80059fe:	d5fb      	bpl.n	80059f8 <_printf_i+0x1c8>
 8005a00:	8018      	strh	r0, [r3, #0]
 8005a02:	2300      	movs	r3, #0
 8005a04:	6123      	str	r3, [r4, #16]
 8005a06:	4616      	mov	r6, r2
 8005a08:	e7ba      	b.n	8005980 <_printf_i+0x150>
 8005a0a:	680b      	ldr	r3, [r1, #0]
 8005a0c:	1d1a      	adds	r2, r3, #4
 8005a0e:	600a      	str	r2, [r1, #0]
 8005a10:	681e      	ldr	r6, [r3, #0]
 8005a12:	6862      	ldr	r2, [r4, #4]
 8005a14:	2100      	movs	r1, #0
 8005a16:	4630      	mov	r0, r6
 8005a18:	f7fa fbfa 	bl	8000210 <memchr>
 8005a1c:	b108      	cbz	r0, 8005a22 <_printf_i+0x1f2>
 8005a1e:	1b80      	subs	r0, r0, r6
 8005a20:	6060      	str	r0, [r4, #4]
 8005a22:	6863      	ldr	r3, [r4, #4]
 8005a24:	6123      	str	r3, [r4, #16]
 8005a26:	2300      	movs	r3, #0
 8005a28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a2c:	e7a8      	b.n	8005980 <_printf_i+0x150>
 8005a2e:	6923      	ldr	r3, [r4, #16]
 8005a30:	4632      	mov	r2, r6
 8005a32:	4649      	mov	r1, r9
 8005a34:	4640      	mov	r0, r8
 8005a36:	47d0      	blx	sl
 8005a38:	3001      	adds	r0, #1
 8005a3a:	d0ab      	beq.n	8005994 <_printf_i+0x164>
 8005a3c:	6823      	ldr	r3, [r4, #0]
 8005a3e:	079b      	lsls	r3, r3, #30
 8005a40:	d413      	bmi.n	8005a6a <_printf_i+0x23a>
 8005a42:	68e0      	ldr	r0, [r4, #12]
 8005a44:	9b03      	ldr	r3, [sp, #12]
 8005a46:	4298      	cmp	r0, r3
 8005a48:	bfb8      	it	lt
 8005a4a:	4618      	movlt	r0, r3
 8005a4c:	e7a4      	b.n	8005998 <_printf_i+0x168>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	4632      	mov	r2, r6
 8005a52:	4649      	mov	r1, r9
 8005a54:	4640      	mov	r0, r8
 8005a56:	47d0      	blx	sl
 8005a58:	3001      	adds	r0, #1
 8005a5a:	d09b      	beq.n	8005994 <_printf_i+0x164>
 8005a5c:	3501      	adds	r5, #1
 8005a5e:	68e3      	ldr	r3, [r4, #12]
 8005a60:	9903      	ldr	r1, [sp, #12]
 8005a62:	1a5b      	subs	r3, r3, r1
 8005a64:	42ab      	cmp	r3, r5
 8005a66:	dcf2      	bgt.n	8005a4e <_printf_i+0x21e>
 8005a68:	e7eb      	b.n	8005a42 <_printf_i+0x212>
 8005a6a:	2500      	movs	r5, #0
 8005a6c:	f104 0619 	add.w	r6, r4, #25
 8005a70:	e7f5      	b.n	8005a5e <_printf_i+0x22e>
 8005a72:	bf00      	nop
 8005a74:	08006261 	.word	0x08006261
 8005a78:	08006272 	.word	0x08006272

08005a7c <_putc_r>:
 8005a7c:	b570      	push	{r4, r5, r6, lr}
 8005a7e:	460d      	mov	r5, r1
 8005a80:	4614      	mov	r4, r2
 8005a82:	4606      	mov	r6, r0
 8005a84:	b118      	cbz	r0, 8005a8e <_putc_r+0x12>
 8005a86:	6983      	ldr	r3, [r0, #24]
 8005a88:	b90b      	cbnz	r3, 8005a8e <_putc_r+0x12>
 8005a8a:	f7ff f9ff 	bl	8004e8c <__sinit>
 8005a8e:	4b1c      	ldr	r3, [pc, #112]	; (8005b00 <_putc_r+0x84>)
 8005a90:	429c      	cmp	r4, r3
 8005a92:	d124      	bne.n	8005ade <_putc_r+0x62>
 8005a94:	6874      	ldr	r4, [r6, #4]
 8005a96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a98:	07d8      	lsls	r0, r3, #31
 8005a9a:	d405      	bmi.n	8005aa8 <_putc_r+0x2c>
 8005a9c:	89a3      	ldrh	r3, [r4, #12]
 8005a9e:	0599      	lsls	r1, r3, #22
 8005aa0:	d402      	bmi.n	8005aa8 <_putc_r+0x2c>
 8005aa2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005aa4:	f7ff fa90 	bl	8004fc8 <__retarget_lock_acquire_recursive>
 8005aa8:	68a3      	ldr	r3, [r4, #8]
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	60a3      	str	r3, [r4, #8]
 8005ab0:	da05      	bge.n	8005abe <_putc_r+0x42>
 8005ab2:	69a2      	ldr	r2, [r4, #24]
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	db1c      	blt.n	8005af2 <_putc_r+0x76>
 8005ab8:	b2eb      	uxtb	r3, r5
 8005aba:	2b0a      	cmp	r3, #10
 8005abc:	d019      	beq.n	8005af2 <_putc_r+0x76>
 8005abe:	6823      	ldr	r3, [r4, #0]
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	6022      	str	r2, [r4, #0]
 8005ac4:	701d      	strb	r5, [r3, #0]
 8005ac6:	b2ed      	uxtb	r5, r5
 8005ac8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005aca:	07da      	lsls	r2, r3, #31
 8005acc:	d405      	bmi.n	8005ada <_putc_r+0x5e>
 8005ace:	89a3      	ldrh	r3, [r4, #12]
 8005ad0:	059b      	lsls	r3, r3, #22
 8005ad2:	d402      	bmi.n	8005ada <_putc_r+0x5e>
 8005ad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ad6:	f7ff fa78 	bl	8004fca <__retarget_lock_release_recursive>
 8005ada:	4628      	mov	r0, r5
 8005adc:	bd70      	pop	{r4, r5, r6, pc}
 8005ade:	4b09      	ldr	r3, [pc, #36]	; (8005b04 <_putc_r+0x88>)
 8005ae0:	429c      	cmp	r4, r3
 8005ae2:	d101      	bne.n	8005ae8 <_putc_r+0x6c>
 8005ae4:	68b4      	ldr	r4, [r6, #8]
 8005ae6:	e7d6      	b.n	8005a96 <_putc_r+0x1a>
 8005ae8:	4b07      	ldr	r3, [pc, #28]	; (8005b08 <_putc_r+0x8c>)
 8005aea:	429c      	cmp	r4, r3
 8005aec:	bf08      	it	eq
 8005aee:	68f4      	ldreq	r4, [r6, #12]
 8005af0:	e7d1      	b.n	8005a96 <_putc_r+0x1a>
 8005af2:	4629      	mov	r1, r5
 8005af4:	4622      	mov	r2, r4
 8005af6:	4630      	mov	r0, r6
 8005af8:	f7fe ffee 	bl	8004ad8 <__swbuf_r>
 8005afc:	4605      	mov	r5, r0
 8005afe:	e7e3      	b.n	8005ac8 <_putc_r+0x4c>
 8005b00:	08006210 	.word	0x08006210
 8005b04:	08006230 	.word	0x08006230
 8005b08:	080061f0 	.word	0x080061f0

08005b0c <_sbrk_r>:
 8005b0c:	b538      	push	{r3, r4, r5, lr}
 8005b0e:	4d06      	ldr	r5, [pc, #24]	; (8005b28 <_sbrk_r+0x1c>)
 8005b10:	2300      	movs	r3, #0
 8005b12:	4604      	mov	r4, r0
 8005b14:	4608      	mov	r0, r1
 8005b16:	602b      	str	r3, [r5, #0]
 8005b18:	f7fb fa48 	bl	8000fac <_sbrk>
 8005b1c:	1c43      	adds	r3, r0, #1
 8005b1e:	d102      	bne.n	8005b26 <_sbrk_r+0x1a>
 8005b20:	682b      	ldr	r3, [r5, #0]
 8005b22:	b103      	cbz	r3, 8005b26 <_sbrk_r+0x1a>
 8005b24:	6023      	str	r3, [r4, #0]
 8005b26:	bd38      	pop	{r3, r4, r5, pc}
 8005b28:	200011b8 	.word	0x200011b8

08005b2c <__sread>:
 8005b2c:	b510      	push	{r4, lr}
 8005b2e:	460c      	mov	r4, r1
 8005b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b34:	f000 f8ee 	bl	8005d14 <_read_r>
 8005b38:	2800      	cmp	r0, #0
 8005b3a:	bfab      	itete	ge
 8005b3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b3e:	89a3      	ldrhlt	r3, [r4, #12]
 8005b40:	181b      	addge	r3, r3, r0
 8005b42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b46:	bfac      	ite	ge
 8005b48:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b4a:	81a3      	strhlt	r3, [r4, #12]
 8005b4c:	bd10      	pop	{r4, pc}

08005b4e <__swrite>:
 8005b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b52:	461f      	mov	r7, r3
 8005b54:	898b      	ldrh	r3, [r1, #12]
 8005b56:	05db      	lsls	r3, r3, #23
 8005b58:	4605      	mov	r5, r0
 8005b5a:	460c      	mov	r4, r1
 8005b5c:	4616      	mov	r6, r2
 8005b5e:	d505      	bpl.n	8005b6c <__swrite+0x1e>
 8005b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b64:	2302      	movs	r3, #2
 8005b66:	2200      	movs	r2, #0
 8005b68:	f000 f868 	bl	8005c3c <_lseek_r>
 8005b6c:	89a3      	ldrh	r3, [r4, #12]
 8005b6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b76:	81a3      	strh	r3, [r4, #12]
 8005b78:	4632      	mov	r2, r6
 8005b7a:	463b      	mov	r3, r7
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b82:	f000 b817 	b.w	8005bb4 <_write_r>

08005b86 <__sseek>:
 8005b86:	b510      	push	{r4, lr}
 8005b88:	460c      	mov	r4, r1
 8005b8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b8e:	f000 f855 	bl	8005c3c <_lseek_r>
 8005b92:	1c43      	adds	r3, r0, #1
 8005b94:	89a3      	ldrh	r3, [r4, #12]
 8005b96:	bf15      	itete	ne
 8005b98:	6560      	strne	r0, [r4, #84]	; 0x54
 8005b9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005b9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005ba2:	81a3      	strheq	r3, [r4, #12]
 8005ba4:	bf18      	it	ne
 8005ba6:	81a3      	strhne	r3, [r4, #12]
 8005ba8:	bd10      	pop	{r4, pc}

08005baa <__sclose>:
 8005baa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bae:	f000 b813 	b.w	8005bd8 <_close_r>
	...

08005bb4 <_write_r>:
 8005bb4:	b538      	push	{r3, r4, r5, lr}
 8005bb6:	4d07      	ldr	r5, [pc, #28]	; (8005bd4 <_write_r+0x20>)
 8005bb8:	4604      	mov	r4, r0
 8005bba:	4608      	mov	r0, r1
 8005bbc:	4611      	mov	r1, r2
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	602a      	str	r2, [r5, #0]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	f7fb f8a5 	bl	8000d12 <_write>
 8005bc8:	1c43      	adds	r3, r0, #1
 8005bca:	d102      	bne.n	8005bd2 <_write_r+0x1e>
 8005bcc:	682b      	ldr	r3, [r5, #0]
 8005bce:	b103      	cbz	r3, 8005bd2 <_write_r+0x1e>
 8005bd0:	6023      	str	r3, [r4, #0]
 8005bd2:	bd38      	pop	{r3, r4, r5, pc}
 8005bd4:	200011b8 	.word	0x200011b8

08005bd8 <_close_r>:
 8005bd8:	b538      	push	{r3, r4, r5, lr}
 8005bda:	4d06      	ldr	r5, [pc, #24]	; (8005bf4 <_close_r+0x1c>)
 8005bdc:	2300      	movs	r3, #0
 8005bde:	4604      	mov	r4, r0
 8005be0:	4608      	mov	r0, r1
 8005be2:	602b      	str	r3, [r5, #0]
 8005be4:	f7fb f9ad 	bl	8000f42 <_close>
 8005be8:	1c43      	adds	r3, r0, #1
 8005bea:	d102      	bne.n	8005bf2 <_close_r+0x1a>
 8005bec:	682b      	ldr	r3, [r5, #0]
 8005bee:	b103      	cbz	r3, 8005bf2 <_close_r+0x1a>
 8005bf0:	6023      	str	r3, [r4, #0]
 8005bf2:	bd38      	pop	{r3, r4, r5, pc}
 8005bf4:	200011b8 	.word	0x200011b8

08005bf8 <_fstat_r>:
 8005bf8:	b538      	push	{r3, r4, r5, lr}
 8005bfa:	4d07      	ldr	r5, [pc, #28]	; (8005c18 <_fstat_r+0x20>)
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	4604      	mov	r4, r0
 8005c00:	4608      	mov	r0, r1
 8005c02:	4611      	mov	r1, r2
 8005c04:	602b      	str	r3, [r5, #0]
 8005c06:	f7fb f9a8 	bl	8000f5a <_fstat>
 8005c0a:	1c43      	adds	r3, r0, #1
 8005c0c:	d102      	bne.n	8005c14 <_fstat_r+0x1c>
 8005c0e:	682b      	ldr	r3, [r5, #0]
 8005c10:	b103      	cbz	r3, 8005c14 <_fstat_r+0x1c>
 8005c12:	6023      	str	r3, [r4, #0]
 8005c14:	bd38      	pop	{r3, r4, r5, pc}
 8005c16:	bf00      	nop
 8005c18:	200011b8 	.word	0x200011b8

08005c1c <_isatty_r>:
 8005c1c:	b538      	push	{r3, r4, r5, lr}
 8005c1e:	4d06      	ldr	r5, [pc, #24]	; (8005c38 <_isatty_r+0x1c>)
 8005c20:	2300      	movs	r3, #0
 8005c22:	4604      	mov	r4, r0
 8005c24:	4608      	mov	r0, r1
 8005c26:	602b      	str	r3, [r5, #0]
 8005c28:	f7fb f9a7 	bl	8000f7a <_isatty>
 8005c2c:	1c43      	adds	r3, r0, #1
 8005c2e:	d102      	bne.n	8005c36 <_isatty_r+0x1a>
 8005c30:	682b      	ldr	r3, [r5, #0]
 8005c32:	b103      	cbz	r3, 8005c36 <_isatty_r+0x1a>
 8005c34:	6023      	str	r3, [r4, #0]
 8005c36:	bd38      	pop	{r3, r4, r5, pc}
 8005c38:	200011b8 	.word	0x200011b8

08005c3c <_lseek_r>:
 8005c3c:	b538      	push	{r3, r4, r5, lr}
 8005c3e:	4d07      	ldr	r5, [pc, #28]	; (8005c5c <_lseek_r+0x20>)
 8005c40:	4604      	mov	r4, r0
 8005c42:	4608      	mov	r0, r1
 8005c44:	4611      	mov	r1, r2
 8005c46:	2200      	movs	r2, #0
 8005c48:	602a      	str	r2, [r5, #0]
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	f7fb f9a0 	bl	8000f90 <_lseek>
 8005c50:	1c43      	adds	r3, r0, #1
 8005c52:	d102      	bne.n	8005c5a <_lseek_r+0x1e>
 8005c54:	682b      	ldr	r3, [r5, #0]
 8005c56:	b103      	cbz	r3, 8005c5a <_lseek_r+0x1e>
 8005c58:	6023      	str	r3, [r4, #0]
 8005c5a:	bd38      	pop	{r3, r4, r5, pc}
 8005c5c:	200011b8 	.word	0x200011b8

08005c60 <memcpy>:
 8005c60:	440a      	add	r2, r1
 8005c62:	4291      	cmp	r1, r2
 8005c64:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c68:	d100      	bne.n	8005c6c <memcpy+0xc>
 8005c6a:	4770      	bx	lr
 8005c6c:	b510      	push	{r4, lr}
 8005c6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c76:	4291      	cmp	r1, r2
 8005c78:	d1f9      	bne.n	8005c6e <memcpy+0xe>
 8005c7a:	bd10      	pop	{r4, pc}

08005c7c <memmove>:
 8005c7c:	4288      	cmp	r0, r1
 8005c7e:	b510      	push	{r4, lr}
 8005c80:	eb01 0402 	add.w	r4, r1, r2
 8005c84:	d902      	bls.n	8005c8c <memmove+0x10>
 8005c86:	4284      	cmp	r4, r0
 8005c88:	4623      	mov	r3, r4
 8005c8a:	d807      	bhi.n	8005c9c <memmove+0x20>
 8005c8c:	1e43      	subs	r3, r0, #1
 8005c8e:	42a1      	cmp	r1, r4
 8005c90:	d008      	beq.n	8005ca4 <memmove+0x28>
 8005c92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c9a:	e7f8      	b.n	8005c8e <memmove+0x12>
 8005c9c:	4402      	add	r2, r0
 8005c9e:	4601      	mov	r1, r0
 8005ca0:	428a      	cmp	r2, r1
 8005ca2:	d100      	bne.n	8005ca6 <memmove+0x2a>
 8005ca4:	bd10      	pop	{r4, pc}
 8005ca6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005caa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005cae:	e7f7      	b.n	8005ca0 <memmove+0x24>

08005cb0 <__malloc_lock>:
 8005cb0:	4801      	ldr	r0, [pc, #4]	; (8005cb8 <__malloc_lock+0x8>)
 8005cb2:	f7ff b989 	b.w	8004fc8 <__retarget_lock_acquire_recursive>
 8005cb6:	bf00      	nop
 8005cb8:	200011b0 	.word	0x200011b0

08005cbc <__malloc_unlock>:
 8005cbc:	4801      	ldr	r0, [pc, #4]	; (8005cc4 <__malloc_unlock+0x8>)
 8005cbe:	f7ff b984 	b.w	8004fca <__retarget_lock_release_recursive>
 8005cc2:	bf00      	nop
 8005cc4:	200011b0 	.word	0x200011b0

08005cc8 <_realloc_r>:
 8005cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cca:	4607      	mov	r7, r0
 8005ccc:	4614      	mov	r4, r2
 8005cce:	460e      	mov	r6, r1
 8005cd0:	b921      	cbnz	r1, 8005cdc <_realloc_r+0x14>
 8005cd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005cd6:	4611      	mov	r1, r2
 8005cd8:	f7ff ba2c 	b.w	8005134 <_malloc_r>
 8005cdc:	b922      	cbnz	r2, 8005ce8 <_realloc_r+0x20>
 8005cde:	f7ff f9d9 	bl	8005094 <_free_r>
 8005ce2:	4625      	mov	r5, r4
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ce8:	f000 f826 	bl	8005d38 <_malloc_usable_size_r>
 8005cec:	42a0      	cmp	r0, r4
 8005cee:	d20f      	bcs.n	8005d10 <_realloc_r+0x48>
 8005cf0:	4621      	mov	r1, r4
 8005cf2:	4638      	mov	r0, r7
 8005cf4:	f7ff fa1e 	bl	8005134 <_malloc_r>
 8005cf8:	4605      	mov	r5, r0
 8005cfa:	2800      	cmp	r0, #0
 8005cfc:	d0f2      	beq.n	8005ce4 <_realloc_r+0x1c>
 8005cfe:	4631      	mov	r1, r6
 8005d00:	4622      	mov	r2, r4
 8005d02:	f7ff ffad 	bl	8005c60 <memcpy>
 8005d06:	4631      	mov	r1, r6
 8005d08:	4638      	mov	r0, r7
 8005d0a:	f7ff f9c3 	bl	8005094 <_free_r>
 8005d0e:	e7e9      	b.n	8005ce4 <_realloc_r+0x1c>
 8005d10:	4635      	mov	r5, r6
 8005d12:	e7e7      	b.n	8005ce4 <_realloc_r+0x1c>

08005d14 <_read_r>:
 8005d14:	b538      	push	{r3, r4, r5, lr}
 8005d16:	4d07      	ldr	r5, [pc, #28]	; (8005d34 <_read_r+0x20>)
 8005d18:	4604      	mov	r4, r0
 8005d1a:	4608      	mov	r0, r1
 8005d1c:	4611      	mov	r1, r2
 8005d1e:	2200      	movs	r2, #0
 8005d20:	602a      	str	r2, [r5, #0]
 8005d22:	461a      	mov	r2, r3
 8005d24:	f7fb f8f0 	bl	8000f08 <_read>
 8005d28:	1c43      	adds	r3, r0, #1
 8005d2a:	d102      	bne.n	8005d32 <_read_r+0x1e>
 8005d2c:	682b      	ldr	r3, [r5, #0]
 8005d2e:	b103      	cbz	r3, 8005d32 <_read_r+0x1e>
 8005d30:	6023      	str	r3, [r4, #0]
 8005d32:	bd38      	pop	{r3, r4, r5, pc}
 8005d34:	200011b8 	.word	0x200011b8

08005d38 <_malloc_usable_size_r>:
 8005d38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d3c:	1f18      	subs	r0, r3, #4
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	bfbc      	itt	lt
 8005d42:	580b      	ldrlt	r3, [r1, r0]
 8005d44:	18c0      	addlt	r0, r0, r3
 8005d46:	4770      	bx	lr

08005d48 <_init>:
 8005d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d4a:	bf00      	nop
 8005d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d4e:	bc08      	pop	{r3}
 8005d50:	469e      	mov	lr, r3
 8005d52:	4770      	bx	lr

08005d54 <_fini>:
 8005d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d56:	bf00      	nop
 8005d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d5a:	bc08      	pop	{r3}
 8005d5c:	469e      	mov	lr, r3
 8005d5e:	4770      	bx	lr
