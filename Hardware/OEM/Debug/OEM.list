
OEM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000648  08005d7c  08005d7c  00015d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063c4  080063c4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080063c4  080063c4  000163c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063cc  080063cc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063cc  080063cc  000163cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063d0  080063d0  000163d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080063d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000114c  20000070  08006444  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011bc  08006444  000211bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000134ce  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b81  00000000  00000000  0003356e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  000360f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb0  00000000  00000000  00036db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002955b  00000000  00000000  00037968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f0a9  00000000  00000000  00060ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106953  00000000  00000000  0006ff6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001768bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c44  00000000  00000000  00176914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d64 	.word	0x08005d64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005d64 	.word	0x08005d64

080001d0 <setjmp>:
 80001d0:	46ec      	mov	ip, sp
 80001d2:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80001d6:	f04f 0000 	mov.w	r0, #0
 80001da:	4770      	bx	lr

080001dc <longjmp>:
 80001dc:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80001e0:	46e5      	mov	sp, ip
 80001e2:	0008      	movs	r0, r1
 80001e4:	bf08      	it	eq
 80001e6:	2001      	moveq	r0, #1
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr
 80001fc:	0000      	movs	r0, r0
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <init_uart_interrupt>:
static bool error_flag = false;
static bool fail_flag = false;


void
init_uart_interrupt(void){
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart4, &rx_variable, 1);
 800059c:	2201      	movs	r2, #1
 800059e:	4903      	ldr	r1, [pc, #12]	; (80005ac <init_uart_interrupt+0x14>)
 80005a0:	4803      	ldr	r0, [pc, #12]	; (80005b0 <init_uart_interrupt+0x18>)
 80005a2:	f003 f979 	bl	8003898 <HAL_UART_Receive_IT>
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	2000008c 	.word	0x2000008c
 80005b0:	20001124 	.word	0x20001124

080005b4 <HAL_UART_RxCpltCallback>:

void
HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]

   if (huart->Instance == UART4) {
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a0b      	ldr	r2, [pc, #44]	; (80005f0 <HAL_UART_RxCpltCallback+0x3c>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d10a      	bne.n	80005dc <HAL_UART_RxCpltCallback+0x28>
      rx_buffer[rx_buffer_index++] = rx_variable;    // Add 1 byte to Rx_Buffer
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <HAL_UART_RxCpltCallback+0x40>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	1c5a      	adds	r2, r3, #1
 80005cc:	b2d1      	uxtb	r1, r2
 80005ce:	4a09      	ldr	r2, [pc, #36]	; (80005f4 <HAL_UART_RxCpltCallback+0x40>)
 80005d0:	7011      	strb	r1, [r2, #0]
 80005d2:	461a      	mov	r2, r3
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <HAL_UART_RxCpltCallback+0x44>)
 80005d6:	7819      	ldrb	r1, [r3, #0]
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <HAL_UART_RxCpltCallback+0x48>)
 80005da:	5499      	strb	r1, [r3, r2]
    }
      HAL_UART_Receive_IT(&huart4, &rx_variable, 1);
 80005dc:	2201      	movs	r2, #1
 80005de:	4906      	ldr	r1, [pc, #24]	; (80005f8 <HAL_UART_RxCpltCallback+0x44>)
 80005e0:	4807      	ldr	r0, [pc, #28]	; (8000600 <HAL_UART_RxCpltCallback+0x4c>)
 80005e2:	f003 f959 	bl	8003898 <HAL_UART_Receive_IT>
}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40004c00 	.word	0x40004c00
 80005f4:	20001090 	.word	0x20001090
 80005f8:	2000008c 	.word	0x2000008c
 80005fc:	20000090 	.word	0x20000090
 8000600:	20001124 	.word	0x20001124

08000604 <hash>:

/* djb2 hashing algorithm */
const unsigned long
hash(const char *str) {
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
    unsigned long hash = 5381;
 800060c:	f241 5305 	movw	r3, #5381	; 0x1505
 8000610:	60fb      	str	r3, [r7, #12]
    int c;

    while ((c = *str++))
 8000612:	e006      	b.n	8000622 <hash+0x1e>
        hash = ((hash << 5) + hash) + c;
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	015a      	lsls	r2, r3, #5
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	441a      	add	r2, r3
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	4413      	add	r3, r2
 8000620:	60fb      	str	r3, [r7, #12]
    while ((c = *str++))
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	1c5a      	adds	r2, r3, #1
 8000626:	607a      	str	r2, [r7, #4]
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d1f0      	bne.n	8000614 <hash+0x10>
    return hash;
 8000632:	68fb      	ldr	r3, [r7, #12]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3714      	adds	r7, #20
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr

08000640 <ESP8266_send_command>:

const char*
ESP8266_send_command(const char* command){
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

	rx_buffer_index = 0;
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <ESP8266_send_command+0x88>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
	error_flag = false;
 800064e:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <ESP8266_send_command+0x8c>)
 8000650:	2200      	movs	r2, #0
 8000652:	701a      	strb	r2, [r3, #0]
	fail_flag = false;
 8000654:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <ESP8266_send_command+0x90>)
 8000656:	2200      	movs	r2, #0
 8000658:	701a      	strb	r2, [r3, #0]

	memset(rx_buffer, 0, RX_BUFFER_SIZE);
 800065a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800065e:	2100      	movs	r1, #0
 8000660:	481c      	ldr	r0, [pc, #112]	; (80006d4 <ESP8266_send_command+0x94>)
 8000662:	f004 f971 	bl	8004948 <memset>
	HAL_UART_Transmit(&huart4, (uint8_t*) command, strlen(command), 100);
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f7ff fdc0 	bl	80001ec <strlen>
 800066c:	4603      	mov	r3, r0
 800066e:	b29a      	uxth	r2, r3
 8000670:	2364      	movs	r3, #100	; 0x64
 8000672:	6879      	ldr	r1, [r7, #4]
 8000674:	4818      	ldr	r0, [pc, #96]	; (80006d8 <ESP8266_send_command+0x98>)
 8000676:	f003 f87b 	bl	8003770 <HAL_UART_Transmit>

	// wait for OK or ERROR/FAIL
	while((strstr(rx_buffer, ESP8266_AT_OK_TERMINATOR) == NULL)){
 800067a:	e015      	b.n	80006a8 <ESP8266_send_command+0x68>
		if(strstr(rx_buffer, ESP8266_AT_ERROR) != NULL){
 800067c:	4917      	ldr	r1, [pc, #92]	; (80006dc <ESP8266_send_command+0x9c>)
 800067e:	4815      	ldr	r0, [pc, #84]	; (80006d4 <ESP8266_send_command+0x94>)
 8000680:	f004 fa2e 	bl	8004ae0 <strstr>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d003      	beq.n	8000692 <ESP8266_send_command+0x52>
			error_flag = true;
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <ESP8266_send_command+0x8c>)
 800068c:	2201      	movs	r2, #1
 800068e:	701a      	strb	r2, [r3, #0]
			break;
 8000690:	e011      	b.n	80006b6 <ESP8266_send_command+0x76>
		}
		if(strstr(rx_buffer, ESP8266_AT_FAIL) != NULL){
 8000692:	4913      	ldr	r1, [pc, #76]	; (80006e0 <ESP8266_send_command+0xa0>)
 8000694:	480f      	ldr	r0, [pc, #60]	; (80006d4 <ESP8266_send_command+0x94>)
 8000696:	f004 fa23 	bl	8004ae0 <strstr>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d003      	beq.n	80006a8 <ESP8266_send_command+0x68>
			fail_flag = true;
 80006a0:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <ESP8266_send_command+0x90>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	701a      	strb	r2, [r3, #0]
			break;
 80006a6:	e006      	b.n	80006b6 <ESP8266_send_command+0x76>
	while((strstr(rx_buffer, ESP8266_AT_OK_TERMINATOR) == NULL)){
 80006a8:	490e      	ldr	r1, [pc, #56]	; (80006e4 <ESP8266_send_command+0xa4>)
 80006aa:	480a      	ldr	r0, [pc, #40]	; (80006d4 <ESP8266_send_command+0x94>)
 80006ac:	f004 fa18 	bl	8004ae0 <strstr>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d0e2      	beq.n	800067c <ESP8266_send_command+0x3c>
		}
	}

	return get_return(command);
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f000 f87e 	bl	80007b8 <get_return>
 80006bc:	4603      	mov	r3, r0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20001090 	.word	0x20001090
 80006cc:	20001091 	.word	0x20001091
 80006d0:	20001092 	.word	0x20001092
 80006d4:	20000090 	.word	0x20000090
 80006d8:	20001124 	.word	0x20001124
 80006dc:	08006020 	.word	0x08006020
 80006e0:	08006028 	.word	0x08006028
 80006e4:	08006014 	.word	0x08006014

080006e8 <ESP8266_send_data>:

const char* ESP8266_send_data(const char* command){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	rx_buffer_index = 0;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <ESP8266_send_data+0x54>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	701a      	strb	r2, [r3, #0]
	error_flag = false;
 80006f6:	4b12      	ldr	r3, [pc, #72]	; (8000740 <ESP8266_send_data+0x58>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
	fail_flag = false;
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <ESP8266_send_data+0x5c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]

	memset(rx_buffer, 0, RX_BUFFER_SIZE);
 8000702:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000706:	2100      	movs	r1, #0
 8000708:	480f      	ldr	r0, [pc, #60]	; (8000748 <ESP8266_send_data+0x60>)
 800070a:	f004 f91d 	bl	8004948 <memset>
	HAL_UART_Transmit(&huart4, (uint8_t*) command, strlen(command), 100);
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f7ff fd6c 	bl	80001ec <strlen>
 8000714:	4603      	mov	r3, r0
 8000716:	b29a      	uxth	r2, r3
 8000718:	2364      	movs	r3, #100	; 0x64
 800071a:	6879      	ldr	r1, [r7, #4]
 800071c:	480b      	ldr	r0, [pc, #44]	; (800074c <ESP8266_send_data+0x64>)
 800071e:	f003 f827 	bl	8003770 <HAL_UART_Transmit>

	while((strstr(rx_buffer, ESP8266_AT_CLOSED) == NULL));
 8000722:	bf00      	nop
 8000724:	490a      	ldr	r1, [pc, #40]	; (8000750 <ESP8266_send_data+0x68>)
 8000726:	4808      	ldr	r0, [pc, #32]	; (8000748 <ESP8266_send_data+0x60>)
 8000728:	f004 f9da 	bl	8004ae0 <strstr>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d0f8      	beq.n	8000724 <ESP8266_send_data+0x3c>

	return ESP8266_AT_CLOSED;
 8000732:	4b07      	ldr	r3, [pc, #28]	; (8000750 <ESP8266_send_data+0x68>)
}
 8000734:	4618      	mov	r0, r3
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20001090 	.word	0x20001090
 8000740:	20001091 	.word	0x20001091
 8000744:	20001092 	.word	0x20001092
 8000748:	20000090 	.word	0x20000090
 800074c:	20001124 	.word	0x20001124
 8000750:	0800605c 	.word	0x0800605c

08000754 <ESP8266_get_wifi_command>:


void
ESP8266_get_wifi_command(char* ref){
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af02      	add	r7, sp, #8
 800075a:	6078      	str	r0, [r7, #4]
	sprintf (ref, "%s\"%s\",\"%s\"\r\n", ESP8266_AT_CWJAP_SET, SSID, PWD);
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <ESP8266_get_wifi_command+0x20>)
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <ESP8266_get_wifi_command+0x24>)
 8000762:	4a06      	ldr	r2, [pc, #24]	; (800077c <ESP8266_get_wifi_command+0x28>)
 8000764:	4906      	ldr	r1, [pc, #24]	; (8000780 <ESP8266_get_wifi_command+0x2c>)
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f004 f99a 	bl	8004aa0 <siprintf>
}
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	08005ff0 	.word	0x08005ff0
 8000778:	08005fe0 	.word	0x08005fe0
 800077c:	08006138 	.word	0x08006138
 8000780:	08005d7c 	.word	0x08005d7c

08000784 <ESP8266_get_connection_command>:

void
ESP8266_get_connection_command(char* ref, char* connection_type, char* remote_ip, char* remote_port){
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af02      	add	r7, sp, #8
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	607a      	str	r2, [r7, #4]
 8000790:	603b      	str	r3, [r7, #0]
	sprintf(ref, "%s\"%s\",\"%s\",%s\r\n", ESP8266_AT_START, connection_type, remote_ip, remote_port);
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <ESP8266_get_connection_command+0x2c>)
 800079e:	4905      	ldr	r1, [pc, #20]	; (80007b4 <ESP8266_get_connection_command+0x30>)
 80007a0:	68f8      	ldr	r0, [r7, #12]
 80007a2:	f004 f97d 	bl	8004aa0 <siprintf>
}
 80007a6:	bf00      	nop
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	08006144 	.word	0x08006144
 80007b4:	08005d8c 	.word	0x08005d8c

080007b8 <get_return>:

const char*
get_return(const char* command){
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]

	// TODO: avoid using too many strstr... use 1+ argument for id?

	if(strstr(command, ESP8266_AT_CWJAP_SET) != NULL)
 80007c0:	4995      	ldr	r1, [pc, #596]	; (8000a18 <get_return+0x260>)
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f004 f98c 	bl	8004ae0 <strstr>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d002      	beq.n	80007d4 <get_return+0x1c>
		command = ESP8266_AT_CWJAP_SET;
 80007ce:	4b92      	ldr	r3, [pc, #584]	; (8000a18 <get_return+0x260>)
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	e012      	b.n	80007fa <get_return+0x42>
	else if(strstr(command, ESP8266_AT_START) != NULL)
 80007d4:	4991      	ldr	r1, [pc, #580]	; (8000a1c <get_return+0x264>)
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f004 f982 	bl	8004ae0 <strstr>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d002      	beq.n	80007e8 <get_return+0x30>
		command = ESP8266_AT_START;
 80007e2:	4b8e      	ldr	r3, [pc, #568]	; (8000a1c <get_return+0x264>)
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	e008      	b.n	80007fa <get_return+0x42>
	else if(strstr(command, ESP8266_AT_SEND) != NULL)
 80007e8:	498d      	ldr	r1, [pc, #564]	; (8000a20 <get_return+0x268>)
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f004 f978 	bl	8004ae0 <strstr>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <get_return+0x42>
		command = ESP8266_AT_SEND;
 80007f6:	4b8a      	ldr	r3, [pc, #552]	; (8000a20 <get_return+0x268>)
 80007f8:	607b      	str	r3, [r7, #4]

	KEYS return_type = hash(command);
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff ff02 	bl	8000604 <hash>
 8000800:	60f8      	str	r0, [r7, #12]
	switch (return_type) {
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	4a87      	ldr	r2, [pc, #540]	; (8000a24 <get_return+0x26c>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d06c      	beq.n	80008e4 <get_return+0x12c>
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	4a85      	ldr	r2, [pc, #532]	; (8000a24 <get_return+0x26c>)
 800080e:	4293      	cmp	r3, r2
 8000810:	f200 80fd 	bhi.w	8000a0e <get_return+0x256>
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	4a84      	ldr	r2, [pc, #528]	; (8000a28 <get_return+0x270>)
 8000818:	4293      	cmp	r3, r2
 800081a:	f000 80e0 	beq.w	80009de <get_return+0x226>
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	4a81      	ldr	r2, [pc, #516]	; (8000a28 <get_return+0x270>)
 8000822:	4293      	cmp	r3, r2
 8000824:	f200 80f3 	bhi.w	8000a0e <get_return+0x256>
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	4a80      	ldr	r2, [pc, #512]	; (8000a2c <get_return+0x274>)
 800082c:	4293      	cmp	r3, r2
 800082e:	f000 80c1 	beq.w	80009b4 <get_return+0x1fc>
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	4a7d      	ldr	r2, [pc, #500]	; (8000a2c <get_return+0x274>)
 8000836:	4293      	cmp	r3, r2
 8000838:	f200 80e9 	bhi.w	8000a0e <get_return+0x256>
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	4a7c      	ldr	r2, [pc, #496]	; (8000a30 <get_return+0x278>)
 8000840:	4293      	cmp	r3, r2
 8000842:	f000 808b 	beq.w	800095c <get_return+0x1a4>
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	4a79      	ldr	r2, [pc, #484]	; (8000a30 <get_return+0x278>)
 800084a:	4293      	cmp	r3, r2
 800084c:	f200 80df 	bhi.w	8000a0e <get_return+0x256>
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	4a78      	ldr	r2, [pc, #480]	; (8000a34 <get_return+0x27c>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d03b      	beq.n	80008d0 <get_return+0x118>
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	4a76      	ldr	r2, [pc, #472]	; (8000a34 <get_return+0x27c>)
 800085c:	4293      	cmp	r3, r2
 800085e:	f200 80d6 	bhi.w	8000a0e <get_return+0x256>
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	4a74      	ldr	r2, [pc, #464]	; (8000a38 <get_return+0x280>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d063      	beq.n	8000932 <get_return+0x17a>
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	4a72      	ldr	r2, [pc, #456]	; (8000a38 <get_return+0x280>)
 800086e:	4293      	cmp	r3, r2
 8000870:	f200 80cd 	bhi.w	8000a0e <get_return+0x256>
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	4a71      	ldr	r2, [pc, #452]	; (8000a3c <get_return+0x284>)
 8000878:	4293      	cmp	r3, r2
 800087a:	f000 80bc 	beq.w	80009f6 <get_return+0x23e>
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	4a6e      	ldr	r2, [pc, #440]	; (8000a3c <get_return+0x284>)
 8000882:	4293      	cmp	r3, r2
 8000884:	f200 80c3 	bhi.w	8000a0e <get_return+0x256>
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	4a6d      	ldr	r2, [pc, #436]	; (8000a40 <get_return+0x288>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d01f      	beq.n	80008d0 <get_return+0x118>
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	4a6b      	ldr	r2, [pc, #428]	; (8000a40 <get_return+0x288>)
 8000894:	4293      	cmp	r3, r2
 8000896:	f200 80ba 	bhi.w	8000a0e <get_return+0x256>
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	4a69      	ldr	r2, [pc, #420]	; (8000a44 <get_return+0x28c>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d016      	beq.n	80008d0 <get_return+0x118>
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	4a67      	ldr	r2, [pc, #412]	; (8000a44 <get_return+0x28c>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	f200 80b1 	bhi.w	8000a0e <get_return+0x256>
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	4a66      	ldr	r2, [pc, #408]	; (8000a48 <get_return+0x290>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d00d      	beq.n	80008d0 <get_return+0x118>
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	4a64      	ldr	r2, [pc, #400]	; (8000a48 <get_return+0x290>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	f200 80a8 	bhi.w	8000a0e <get_return+0x256>
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	4a62      	ldr	r2, [pc, #392]	; (8000a4c <get_return+0x294>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d004      	beq.n	80008d0 <get_return+0x118>
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	4a61      	ldr	r2, [pc, #388]	; (8000a50 <get_return+0x298>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	f040 809f 	bne.w	8000a0e <get_return+0x256>
		case ESP8266_AT_CWMODE_STATION_MODE_KEY:

		case ESP8266_AT_CIPMUX_KEY:

		case ESP8266_AT_CWQAP_KEY:
			return evaluate(error_flag, fail_flag);
 80008d0:	4b60      	ldr	r3, [pc, #384]	; (8000a54 <get_return+0x29c>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	4a60      	ldr	r2, [pc, #384]	; (8000a58 <get_return+0x2a0>)
 80008d6:	7812      	ldrb	r2, [r2, #0]
 80008d8:	4611      	mov	r1, r2
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 f8ea 	bl	8000ab4 <evaluate>
 80008e0:	4603      	mov	r3, r0
 80008e2:	e095      	b.n	8000a10 <get_return+0x258>

		case ESP8266_AT_CWMODE_TEST_KEY:
			if(error_flag || fail_flag)
 80008e4:	4b5b      	ldr	r3, [pc, #364]	; (8000a54 <get_return+0x29c>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d103      	bne.n	80008f4 <get_return+0x13c>
 80008ec:	4b5a      	ldr	r3, [pc, #360]	; (8000a58 <get_return+0x2a0>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <get_return+0x140>
				return ESP8266_AT_ERROR;
 80008f4:	4b59      	ldr	r3, [pc, #356]	; (8000a5c <get_return+0x2a4>)
 80008f6:	e08b      	b.n	8000a10 <get_return+0x258>
			else {
				if (strstr(rx_buffer, ESP8266_AT_CWMODE_1) != NULL)
 80008f8:	4959      	ldr	r1, [pc, #356]	; (8000a60 <get_return+0x2a8>)
 80008fa:	485a      	ldr	r0, [pc, #360]	; (8000a64 <get_return+0x2ac>)
 80008fc:	f004 f8f0 	bl	8004ae0 <strstr>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <get_return+0x152>
					return ESP8266_AT_CWMODE_1;
 8000906:	4b56      	ldr	r3, [pc, #344]	; (8000a60 <get_return+0x2a8>)
 8000908:	e082      	b.n	8000a10 <get_return+0x258>
				else if(strstr(rx_buffer, ESP8266_AT_CWMODE_2) != NULL)
 800090a:	4957      	ldr	r1, [pc, #348]	; (8000a68 <get_return+0x2b0>)
 800090c:	4855      	ldr	r0, [pc, #340]	; (8000a64 <get_return+0x2ac>)
 800090e:	f004 f8e7 	bl	8004ae0 <strstr>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <get_return+0x164>
					return ESP8266_AT_CWMODE_2;
 8000918:	4b53      	ldr	r3, [pc, #332]	; (8000a68 <get_return+0x2b0>)
 800091a:	e079      	b.n	8000a10 <get_return+0x258>
				else if(strstr(rx_buffer, ESP8266_AT_CWMODE_3) != NULL)
 800091c:	4953      	ldr	r1, [pc, #332]	; (8000a6c <get_return+0x2b4>)
 800091e:	4851      	ldr	r0, [pc, #324]	; (8000a64 <get_return+0x2ac>)
 8000920:	f004 f8de 	bl	8004ae0 <strstr>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <get_return+0x176>
					return ESP8266_AT_CWMODE_3;
 800092a:	4b50      	ldr	r3, [pc, #320]	; (8000a6c <get_return+0x2b4>)
 800092c:	e070      	b.n	8000a10 <get_return+0x258>
				else
					return ESP8266_AT_UNKNOWN;
 800092e:	4b50      	ldr	r3, [pc, #320]	; (8000a70 <get_return+0x2b8>)
 8000930:	e06e      	b.n	8000a10 <get_return+0x258>
			}

		case ESP8266_AT_CWJAP_TEST_KEY:
			if(error_flag || fail_flag)
 8000932:	4b48      	ldr	r3, [pc, #288]	; (8000a54 <get_return+0x29c>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d103      	bne.n	8000942 <get_return+0x18a>
 800093a:	4b47      	ldr	r3, [pc, #284]	; (8000a58 <get_return+0x2a0>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <get_return+0x18e>
				return ESP8266_AT_ERROR;
 8000942:	4b46      	ldr	r3, [pc, #280]	; (8000a5c <get_return+0x2a4>)
 8000944:	e064      	b.n	8000a10 <get_return+0x258>
			else {
				if(strstr(rx_buffer, ESP8266_AT_NO_AP))
 8000946:	494b      	ldr	r1, [pc, #300]	; (8000a74 <get_return+0x2bc>)
 8000948:	4846      	ldr	r0, [pc, #280]	; (8000a64 <get_return+0x2ac>)
 800094a:	f004 f8c9 	bl	8004ae0 <strstr>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <get_return+0x1a0>
					return ESP8266_AT_WIFI_DISCONNECTED;
 8000954:	4b48      	ldr	r3, [pc, #288]	; (8000a78 <get_return+0x2c0>)
 8000956:	e05b      	b.n	8000a10 <get_return+0x258>
				else
					return ESP8266_AT_WIFI_CONNECTED;
 8000958:	4b48      	ldr	r3, [pc, #288]	; (8000a7c <get_return+0x2c4>)
 800095a:	e059      	b.n	8000a10 <get_return+0x258>
			}

		case ESP8266_AT_CWJAP_SET_KEY:
			if(fail_flag){
 800095c:	4b3e      	ldr	r3, [pc, #248]	; (8000a58 <get_return+0x2a0>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d025      	beq.n	80009b0 <get_return+0x1f8>
				if (strstr(rx_buffer, ESP8266_AT_CWJAP_1) != NULL)
 8000964:	4946      	ldr	r1, [pc, #280]	; (8000a80 <get_return+0x2c8>)
 8000966:	483f      	ldr	r0, [pc, #252]	; (8000a64 <get_return+0x2ac>)
 8000968:	f004 f8ba 	bl	8004ae0 <strstr>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <get_return+0x1be>
					return ESP8266_AT_TIMEOUT;
 8000972:	4b44      	ldr	r3, [pc, #272]	; (8000a84 <get_return+0x2cc>)
 8000974:	e04c      	b.n	8000a10 <get_return+0x258>
				else if((strstr(rx_buffer, ESP8266_AT_CWJAP_2) != NULL))
 8000976:	4944      	ldr	r1, [pc, #272]	; (8000a88 <get_return+0x2d0>)
 8000978:	483a      	ldr	r0, [pc, #232]	; (8000a64 <get_return+0x2ac>)
 800097a:	f004 f8b1 	bl	8004ae0 <strstr>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <get_return+0x1d0>
					return ESP8266_AT_WRONG_PWD;
 8000984:	4b41      	ldr	r3, [pc, #260]	; (8000a8c <get_return+0x2d4>)
 8000986:	e043      	b.n	8000a10 <get_return+0x258>
				else if((strstr(rx_buffer, ESP8266_AT_CWJAP_3) != NULL))
 8000988:	4941      	ldr	r1, [pc, #260]	; (8000a90 <get_return+0x2d8>)
 800098a:	4836      	ldr	r0, [pc, #216]	; (8000a64 <get_return+0x2ac>)
 800098c:	f004 f8a8 	bl	8004ae0 <strstr>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <get_return+0x1e2>
					return ESP8266_AT_NO_TARGET;
 8000996:	4b3f      	ldr	r3, [pc, #252]	; (8000a94 <get_return+0x2dc>)
 8000998:	e03a      	b.n	8000a10 <get_return+0x258>
				else if((strstr(rx_buffer, ESP8266_AT_CWJAP_4) != NULL))
 800099a:	493f      	ldr	r1, [pc, #252]	; (8000a98 <get_return+0x2e0>)
 800099c:	4831      	ldr	r0, [pc, #196]	; (8000a64 <get_return+0x2ac>)
 800099e:	f004 f89f 	bl	8004ae0 <strstr>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <get_return+0x1f4>
					return ESP8266_AT_CONNECTION_FAIL;
 80009a8:	4b3c      	ldr	r3, [pc, #240]	; (8000a9c <get_return+0x2e4>)
 80009aa:	e031      	b.n	8000a10 <get_return+0x258>
				else
					return ESP8266_AT_UNKNOWN;
 80009ac:	4b30      	ldr	r3, [pc, #192]	; (8000a70 <get_return+0x2b8>)
 80009ae:	e02f      	b.n	8000a10 <get_return+0x258>
			}
			else
				return ESP8266_AT_WIFI_CONNECTED;
 80009b0:	4b32      	ldr	r3, [pc, #200]	; (8000a7c <get_return+0x2c4>)
 80009b2:	e02d      	b.n	8000a10 <get_return+0x258>

		case ESP8266_AT_CIPMUX_TEST_KEY:
			if(error_flag || fail_flag)
 80009b4:	4b27      	ldr	r3, [pc, #156]	; (8000a54 <get_return+0x29c>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d103      	bne.n	80009c4 <get_return+0x20c>
 80009bc:	4b26      	ldr	r3, [pc, #152]	; (8000a58 <get_return+0x2a0>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <get_return+0x210>
				return ESP8266_AT_ERROR;
 80009c4:	4b25      	ldr	r3, [pc, #148]	; (8000a5c <get_return+0x2a4>)
 80009c6:	e023      	b.n	8000a10 <get_return+0x258>
			else {
				if (strstr(rx_buffer, ESP8266_AT_CIPMUX_0) != NULL)
 80009c8:	4935      	ldr	r1, [pc, #212]	; (8000aa0 <get_return+0x2e8>)
 80009ca:	4826      	ldr	r0, [pc, #152]	; (8000a64 <get_return+0x2ac>)
 80009cc:	f004 f888 	bl	8004ae0 <strstr>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <get_return+0x222>
					return ESP8266_AT_CIPMUX_0;
 80009d6:	4b32      	ldr	r3, [pc, #200]	; (8000aa0 <get_return+0x2e8>)
 80009d8:	e01a      	b.n	8000a10 <get_return+0x258>
				else
					return ESP8266_AT_CIPMUX_1;
 80009da:	4b32      	ldr	r3, [pc, #200]	; (8000aa4 <get_return+0x2ec>)
 80009dc:	e018      	b.n	8000a10 <get_return+0x258>
			}

		case ESP8266_AT_START_KEY:
			if(error_flag || fail_flag)
 80009de:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <get_return+0x29c>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d103      	bne.n	80009ee <get_return+0x236>
 80009e6:	4b1c      	ldr	r3, [pc, #112]	; (8000a58 <get_return+0x2a0>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <get_return+0x23a>
				return ESP8266_AT_ERROR;
 80009ee:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <get_return+0x2a4>)
 80009f0:	e00e      	b.n	8000a10 <get_return+0x258>
			return ESP8266_AT_CONNECT;
 80009f2:	4b2d      	ldr	r3, [pc, #180]	; (8000aa8 <get_return+0x2f0>)
 80009f4:	e00c      	b.n	8000a10 <get_return+0x258>

		case ESP8266_AT_SEND_KEY:
			if(error_flag || fail_flag)
 80009f6:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <get_return+0x29c>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d103      	bne.n	8000a06 <get_return+0x24e>
 80009fe:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <get_return+0x2a0>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <get_return+0x252>
				return ESP8266_AT_ERROR;
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <get_return+0x2a4>)
 8000a08:	e002      	b.n	8000a10 <get_return+0x258>
			return ESP8266_AT_SEND_OK;
 8000a0a:	4b28      	ldr	r3, [pc, #160]	; (8000aac <get_return+0x2f4>)
 8000a0c:	e000      	b.n	8000a10 <get_return+0x258>

		default:
			return ESP8266_NOT_IMPLEMENTED;
 8000a0e:	4b28      	ldr	r3, [pc, #160]	; (8000ab0 <get_return+0x2f8>)
			break;
	}
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	08006138 	.word	0x08006138
 8000a1c:	08006144 	.word	0x08006144
 8000a20:	08006154 	.word	0x08006154
 8000a24:	f5600f43 	.word	0xf5600f43
 8000a28:	e7dadacc 	.word	0xe7dadacc
 8000a2c:	d9fa4211 	.word	0xd9fa4211
 8000a30:	9bf0f337 	.word	0x9bf0f337
 8000a34:	7c821b31 	.word	0x7c821b31
 8000a38:	5bfaa730 	.word	0x5bfaa730
 8000a3c:	358a4068 	.word	0x358a4068
 8000a40:	24cedd55 	.word	0x24cedd55
 8000a44:	243fa9a9 	.word	0x243fa9a9
 8000a48:	24047d02 	.word	0x24047d02
 8000a4c:	194200bf 	.word	0x194200bf
 8000a50:	1a8dff78 	.word	0x1a8dff78
 8000a54:	20001091 	.word	0x20001091
 8000a58:	20001092 	.word	0x20001092
 8000a5c:	08006020 	.word	0x08006020
 8000a60:	0800607c 	.word	0x0800607c
 8000a64:	20000090 	.word	0x20000090
 8000a68:	0800608c 	.word	0x0800608c
 8000a6c:	0800609c 	.word	0x0800609c
 8000a70:	08006074 	.word	0x08006074
 8000a74:	0800606c 	.word	0x0800606c
 8000a78:	08006040 	.word	0x08006040
 8000a7c:	08006030 	.word	0x08006030
 8000a80:	080060ac 	.word	0x080060ac
 8000a84:	080060cc 	.word	0x080060cc
 8000a88:	080060b4 	.word	0x080060b4
 8000a8c:	080060e0 	.word	0x080060e0
 8000a90:	080060bc 	.word	0x080060bc
 8000a94:	080060f0 	.word	0x080060f0
 8000a98:	080060c4 	.word	0x080060c4
 8000a9c:	0800610c 	.word	0x0800610c
 8000aa0:	08006120 	.word	0x08006120
 8000aa4:	0800612c 	.word	0x0800612c
 8000aa8:	08006054 	.word	0x08006054
 8000aac:	08006064 	.word	0x08006064
 8000ab0:	08006004 	.word	0x08006004

08000ab4 <evaluate>:

const char*
evaluate(bool ERROR_FLAG, bool FAIL_FLAG){
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	460a      	mov	r2, r1
 8000abe:	71fb      	strb	r3, [r7, #7]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	71bb      	strb	r3, [r7, #6]
	if(error_flag || fail_flag)
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <evaluate+0x34>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d103      	bne.n	8000ad4 <evaluate+0x20>
 8000acc:	4b07      	ldr	r3, [pc, #28]	; (8000aec <evaluate+0x38>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <evaluate+0x24>
		return ESP8266_AT_ERROR;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <evaluate+0x3c>)
 8000ad6:	e000      	b.n	8000ada <evaluate+0x26>
	return ESP8266_AT_OK;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <evaluate+0x40>)
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	20001091 	.word	0x20001091
 8000aec:	20001092 	.word	0x20001092
 8000af0:	08006020 	.word	0x08006020
 8000af4:	0800601c 	.word	0x0800601c

08000af8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <MX_GPIO_Init+0x2c>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b02:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <MX_GPIO_Init+0x2c>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <MX_GPIO_Init+0x2c>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]

}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40021000 	.word	0x40021000

08000b28 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b34:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d013      	beq.n	8000b68 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000b40:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b44:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000b48:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d00b      	beq.n	8000b68 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000b50:	e000      	b.n	8000b54 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000b52:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000b54:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d0f9      	beq.n	8000b52 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000b5e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	b2d2      	uxtb	r2, r2
 8000b66:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000b68:	687b      	ldr	r3, [r7, #4]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b086      	sub	sp, #24
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	60f8      	str	r0, [r7, #12]
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	e009      	b.n	8000b9c <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	1c5a      	adds	r2, r3, #1
 8000b8c:	60ba      	str	r2, [r7, #8]
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff ffc9 	bl	8000b28 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	617b      	str	r3, [r7, #20]
 8000b9c:	697a      	ldr	r2, [r7, #20]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	dbf1      	blt.n	8000b88 <_write+0x12>
	}
	return len;
 8000ba4:	687b      	ldr	r3, [r7, #4]
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb2:	f000 feb0 	bl	8001916 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb6:	f000 f807 	bl	8000bc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bba:	f7ff ff9d 	bl	8000af8 <MX_GPIO_Init>
  MX_UART4_Init();
 8000bbe:	f000 fe07 	bl	80017d0 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  #ifdef RUN_UNIT_TEST
  	  unit_test();
 8000bc2:	f000 fb07 	bl	80011d4 <unit_test>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <main+0x18>

08000bc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b0b8      	sub	sp, #224	; 0xe0
 8000bcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bd2:	2244      	movs	r2, #68	; 0x44
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f003 feb6 	bl	8004948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bdc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bec:	463b      	mov	r3, r7
 8000bee:	2288      	movs	r2, #136	; 0x88
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f003 fea8 	bl	8004948 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c06:	2310      	movs	r3, #16
 8000c08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c12:	2302      	movs	r3, #2
 8000c14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c1e:	230a      	movs	r3, #10
 8000c20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c24:	2307      	movs	r3, #7
 8000c26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c30:	2302      	movs	r3, #2
 8000c32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c36:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f001 faa2 	bl	8002184 <HAL_RCC_OscConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c46:	f000 f834 	bl	8000cb2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c4a:	230f      	movs	r3, #15
 8000c4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c50:	2303      	movs	r3, #3
 8000c52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c56:	2300      	movs	r3, #0
 8000c58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c62:	2300      	movs	r3, #0
 8000c64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c68:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000c6c:	2104      	movs	r1, #4
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f001 fe6e 	bl	8002950 <HAL_RCC_ClockConfig>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000c7a:	f000 f81a 	bl	8000cb2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000c7e:	2308      	movs	r3, #8
 8000c80:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 8000c82:	2340      	movs	r3, #64	; 0x40
 8000c84:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c86:	463b      	mov	r3, r7
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f002 f867 	bl	8002d5c <HAL_RCCEx_PeriphCLKConfig>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000c94:	f000 f80d 	bl	8000cb2 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c98:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c9c:	f001 fa1c 	bl	80020d8 <HAL_PWREx_ControlVoltageScaling>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000ca6:	f000 f804 	bl	8000cb2 <Error_Handler>
  }
}
 8000caa:	bf00      	nop
 8000cac:	37e0      	adds	r7, #224	; 0xe0
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb6:	b672      	cpsid	i
}
 8000cb8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cba:	e7fe      	b.n	8000cba <Error_Handler+0x8>

08000cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <HAL_MspInit+0x44>)
 8000cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc6:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <HAL_MspInit+0x44>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	6613      	str	r3, [r2, #96]	; 0x60
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <HAL_MspInit+0x44>)
 8000cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <HAL_MspInit+0x44>)
 8000cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cde:	4a08      	ldr	r2, [pc, #32]	; (8000d00 <HAL_MspInit+0x44>)
 8000ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_MspInit+0x44>)
 8000ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	40021000 	.word	0x40021000

08000d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <NMI_Handler+0x4>

08000d0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <HardFault_Handler+0x4>

08000d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <MemManage_Handler+0x4>

08000d16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <BusFault_Handler+0x4>

08000d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <UsageFault_Handler+0x4>

08000d22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d50:	f000 fe36 	bl	80019c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000d5c:	4802      	ldr	r0, [pc, #8]	; (8000d68 <UART4_IRQHandler+0x10>)
 8000d5e:	f002 fddf 	bl	8003920 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20001124 	.word	0x20001124

08000d6c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	e00a      	b.n	8000d94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d7e:	f3af 8000 	nop.w
 8000d82:	4601      	mov	r1, r0
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	1c5a      	adds	r2, r3, #1
 8000d88:	60ba      	str	r2, [r7, #8]
 8000d8a:	b2ca      	uxtb	r2, r1
 8000d8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	3301      	adds	r3, #1
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	697a      	ldr	r2, [r7, #20]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	dbf0      	blt.n	8000d7e <_read+0x12>
	}

return len;
 8000d9c:	687b      	ldr	r3, [r7, #4]
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000da6:	b480      	push	{r7}
 8000da8:	b083      	sub	sp, #12
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
	return -1;
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	b083      	sub	sp, #12
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
 8000dc6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dce:	605a      	str	r2, [r3, #4]
	return 0;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <_isatty>:

int _isatty(int file)
{
 8000dde:	b480      	push	{r7}
 8000de0:	b083      	sub	sp, #12
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
	return 1;
 8000de6:	2301      	movs	r3, #1
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
	return 0;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
	...

08000e10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e18:	4a14      	ldr	r2, [pc, #80]	; (8000e6c <_sbrk+0x5c>)
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <_sbrk+0x60>)
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e24:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <_sbrk+0x64>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d102      	bne.n	8000e32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <_sbrk+0x64>)
 8000e2e:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <_sbrk+0x68>)
 8000e30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d207      	bcs.n	8000e50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e40:	f003 fd4a 	bl	80048d8 <__errno>
 8000e44:	4603      	mov	r3, r0
 8000e46:	220c      	movs	r2, #12
 8000e48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4e:	e009      	b.n	8000e64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <_sbrk+0x64>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e56:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <_sbrk+0x64>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <_sbrk+0x64>)
 8000e60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e62:	68fb      	ldr	r3, [r7, #12]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20018000 	.word	0x20018000
 8000e70:	00000400 	.word	0x00000400
 8000e74:	20001094 	.word	0x20001094
 8000e78:	200011c0 	.word	0x200011c0

08000e7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <SystemInit+0x5c>)
 8000e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e86:	4a14      	ldr	r2, [pc, #80]	; (8000ed8 <SystemInit+0x5c>)
 8000e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <SystemInit+0x60>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a11      	ldr	r2, [pc, #68]	; (8000edc <SystemInit+0x60>)
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <SystemInit+0x60>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <SystemInit+0x60>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a0d      	ldr	r2, [pc, #52]	; (8000edc <SystemInit+0x60>)
 8000ea8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000eac:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000eb0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <SystemInit+0x60>)
 8000eb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eb8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <SystemInit+0x60>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a07      	ldr	r2, [pc, #28]	; (8000edc <SystemInit+0x60>)
 8000ec0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ec4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000ec6:	4b05      	ldr	r3, [pc, #20]	; (8000edc <SystemInit+0x60>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000ed00 	.word	0xe000ed00
 8000edc:	40021000 	.word	0x40021000

08000ee0 <setUp>:
******************************************************************************
*/

#include "unit_test.h"

void setUp(void){
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <tearDown>:

void tearDown(void){
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <test_ESP8266_AT_RST>:

void test_ESP8266_AT_RST(void){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	TEST_ASSERT_EQUAL_STRING(ESP8266_AT_OK, ESP8266_send_command(ESP8266_AT_RST));
 8000f00:	4805      	ldr	r0, [pc, #20]	; (8000f18 <test_ESP8266_AT_RST+0x1c>)
 8000f02:	f7ff fb9d 	bl	8000640 <ESP8266_send_command>
 8000f06:	4601      	mov	r1, r0
 8000f08:	2316      	movs	r3, #22
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	4803      	ldr	r0, [pc, #12]	; (8000f1c <test_ESP8266_AT_RST+0x20>)
 8000f0e:	f000 fb5f 	bl	80015d0 <UnityAssertEqualString>
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	080061f8 	.word	0x080061f8
 8000f1c:	080061a8 	.word	0x080061a8

08000f20 <test_ESP8266_AT>:

void test_ESP8266_AT(void){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
	TEST_ASSERT_EQUAL_STRING(ESP8266_AT_OK, ESP8266_send_command(ESP8266_AT));
 8000f24:	4805      	ldr	r0, [pc, #20]	; (8000f3c <test_ESP8266_AT+0x1c>)
 8000f26:	f7ff fb8b 	bl	8000640 <ESP8266_send_command>
 8000f2a:	4601      	mov	r1, r0
 8000f2c:	231a      	movs	r3, #26
 8000f2e:	2200      	movs	r2, #0
 8000f30:	4803      	ldr	r0, [pc, #12]	; (8000f40 <test_ESP8266_AT+0x20>)
 8000f32:	f000 fb4d 	bl	80015d0 <UnityAssertEqualString>
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	080061f0 	.word	0x080061f0
 8000f40:	080061a8 	.word	0x080061a8

08000f44 <test_ESP8266_AT_GMR>:

void test_ESP8266_AT_GMR(void){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	TEST_ASSERT_EQUAL_STRING(ESP8266_AT_OK, ESP8266_send_command(ESP8266_AT_GMR));
 8000f48:	4805      	ldr	r0, [pc, #20]	; (8000f60 <test_ESP8266_AT_GMR+0x1c>)
 8000f4a:	f7ff fb79 	bl	8000640 <ESP8266_send_command>
 8000f4e:	4601      	mov	r1, r0
 8000f50:	231e      	movs	r3, #30
 8000f52:	2200      	movs	r2, #0
 8000f54:	4803      	ldr	r0, [pc, #12]	; (8000f64 <test_ESP8266_AT_GMR+0x20>)
 8000f56:	f000 fb3b 	bl	80015d0 <UnityAssertEqualString>
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	08006204 	.word	0x08006204
 8000f64:	080061a8 	.word	0x080061a8

08000f68 <test_ESP8266_AT_CWQAP>:

void test_ESP8266_AT_CWQAP(void){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	TEST_ASSERT_EQUAL_STRING(ESP8266_AT_OK, ESP8266_send_command(ESP8266_AT_CWQAP));
 8000f6c:	4805      	ldr	r0, [pc, #20]	; (8000f84 <test_ESP8266_AT_CWQAP+0x1c>)
 8000f6e:	f7ff fb67 	bl	8000640 <ESP8266_send_command>
 8000f72:	4601      	mov	r1, r0
 8000f74:	2322      	movs	r3, #34	; 0x22
 8000f76:	2200      	movs	r2, #0
 8000f78:	4803      	ldr	r0, [pc, #12]	; (8000f88 <test_ESP8266_AT_CWQAP+0x20>)
 8000f7a:	f000 fb29 	bl	80015d0 <UnityAssertEqualString>
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	08006240 	.word	0x08006240
 8000f88:	080061a8 	.word	0x080061a8

08000f8c <test_ESP8266_AT_CWMODE_1>:

void test_ESP8266_AT_CWMODE_1(void){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	TEST_ASSERT_EQUAL_STRING(ESP8266_AT_OK, ESP8266_send_command(ESP8266_AT_CWMODE_STATION_MODE));
 8000f90:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <test_ESP8266_AT_CWMODE_1+0x1c>)
 8000f92:	f7ff fb55 	bl	8000640 <ESP8266_send_command>
 8000f96:	4601      	mov	r1, r0
 8000f98:	2326      	movs	r3, #38	; 0x26
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	4803      	ldr	r0, [pc, #12]	; (8000fac <test_ESP8266_AT_CWMODE_1+0x20>)
 8000f9e:	f000 fb17 	bl	80015d0 <UnityAssertEqualString>
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	08006224 	.word	0x08006224
 8000fac:	080061a8 	.word	0x080061a8

08000fb0 <test_ESP8266_AT_CWMODE_1_VERIFY>:

void test_ESP8266_AT_CWMODE_1_VERIFY(void){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	TEST_ASSERT_EQUAL_STRING(ESP8266_AT_CWMODE_1, ESP8266_send_command(ESP8266_AT_CWMODE_TEST));
 8000fb4:	4805      	ldr	r0, [pc, #20]	; (8000fcc <test_ESP8266_AT_CWMODE_1_VERIFY+0x1c>)
 8000fb6:	f7ff fb43 	bl	8000640 <ESP8266_send_command>
 8000fba:	4601      	mov	r1, r0
 8000fbc:	232a      	movs	r3, #42	; 0x2a
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	4803      	ldr	r0, [pc, #12]	; (8000fd0 <test_ESP8266_AT_CWMODE_1_VERIFY+0x20>)
 8000fc2:	f000 fb05 	bl	80015d0 <UnityAssertEqualString>
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	08006210 	.word	0x08006210
 8000fd0:	080061d4 	.word	0x080061d4

08000fd4 <test_ESP8266_AT_CWJAP_VERIFY>:

void test_ESP8266_AT_CWJAP_VERIFY(void){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	TEST_ASSERT_EQUAL_STRING(ESP8266_AT_WIFI_CONNECTED, ESP8266_send_command(ESP8266_AT_CWJAP_TEST));
 8000fd8:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <test_ESP8266_AT_CWJAP_VERIFY+0x1c>)
 8000fda:	f7ff fb31 	bl	8000640 <ESP8266_send_command>
 8000fde:	4601      	mov	r1, r0
 8000fe0:	232e      	movs	r3, #46	; 0x2e
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	4803      	ldr	r0, [pc, #12]	; (8000ff4 <test_ESP8266_AT_CWJAP_VERIFY+0x20>)
 8000fe6:	f000 faf3 	bl	80015d0 <UnityAssertEqualString>
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	08006234 	.word	0x08006234
 8000ff4:	080061ac 	.word	0x080061ac

08000ff8 <test_ESP8266_AT_CIPMUX_SET>:

void test_ESP8266_AT_CIPMUX_SET(void){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	TEST_ASSERT_EQUAL_STRING(ESP8266_AT_OK, ESP8266_send_command(ESP8266_AT_CIPMUX));
 8000ffc:	4805      	ldr	r0, [pc, #20]	; (8001014 <test_ESP8266_AT_CIPMUX_SET+0x1c>)
 8000ffe:	f7ff fb1f 	bl	8000640 <ESP8266_send_command>
 8001002:	4601      	mov	r1, r0
 8001004:	2332      	movs	r3, #50	; 0x32
 8001006:	2200      	movs	r2, #0
 8001008:	4803      	ldr	r0, [pc, #12]	; (8001018 <test_ESP8266_AT_CIPMUX_SET+0x20>)
 800100a:	f000 fae1 	bl	80015d0 <UnityAssertEqualString>
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	0800624c 	.word	0x0800624c
 8001018:	080061a8 	.word	0x080061a8

0800101c <test_ESP8266_CIPMUX_VERIFY>:

void test_ESP8266_CIPMUX_VERIFY(void){
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
	TEST_ASSERT_EQUAL_STRING(ESP8266_AT_CIPMUX_0, ESP8266_send_command(ESP8266_AT_CIPMUX_TEST));
 8001020:	4805      	ldr	r0, [pc, #20]	; (8001038 <test_ESP8266_CIPMUX_VERIFY+0x1c>)
 8001022:	f7ff fb0d 	bl	8000640 <ESP8266_send_command>
 8001026:	4601      	mov	r1, r0
 8001028:	2336      	movs	r3, #54	; 0x36
 800102a:	2200      	movs	r2, #0
 800102c:	4803      	ldr	r0, [pc, #12]	; (800103c <test_ESP8266_CIPMUX_VERIFY+0x20>)
 800102e:	f000 facf 	bl	80015d0 <UnityAssertEqualString>
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	0800625c 	.word	0x0800625c
 800103c:	080061e4 	.word	0x080061e4

08001040 <test_ESP8266_wifi_connect>:

void test_ESP8266_wifi_connect(void){
 8001040:	b580      	push	{r7, lr}
 8001042:	b0c0      	sub	sp, #256	; 0x100
 8001044:	af00      	add	r7, sp, #0
	char wifi_command[256] = {0};
 8001046:	463b      	mov	r3, r7
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	3304      	adds	r3, #4
 800104e:	22fc      	movs	r2, #252	; 0xfc
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f003 fc78 	bl	8004948 <memset>
	ESP8266_get_wifi_command(wifi_command);
 8001058:	463b      	mov	r3, r7
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fb7a 	bl	8000754 <ESP8266_get_wifi_command>
	TEST_ASSERT_EQUAL_STRING(ESP8266_AT_WIFI_CONNECTED, ESP8266_send_command(wifi_command));
 8001060:	463b      	mov	r3, r7
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff faec 	bl	8000640 <ESP8266_send_command>
 8001068:	4601      	mov	r1, r0
 800106a:	233c      	movs	r3, #60	; 0x3c
 800106c:	2200      	movs	r2, #0
 800106e:	4804      	ldr	r0, [pc, #16]	; (8001080 <test_ESP8266_wifi_connect+0x40>)
 8001070:	f000 faae 	bl	80015d0 <UnityAssertEqualString>
}
 8001074:	bf00      	nop
 8001076:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	080061ac 	.word	0x080061ac

08001084 <test_ESP8266_web_connection>:

void test_ESP8266_web_connection(void){
 8001084:	b5b0      	push	{r4, r5, r7, lr}
 8001086:	b0d2      	sub	sp, #328	; 0x148
 8001088:	af00      	add	r7, sp, #0
	char connection_command[256] = {0};
 800108a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	3304      	adds	r3, #4
 8001094:	22fc      	movs	r2, #252	; 0xfc
 8001096:	2100      	movs	r1, #0
 8001098:	4618      	mov	r0, r3
 800109a:	f003 fc55 	bl	8004948 <memset>
	char remote_ip[] = "ii1302-project-office-enviroment-monitor.eu-gb.mybluemix.net";
 800109e:	f107 0308 	add.w	r3, r7, #8
 80010a2:	4a18      	ldr	r2, [pc, #96]	; (8001104 <test_ESP8266_web_connection+0x80>)
 80010a4:	461c      	mov	r4, r3
 80010a6:	4615      	mov	r5, r2
 80010a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80010b8:	c407      	stmia	r4!, {r0, r1, r2}
 80010ba:	7023      	strb	r3, [r4, #0]
	char type[] = "TCP";
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	4a12      	ldr	r2, [pc, #72]	; (8001108 <test_ESP8266_web_connection+0x84>)
 80010c0:	601a      	str	r2, [r3, #0]
	char remote_port[] = "80";
 80010c2:	463b      	mov	r3, r7
 80010c4:	4a11      	ldr	r2, [pc, #68]	; (800110c <test_ESP8266_web_connection+0x88>)
 80010c6:	6812      	ldr	r2, [r2, #0]
 80010c8:	4611      	mov	r1, r2
 80010ca:	8019      	strh	r1, [r3, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	0c12      	lsrs	r2, r2, #16
 80010d0:	701a      	strb	r2, [r3, #0]
	ESP8266_get_connection_command(connection_command, type, remote_ip, remote_port);
 80010d2:	463b      	mov	r3, r7
 80010d4:	f107 0208 	add.w	r2, r7, #8
 80010d8:	1d39      	adds	r1, r7, #4
 80010da:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80010de:	f7ff fb51 	bl	8000784 <ESP8266_get_connection_command>
	TEST_ASSERT_EQUAL_STRING(ESP8266_AT_CONNECT, ESP8266_send_command(connection_command));
 80010e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff faaa 	bl	8000640 <ESP8266_send_command>
 80010ec:	4601      	mov	r1, r0
 80010ee:	2345      	movs	r3, #69	; 0x45
 80010f0:	2200      	movs	r2, #0
 80010f2:	4807      	ldr	r0, [pc, #28]	; (8001110 <test_ESP8266_web_connection+0x8c>)
 80010f4:	f000 fa6c 	bl	80015d0 <UnityAssertEqualString>
}
 80010f8:	bf00      	nop
 80010fa:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80010fe:	46bd      	mov	sp, r7
 8001100:	bdb0      	pop	{r4, r5, r7, pc}
 8001102:	bf00      	nop
 8001104:	08005da0 	.word	0x08005da0
 8001108:	00504354 	.word	0x00504354
 800110c:	08005de0 	.word	0x08005de0
 8001110:	080061bc 	.word	0x080061bc

08001114 <test_ESP8266_web_request>:

void test_ESP8266_web_request(void){
 8001114:	b5b0      	push	{r4, r5, r7, lr}
 8001116:	b0a0      	sub	sp, #128	; 0x80
 8001118:	af00      	add	r7, sp, #0
 800111a:	466b      	mov	r3, sp
 800111c:	461d      	mov	r5, r3
	char request[] = "GET /api/sensor HTTP/1.1\r\nHost: ii1302-project-office-enviroment-monitor.eu-gb.mybluemix.net\r\nConnection: close\r\n\r\n";
 800111e:	4a28      	ldr	r2, [pc, #160]	; (80011c0 <test_ESP8266_web_request+0xac>)
 8001120:	463b      	mov	r3, r7
 8001122:	4611      	mov	r1, r2
 8001124:	2274      	movs	r2, #116	; 0x74
 8001126:	4618      	mov	r0, r3
 8001128:	f003 fc00 	bl	800492c <memcpy>
	int len = strlen (request);
 800112c:	463b      	mov	r3, r7
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff f85c 	bl	80001ec <strlen>
 8001134:	4603      	mov	r3, r0
 8001136:	67fb      	str	r3, [r7, #124]	; 0x7c
	char init_send[len];
 8001138:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 800113a:	1e63      	subs	r3, r4, #1
 800113c:	67bb      	str	r3, [r7, #120]	; 0x78
 800113e:	4623      	mov	r3, r4
 8001140:	4618      	mov	r0, r3
 8001142:	f04f 0100 	mov.w	r1, #0
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	f04f 0300 	mov.w	r3, #0
 800114e:	00cb      	lsls	r3, r1, #3
 8001150:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001154:	00c2      	lsls	r2, r0, #3
 8001156:	4623      	mov	r3, r4
 8001158:	4618      	mov	r0, r3
 800115a:	f04f 0100 	mov.w	r1, #0
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	f04f 0300 	mov.w	r3, #0
 8001166:	00cb      	lsls	r3, r1, #3
 8001168:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800116c:	00c2      	lsls	r2, r0, #3
 800116e:	4623      	mov	r3, r4
 8001170:	3307      	adds	r3, #7
 8001172:	08db      	lsrs	r3, r3, #3
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	ebad 0d03 	sub.w	sp, sp, r3
 800117a:	466b      	mov	r3, sp
 800117c:	3300      	adds	r3, #0
 800117e:	677b      	str	r3, [r7, #116]	; 0x74
	sprintf(init_send, "%s%d\r\n", ESP8266_AT_SEND, len);
 8001180:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001182:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001184:	4a0f      	ldr	r2, [pc, #60]	; (80011c4 <test_ESP8266_web_request+0xb0>)
 8001186:	4910      	ldr	r1, [pc, #64]	; (80011c8 <test_ESP8266_web_request+0xb4>)
 8001188:	f003 fc8a 	bl	8004aa0 <siprintf>
	TEST_ASSERT_EQUAL_STRING(ESP8266_AT_SEND_OK, ESP8266_send_command(init_send));
 800118c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fa56 	bl	8000640 <ESP8266_send_command>
 8001194:	4601      	mov	r1, r0
 8001196:	234d      	movs	r3, #77	; 0x4d
 8001198:	2200      	movs	r2, #0
 800119a:	480c      	ldr	r0, [pc, #48]	; (80011cc <test_ESP8266_web_request+0xb8>)
 800119c:	f000 fa18 	bl	80015d0 <UnityAssertEqualString>
	TEST_ASSERT_EQUAL_STRING(ESP8266_AT_CLOSED, ESP8266_send_data(request));
 80011a0:	463b      	mov	r3, r7
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff faa0 	bl	80006e8 <ESP8266_send_data>
 80011a8:	4601      	mov	r1, r0
 80011aa:	234e      	movs	r3, #78	; 0x4e
 80011ac:	2200      	movs	r2, #0
 80011ae:	4808      	ldr	r0, [pc, #32]	; (80011d0 <test_ESP8266_web_request+0xbc>)
 80011b0:	f000 fa0e 	bl	80015d0 <UnityAssertEqualString>
 80011b4:	46ad      	mov	sp, r5
}
 80011b6:	bf00      	nop
 80011b8:	3780      	adds	r7, #128	; 0x80
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bdb0      	pop	{r4, r5, r7, pc}
 80011be:	bf00      	nop
 80011c0:	08005dec 	.word	0x08005dec
 80011c4:	0800626c 	.word	0x0800626c
 80011c8:	08005de4 	.word	0x08005de4
 80011cc:	080061cc 	.word	0x080061cc
 80011d0:	080061c4 	.word	0x080061c4

080011d4 <unit_test>:

void unit_test(void){
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	 	 	add tests together for init etc, or all that return "OK"?

	 	 	also add delays, esp does not always connect to wifi when commands are ran to fast
	 */

	init_uart_interrupt();
 80011d8:	f7ff f9de 	bl	8000598 <init_uart_interrupt>
	UNITY_BEGIN();
 80011dc:	4823      	ldr	r0, [pc, #140]	; (800126c <unit_test+0x98>)
 80011de:	f000 fa81 	bl	80016e4 <UnityBegin>
	RUN_TEST(test_ESP8266_AT_RST);
 80011e2:	225b      	movs	r2, #91	; 0x5b
 80011e4:	4922      	ldr	r1, [pc, #136]	; (8001270 <unit_test+0x9c>)
 80011e6:	4823      	ldr	r0, [pc, #140]	; (8001274 <unit_test+0xa0>)
 80011e8:	f000 fa48 	bl	800167c <UnityDefaultTestRun>
	RUN_TEST(test_ESP8266_AT);
 80011ec:	225c      	movs	r2, #92	; 0x5c
 80011ee:	4922      	ldr	r1, [pc, #136]	; (8001278 <unit_test+0xa4>)
 80011f0:	4822      	ldr	r0, [pc, #136]	; (800127c <unit_test+0xa8>)
 80011f2:	f000 fa43 	bl	800167c <UnityDefaultTestRun>
	RUN_TEST(test_ESP8266_AT_GMR);
 80011f6:	225d      	movs	r2, #93	; 0x5d
 80011f8:	4921      	ldr	r1, [pc, #132]	; (8001280 <unit_test+0xac>)
 80011fa:	4822      	ldr	r0, [pc, #136]	; (8001284 <unit_test+0xb0>)
 80011fc:	f000 fa3e 	bl	800167c <UnityDefaultTestRun>
	RUN_TEST(test_ESP8266_AT_CWMODE_1);
 8001200:	225e      	movs	r2, #94	; 0x5e
 8001202:	4921      	ldr	r1, [pc, #132]	; (8001288 <unit_test+0xb4>)
 8001204:	4821      	ldr	r0, [pc, #132]	; (800128c <unit_test+0xb8>)
 8001206:	f000 fa39 	bl	800167c <UnityDefaultTestRun>
	RUN_TEST(test_ESP8266_AT_CWMODE_1_VERIFY);
 800120a:	225f      	movs	r2, #95	; 0x5f
 800120c:	4920      	ldr	r1, [pc, #128]	; (8001290 <unit_test+0xbc>)
 800120e:	4821      	ldr	r0, [pc, #132]	; (8001294 <unit_test+0xc0>)
 8001210:	f000 fa34 	bl	800167c <UnityDefaultTestRun>
	RUN_TEST(test_ESP8266_AT_CIPMUX_SET);
 8001214:	2260      	movs	r2, #96	; 0x60
 8001216:	4920      	ldr	r1, [pc, #128]	; (8001298 <unit_test+0xc4>)
 8001218:	4820      	ldr	r0, [pc, #128]	; (800129c <unit_test+0xc8>)
 800121a:	f000 fa2f 	bl	800167c <UnityDefaultTestRun>
	RUN_TEST(test_ESP8266_CIPMUX_VERIFY);
 800121e:	2261      	movs	r2, #97	; 0x61
 8001220:	491f      	ldr	r1, [pc, #124]	; (80012a0 <unit_test+0xcc>)
 8001222:	4820      	ldr	r0, [pc, #128]	; (80012a4 <unit_test+0xd0>)
 8001224:	f000 fa2a 	bl	800167c <UnityDefaultTestRun>
	RUN_TEST(test_ESP8266_AT_CWQAP);
 8001228:	2262      	movs	r2, #98	; 0x62
 800122a:	491f      	ldr	r1, [pc, #124]	; (80012a8 <unit_test+0xd4>)
 800122c:	481f      	ldr	r0, [pc, #124]	; (80012ac <unit_test+0xd8>)
 800122e:	f000 fa25 	bl	800167c <UnityDefaultTestRun>
	HAL_Delay(2000);
 8001232:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001236:	f000 fbe3 	bl	8001a00 <HAL_Delay>
	RUN_TEST(test_ESP8266_wifi_connect);
 800123a:	2264      	movs	r2, #100	; 0x64
 800123c:	491c      	ldr	r1, [pc, #112]	; (80012b0 <unit_test+0xdc>)
 800123e:	481d      	ldr	r0, [pc, #116]	; (80012b4 <unit_test+0xe0>)
 8001240:	f000 fa1c 	bl	800167c <UnityDefaultTestRun>
	RUN_TEST(test_ESP8266_AT_CWJAP_VERIFY);
 8001244:	2265      	movs	r2, #101	; 0x65
 8001246:	491c      	ldr	r1, [pc, #112]	; (80012b8 <unit_test+0xe4>)
 8001248:	481c      	ldr	r0, [pc, #112]	; (80012bc <unit_test+0xe8>)
 800124a:	f000 fa17 	bl	800167c <UnityDefaultTestRun>
	RUN_TEST(test_ESP8266_web_connection);
 800124e:	2266      	movs	r2, #102	; 0x66
 8001250:	491b      	ldr	r1, [pc, #108]	; (80012c0 <unit_test+0xec>)
 8001252:	481c      	ldr	r0, [pc, #112]	; (80012c4 <unit_test+0xf0>)
 8001254:	f000 fa12 	bl	800167c <UnityDefaultTestRun>
	/*TODO: make a function to handle the request data (see test function) */
	RUN_TEST(test_ESP8266_web_request);
 8001258:	2268      	movs	r2, #104	; 0x68
 800125a:	491b      	ldr	r1, [pc, #108]	; (80012c8 <unit_test+0xf4>)
 800125c:	481b      	ldr	r0, [pc, #108]	; (80012cc <unit_test+0xf8>)
 800125e:	f000 fa0d 	bl	800167c <UnityDefaultTestRun>
	UNITY_END();
 8001262:	f000 fa69 	bl	8001738 <UnityEnd>

}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	08005e60 	.word	0x08005e60
 8001270:	08005e78 	.word	0x08005e78
 8001274:	08000efd 	.word	0x08000efd
 8001278:	08005e8c 	.word	0x08005e8c
 800127c:	08000f21 	.word	0x08000f21
 8001280:	08005e9c 	.word	0x08005e9c
 8001284:	08000f45 	.word	0x08000f45
 8001288:	08005eb0 	.word	0x08005eb0
 800128c:	08000f8d 	.word	0x08000f8d
 8001290:	08005ecc 	.word	0x08005ecc
 8001294:	08000fb1 	.word	0x08000fb1
 8001298:	08005eec 	.word	0x08005eec
 800129c:	08000ff9 	.word	0x08000ff9
 80012a0:	08005f08 	.word	0x08005f08
 80012a4:	0800101d 	.word	0x0800101d
 80012a8:	08005f24 	.word	0x08005f24
 80012ac:	08000f69 	.word	0x08000f69
 80012b0:	08005f3c 	.word	0x08005f3c
 80012b4:	08001041 	.word	0x08001041
 80012b8:	08005f58 	.word	0x08005f58
 80012bc:	08000fd5 	.word	0x08000fd5
 80012c0:	08005f78 	.word	0x08005f78
 80012c4:	08001085 	.word	0x08001085
 80012c8:	08005f94 	.word	0x08005f94
 80012cc:	08001115 	.word	0x08001115

080012d0 <UnityPrintChar>:
 *-----------------------------------------------*/

/*-----------------------------------------------*/
/* Local helper function to print characters. */
static void UnityPrintChar(const char* pch)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
    /* printable characters plus CR & LF are printed */
    if ((*pch <= 126) && (*pch >= 32))
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b7e      	cmp	r3, #126	; 0x7e
 80012de:	d80a      	bhi.n	80012f6 <UnityPrintChar+0x26>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b1f      	cmp	r3, #31
 80012e6:	d906      	bls.n	80012f6 <UnityPrintChar+0x26>
    {
        UNITY_OUTPUT_CHAR(*pch);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f003 fb4b 	bl	8004988 <putchar>
 80012f2:	bf00      	nop
    {
        UNITY_OUTPUT_CHAR('\\');
        UNITY_OUTPUT_CHAR('x');
        UnityPrintNumberHex((UNITY_UINT)*pch, 2);
    }
}
 80012f4:	e021      	b.n	800133a <UnityPrintChar+0x6a>
    else if (*pch == 13)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b0d      	cmp	r3, #13
 80012fc:	d106      	bne.n	800130c <UnityPrintChar+0x3c>
        UNITY_OUTPUT_CHAR('\\');
 80012fe:	205c      	movs	r0, #92	; 0x5c
 8001300:	f003 fb42 	bl	8004988 <putchar>
        UNITY_OUTPUT_CHAR('r');
 8001304:	2072      	movs	r0, #114	; 0x72
 8001306:	f003 fb3f 	bl	8004988 <putchar>
}
 800130a:	e016      	b.n	800133a <UnityPrintChar+0x6a>
    else if (*pch == 10)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b0a      	cmp	r3, #10
 8001312:	d106      	bne.n	8001322 <UnityPrintChar+0x52>
        UNITY_OUTPUT_CHAR('\\');
 8001314:	205c      	movs	r0, #92	; 0x5c
 8001316:	f003 fb37 	bl	8004988 <putchar>
        UNITY_OUTPUT_CHAR('n');
 800131a:	206e      	movs	r0, #110	; 0x6e
 800131c:	f003 fb34 	bl	8004988 <putchar>
}
 8001320:	e00b      	b.n	800133a <UnityPrintChar+0x6a>
        UNITY_OUTPUT_CHAR('\\');
 8001322:	205c      	movs	r0, #92	; 0x5c
 8001324:	f003 fb30 	bl	8004988 <putchar>
        UNITY_OUTPUT_CHAR('x');
 8001328:	2078      	movs	r0, #120	; 0x78
 800132a:	f003 fb2d 	bl	8004988 <putchar>
        UnityPrintNumberHex((UNITY_UINT)*pch, 2);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2102      	movs	r1, #2
 8001334:	4618      	mov	r0, r3
 8001336:	f000 f869 	bl	800140c <UnityPrintNumberHex>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <UnityPrint>:
}
#endif

/*-----------------------------------------------*/
void UnityPrint(const char* string)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b084      	sub	sp, #16
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
    const char* pch = string;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	60fb      	str	r3, [r7, #12]

    if (pch != NULL)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d00a      	beq.n	800136a <UnityPrint+0x28>
    {
        while (*pch)
 8001354:	e005      	b.n	8001362 <UnityPrint+0x20>
            {
                pch += UnityPrintAnsiEscapeString(pch);
                continue;
            }
#endif
            UnityPrintChar(pch);
 8001356:	68f8      	ldr	r0, [r7, #12]
 8001358:	f7ff ffba 	bl	80012d0 <UnityPrintChar>
            pch++;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	3301      	adds	r3, #1
 8001360:	60fb      	str	r3, [r7, #12]
        while (*pch)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f5      	bne.n	8001356 <UnityPrint+0x14>
        }
    }
}
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <UnityPrintNumber>:
    }
}

/*-----------------------------------------------*/
void UnityPrintNumber(const UNITY_INT number_to_print)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b084      	sub	sp, #16
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
    UNITY_UINT number = (UNITY_UINT)number_to_print;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	60fb      	str	r3, [r7, #12]

    if (number_to_print < 0)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	da05      	bge.n	8001390 <UnityPrintNumber+0x1e>
    {
        /* A negative number, including MIN negative */
        UNITY_OUTPUT_CHAR('-');
 8001384:	202d      	movs	r0, #45	; 0x2d
 8001386:	f003 faff 	bl	8004988 <putchar>
        number = (~number) + 1;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	425b      	negs	r3, r3
 800138e:	60fb      	str	r3, [r7, #12]
    }
    UnityPrintNumberUnsigned(number);
 8001390:	68f8      	ldr	r0, [r7, #12]
 8001392:	f000 f805 	bl	80013a0 <UnityPrintNumberUnsigned>
}
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <UnityPrintNumberUnsigned>:

/*-----------------------------------------------
 * basically do an itoa using as little ram as possible */
void UnityPrintNumberUnsigned(const UNITY_UINT number)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
    UNITY_UINT divisor = 1;
 80013a8:	2301      	movs	r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]

    /* figure out initial divisor */
    while (number / divisor > 9)
 80013ac:	e005      	b.n	80013ba <UnityPrintNumberUnsigned+0x1a>
    {
        divisor *= 10;
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	4613      	mov	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4413      	add	r3, r2
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	60fb      	str	r3, [r7, #12]
    while (number / divisor > 9)
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c2:	2b09      	cmp	r3, #9
 80013c4:	d8f3      	bhi.n	80013ae <UnityPrintNumberUnsigned+0xe>
    }

    /* now mod and print, then divide divisor */
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	fbb2 f1f3 	udiv	r1, r2, r3
 80013ce:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <UnityPrintNumberUnsigned+0x68>)
 80013d0:	fba3 2301 	umull	r2, r3, r3, r1
 80013d4:	08da      	lsrs	r2, r3, #3
 80013d6:	4613      	mov	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	1aca      	subs	r2, r1, r3
 80013e0:	b2d3      	uxtb	r3, r2
 80013e2:	3330      	adds	r3, #48	; 0x30
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	4618      	mov	r0, r3
 80013e8:	f003 face 	bl	8004988 <putchar>
        divisor /= 10;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4a06      	ldr	r2, [pc, #24]	; (8001408 <UnityPrintNumberUnsigned+0x68>)
 80013f0:	fba2 2303 	umull	r2, r3, r2, r3
 80013f4:	08db      	lsrs	r3, r3, #3
 80013f6:	60fb      	str	r3, [r7, #12]
    } while (divisor > 0);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1e3      	bne.n	80013c6 <UnityPrintNumberUnsigned+0x26>
}
 80013fe:	bf00      	nop
 8001400:	bf00      	nop
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	cccccccd 	.word	0xcccccccd

0800140c <UnityPrintNumberHex>:

/*-----------------------------------------------*/
void UnityPrintNumberHex(const UNITY_UINT number, const char nibbles_to_print)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	460b      	mov	r3, r1
 8001416:	70fb      	strb	r3, [r7, #3]
    int nibble;
    char nibbles = nibbles_to_print;
 8001418:	78fb      	ldrb	r3, [r7, #3]
 800141a:	73fb      	strb	r3, [r7, #15]

    if ((unsigned)nibbles > UNITY_MAX_NIBBLES)
 800141c:	7bfb      	ldrb	r3, [r7, #15]
 800141e:	2b08      	cmp	r3, #8
 8001420:	d91f      	bls.n	8001462 <UnityPrintNumberHex+0x56>
    {
        nibbles = UNITY_MAX_NIBBLES;
 8001422:	2308      	movs	r3, #8
 8001424:	73fb      	strb	r3, [r7, #15]
    }

    while (nibbles > 0)
 8001426:	e01c      	b.n	8001462 <UnityPrintNumberHex+0x56>
    {
        nibbles--;
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	3b01      	subs	r3, #1
 800142c:	73fb      	strb	r3, [r7, #15]
        nibble = (int)(number >> (nibbles * 4)) & 0x0F;
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	fa22 f303 	lsr.w	r3, r2, r3
 8001438:	f003 030f 	and.w	r3, r3, #15
 800143c:	60bb      	str	r3, [r7, #8]
        if (nibble <= 9)
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	2b09      	cmp	r3, #9
 8001442:	dc07      	bgt.n	8001454 <UnityPrintNumberHex+0x48>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	b2db      	uxtb	r3, r3
 8001448:	3330      	adds	r3, #48	; 0x30
 800144a:	b2db      	uxtb	r3, r3
 800144c:	4618      	mov	r0, r3
 800144e:	f003 fa9b 	bl	8004988 <putchar>
 8001452:	e006      	b.n	8001462 <UnityPrintNumberHex+0x56>
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	b2db      	uxtb	r3, r3
 8001458:	3337      	adds	r3, #55	; 0x37
 800145a:	b2db      	uxtb	r3, r3
 800145c:	4618      	mov	r0, r3
 800145e:	f003 fa93 	bl	8004988 <putchar>
    while (nibbles > 0)
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1df      	bne.n	8001428 <UnityPrintNumberHex+0x1c>
        }
    }
}
 8001468:	bf00      	nop
 800146a:	bf00      	nop
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <UnityTestResultsBegin>:
}
#endif /* ! UNITY_EXCLUDE_FLOAT_PRINT */

/*-----------------------------------------------*/
static void UnityTestResultsBegin(const char* file, const UNITY_LINE_TYPE line)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
    UnityPrintNumber((UNITY_INT)line);
    UNITY_OUTPUT_CHAR(' ');
    UnityPrint(Unity.CurrentTestName);
    UNITY_OUTPUT_CHAR(':');
#else
    UnityPrint(file);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff ff5f 	bl	8001342 <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
 8001484:	203a      	movs	r0, #58	; 0x3a
 8001486:	f003 fa7f 	bl	8004988 <putchar>
    UnityPrintNumber((UNITY_INT)line);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff70 	bl	8001372 <UnityPrintNumber>
    UNITY_OUTPUT_CHAR(':');
 8001492:	203a      	movs	r0, #58	; 0x3a
 8001494:	f003 fa78 	bl	8004988 <putchar>
    UnityPrint(Unity.CurrentTestName);
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <UnityTestResultsBegin+0x3c>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff50 	bl	8001342 <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
 80014a2:	203a      	movs	r0, #58	; 0x3a
 80014a4:	f003 fa70 	bl	8004988 <putchar>
#endif
#endif
#endif
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	200010a0 	.word	0x200010a0

080014b4 <UnityTestResultsFailBegin>:

/*-----------------------------------------------*/
static void UnityTestResultsFailBegin(const UNITY_LINE_TYPE line)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
    UnityTestResultsBegin(Unity.TestFile, line);
 80014bc:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <UnityTestResultsFailBegin+0x30>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6879      	ldr	r1, [r7, #4]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff ffd6 	bl	8001474 <UnityTestResultsBegin>
    //UnityPrint(UnityStrFail);
    printf(UnityStrFail);
 80014c8:	4807      	ldr	r0, [pc, #28]	; (80014e8 <UnityTestResultsFailBegin+0x34>)
 80014ca:	f003 fa45 	bl	8004958 <iprintf>
    printf(Fail);
 80014ce:	4807      	ldr	r0, [pc, #28]	; (80014ec <UnityTestResultsFailBegin+0x38>)
 80014d0:	f003 fa42 	bl	8004958 <iprintf>
    UNITY_OUTPUT_CHAR(':');
 80014d4:	203a      	movs	r0, #58	; 0x3a
 80014d6:	f003 fa57 	bl	8004988 <putchar>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200010a0 	.word	0x200010a0
 80014e8:	08006294 	.word	0x08006294
 80014ec:	0800628c 	.word	0x0800628c

080014f0 <UnityConcludeTest>:

/*-----------------------------------------------*/
void UnityConcludeTest(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
    if (Unity.CurrentTestIgnored)
 80014f4:	4b16      	ldr	r3, [pc, #88]	; (8001550 <UnityConcludeTest+0x60>)
 80014f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d005      	beq.n	8001508 <UnityConcludeTest+0x18>
    {
        Unity.TestIgnores++;
 80014fc:	4b14      	ldr	r3, [pc, #80]	; (8001550 <UnityConcludeTest+0x60>)
 80014fe:	69db      	ldr	r3, [r3, #28]
 8001500:	3301      	adds	r3, #1
 8001502:	4a13      	ldr	r2, [pc, #76]	; (8001550 <UnityConcludeTest+0x60>)
 8001504:	61d3      	str	r3, [r2, #28]
 8001506:	e017      	b.n	8001538 <UnityConcludeTest+0x48>
    }
    else if (!Unity.CurrentTestFailed)
 8001508:	4b11      	ldr	r3, [pc, #68]	; (8001550 <UnityConcludeTest+0x60>)
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d10e      	bne.n	800152e <UnityConcludeTest+0x3e>
    {
        UnityTestResultsBegin(Unity.TestFile, Unity.CurrentTestLineNumber);
 8001510:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <UnityConcludeTest+0x60>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a0e      	ldr	r2, [pc, #56]	; (8001550 <UnityConcludeTest+0x60>)
 8001516:	6912      	ldr	r2, [r2, #16]
 8001518:	4611      	mov	r1, r2
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff ffaa 	bl	8001474 <UnityTestResultsBegin>
        //UnityPrint(UnityStrPass);
        printf(UnityStrPass);
 8001520:	480c      	ldr	r0, [pc, #48]	; (8001554 <UnityConcludeTest+0x64>)
 8001522:	f003 fa19 	bl	8004958 <iprintf>
        printf(Check);
 8001526:	480c      	ldr	r0, [pc, #48]	; (8001558 <UnityConcludeTest+0x68>)
 8001528:	f003 fa16 	bl	8004958 <iprintf>
 800152c:	e004      	b.n	8001538 <UnityConcludeTest+0x48>
    }
    else
    {
        Unity.TestFailures++;
 800152e:	4b08      	ldr	r3, [pc, #32]	; (8001550 <UnityConcludeTest+0x60>)
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	3301      	adds	r3, #1
 8001534:	4a06      	ldr	r2, [pc, #24]	; (8001550 <UnityConcludeTest+0x60>)
 8001536:	6193      	str	r3, [r2, #24]
    }

    Unity.CurrentTestFailed = 0;
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <UnityConcludeTest+0x60>)
 800153a:	2200      	movs	r2, #0
 800153c:	621a      	str	r2, [r3, #32]
    Unity.CurrentTestIgnored = 0;
 800153e:	4b04      	ldr	r3, [pc, #16]	; (8001550 <UnityConcludeTest+0x60>)
 8001540:	2200      	movs	r2, #0
 8001542:	625a      	str	r2, [r3, #36]	; 0x24
    //printf("%d\n", (Unity.CurrentTestStopTime - Unity.CurrentTestStartTime));
    UNITY_PRINT_EXEC_TIME();
    UNITY_PRINT_EOL();
 8001544:	200a      	movs	r0, #10
 8001546:	f003 fa1f 	bl	8004988 <putchar>
    UNITY_FLUSH_CALL();
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200010a0 	.word	0x200010a0
 8001554:	0800627c 	.word	0x0800627c
 8001558:	08006284 	.word	0x08006284

0800155c <UnityPrintExpectedAndActualStrings>:
    }
}

/*-----------------------------------------------*/
static void UnityPrintExpectedAndActualStrings(const char* expected, const char* actual)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
	printf("\n");
 8001566:	200a      	movs	r0, #10
 8001568:	f003 fa0e 	bl	8004988 <putchar>
	UnityPrint(UnityStrExpected);
 800156c:	4814      	ldr	r0, [pc, #80]	; (80015c0 <UnityPrintExpectedAndActualStrings+0x64>)
 800156e:	f7ff fee8 	bl	8001342 <UnityPrint>
    if (expected != NULL)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d009      	beq.n	800158c <UnityPrintExpectedAndActualStrings+0x30>
    {
        //UNITY_OUTPUT_CHAR('\'');
        //UnityPrint(expected);
    	printf("\'");
 8001578:	2027      	movs	r0, #39	; 0x27
 800157a:	f003 fa05 	bl	8004988 <putchar>
    	printf(expected);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f003 f9ea 	bl	8004958 <iprintf>
    	printf("\'\n");
 8001584:	480f      	ldr	r0, [pc, #60]	; (80015c4 <UnityPrintExpectedAndActualStrings+0x68>)
 8001586:	f003 fa83 	bl	8004a90 <puts>
 800158a:	e002      	b.n	8001592 <UnityPrintExpectedAndActualStrings+0x36>
    	//UNITY_OUTPUT_CHAR('\'');
    }
    else
    {
        //UnityPrint(UnityStrNull);
    	printf(UnityStrNull);
 800158c:	480e      	ldr	r0, [pc, #56]	; (80015c8 <UnityPrintExpectedAndActualStrings+0x6c>)
 800158e:	f003 f9e3 	bl	8004958 <iprintf>
    }
    //UnityPrint(UnityStrWas);
    printf(UnityStrWas);
 8001592:	480e      	ldr	r0, [pc, #56]	; (80015cc <UnityPrintExpectedAndActualStrings+0x70>)
 8001594:	f003 f9e0 	bl	8004958 <iprintf>
    if (actual != NULL)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d009      	beq.n	80015b2 <UnityPrintExpectedAndActualStrings+0x56>
    {
        printf("\'");
 800159e:	2027      	movs	r0, #39	; 0x27
 80015a0:	f003 f9f2 	bl	8004988 <putchar>
    	printf(actual);
 80015a4:	6838      	ldr	r0, [r7, #0]
 80015a6:	f003 f9d7 	bl	8004958 <iprintf>
    	printf("\'");
 80015aa:	2027      	movs	r0, #39	; 0x27
 80015ac:	f003 f9ec 	bl	8004988 <putchar>
    else
    {
        //UnityPrint(UnityStrNull);
    	printf(UnityStrNull);
    }
}
 80015b0:	e002      	b.n	80015b8 <UnityPrintExpectedAndActualStrings+0x5c>
    	printf(UnityStrNull);
 80015b2:	4805      	ldr	r0, [pc, #20]	; (80015c8 <UnityPrintExpectedAndActualStrings+0x6c>)
 80015b4:	f003 f9d0 	bl	8004958 <iprintf>
}
 80015b8:	bf00      	nop
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	080062a4 	.word	0x080062a4
 80015c4:	08005fbc 	.word	0x08005fbc
 80015c8:	0800629c 	.word	0x0800629c
 80015cc:	080062b0 	.word	0x080062b0

080015d0 <UnityAssertEqualString>:
/*-----------------------------------------------*/
void UnityAssertEqualString(const char* expected,
                            const char* actual,
                            const char* msg,
                            const UNITY_LINE_TYPE lineNumber)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	603b      	str	r3, [r7, #0]
    UNITY_UINT32 i;

    RETURN_IF_FAIL_OR_IGNORE;
 80015de:	4b25      	ldr	r3, [pc, #148]	; (8001674 <UnityAssertEqualString+0xa4>)
 80015e0:	6a1b      	ldr	r3, [r3, #32]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d103      	bne.n	80015ee <UnityAssertEqualString+0x1e>
 80015e6:	4b23      	ldr	r3, [pc, #140]	; (8001674 <UnityAssertEqualString+0xa4>)
 80015e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <UnityAssertEqualString+0x26>
 80015ee:	2101      	movs	r1, #1
 80015f0:	4821      	ldr	r0, [pc, #132]	; (8001678 <UnityAssertEqualString+0xa8>)
 80015f2:	f7fe fdf3 	bl	80001dc <longjmp>

    /* if both pointers not null compare the strings */
    if (expected && actual)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d024      	beq.n	8001646 <UnityAssertEqualString+0x76>
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d021      	beq.n	8001646 <UnityAssertEqualString+0x76>
    {
        for (i = 0; expected[i] || actual[i]; i++)
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
 8001606:	e011      	b.n	800162c <UnityAssertEqualString+0x5c>
        {
            if (expected[i] != actual[i])
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	4413      	add	r3, r2
 800160e:	781a      	ldrb	r2, [r3, #0]
 8001610:	68b9      	ldr	r1, [r7, #8]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	440b      	add	r3, r1
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	429a      	cmp	r2, r3
 800161a:	d004      	beq.n	8001626 <UnityAssertEqualString+0x56>
            {
                Unity.CurrentTestFailed = 1;
 800161c:	4b15      	ldr	r3, [pc, #84]	; (8001674 <UnityAssertEqualString+0xa4>)
 800161e:	2201      	movs	r2, #1
 8001620:	621a      	str	r2, [r3, #32]
                break;
 8001622:	bf00      	nop
    if (expected && actual)
 8001624:	e016      	b.n	8001654 <UnityAssertEqualString+0x84>
        for (i = 0; expected[i] || actual[i]; i++)
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	3301      	adds	r3, #1
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	4413      	add	r3, r2
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1e7      	bne.n	8001608 <UnityAssertEqualString+0x38>
 8001638:	68ba      	ldr	r2, [r7, #8]
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	4413      	add	r3, r2
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1e1      	bne.n	8001608 <UnityAssertEqualString+0x38>
    if (expected && actual)
 8001644:	e006      	b.n	8001654 <UnityAssertEqualString+0x84>
            }
        }
    }
    else
    { /* handle case of one pointers being null (if both null, test should pass) */
        if (expected != actual)
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	429a      	cmp	r2, r3
 800164c:	d002      	beq.n	8001654 <UnityAssertEqualString+0x84>
        {
            Unity.CurrentTestFailed = 1;
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <UnityAssertEqualString+0xa4>)
 8001650:	2201      	movs	r2, #1
 8001652:	621a      	str	r2, [r3, #32]
        }
    }

    if (Unity.CurrentTestFailed)
 8001654:	4b07      	ldr	r3, [pc, #28]	; (8001674 <UnityAssertEqualString+0xa4>)
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d006      	beq.n	800166a <UnityAssertEqualString+0x9a>
    {
    	UnityTestResultsFailBegin(lineNumber);
 800165c:	6838      	ldr	r0, [r7, #0]
 800165e:	f7ff ff29 	bl	80014b4 <UnityTestResultsFailBegin>
        UnityPrintExpectedAndActualStrings(expected, actual);
 8001662:	68b9      	ldr	r1, [r7, #8]
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f7ff ff79 	bl	800155c <UnityPrintExpectedAndActualStrings>
        UnityPrintExpectedAndActualStrings(expected, actual);
        UnityAddMsgIfSpecified(msg);
        UNITY_FAIL_AND_BAIL;
    	*/
    }
}
 800166a:	bf00      	nop
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	200010a0 	.word	0x200010a0
 8001678:	200010c8 	.word	0x200010c8

0800167c <UnityDefaultTestRun>:
/*-----------------------------------------------*/
/* If we have not defined our own test runner, then include our default test runner to make life easier */
#ifndef UNITY_SKIP_DEFAULT_RUNNER

void UnityDefaultTestRun(UnityTestFunction Func, const char* FuncName, const int FuncLineNum)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
    Unity.CurrentTestName = FuncName;
 8001688:	4a14      	ldr	r2, [pc, #80]	; (80016dc <UnityDefaultTestRun+0x60>)
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	6053      	str	r3, [r2, #4]
    Unity.CurrentTestLineNumber = (UNITY_LINE_TYPE)FuncLineNum;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a12      	ldr	r2, [pc, #72]	; (80016dc <UnityDefaultTestRun+0x60>)
 8001692:	6113      	str	r3, [r2, #16]
    Unity.NumberOfTests++;
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <UnityDefaultTestRun+0x60>)
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	3301      	adds	r3, #1
 800169a:	4a10      	ldr	r2, [pc, #64]	; (80016dc <UnityDefaultTestRun+0x60>)
 800169c:	6153      	str	r3, [r2, #20]
    UNITY_CLR_DETAILS();
 800169e:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <UnityDefaultTestRun+0x60>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <UnityDefaultTestRun+0x60>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]

    //UNITY_EXEC_TIME_START();
    if (TEST_PROTECT())
 80016aa:	480d      	ldr	r0, [pc, #52]	; (80016e0 <UnityDefaultTestRun+0x64>)
 80016ac:	f7fe fd90 	bl	80001d0 <setjmp>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d103      	bne.n	80016be <UnityDefaultTestRun+0x42>
    {
        setUp();
 80016b6:	f7ff fc13 	bl	8000ee0 <setUp>
        Func();
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	4798      	blx	r3
    }
    if (TEST_PROTECT())
 80016be:	4808      	ldr	r0, [pc, #32]	; (80016e0 <UnityDefaultTestRun+0x64>)
 80016c0:	f7fe fd86 	bl	80001d0 <setjmp>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <UnityDefaultTestRun+0x52>
    {
        tearDown();
 80016ca:	f7ff fc10 	bl	8000eee <tearDown>
    }
    //UNITY_EXEC_TIME_STOP();

    UnityConcludeTest();
 80016ce:	f7ff ff0f 	bl	80014f0 <UnityConcludeTest>
}
 80016d2:	bf00      	nop
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200010a0 	.word	0x200010a0
 80016e0:	200010c8 	.word	0x200010c8

080016e4 <UnityBegin>:
	Unity.TestFile = filename;
}

/*-----------------------------------------------*/
void UnityBegin(const char* filename)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
    Unity.TestFile = filename;
 80016ec:	4a11      	ldr	r2, [pc, #68]	; (8001734 <UnityBegin+0x50>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6013      	str	r3, [r2, #0]
    Unity.CurrentTestName = NULL;
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <UnityBegin+0x50>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	605a      	str	r2, [r3, #4]
    Unity.CurrentTestLineNumber = 0;
 80016f8:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <UnityBegin+0x50>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	611a      	str	r2, [r3, #16]
    Unity.NumberOfTests = 0;
 80016fe:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <UnityBegin+0x50>)
 8001700:	2200      	movs	r2, #0
 8001702:	615a      	str	r2, [r3, #20]
    Unity.TestFailures = 0;
 8001704:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <UnityBegin+0x50>)
 8001706:	2200      	movs	r2, #0
 8001708:	619a      	str	r2, [r3, #24]
    Unity.TestIgnores = 0;
 800170a:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <UnityBegin+0x50>)
 800170c:	2200      	movs	r2, #0
 800170e:	61da      	str	r2, [r3, #28]
    Unity.CurrentTestFailed = 0;
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <UnityBegin+0x50>)
 8001712:	2200      	movs	r2, #0
 8001714:	621a      	str	r2, [r3, #32]
    Unity.CurrentTestIgnored = 0;
 8001716:	4b07      	ldr	r3, [pc, #28]	; (8001734 <UnityBegin+0x50>)
 8001718:	2200      	movs	r2, #0
 800171a:	625a      	str	r2, [r3, #36]	; 0x24

    UNITY_CLR_DETAILS();
 800171c:	4b05      	ldr	r3, [pc, #20]	; (8001734 <UnityBegin+0x50>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	4b04      	ldr	r3, [pc, #16]	; (8001734 <UnityBegin+0x50>)
 8001724:	2200      	movs	r2, #0
 8001726:	60da      	str	r2, [r3, #12]
    UNITY_OUTPUT_START();
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	200010a0 	.word	0x200010a0

08001738 <UnityEnd>:

/*-----------------------------------------------*/
int UnityEnd(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
    printf(UnityStrBreaker);
 800173c:	481c      	ldr	r0, [pc, #112]	; (80017b0 <UnityEnd+0x78>)
 800173e:	f003 f90b 	bl	8004958 <iprintf>
    printf("\n");
 8001742:	200a      	movs	r0, #10
 8001744:	f003 f920 	bl	8004988 <putchar>
    printf(UnityStrResultsTests);
 8001748:	481a      	ldr	r0, [pc, #104]	; (80017b4 <UnityEnd+0x7c>)
 800174a:	f003 f905 	bl	8004958 <iprintf>
    printf("%d\n", (UNITY_INT)(Unity.NumberOfTests));
 800174e:	4b1a      	ldr	r3, [pc, #104]	; (80017b8 <UnityEnd+0x80>)
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	4619      	mov	r1, r3
 8001754:	4819      	ldr	r0, [pc, #100]	; (80017bc <UnityEnd+0x84>)
 8001756:	f003 f8ff 	bl	8004958 <iprintf>
    printf(UnityStrResultsFailures);
 800175a:	4819      	ldr	r0, [pc, #100]	; (80017c0 <UnityEnd+0x88>)
 800175c:	f003 f8fc 	bl	8004958 <iprintf>
    printf("%d\n", (UNITY_INT)(Unity.TestFailures));
 8001760:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <UnityEnd+0x80>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	4619      	mov	r1, r3
 8001766:	4815      	ldr	r0, [pc, #84]	; (80017bc <UnityEnd+0x84>)
 8001768:	f003 f8f6 	bl	8004958 <iprintf>
    printf(UnityStrResultsIgnored);
 800176c:	4815      	ldr	r0, [pc, #84]	; (80017c4 <UnityEnd+0x8c>)
 800176e:	f003 f8f3 	bl	8004958 <iprintf>
    printf("%d\n", (UNITY_INT)(Unity.TestIgnores));
 8001772:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <UnityEnd+0x80>)
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	4619      	mov	r1, r3
 8001778:	4810      	ldr	r0, [pc, #64]	; (80017bc <UnityEnd+0x84>)
 800177a:	f003 f8ed 	bl	8004958 <iprintf>
    printf("\n");
 800177e:	200a      	movs	r0, #10
 8001780:	f003 f902 	bl	8004988 <putchar>
    if (Unity.TestFailures == 0U)
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <UnityEnd+0x80>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d106      	bne.n	800179a <UnityEnd+0x62>
    {
        printf(UnityStrOk);
 800178c:	480e      	ldr	r0, [pc, #56]	; (80017c8 <UnityEnd+0x90>)
 800178e:	f003 f8e3 	bl	8004958 <iprintf>
        printf("\n");
 8001792:	200a      	movs	r0, #10
 8001794:	f003 f8f8 	bl	8004988 <putchar>
 8001798:	e002      	b.n	80017a0 <UnityEnd+0x68>
    }
    else
    {
        printf(UnityStrFail);
 800179a:	480c      	ldr	r0, [pc, #48]	; (80017cc <UnityEnd+0x94>)
 800179c:	f003 f8dc 	bl	8004958 <iprintf>
		#ifdef UNITY_DIFFERENTIATE_FINAL_FAIL
        printf('E'); printf('D');
		#endif
    }
    printf("\n");
 80017a0:	200a      	movs	r0, #10
 80017a2:	f003 f8f1 	bl	8004988 <putchar>
    UNITY_FLUSH_CALL();
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures);
 80017a6:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <UnityEnd+0x80>)
 80017a8:	699b      	ldr	r3, [r3, #24]
    UNITY_PRINT_EOL();
    UNITY_FLUSH_CALL();
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures); */

}
 80017aa:	4618      	mov	r0, r3
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	080062e8 	.word	0x080062e8
 80017b4:	08006300 	.word	0x08006300
 80017b8:	200010a0 	.word	0x200010a0
 80017bc:	08005fc0 	.word	0x08005fc0
 80017c0:	08006314 	.word	0x08006314
 80017c4:	08006320 	.word	0x08006320
 80017c8:	08006278 	.word	0x08006278
 80017cc:	08006294 	.word	0x08006294

080017d0 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80017d4:	4b14      	ldr	r3, [pc, #80]	; (8001828 <MX_UART4_Init+0x58>)
 80017d6:	4a15      	ldr	r2, [pc, #84]	; (800182c <MX_UART4_Init+0x5c>)
 80017d8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80017da:	4b13      	ldr	r3, [pc, #76]	; (8001828 <MX_UART4_Init+0x58>)
 80017dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017e0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80017e2:	4b11      	ldr	r3, [pc, #68]	; (8001828 <MX_UART4_Init+0x58>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80017e8:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <MX_UART4_Init+0x58>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <MX_UART4_Init+0x58>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <MX_UART4_Init+0x58>)
 80017f6:	220c      	movs	r2, #12
 80017f8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fa:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <MX_UART4_Init+0x58>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <MX_UART4_Init+0x58>)
 8001802:	2200      	movs	r2, #0
 8001804:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001806:	4b08      	ldr	r3, [pc, #32]	; (8001828 <MX_UART4_Init+0x58>)
 8001808:	2200      	movs	r2, #0
 800180a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <MX_UART4_Init+0x58>)
 800180e:	2200      	movs	r2, #0
 8001810:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001812:	4805      	ldr	r0, [pc, #20]	; (8001828 <MX_UART4_Init+0x58>)
 8001814:	f001 ff5e 	bl	80036d4 <HAL_UART_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800181e:	f7ff fa48 	bl	8000cb2 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20001124 	.word	0x20001124
 800182c:	40004c00 	.word	0x40004c00

08001830 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	; 0x28
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a1b      	ldr	r2, [pc, #108]	; (80018bc <HAL_UART_MspInit+0x8c>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d130      	bne.n	80018b4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001852:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <HAL_UART_MspInit+0x90>)
 8001854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001856:	4a1a      	ldr	r2, [pc, #104]	; (80018c0 <HAL_UART_MspInit+0x90>)
 8001858:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800185c:	6593      	str	r3, [r2, #88]	; 0x58
 800185e:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <HAL_UART_MspInit+0x90>)
 8001860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001862:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186a:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <HAL_UART_MspInit+0x90>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	4a14      	ldr	r2, [pc, #80]	; (80018c0 <HAL_UART_MspInit+0x90>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001876:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <HAL_UART_MspInit+0x90>)
 8001878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001882:	2303      	movs	r3, #3
 8001884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2302      	movs	r3, #2
 8001888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188e:	2303      	movs	r3, #3
 8001890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001892:	2308      	movs	r3, #8
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	4619      	mov	r1, r3
 800189c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a0:	f000 fa62 	bl	8001d68 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80018a4:	2200      	movs	r2, #0
 80018a6:	2100      	movs	r1, #0
 80018a8:	2034      	movs	r0, #52	; 0x34
 80018aa:	f000 f9a8 	bl	8001bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80018ae:	2034      	movs	r0, #52	; 0x34
 80018b0:	f000 f9c1 	bl	8001c36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 80018b4:	bf00      	nop
 80018b6:	3728      	adds	r7, #40	; 0x28
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40004c00 	.word	0x40004c00
 80018c0:	40021000 	.word	0x40021000

080018c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018c8:	f7ff fad8 	bl	8000e7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80018cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80018ce:	e003      	b.n	80018d8 <LoopCopyDataInit>

080018d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80018d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80018d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80018d6:	3104      	adds	r1, #4

080018d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80018d8:	480a      	ldr	r0, [pc, #40]	; (8001904 <LoopForever+0xa>)
	ldr	r3, =_edata
 80018da:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <LoopForever+0xe>)
	adds	r2, r0, r1
 80018dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80018de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80018e0:	d3f6      	bcc.n	80018d0 <CopyDataInit>
	ldr	r2, =_sbss
 80018e2:	4a0a      	ldr	r2, [pc, #40]	; (800190c <LoopForever+0x12>)
	b	LoopFillZerobss
 80018e4:	e002      	b.n	80018ec <LoopFillZerobss>

080018e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80018e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80018e8:	f842 3b04 	str.w	r3, [r2], #4

080018ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <LoopForever+0x16>)
	cmp	r2, r3
 80018ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80018f0:	d3f9      	bcc.n	80018e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018f2:	f002 fff7 	bl	80048e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018f6:	f7ff f95a 	bl	8000bae <main>

080018fa <LoopForever>:

LoopForever:
    b LoopForever
 80018fa:	e7fe      	b.n	80018fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018fc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001900:	080063d4 	.word	0x080063d4
	ldr	r0, =_sdata
 8001904:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001908:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 800190c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001910:	200011bc 	.word	0x200011bc

08001914 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001914:	e7fe      	b.n	8001914 <ADC1_2_IRQHandler>

08001916 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001920:	2003      	movs	r0, #3
 8001922:	f000 f961 	bl	8001be8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001926:	2000      	movs	r0, #0
 8001928:	f000 f80e 	bl	8001948 <HAL_InitTick>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d002      	beq.n	8001938 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	71fb      	strb	r3, [r7, #7]
 8001936:	e001      	b.n	800193c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001938:	f7ff f9c0 	bl	8000cbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800193c:	79fb      	ldrb	r3, [r7, #7]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
	...

08001948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001950:	2300      	movs	r3, #0
 8001952:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001954:	4b17      	ldr	r3, [pc, #92]	; (80019b4 <HAL_InitTick+0x6c>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d023      	beq.n	80019a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800195c:	4b16      	ldr	r3, [pc, #88]	; (80019b8 <HAL_InitTick+0x70>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <HAL_InitTick+0x6c>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	4619      	mov	r1, r3
 8001966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800196a:	fbb3 f3f1 	udiv	r3, r3, r1
 800196e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001972:	4618      	mov	r0, r3
 8001974:	f000 f96d 	bl	8001c52 <HAL_SYSTICK_Config>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d10f      	bne.n	800199e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b0f      	cmp	r3, #15
 8001982:	d809      	bhi.n	8001998 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001984:	2200      	movs	r2, #0
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	f04f 30ff 	mov.w	r0, #4294967295
 800198c:	f000 f937 	bl	8001bfe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001990:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <HAL_InitTick+0x74>)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	e007      	b.n	80019a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	73fb      	strb	r3, [r7, #15]
 800199c:	e004      	b.n	80019a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	73fb      	strb	r3, [r7, #15]
 80019a2:	e001      	b.n	80019a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000008 	.word	0x20000008
 80019b8:	20000000 	.word	0x20000000
 80019bc:	20000004 	.word	0x20000004

080019c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <HAL_IncTick+0x20>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	461a      	mov	r2, r3
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_IncTick+0x24>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4413      	add	r3, r2
 80019d0:	4a04      	ldr	r2, [pc, #16]	; (80019e4 <HAL_IncTick+0x24>)
 80019d2:	6013      	str	r3, [r2, #0]
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	20000008 	.word	0x20000008
 80019e4:	200011a8 	.word	0x200011a8

080019e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return uwTick;
 80019ec:	4b03      	ldr	r3, [pc, #12]	; (80019fc <HAL_GetTick+0x14>)
 80019ee:	681b      	ldr	r3, [r3, #0]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	200011a8 	.word	0x200011a8

08001a00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a08:	f7ff ffee 	bl	80019e8 <HAL_GetTick>
 8001a0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a18:	d005      	beq.n	8001a26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <HAL_Delay+0x44>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4413      	add	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a26:	bf00      	nop
 8001a28:	f7ff ffde 	bl	80019e8 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d8f7      	bhi.n	8001a28 <HAL_Delay+0x28>
  {
  }
}
 8001a38:	bf00      	nop
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000008 	.word	0x20000008

08001a48 <__NVIC_SetPriorityGrouping>:
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <__NVIC_SetPriorityGrouping+0x44>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a64:	4013      	ands	r3, r2
 8001a66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a7a:	4a04      	ldr	r2, [pc, #16]	; (8001a8c <__NVIC_SetPriorityGrouping+0x44>)
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	60d3      	str	r3, [r2, #12]
}
 8001a80:	bf00      	nop
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <__NVIC_GetPriorityGrouping>:
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a94:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	0a1b      	lsrs	r3, r3, #8
 8001a9a:	f003 0307 	and.w	r3, r3, #7
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <__NVIC_EnableIRQ>:
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	db0b      	blt.n	8001ad6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	f003 021f 	and.w	r2, r3, #31
 8001ac4:	4907      	ldr	r1, [pc, #28]	; (8001ae4 <__NVIC_EnableIRQ+0x38>)
 8001ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aca:	095b      	lsrs	r3, r3, #5
 8001acc:	2001      	movs	r0, #1
 8001ace:	fa00 f202 	lsl.w	r2, r0, r2
 8001ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	e000e100 	.word	0xe000e100

08001ae8 <__NVIC_SetPriority>:
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	6039      	str	r1, [r7, #0]
 8001af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	db0a      	blt.n	8001b12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	490c      	ldr	r1, [pc, #48]	; (8001b34 <__NVIC_SetPriority+0x4c>)
 8001b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b06:	0112      	lsls	r2, r2, #4
 8001b08:	b2d2      	uxtb	r2, r2
 8001b0a:	440b      	add	r3, r1
 8001b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b10:	e00a      	b.n	8001b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	4908      	ldr	r1, [pc, #32]	; (8001b38 <__NVIC_SetPriority+0x50>)
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	3b04      	subs	r3, #4
 8001b20:	0112      	lsls	r2, r2, #4
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	440b      	add	r3, r1
 8001b26:	761a      	strb	r2, [r3, #24]
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000e100 	.word	0xe000e100
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <NVIC_EncodePriority>:
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b089      	sub	sp, #36	; 0x24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f1c3 0307 	rsb	r3, r3, #7
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	bf28      	it	cs
 8001b5a:	2304      	movcs	r3, #4
 8001b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3304      	adds	r3, #4
 8001b62:	2b06      	cmp	r3, #6
 8001b64:	d902      	bls.n	8001b6c <NVIC_EncodePriority+0x30>
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3b03      	subs	r3, #3
 8001b6a:	e000      	b.n	8001b6e <NVIC_EncodePriority+0x32>
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b70:	f04f 32ff 	mov.w	r2, #4294967295
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43da      	mvns	r2, r3
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	401a      	ands	r2, r3
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b84:	f04f 31ff 	mov.w	r1, #4294967295
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8e:	43d9      	mvns	r1, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b94:	4313      	orrs	r3, r2
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3724      	adds	r7, #36	; 0x24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
	...

08001ba4 <SysTick_Config>:
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bb4:	d301      	bcc.n	8001bba <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e00f      	b.n	8001bda <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bba:	4a0a      	ldr	r2, [pc, #40]	; (8001be4 <SysTick_Config+0x40>)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bc2:	210f      	movs	r1, #15
 8001bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc8:	f7ff ff8e 	bl	8001ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bcc:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <SysTick_Config+0x40>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bd2:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <SysTick_Config+0x40>)
 8001bd4:	2207      	movs	r2, #7
 8001bd6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	e000e010 	.word	0xe000e010

08001be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7ff ff29 	bl	8001a48 <__NVIC_SetPriorityGrouping>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b086      	sub	sp, #24
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	4603      	mov	r3, r0
 8001c06:	60b9      	str	r1, [r7, #8]
 8001c08:	607a      	str	r2, [r7, #4]
 8001c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c10:	f7ff ff3e 	bl	8001a90 <__NVIC_GetPriorityGrouping>
 8001c14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	68b9      	ldr	r1, [r7, #8]
 8001c1a:	6978      	ldr	r0, [r7, #20]
 8001c1c:	f7ff ff8e 	bl	8001b3c <NVIC_EncodePriority>
 8001c20:	4602      	mov	r2, r0
 8001c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c26:	4611      	mov	r1, r2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff ff5d 	bl	8001ae8 <__NVIC_SetPriority>
}
 8001c2e:	bf00      	nop
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ff31 	bl	8001aac <__NVIC_EnableIRQ>
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff ffa2 	bl	8001ba4 <SysTick_Config>
 8001c60:	4603      	mov	r3, r0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b085      	sub	sp, #20
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c72:	2300      	movs	r3, #0
 8001c74:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d008      	beq.n	8001c94 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2204      	movs	r2, #4
 8001c86:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e022      	b.n	8001cda <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 020e 	bic.w	r2, r2, #14
 8001ca2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0201 	bic.w	r2, r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb8:	f003 021c 	and.w	r2, r3, #28
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001cd8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b084      	sub	sp, #16
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d005      	beq.n	8001d0a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2204      	movs	r2, #4
 8001d02:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	73fb      	strb	r3, [r7, #15]
 8001d08:	e029      	b.n	8001d5e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 020e 	bic.w	r2, r2, #14
 8001d18:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 0201 	bic.w	r2, r2, #1
 8001d28:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2e:	f003 021c 	and.w	r2, r3, #28
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	2101      	movs	r1, #1
 8001d38:	fa01 f202 	lsl.w	r2, r1, r2
 8001d3c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	4798      	blx	r3
    }
  }
  return status;
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b087      	sub	sp, #28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d76:	e17f      	b.n	8002078 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	fa01 f303 	lsl.w	r3, r1, r3
 8001d84:	4013      	ands	r3, r2
 8001d86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 8171 	beq.w	8002072 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d00b      	beq.n	8001db0 <HAL_GPIO_Init+0x48>
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d007      	beq.n	8001db0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001da4:	2b11      	cmp	r3, #17
 8001da6:	d003      	beq.n	8001db0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b12      	cmp	r3, #18
 8001dae:	d130      	bne.n	8001e12 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	2203      	movs	r2, #3
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	68da      	ldr	r2, [r3, #12]
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001de6:	2201      	movs	r2, #1
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43db      	mvns	r3, r3
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4013      	ands	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	091b      	lsrs	r3, r3, #4
 8001dfc:	f003 0201 	and.w	r2, r3, #1
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	2b03      	cmp	r3, #3
 8001e1c:	d118      	bne.n	8001e50 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e24:	2201      	movs	r2, #1
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	4013      	ands	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	08db      	lsrs	r3, r3, #3
 8001e3a:	f003 0201 	and.w	r2, r3, #1
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	2203      	movs	r2, #3
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4013      	ands	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d003      	beq.n	8001e90 <HAL_GPIO_Init+0x128>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b12      	cmp	r3, #18
 8001e8e:	d123      	bne.n	8001ed8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	08da      	lsrs	r2, r3, #3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3208      	adds	r2, #8
 8001e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	220f      	movs	r2, #15
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	691a      	ldr	r2, [r3, #16]
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	08da      	lsrs	r2, r3, #3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	3208      	adds	r2, #8
 8001ed2:	6939      	ldr	r1, [r7, #16]
 8001ed4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4013      	ands	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 0203 	and.w	r2, r3, #3
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 80ac 	beq.w	8002072 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1a:	4b5f      	ldr	r3, [pc, #380]	; (8002098 <HAL_GPIO_Init+0x330>)
 8001f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f1e:	4a5e      	ldr	r2, [pc, #376]	; (8002098 <HAL_GPIO_Init+0x330>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6613      	str	r3, [r2, #96]	; 0x60
 8001f26:	4b5c      	ldr	r3, [pc, #368]	; (8002098 <HAL_GPIO_Init+0x330>)
 8001f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f32:	4a5a      	ldr	r2, [pc, #360]	; (800209c <HAL_GPIO_Init+0x334>)
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	089b      	lsrs	r3, r3, #2
 8001f38:	3302      	adds	r3, #2
 8001f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	220f      	movs	r2, #15
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	4013      	ands	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f5c:	d025      	beq.n	8001faa <HAL_GPIO_Init+0x242>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a4f      	ldr	r2, [pc, #316]	; (80020a0 <HAL_GPIO_Init+0x338>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d01f      	beq.n	8001fa6 <HAL_GPIO_Init+0x23e>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a4e      	ldr	r2, [pc, #312]	; (80020a4 <HAL_GPIO_Init+0x33c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d019      	beq.n	8001fa2 <HAL_GPIO_Init+0x23a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a4d      	ldr	r2, [pc, #308]	; (80020a8 <HAL_GPIO_Init+0x340>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d013      	beq.n	8001f9e <HAL_GPIO_Init+0x236>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a4c      	ldr	r2, [pc, #304]	; (80020ac <HAL_GPIO_Init+0x344>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d00d      	beq.n	8001f9a <HAL_GPIO_Init+0x232>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a4b      	ldr	r2, [pc, #300]	; (80020b0 <HAL_GPIO_Init+0x348>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d007      	beq.n	8001f96 <HAL_GPIO_Init+0x22e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a4a      	ldr	r2, [pc, #296]	; (80020b4 <HAL_GPIO_Init+0x34c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d101      	bne.n	8001f92 <HAL_GPIO_Init+0x22a>
 8001f8e:	2306      	movs	r3, #6
 8001f90:	e00c      	b.n	8001fac <HAL_GPIO_Init+0x244>
 8001f92:	2307      	movs	r3, #7
 8001f94:	e00a      	b.n	8001fac <HAL_GPIO_Init+0x244>
 8001f96:	2305      	movs	r3, #5
 8001f98:	e008      	b.n	8001fac <HAL_GPIO_Init+0x244>
 8001f9a:	2304      	movs	r3, #4
 8001f9c:	e006      	b.n	8001fac <HAL_GPIO_Init+0x244>
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e004      	b.n	8001fac <HAL_GPIO_Init+0x244>
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e002      	b.n	8001fac <HAL_GPIO_Init+0x244>
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <HAL_GPIO_Init+0x244>
 8001faa:	2300      	movs	r3, #0
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	f002 0203 	and.w	r2, r2, #3
 8001fb2:	0092      	lsls	r2, r2, #2
 8001fb4:	4093      	lsls	r3, r2
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fbc:	4937      	ldr	r1, [pc, #220]	; (800209c <HAL_GPIO_Init+0x334>)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	089b      	lsrs	r3, r3, #2
 8001fc2:	3302      	adds	r3, #2
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001fca:	4b3b      	ldr	r3, [pc, #236]	; (80020b8 <HAL_GPIO_Init+0x350>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fee:	4a32      	ldr	r2, [pc, #200]	; (80020b8 <HAL_GPIO_Init+0x350>)
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001ff4:	4b30      	ldr	r3, [pc, #192]	; (80020b8 <HAL_GPIO_Init+0x350>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4013      	ands	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	4313      	orrs	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002018:	4a27      	ldr	r2, [pc, #156]	; (80020b8 <HAL_GPIO_Init+0x350>)
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800201e:	4b26      	ldr	r3, [pc, #152]	; (80020b8 <HAL_GPIO_Init+0x350>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	43db      	mvns	r3, r3
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	4013      	ands	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4313      	orrs	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002042:	4a1d      	ldr	r2, [pc, #116]	; (80020b8 <HAL_GPIO_Init+0x350>)
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002048:	4b1b      	ldr	r3, [pc, #108]	; (80020b8 <HAL_GPIO_Init+0x350>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	43db      	mvns	r3, r3
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4013      	ands	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4313      	orrs	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800206c:	4a12      	ldr	r2, [pc, #72]	; (80020b8 <HAL_GPIO_Init+0x350>)
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	3301      	adds	r3, #1
 8002076:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	fa22 f303 	lsr.w	r3, r2, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	f47f ae78 	bne.w	8001d78 <HAL_GPIO_Init+0x10>
  }
}
 8002088:	bf00      	nop
 800208a:	bf00      	nop
 800208c:	371c      	adds	r7, #28
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	40021000 	.word	0x40021000
 800209c:	40010000 	.word	0x40010000
 80020a0:	48000400 	.word	0x48000400
 80020a4:	48000800 	.word	0x48000800
 80020a8:	48000c00 	.word	0x48000c00
 80020ac:	48001000 	.word	0x48001000
 80020b0:	48001400 	.word	0x48001400
 80020b4:	48001800 	.word	0x48001800
 80020b8:	40010400 	.word	0x40010400

080020bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80020c0:	4b04      	ldr	r3, [pc, #16]	; (80020d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	40007000 	.word	0x40007000

080020d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020e6:	d130      	bne.n	800214a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80020e8:	4b23      	ldr	r3, [pc, #140]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020f4:	d038      	beq.n	8002168 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020f6:	4b20      	ldr	r3, [pc, #128]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020fe:	4a1e      	ldr	r2, [pc, #120]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002100:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002104:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002106:	4b1d      	ldr	r3, [pc, #116]	; (800217c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2232      	movs	r2, #50	; 0x32
 800210c:	fb02 f303 	mul.w	r3, r2, r3
 8002110:	4a1b      	ldr	r2, [pc, #108]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002112:	fba2 2303 	umull	r2, r3, r2, r3
 8002116:	0c9b      	lsrs	r3, r3, #18
 8002118:	3301      	adds	r3, #1
 800211a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800211c:	e002      	b.n	8002124 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	3b01      	subs	r3, #1
 8002122:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002124:	4b14      	ldr	r3, [pc, #80]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800212c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002130:	d102      	bne.n	8002138 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1f2      	bne.n	800211e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002138:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002144:	d110      	bne.n	8002168 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e00f      	b.n	800216a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800214a:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002156:	d007      	beq.n	8002168 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002158:	4b07      	ldr	r3, [pc, #28]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002160:	4a05      	ldr	r2, [pc, #20]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002162:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002166:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	40007000 	.word	0x40007000
 800217c:	20000000 	.word	0x20000000
 8002180:	431bde83 	.word	0x431bde83

08002184 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b088      	sub	sp, #32
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e3d4      	b.n	8002940 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002196:	4ba1      	ldr	r3, [pc, #644]	; (800241c <HAL_RCC_OscConfig+0x298>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 030c 	and.w	r3, r3, #12
 800219e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021a0:	4b9e      	ldr	r3, [pc, #632]	; (800241c <HAL_RCC_OscConfig+0x298>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	f003 0303 	and.w	r3, r3, #3
 80021a8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0310 	and.w	r3, r3, #16
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 80e4 	beq.w	8002380 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d007      	beq.n	80021ce <HAL_RCC_OscConfig+0x4a>
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	2b0c      	cmp	r3, #12
 80021c2:	f040 808b 	bne.w	80022dc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	f040 8087 	bne.w	80022dc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021ce:	4b93      	ldr	r3, [pc, #588]	; (800241c <HAL_RCC_OscConfig+0x298>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d005      	beq.n	80021e6 <HAL_RCC_OscConfig+0x62>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e3ac      	b.n	8002940 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a1a      	ldr	r2, [r3, #32]
 80021ea:	4b8c      	ldr	r3, [pc, #560]	; (800241c <HAL_RCC_OscConfig+0x298>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d004      	beq.n	8002200 <HAL_RCC_OscConfig+0x7c>
 80021f6:	4b89      	ldr	r3, [pc, #548]	; (800241c <HAL_RCC_OscConfig+0x298>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021fe:	e005      	b.n	800220c <HAL_RCC_OscConfig+0x88>
 8002200:	4b86      	ldr	r3, [pc, #536]	; (800241c <HAL_RCC_OscConfig+0x298>)
 8002202:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002206:	091b      	lsrs	r3, r3, #4
 8002208:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800220c:	4293      	cmp	r3, r2
 800220e:	d223      	bcs.n	8002258 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	4618      	mov	r0, r3
 8002216:	f000 fd41 	bl	8002c9c <RCC_SetFlashLatencyFromMSIRange>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e38d      	b.n	8002940 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002224:	4b7d      	ldr	r3, [pc, #500]	; (800241c <HAL_RCC_OscConfig+0x298>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a7c      	ldr	r2, [pc, #496]	; (800241c <HAL_RCC_OscConfig+0x298>)
 800222a:	f043 0308 	orr.w	r3, r3, #8
 800222e:	6013      	str	r3, [r2, #0]
 8002230:	4b7a      	ldr	r3, [pc, #488]	; (800241c <HAL_RCC_OscConfig+0x298>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	4977      	ldr	r1, [pc, #476]	; (800241c <HAL_RCC_OscConfig+0x298>)
 800223e:	4313      	orrs	r3, r2
 8002240:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002242:	4b76      	ldr	r3, [pc, #472]	; (800241c <HAL_RCC_OscConfig+0x298>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	021b      	lsls	r3, r3, #8
 8002250:	4972      	ldr	r1, [pc, #456]	; (800241c <HAL_RCC_OscConfig+0x298>)
 8002252:	4313      	orrs	r3, r2
 8002254:	604b      	str	r3, [r1, #4]
 8002256:	e025      	b.n	80022a4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002258:	4b70      	ldr	r3, [pc, #448]	; (800241c <HAL_RCC_OscConfig+0x298>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a6f      	ldr	r2, [pc, #444]	; (800241c <HAL_RCC_OscConfig+0x298>)
 800225e:	f043 0308 	orr.w	r3, r3, #8
 8002262:	6013      	str	r3, [r2, #0]
 8002264:	4b6d      	ldr	r3, [pc, #436]	; (800241c <HAL_RCC_OscConfig+0x298>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	496a      	ldr	r1, [pc, #424]	; (800241c <HAL_RCC_OscConfig+0x298>)
 8002272:	4313      	orrs	r3, r2
 8002274:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002276:	4b69      	ldr	r3, [pc, #420]	; (800241c <HAL_RCC_OscConfig+0x298>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	021b      	lsls	r3, r3, #8
 8002284:	4965      	ldr	r1, [pc, #404]	; (800241c <HAL_RCC_OscConfig+0x298>)
 8002286:	4313      	orrs	r3, r2
 8002288:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d109      	bne.n	80022a4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	4618      	mov	r0, r3
 8002296:	f000 fd01 	bl	8002c9c <RCC_SetFlashLatencyFromMSIRange>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e34d      	b.n	8002940 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022a4:	f000 fc36 	bl	8002b14 <HAL_RCC_GetSysClockFreq>
 80022a8:	4602      	mov	r2, r0
 80022aa:	4b5c      	ldr	r3, [pc, #368]	; (800241c <HAL_RCC_OscConfig+0x298>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	091b      	lsrs	r3, r3, #4
 80022b0:	f003 030f 	and.w	r3, r3, #15
 80022b4:	495a      	ldr	r1, [pc, #360]	; (8002420 <HAL_RCC_OscConfig+0x29c>)
 80022b6:	5ccb      	ldrb	r3, [r1, r3]
 80022b8:	f003 031f 	and.w	r3, r3, #31
 80022bc:	fa22 f303 	lsr.w	r3, r2, r3
 80022c0:	4a58      	ldr	r2, [pc, #352]	; (8002424 <HAL_RCC_OscConfig+0x2a0>)
 80022c2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80022c4:	4b58      	ldr	r3, [pc, #352]	; (8002428 <HAL_RCC_OscConfig+0x2a4>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff fb3d 	bl	8001948 <HAL_InitTick>
 80022ce:	4603      	mov	r3, r0
 80022d0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d052      	beq.n	800237e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
 80022da:	e331      	b.n	8002940 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d032      	beq.n	800234a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022e4:	4b4d      	ldr	r3, [pc, #308]	; (800241c <HAL_RCC_OscConfig+0x298>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a4c      	ldr	r2, [pc, #304]	; (800241c <HAL_RCC_OscConfig+0x298>)
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022f0:	f7ff fb7a 	bl	80019e8 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022f8:	f7ff fb76 	bl	80019e8 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e31a      	b.n	8002940 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800230a:	4b44      	ldr	r3, [pc, #272]	; (800241c <HAL_RCC_OscConfig+0x298>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0f0      	beq.n	80022f8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002316:	4b41      	ldr	r3, [pc, #260]	; (800241c <HAL_RCC_OscConfig+0x298>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a40      	ldr	r2, [pc, #256]	; (800241c <HAL_RCC_OscConfig+0x298>)
 800231c:	f043 0308 	orr.w	r3, r3, #8
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	4b3e      	ldr	r3, [pc, #248]	; (800241c <HAL_RCC_OscConfig+0x298>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	493b      	ldr	r1, [pc, #236]	; (800241c <HAL_RCC_OscConfig+0x298>)
 8002330:	4313      	orrs	r3, r2
 8002332:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002334:	4b39      	ldr	r3, [pc, #228]	; (800241c <HAL_RCC_OscConfig+0x298>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	021b      	lsls	r3, r3, #8
 8002342:	4936      	ldr	r1, [pc, #216]	; (800241c <HAL_RCC_OscConfig+0x298>)
 8002344:	4313      	orrs	r3, r2
 8002346:	604b      	str	r3, [r1, #4]
 8002348:	e01a      	b.n	8002380 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800234a:	4b34      	ldr	r3, [pc, #208]	; (800241c <HAL_RCC_OscConfig+0x298>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a33      	ldr	r2, [pc, #204]	; (800241c <HAL_RCC_OscConfig+0x298>)
 8002350:	f023 0301 	bic.w	r3, r3, #1
 8002354:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002356:	f7ff fb47 	bl	80019e8 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800235e:	f7ff fb43 	bl	80019e8 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e2e7      	b.n	8002940 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002370:	4b2a      	ldr	r3, [pc, #168]	; (800241c <HAL_RCC_OscConfig+0x298>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1f0      	bne.n	800235e <HAL_RCC_OscConfig+0x1da>
 800237c:	e000      	b.n	8002380 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800237e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b00      	cmp	r3, #0
 800238a:	d074      	beq.n	8002476 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	2b08      	cmp	r3, #8
 8002390:	d005      	beq.n	800239e <HAL_RCC_OscConfig+0x21a>
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	2b0c      	cmp	r3, #12
 8002396:	d10e      	bne.n	80023b6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	2b03      	cmp	r3, #3
 800239c:	d10b      	bne.n	80023b6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800239e:	4b1f      	ldr	r3, [pc, #124]	; (800241c <HAL_RCC_OscConfig+0x298>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d064      	beq.n	8002474 <HAL_RCC_OscConfig+0x2f0>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d160      	bne.n	8002474 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e2c4      	b.n	8002940 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023be:	d106      	bne.n	80023ce <HAL_RCC_OscConfig+0x24a>
 80023c0:	4b16      	ldr	r3, [pc, #88]	; (800241c <HAL_RCC_OscConfig+0x298>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a15      	ldr	r2, [pc, #84]	; (800241c <HAL_RCC_OscConfig+0x298>)
 80023c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ca:	6013      	str	r3, [r2, #0]
 80023cc:	e01d      	b.n	800240a <HAL_RCC_OscConfig+0x286>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023d6:	d10c      	bne.n	80023f2 <HAL_RCC_OscConfig+0x26e>
 80023d8:	4b10      	ldr	r3, [pc, #64]	; (800241c <HAL_RCC_OscConfig+0x298>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a0f      	ldr	r2, [pc, #60]	; (800241c <HAL_RCC_OscConfig+0x298>)
 80023de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023e2:	6013      	str	r3, [r2, #0]
 80023e4:	4b0d      	ldr	r3, [pc, #52]	; (800241c <HAL_RCC_OscConfig+0x298>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a0c      	ldr	r2, [pc, #48]	; (800241c <HAL_RCC_OscConfig+0x298>)
 80023ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ee:	6013      	str	r3, [r2, #0]
 80023f0:	e00b      	b.n	800240a <HAL_RCC_OscConfig+0x286>
 80023f2:	4b0a      	ldr	r3, [pc, #40]	; (800241c <HAL_RCC_OscConfig+0x298>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a09      	ldr	r2, [pc, #36]	; (800241c <HAL_RCC_OscConfig+0x298>)
 80023f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	4b07      	ldr	r3, [pc, #28]	; (800241c <HAL_RCC_OscConfig+0x298>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a06      	ldr	r2, [pc, #24]	; (800241c <HAL_RCC_OscConfig+0x298>)
 8002404:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002408:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d01c      	beq.n	800244c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002412:	f7ff fae9 	bl	80019e8 <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002418:	e011      	b.n	800243e <HAL_RCC_OscConfig+0x2ba>
 800241a:	bf00      	nop
 800241c:	40021000 	.word	0x40021000
 8002420:	08006160 	.word	0x08006160
 8002424:	20000000 	.word	0x20000000
 8002428:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800242c:	f7ff fadc 	bl	80019e8 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b64      	cmp	r3, #100	; 0x64
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e280      	b.n	8002940 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800243e:	4baf      	ldr	r3, [pc, #700]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0f0      	beq.n	800242c <HAL_RCC_OscConfig+0x2a8>
 800244a:	e014      	b.n	8002476 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244c:	f7ff facc 	bl	80019e8 <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002454:	f7ff fac8 	bl	80019e8 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b64      	cmp	r3, #100	; 0x64
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e26c      	b.n	8002940 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002466:	4ba5      	ldr	r3, [pc, #660]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f0      	bne.n	8002454 <HAL_RCC_OscConfig+0x2d0>
 8002472:	e000      	b.n	8002476 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d060      	beq.n	8002544 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	2b04      	cmp	r3, #4
 8002486:	d005      	beq.n	8002494 <HAL_RCC_OscConfig+0x310>
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	2b0c      	cmp	r3, #12
 800248c:	d119      	bne.n	80024c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	2b02      	cmp	r3, #2
 8002492:	d116      	bne.n	80024c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002494:	4b99      	ldr	r3, [pc, #612]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800249c:	2b00      	cmp	r3, #0
 800249e:	d005      	beq.n	80024ac <HAL_RCC_OscConfig+0x328>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e249      	b.n	8002940 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ac:	4b93      	ldr	r3, [pc, #588]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	061b      	lsls	r3, r3, #24
 80024ba:	4990      	ldr	r1, [pc, #576]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024c0:	e040      	b.n	8002544 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d023      	beq.n	8002512 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024ca:	4b8c      	ldr	r3, [pc, #560]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a8b      	ldr	r2, [pc, #556]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 80024d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d6:	f7ff fa87 	bl	80019e8 <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024de:	f7ff fa83 	bl	80019e8 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e227      	b.n	8002940 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024f0:	4b82      	ldr	r3, [pc, #520]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0f0      	beq.n	80024de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fc:	4b7f      	ldr	r3, [pc, #508]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	061b      	lsls	r3, r3, #24
 800250a:	497c      	ldr	r1, [pc, #496]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 800250c:	4313      	orrs	r3, r2
 800250e:	604b      	str	r3, [r1, #4]
 8002510:	e018      	b.n	8002544 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002512:	4b7a      	ldr	r3, [pc, #488]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a79      	ldr	r2, [pc, #484]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 8002518:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800251c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251e:	f7ff fa63 	bl	80019e8 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002526:	f7ff fa5f 	bl	80019e8 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e203      	b.n	8002940 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002538:	4b70      	ldr	r3, [pc, #448]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1f0      	bne.n	8002526 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0308 	and.w	r3, r3, #8
 800254c:	2b00      	cmp	r3, #0
 800254e:	d03c      	beq.n	80025ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d01c      	beq.n	8002592 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002558:	4b68      	ldr	r3, [pc, #416]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 800255a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800255e:	4a67      	ldr	r2, [pc, #412]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 8002560:	f043 0301 	orr.w	r3, r3, #1
 8002564:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002568:	f7ff fa3e 	bl	80019e8 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002570:	f7ff fa3a 	bl	80019e8 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e1de      	b.n	8002940 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002582:	4b5e      	ldr	r3, [pc, #376]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 8002584:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0ef      	beq.n	8002570 <HAL_RCC_OscConfig+0x3ec>
 8002590:	e01b      	b.n	80025ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002592:	4b5a      	ldr	r3, [pc, #360]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 8002594:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002598:	4a58      	ldr	r2, [pc, #352]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 800259a:	f023 0301 	bic.w	r3, r3, #1
 800259e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a2:	f7ff fa21 	bl	80019e8 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025aa:	f7ff fa1d 	bl	80019e8 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e1c1      	b.n	8002940 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025bc:	4b4f      	ldr	r3, [pc, #316]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 80025be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1ef      	bne.n	80025aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0304 	and.w	r3, r3, #4
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 80a6 	beq.w	8002724 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025d8:	2300      	movs	r3, #0
 80025da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80025dc:	4b47      	ldr	r3, [pc, #284]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 80025de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10d      	bne.n	8002604 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025e8:	4b44      	ldr	r3, [pc, #272]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 80025ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ec:	4a43      	ldr	r2, [pc, #268]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 80025ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f2:	6593      	str	r3, [r2, #88]	; 0x58
 80025f4:	4b41      	ldr	r3, [pc, #260]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 80025f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002600:	2301      	movs	r3, #1
 8002602:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002604:	4b3e      	ldr	r3, [pc, #248]	; (8002700 <HAL_RCC_OscConfig+0x57c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260c:	2b00      	cmp	r3, #0
 800260e:	d118      	bne.n	8002642 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002610:	4b3b      	ldr	r3, [pc, #236]	; (8002700 <HAL_RCC_OscConfig+0x57c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a3a      	ldr	r2, [pc, #232]	; (8002700 <HAL_RCC_OscConfig+0x57c>)
 8002616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800261a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800261c:	f7ff f9e4 	bl	80019e8 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002624:	f7ff f9e0 	bl	80019e8 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e184      	b.n	8002940 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002636:	4b32      	ldr	r3, [pc, #200]	; (8002700 <HAL_RCC_OscConfig+0x57c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0f0      	beq.n	8002624 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d108      	bne.n	800265c <HAL_RCC_OscConfig+0x4d8>
 800264a:	4b2c      	ldr	r3, [pc, #176]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 800264c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002650:	4a2a      	ldr	r2, [pc, #168]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 8002652:	f043 0301 	orr.w	r3, r3, #1
 8002656:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800265a:	e024      	b.n	80026a6 <HAL_RCC_OscConfig+0x522>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	2b05      	cmp	r3, #5
 8002662:	d110      	bne.n	8002686 <HAL_RCC_OscConfig+0x502>
 8002664:	4b25      	ldr	r3, [pc, #148]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 8002666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266a:	4a24      	ldr	r2, [pc, #144]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 800266c:	f043 0304 	orr.w	r3, r3, #4
 8002670:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002674:	4b21      	ldr	r3, [pc, #132]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 8002676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800267a:	4a20      	ldr	r2, [pc, #128]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002684:	e00f      	b.n	80026a6 <HAL_RCC_OscConfig+0x522>
 8002686:	4b1d      	ldr	r3, [pc, #116]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 8002688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268c:	4a1b      	ldr	r2, [pc, #108]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 800268e:	f023 0301 	bic.w	r3, r3, #1
 8002692:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002696:	4b19      	ldr	r3, [pc, #100]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 8002698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269c:	4a17      	ldr	r2, [pc, #92]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 800269e:	f023 0304 	bic.w	r3, r3, #4
 80026a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d016      	beq.n	80026dc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ae:	f7ff f99b 	bl	80019e8 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026b4:	e00a      	b.n	80026cc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b6:	f7ff f997 	bl	80019e8 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e139      	b.n	8002940 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026cc:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <HAL_RCC_OscConfig+0x578>)
 80026ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0ed      	beq.n	80026b6 <HAL_RCC_OscConfig+0x532>
 80026da:	e01a      	b.n	8002712 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026dc:	f7ff f984 	bl	80019e8 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026e2:	e00f      	b.n	8002704 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e4:	f7ff f980 	bl	80019e8 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d906      	bls.n	8002704 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e122      	b.n	8002940 <HAL_RCC_OscConfig+0x7bc>
 80026fa:	bf00      	nop
 80026fc:	40021000 	.word	0x40021000
 8002700:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002704:	4b90      	ldr	r3, [pc, #576]	; (8002948 <HAL_RCC_OscConfig+0x7c4>)
 8002706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1e8      	bne.n	80026e4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002712:	7ffb      	ldrb	r3, [r7, #31]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d105      	bne.n	8002724 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002718:	4b8b      	ldr	r3, [pc, #556]	; (8002948 <HAL_RCC_OscConfig+0x7c4>)
 800271a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271c:	4a8a      	ldr	r2, [pc, #552]	; (8002948 <HAL_RCC_OscConfig+0x7c4>)
 800271e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002722:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 8108 	beq.w	800293e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002732:	2b02      	cmp	r3, #2
 8002734:	f040 80d0 	bne.w	80028d8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002738:	4b83      	ldr	r3, [pc, #524]	; (8002948 <HAL_RCC_OscConfig+0x7c4>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f003 0203 	and.w	r2, r3, #3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002748:	429a      	cmp	r2, r3
 800274a:	d130      	bne.n	80027ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	3b01      	subs	r3, #1
 8002758:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800275a:	429a      	cmp	r2, r3
 800275c:	d127      	bne.n	80027ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002768:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800276a:	429a      	cmp	r2, r3
 800276c:	d11f      	bne.n	80027ae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002778:	2a07      	cmp	r2, #7
 800277a:	bf14      	ite	ne
 800277c:	2201      	movne	r2, #1
 800277e:	2200      	moveq	r2, #0
 8002780:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002782:	4293      	cmp	r3, r2
 8002784:	d113      	bne.n	80027ae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002790:	085b      	lsrs	r3, r3, #1
 8002792:	3b01      	subs	r3, #1
 8002794:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002796:	429a      	cmp	r2, r3
 8002798:	d109      	bne.n	80027ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	085b      	lsrs	r3, r3, #1
 80027a6:	3b01      	subs	r3, #1
 80027a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d06e      	beq.n	800288c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	2b0c      	cmp	r3, #12
 80027b2:	d069      	beq.n	8002888 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80027b4:	4b64      	ldr	r3, [pc, #400]	; (8002948 <HAL_RCC_OscConfig+0x7c4>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d105      	bne.n	80027cc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80027c0:	4b61      	ldr	r3, [pc, #388]	; (8002948 <HAL_RCC_OscConfig+0x7c4>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0b7      	b.n	8002940 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80027d0:	4b5d      	ldr	r3, [pc, #372]	; (8002948 <HAL_RCC_OscConfig+0x7c4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a5c      	ldr	r2, [pc, #368]	; (8002948 <HAL_RCC_OscConfig+0x7c4>)
 80027d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027da:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027dc:	f7ff f904 	bl	80019e8 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e4:	f7ff f900 	bl	80019e8 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e0a4      	b.n	8002940 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027f6:	4b54      	ldr	r3, [pc, #336]	; (8002948 <HAL_RCC_OscConfig+0x7c4>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1f0      	bne.n	80027e4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002802:	4b51      	ldr	r3, [pc, #324]	; (8002948 <HAL_RCC_OscConfig+0x7c4>)
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	4b51      	ldr	r3, [pc, #324]	; (800294c <HAL_RCC_OscConfig+0x7c8>)
 8002808:	4013      	ands	r3, r2
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002812:	3a01      	subs	r2, #1
 8002814:	0112      	lsls	r2, r2, #4
 8002816:	4311      	orrs	r1, r2
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800281c:	0212      	lsls	r2, r2, #8
 800281e:	4311      	orrs	r1, r2
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002824:	0852      	lsrs	r2, r2, #1
 8002826:	3a01      	subs	r2, #1
 8002828:	0552      	lsls	r2, r2, #21
 800282a:	4311      	orrs	r1, r2
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002830:	0852      	lsrs	r2, r2, #1
 8002832:	3a01      	subs	r2, #1
 8002834:	0652      	lsls	r2, r2, #25
 8002836:	4311      	orrs	r1, r2
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800283c:	0912      	lsrs	r2, r2, #4
 800283e:	0452      	lsls	r2, r2, #17
 8002840:	430a      	orrs	r2, r1
 8002842:	4941      	ldr	r1, [pc, #260]	; (8002948 <HAL_RCC_OscConfig+0x7c4>)
 8002844:	4313      	orrs	r3, r2
 8002846:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002848:	4b3f      	ldr	r3, [pc, #252]	; (8002948 <HAL_RCC_OscConfig+0x7c4>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a3e      	ldr	r2, [pc, #248]	; (8002948 <HAL_RCC_OscConfig+0x7c4>)
 800284e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002852:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002854:	4b3c      	ldr	r3, [pc, #240]	; (8002948 <HAL_RCC_OscConfig+0x7c4>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	4a3b      	ldr	r2, [pc, #236]	; (8002948 <HAL_RCC_OscConfig+0x7c4>)
 800285a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800285e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002860:	f7ff f8c2 	bl	80019e8 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002868:	f7ff f8be 	bl	80019e8 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e062      	b.n	8002940 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800287a:	4b33      	ldr	r3, [pc, #204]	; (8002948 <HAL_RCC_OscConfig+0x7c4>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002886:	e05a      	b.n	800293e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e059      	b.n	8002940 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800288c:	4b2e      	ldr	r3, [pc, #184]	; (8002948 <HAL_RCC_OscConfig+0x7c4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d152      	bne.n	800293e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002898:	4b2b      	ldr	r3, [pc, #172]	; (8002948 <HAL_RCC_OscConfig+0x7c4>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a2a      	ldr	r2, [pc, #168]	; (8002948 <HAL_RCC_OscConfig+0x7c4>)
 800289e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028a4:	4b28      	ldr	r3, [pc, #160]	; (8002948 <HAL_RCC_OscConfig+0x7c4>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	4a27      	ldr	r2, [pc, #156]	; (8002948 <HAL_RCC_OscConfig+0x7c4>)
 80028aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028b0:	f7ff f89a 	bl	80019e8 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b8:	f7ff f896 	bl	80019e8 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e03a      	b.n	8002940 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ca:	4b1f      	ldr	r3, [pc, #124]	; (8002948 <HAL_RCC_OscConfig+0x7c4>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0f0      	beq.n	80028b8 <HAL_RCC_OscConfig+0x734>
 80028d6:	e032      	b.n	800293e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	2b0c      	cmp	r3, #12
 80028dc:	d02d      	beq.n	800293a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028de:	4b1a      	ldr	r3, [pc, #104]	; (8002948 <HAL_RCC_OscConfig+0x7c4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a19      	ldr	r2, [pc, #100]	; (8002948 <HAL_RCC_OscConfig+0x7c4>)
 80028e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028e8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80028ea:	4b17      	ldr	r3, [pc, #92]	; (8002948 <HAL_RCC_OscConfig+0x7c4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d105      	bne.n	8002902 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80028f6:	4b14      	ldr	r3, [pc, #80]	; (8002948 <HAL_RCC_OscConfig+0x7c4>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	4a13      	ldr	r2, [pc, #76]	; (8002948 <HAL_RCC_OscConfig+0x7c4>)
 80028fc:	f023 0303 	bic.w	r3, r3, #3
 8002900:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002902:	4b11      	ldr	r3, [pc, #68]	; (8002948 <HAL_RCC_OscConfig+0x7c4>)
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	4a10      	ldr	r2, [pc, #64]	; (8002948 <HAL_RCC_OscConfig+0x7c4>)
 8002908:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800290c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002910:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002912:	f7ff f869 	bl	80019e8 <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800291a:	f7ff f865 	bl	80019e8 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e009      	b.n	8002940 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800292c:	4b06      	ldr	r3, [pc, #24]	; (8002948 <HAL_RCC_OscConfig+0x7c4>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1f0      	bne.n	800291a <HAL_RCC_OscConfig+0x796>
 8002938:	e001      	b.n	800293e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3720      	adds	r7, #32
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40021000 	.word	0x40021000
 800294c:	f99d808c 	.word	0xf99d808c

08002950 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e0c8      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002964:	4b66      	ldr	r3, [pc, #408]	; (8002b00 <HAL_RCC_ClockConfig+0x1b0>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d910      	bls.n	8002994 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002972:	4b63      	ldr	r3, [pc, #396]	; (8002b00 <HAL_RCC_ClockConfig+0x1b0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 0207 	bic.w	r2, r3, #7
 800297a:	4961      	ldr	r1, [pc, #388]	; (8002b00 <HAL_RCC_ClockConfig+0x1b0>)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	4313      	orrs	r3, r2
 8002980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002982:	4b5f      	ldr	r3, [pc, #380]	; (8002b00 <HAL_RCC_ClockConfig+0x1b0>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d001      	beq.n	8002994 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e0b0      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b00      	cmp	r3, #0
 800299e:	d04c      	beq.n	8002a3a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2b03      	cmp	r3, #3
 80029a6:	d107      	bne.n	80029b8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029a8:	4b56      	ldr	r3, [pc, #344]	; (8002b04 <HAL_RCC_ClockConfig+0x1b4>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d121      	bne.n	80029f8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e09e      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d107      	bne.n	80029d0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029c0:	4b50      	ldr	r3, [pc, #320]	; (8002b04 <HAL_RCC_ClockConfig+0x1b4>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d115      	bne.n	80029f8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e092      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d107      	bne.n	80029e8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029d8:	4b4a      	ldr	r3, [pc, #296]	; (8002b04 <HAL_RCC_ClockConfig+0x1b4>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d109      	bne.n	80029f8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e086      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029e8:	4b46      	ldr	r3, [pc, #280]	; (8002b04 <HAL_RCC_ClockConfig+0x1b4>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e07e      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029f8:	4b42      	ldr	r3, [pc, #264]	; (8002b04 <HAL_RCC_ClockConfig+0x1b4>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f023 0203 	bic.w	r2, r3, #3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	493f      	ldr	r1, [pc, #252]	; (8002b04 <HAL_RCC_ClockConfig+0x1b4>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a0a:	f7fe ffed 	bl	80019e8 <HAL_GetTick>
 8002a0e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a10:	e00a      	b.n	8002a28 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a12:	f7fe ffe9 	bl	80019e8 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e066      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a28:	4b36      	ldr	r3, [pc, #216]	; (8002b04 <HAL_RCC_ClockConfig+0x1b4>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 020c 	and.w	r2, r3, #12
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d1eb      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d008      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a46:	4b2f      	ldr	r3, [pc, #188]	; (8002b04 <HAL_RCC_ClockConfig+0x1b4>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	492c      	ldr	r1, [pc, #176]	; (8002b04 <HAL_RCC_ClockConfig+0x1b4>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a58:	4b29      	ldr	r3, [pc, #164]	; (8002b00 <HAL_RCC_ClockConfig+0x1b0>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d210      	bcs.n	8002a88 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a66:	4b26      	ldr	r3, [pc, #152]	; (8002b00 <HAL_RCC_ClockConfig+0x1b0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f023 0207 	bic.w	r2, r3, #7
 8002a6e:	4924      	ldr	r1, [pc, #144]	; (8002b00 <HAL_RCC_ClockConfig+0x1b0>)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a76:	4b22      	ldr	r3, [pc, #136]	; (8002b00 <HAL_RCC_ClockConfig+0x1b0>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d001      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e036      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d008      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a94:	4b1b      	ldr	r3, [pc, #108]	; (8002b04 <HAL_RCC_ClockConfig+0x1b4>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	4918      	ldr	r1, [pc, #96]	; (8002b04 <HAL_RCC_ClockConfig+0x1b4>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d009      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ab2:	4b14      	ldr	r3, [pc, #80]	; (8002b04 <HAL_RCC_ClockConfig+0x1b4>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	4910      	ldr	r1, [pc, #64]	; (8002b04 <HAL_RCC_ClockConfig+0x1b4>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ac6:	f000 f825 	bl	8002b14 <HAL_RCC_GetSysClockFreq>
 8002aca:	4602      	mov	r2, r0
 8002acc:	4b0d      	ldr	r3, [pc, #52]	; (8002b04 <HAL_RCC_ClockConfig+0x1b4>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	490c      	ldr	r1, [pc, #48]	; (8002b08 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad8:	5ccb      	ldrb	r3, [r1, r3]
 8002ada:	f003 031f 	and.w	r3, r3, #31
 8002ade:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae2:	4a0a      	ldr	r2, [pc, #40]	; (8002b0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ae6:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fe ff2c 	bl	8001948 <HAL_InitTick>
 8002af0:	4603      	mov	r3, r0
 8002af2:	72fb      	strb	r3, [r7, #11]

  return status;
 8002af4:	7afb      	ldrb	r3, [r7, #11]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40022000 	.word	0x40022000
 8002b04:	40021000 	.word	0x40021000
 8002b08:	08006160 	.word	0x08006160
 8002b0c:	20000000 	.word	0x20000000
 8002b10:	20000004 	.word	0x20000004

08002b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b089      	sub	sp, #36	; 0x24
 8002b18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61fb      	str	r3, [r7, #28]
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b22:	4b3e      	ldr	r3, [pc, #248]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 030c 	and.w	r3, r3, #12
 8002b2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b2c:	4b3b      	ldr	r3, [pc, #236]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	f003 0303 	and.w	r3, r3, #3
 8002b34:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_RCC_GetSysClockFreq+0x34>
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	2b0c      	cmp	r3, #12
 8002b40:	d121      	bne.n	8002b86 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d11e      	bne.n	8002b86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b48:	4b34      	ldr	r3, [pc, #208]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d107      	bne.n	8002b64 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b54:	4b31      	ldr	r3, [pc, #196]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b5a:	0a1b      	lsrs	r3, r3, #8
 8002b5c:	f003 030f 	and.w	r3, r3, #15
 8002b60:	61fb      	str	r3, [r7, #28]
 8002b62:	e005      	b.n	8002b70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b64:	4b2d      	ldr	r3, [pc, #180]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	091b      	lsrs	r3, r3, #4
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b70:	4a2b      	ldr	r2, [pc, #172]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b78:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10d      	bne.n	8002b9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b84:	e00a      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	2b04      	cmp	r3, #4
 8002b8a:	d102      	bne.n	8002b92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b8c:	4b25      	ldr	r3, [pc, #148]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b8e:	61bb      	str	r3, [r7, #24]
 8002b90:	e004      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d101      	bne.n	8002b9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b98:	4b23      	ldr	r3, [pc, #140]	; (8002c28 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	2b0c      	cmp	r3, #12
 8002ba0:	d134      	bne.n	8002c0c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ba2:	4b1e      	ldr	r3, [pc, #120]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d003      	beq.n	8002bba <HAL_RCC_GetSysClockFreq+0xa6>
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	2b03      	cmp	r3, #3
 8002bb6:	d003      	beq.n	8002bc0 <HAL_RCC_GetSysClockFreq+0xac>
 8002bb8:	e005      	b.n	8002bc6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002bba:	4b1a      	ldr	r3, [pc, #104]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x110>)
 8002bbc:	617b      	str	r3, [r7, #20]
      break;
 8002bbe:	e005      	b.n	8002bcc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002bc0:	4b19      	ldr	r3, [pc, #100]	; (8002c28 <HAL_RCC_GetSysClockFreq+0x114>)
 8002bc2:	617b      	str	r3, [r7, #20]
      break;
 8002bc4:	e002      	b.n	8002bcc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	617b      	str	r3, [r7, #20]
      break;
 8002bca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bcc:	4b13      	ldr	r3, [pc, #76]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	091b      	lsrs	r3, r3, #4
 8002bd2:	f003 0307 	and.w	r3, r3, #7
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002bda:	4b10      	ldr	r3, [pc, #64]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	0a1b      	lsrs	r3, r3, #8
 8002be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	fb02 f203 	mul.w	r2, r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bf2:	4b0a      	ldr	r3, [pc, #40]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	0e5b      	lsrs	r3, r3, #25
 8002bf8:	f003 0303 	and.w	r3, r3, #3
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c0a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c0c:	69bb      	ldr	r3, [r7, #24]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3724      	adds	r7, #36	; 0x24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	08006178 	.word	0x08006178
 8002c24:	00f42400 	.word	0x00f42400
 8002c28:	02dc6c00 	.word	0x02dc6c00

08002c2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c30:	4b03      	ldr	r3, [pc, #12]	; (8002c40 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c32:	681b      	ldr	r3, [r3, #0]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	20000000 	.word	0x20000000

08002c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c48:	f7ff fff0 	bl	8002c2c <HAL_RCC_GetHCLKFreq>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	0a1b      	lsrs	r3, r3, #8
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	4904      	ldr	r1, [pc, #16]	; (8002c6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c5a:	5ccb      	ldrb	r3, [r1, r3]
 8002c5c:	f003 031f 	and.w	r3, r3, #31
 8002c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	08006170 	.word	0x08006170

08002c70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c74:	f7ff ffda 	bl	8002c2c <HAL_RCC_GetHCLKFreq>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	0adb      	lsrs	r3, r3, #11
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	4904      	ldr	r1, [pc, #16]	; (8002c98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c86:	5ccb      	ldrb	r3, [r1, r3]
 8002c88:	f003 031f 	and.w	r3, r3, #31
 8002c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40021000 	.word	0x40021000
 8002c98:	08006170 	.word	0x08006170

08002c9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ca8:	4b2a      	ldr	r3, [pc, #168]	; (8002d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002cb4:	f7ff fa02 	bl	80020bc <HAL_PWREx_GetVoltageRange>
 8002cb8:	6178      	str	r0, [r7, #20]
 8002cba:	e014      	b.n	8002ce6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cbc:	4b25      	ldr	r3, [pc, #148]	; (8002d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc0:	4a24      	ldr	r2, [pc, #144]	; (8002d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc6:	6593      	str	r3, [r2, #88]	; 0x58
 8002cc8:	4b22      	ldr	r3, [pc, #136]	; (8002d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002cd4:	f7ff f9f2 	bl	80020bc <HAL_PWREx_GetVoltageRange>
 8002cd8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002cda:	4b1e      	ldr	r3, [pc, #120]	; (8002d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cde:	4a1d      	ldr	r2, [pc, #116]	; (8002d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ce4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cec:	d10b      	bne.n	8002d06 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b80      	cmp	r3, #128	; 0x80
 8002cf2:	d919      	bls.n	8002d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2ba0      	cmp	r3, #160	; 0xa0
 8002cf8:	d902      	bls.n	8002d00 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	e013      	b.n	8002d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d00:	2301      	movs	r3, #1
 8002d02:	613b      	str	r3, [r7, #16]
 8002d04:	e010      	b.n	8002d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b80      	cmp	r3, #128	; 0x80
 8002d0a:	d902      	bls.n	8002d12 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	613b      	str	r3, [r7, #16]
 8002d10:	e00a      	b.n	8002d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b80      	cmp	r3, #128	; 0x80
 8002d16:	d102      	bne.n	8002d1e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d18:	2302      	movs	r3, #2
 8002d1a:	613b      	str	r3, [r7, #16]
 8002d1c:	e004      	b.n	8002d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b70      	cmp	r3, #112	; 0x70
 8002d22:	d101      	bne.n	8002d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d24:	2301      	movs	r3, #1
 8002d26:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d28:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f023 0207 	bic.w	r2, r3, #7
 8002d30:	4909      	ldr	r1, [pc, #36]	; (8002d58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d38:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d001      	beq.n	8002d4a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40021000 	.word	0x40021000
 8002d58:	40022000 	.word	0x40022000

08002d5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d64:	2300      	movs	r3, #0
 8002d66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d68:	2300      	movs	r3, #0
 8002d6a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d041      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d7c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d80:	d02a      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002d82:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d86:	d824      	bhi.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d8c:	d008      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d92:	d81e      	bhi.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00a      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002d98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d9c:	d010      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d9e:	e018      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002da0:	4b86      	ldr	r3, [pc, #536]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	4a85      	ldr	r2, [pc, #532]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002daa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dac:	e015      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	3304      	adds	r3, #4
 8002db2:	2100      	movs	r1, #0
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 fabb 	bl	8003330 <RCCEx_PLLSAI1_Config>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dbe:	e00c      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3320      	adds	r3, #32
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 fba6 	bl	8003518 <RCCEx_PLLSAI2_Config>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dd0:	e003      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	74fb      	strb	r3, [r7, #19]
      break;
 8002dd6:	e000      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002dd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dda:	7cfb      	ldrb	r3, [r7, #19]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10b      	bne.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002de0:	4b76      	ldr	r3, [pc, #472]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dee:	4973      	ldr	r1, [pc, #460]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002df6:	e001      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df8:	7cfb      	ldrb	r3, [r7, #19]
 8002dfa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d041      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e0c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e10:	d02a      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002e12:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e16:	d824      	bhi.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002e18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e1c:	d008      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002e1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e22:	d81e      	bhi.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00a      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e2c:	d010      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e2e:	e018      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e30:	4b62      	ldr	r3, [pc, #392]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	4a61      	ldr	r2, [pc, #388]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e3a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e3c:	e015      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	3304      	adds	r3, #4
 8002e42:	2100      	movs	r1, #0
 8002e44:	4618      	mov	r0, r3
 8002e46:	f000 fa73 	bl	8003330 <RCCEx_PLLSAI1_Config>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e4e:	e00c      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3320      	adds	r3, #32
 8002e54:	2100      	movs	r1, #0
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 fb5e 	bl	8003518 <RCCEx_PLLSAI2_Config>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e60:	e003      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	74fb      	strb	r3, [r7, #19]
      break;
 8002e66:	e000      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002e68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e6a:	7cfb      	ldrb	r3, [r7, #19]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10b      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e70:	4b52      	ldr	r3, [pc, #328]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e76:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e7e:	494f      	ldr	r1, [pc, #316]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e86:	e001      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e88:	7cfb      	ldrb	r3, [r7, #19]
 8002e8a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 80a0 	beq.w	8002fda <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e9e:	4b47      	ldr	r3, [pc, #284]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e000      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002eae:	2300      	movs	r3, #0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00d      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eb4:	4b41      	ldr	r3, [pc, #260]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb8:	4a40      	ldr	r2, [pc, #256]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ebe:	6593      	str	r3, [r2, #88]	; 0x58
 8002ec0:	4b3e      	ldr	r3, [pc, #248]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	60bb      	str	r3, [r7, #8]
 8002eca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ed0:	4b3b      	ldr	r3, [pc, #236]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a3a      	ldr	r2, [pc, #232]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002edc:	f7fe fd84 	bl	80019e8 <HAL_GetTick>
 8002ee0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ee2:	e009      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee4:	f7fe fd80 	bl	80019e8 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d902      	bls.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	74fb      	strb	r3, [r7, #19]
        break;
 8002ef6:	e005      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ef8:	4b31      	ldr	r3, [pc, #196]	; (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0ef      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002f04:	7cfb      	ldrb	r3, [r7, #19]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d15c      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f0a:	4b2c      	ldr	r3, [pc, #176]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f14:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d01f      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d019      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f28:	4b24      	ldr	r3, [pc, #144]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f34:	4b21      	ldr	r3, [pc, #132]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3a:	4a20      	ldr	r2, [pc, #128]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f44:	4b1d      	ldr	r3, [pc, #116]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4a:	4a1c      	ldr	r2, [pc, #112]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f54:	4a19      	ldr	r2, [pc, #100]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d016      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f66:	f7fe fd3f 	bl	80019e8 <HAL_GetTick>
 8002f6a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f6c:	e00b      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f6e:	f7fe fd3b 	bl	80019e8 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d902      	bls.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	74fb      	strb	r3, [r7, #19]
            break;
 8002f84:	e006      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f86:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0ec      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002f94:	7cfb      	ldrb	r3, [r7, #19]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10c      	bne.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f9a:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002faa:	4904      	ldr	r1, [pc, #16]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002fb2:	e009      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fb4:	7cfb      	ldrb	r3, [r7, #19]
 8002fb6:	74bb      	strb	r3, [r7, #18]
 8002fb8:	e006      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002fba:	bf00      	nop
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc4:	7cfb      	ldrb	r3, [r7, #19]
 8002fc6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fc8:	7c7b      	ldrb	r3, [r7, #17]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d105      	bne.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fce:	4b9e      	ldr	r3, [pc, #632]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd2:	4a9d      	ldr	r2, [pc, #628]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fd8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00a      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fe6:	4b98      	ldr	r3, [pc, #608]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fec:	f023 0203 	bic.w	r2, r3, #3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff4:	4994      	ldr	r1, [pc, #592]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00a      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003008:	4b8f      	ldr	r3, [pc, #572]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800300a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300e:	f023 020c 	bic.w	r2, r3, #12
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003016:	498c      	ldr	r1, [pc, #560]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003018:	4313      	orrs	r3, r2
 800301a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0304 	and.w	r3, r3, #4
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800302a:	4b87      	ldr	r3, [pc, #540]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800302c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003030:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	4983      	ldr	r1, [pc, #524]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800303a:	4313      	orrs	r3, r2
 800303c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0308 	and.w	r3, r3, #8
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00a      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800304c:	4b7e      	ldr	r3, [pc, #504]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800304e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003052:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305a:	497b      	ldr	r1, [pc, #492]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0310 	and.w	r3, r3, #16
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00a      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800306e:	4b76      	ldr	r3, [pc, #472]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003074:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800307c:	4972      	ldr	r1, [pc, #456]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0320 	and.w	r3, r3, #32
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00a      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003090:	4b6d      	ldr	r3, [pc, #436]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003096:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800309e:	496a      	ldr	r1, [pc, #424]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00a      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030b2:	4b65      	ldr	r3, [pc, #404]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c0:	4961      	ldr	r1, [pc, #388]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030d4:	4b5c      	ldr	r3, [pc, #368]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030e2:	4959      	ldr	r1, [pc, #356]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00a      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030f6:	4b54      	ldr	r3, [pc, #336]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003104:	4950      	ldr	r1, [pc, #320]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00a      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003118:	4b4b      	ldr	r3, [pc, #300]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800311a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003126:	4948      	ldr	r1, [pc, #288]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003128:	4313      	orrs	r3, r2
 800312a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800313a:	4b43      	ldr	r3, [pc, #268]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800313c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003140:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003148:	493f      	ldr	r1, [pc, #252]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d028      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800315c:	4b3a      	ldr	r3, [pc, #232]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800315e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003162:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800316a:	4937      	ldr	r1, [pc, #220]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800316c:	4313      	orrs	r3, r2
 800316e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003176:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800317a:	d106      	bne.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800317c:	4b32      	ldr	r3, [pc, #200]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	4a31      	ldr	r2, [pc, #196]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003182:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003186:	60d3      	str	r3, [r2, #12]
 8003188:	e011      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800318e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003192:	d10c      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3304      	adds	r3, #4
 8003198:	2101      	movs	r1, #1
 800319a:	4618      	mov	r0, r3
 800319c:	f000 f8c8 	bl	8003330 <RCCEx_PLLSAI1_Config>
 80031a0:	4603      	mov	r3, r0
 80031a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80031a4:	7cfb      	ldrb	r3, [r7, #19]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80031aa:	7cfb      	ldrb	r3, [r7, #19]
 80031ac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d028      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80031ba:	4b23      	ldr	r3, [pc, #140]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c8:	491f      	ldr	r1, [pc, #124]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031d8:	d106      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031da:	4b1b      	ldr	r3, [pc, #108]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	4a1a      	ldr	r2, [pc, #104]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031e4:	60d3      	str	r3, [r2, #12]
 80031e6:	e011      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031f0:	d10c      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	3304      	adds	r3, #4
 80031f6:	2101      	movs	r1, #1
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 f899 	bl	8003330 <RCCEx_PLLSAI1_Config>
 80031fe:	4603      	mov	r3, r0
 8003200:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003202:	7cfb      	ldrb	r3, [r7, #19]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003208:	7cfb      	ldrb	r3, [r7, #19]
 800320a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d02b      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003218:	4b0b      	ldr	r3, [pc, #44]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800321a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003226:	4908      	ldr	r1, [pc, #32]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003228:	4313      	orrs	r3, r2
 800322a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003232:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003236:	d109      	bne.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003238:	4b03      	ldr	r3, [pc, #12]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	4a02      	ldr	r2, [pc, #8]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800323e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003242:	60d3      	str	r3, [r2, #12]
 8003244:	e014      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003246:	bf00      	nop
 8003248:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003250:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003254:	d10c      	bne.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	3304      	adds	r3, #4
 800325a:	2101      	movs	r1, #1
 800325c:	4618      	mov	r0, r3
 800325e:	f000 f867 	bl	8003330 <RCCEx_PLLSAI1_Config>
 8003262:	4603      	mov	r3, r0
 8003264:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003266:	7cfb      	ldrb	r3, [r7, #19]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800326c:	7cfb      	ldrb	r3, [r7, #19]
 800326e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d02f      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800327c:	4b2b      	ldr	r3, [pc, #172]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800327e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003282:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800328a:	4928      	ldr	r1, [pc, #160]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800328c:	4313      	orrs	r3, r2
 800328e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003296:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800329a:	d10d      	bne.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3304      	adds	r3, #4
 80032a0:	2102      	movs	r1, #2
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 f844 	bl	8003330 <RCCEx_PLLSAI1_Config>
 80032a8:	4603      	mov	r3, r0
 80032aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032ac:	7cfb      	ldrb	r3, [r7, #19]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d014      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80032b2:	7cfb      	ldrb	r3, [r7, #19]
 80032b4:	74bb      	strb	r3, [r7, #18]
 80032b6:	e011      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032c0:	d10c      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	3320      	adds	r3, #32
 80032c6:	2102      	movs	r1, #2
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 f925 	bl	8003518 <RCCEx_PLLSAI2_Config>
 80032ce:	4603      	mov	r3, r0
 80032d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032d2:	7cfb      	ldrb	r3, [r7, #19]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80032d8:	7cfb      	ldrb	r3, [r7, #19]
 80032da:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00a      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80032e8:	4b10      	ldr	r3, [pc, #64]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032f6:	490d      	ldr	r1, [pc, #52]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00b      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800330a:	4b08      	ldr	r3, [pc, #32]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800330c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003310:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800331a:	4904      	ldr	r1, [pc, #16]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800331c:	4313      	orrs	r3, r2
 800331e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003322:	7cbb      	ldrb	r3, [r7, #18]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3718      	adds	r7, #24
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40021000 	.word	0x40021000

08003330 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800333a:	2300      	movs	r3, #0
 800333c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800333e:	4b75      	ldr	r3, [pc, #468]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d018      	beq.n	800337c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800334a:	4b72      	ldr	r3, [pc, #456]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e4>)
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	f003 0203 	and.w	r2, r3, #3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	d10d      	bne.n	8003376 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
       ||
 800335e:	2b00      	cmp	r3, #0
 8003360:	d009      	beq.n	8003376 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003362:	4b6c      	ldr	r3, [pc, #432]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	091b      	lsrs	r3, r3, #4
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
       ||
 8003372:	429a      	cmp	r2, r3
 8003374:	d047      	beq.n	8003406 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	73fb      	strb	r3, [r7, #15]
 800337a:	e044      	b.n	8003406 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b03      	cmp	r3, #3
 8003382:	d018      	beq.n	80033b6 <RCCEx_PLLSAI1_Config+0x86>
 8003384:	2b03      	cmp	r3, #3
 8003386:	d825      	bhi.n	80033d4 <RCCEx_PLLSAI1_Config+0xa4>
 8003388:	2b01      	cmp	r3, #1
 800338a:	d002      	beq.n	8003392 <RCCEx_PLLSAI1_Config+0x62>
 800338c:	2b02      	cmp	r3, #2
 800338e:	d009      	beq.n	80033a4 <RCCEx_PLLSAI1_Config+0x74>
 8003390:	e020      	b.n	80033d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003392:	4b60      	ldr	r3, [pc, #384]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d11d      	bne.n	80033da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033a2:	e01a      	b.n	80033da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033a4:	4b5b      	ldr	r3, [pc, #364]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d116      	bne.n	80033de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033b4:	e013      	b.n	80033de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033b6:	4b57      	ldr	r3, [pc, #348]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10f      	bne.n	80033e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033c2:	4b54      	ldr	r3, [pc, #336]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d109      	bne.n	80033e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033d2:	e006      	b.n	80033e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	73fb      	strb	r3, [r7, #15]
      break;
 80033d8:	e004      	b.n	80033e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033da:	bf00      	nop
 80033dc:	e002      	b.n	80033e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033de:	bf00      	nop
 80033e0:	e000      	b.n	80033e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10d      	bne.n	8003406 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80033ea:	4b4a      	ldr	r3, [pc, #296]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6819      	ldr	r1, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	3b01      	subs	r3, #1
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	430b      	orrs	r3, r1
 8003400:	4944      	ldr	r1, [pc, #272]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003402:	4313      	orrs	r3, r2
 8003404:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003406:	7bfb      	ldrb	r3, [r7, #15]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d17d      	bne.n	8003508 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800340c:	4b41      	ldr	r3, [pc, #260]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e4>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a40      	ldr	r2, [pc, #256]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003412:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003416:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003418:	f7fe fae6 	bl	80019e8 <HAL_GetTick>
 800341c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800341e:	e009      	b.n	8003434 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003420:	f7fe fae2 	bl	80019e8 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d902      	bls.n	8003434 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	73fb      	strb	r3, [r7, #15]
        break;
 8003432:	e005      	b.n	8003440 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003434:	4b37      	ldr	r3, [pc, #220]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1ef      	bne.n	8003420 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003440:	7bfb      	ldrb	r3, [r7, #15]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d160      	bne.n	8003508 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d111      	bne.n	8003470 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800344c:	4b31      	ldr	r3, [pc, #196]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e4>)
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6892      	ldr	r2, [r2, #8]
 800345c:	0211      	lsls	r1, r2, #8
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	68d2      	ldr	r2, [r2, #12]
 8003462:	0912      	lsrs	r2, r2, #4
 8003464:	0452      	lsls	r2, r2, #17
 8003466:	430a      	orrs	r2, r1
 8003468:	492a      	ldr	r1, [pc, #168]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e4>)
 800346a:	4313      	orrs	r3, r2
 800346c:	610b      	str	r3, [r1, #16]
 800346e:	e027      	b.n	80034c0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d112      	bne.n	800349c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003476:	4b27      	ldr	r3, [pc, #156]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800347e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6892      	ldr	r2, [r2, #8]
 8003486:	0211      	lsls	r1, r2, #8
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	6912      	ldr	r2, [r2, #16]
 800348c:	0852      	lsrs	r2, r2, #1
 800348e:	3a01      	subs	r2, #1
 8003490:	0552      	lsls	r2, r2, #21
 8003492:	430a      	orrs	r2, r1
 8003494:	491f      	ldr	r1, [pc, #124]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003496:	4313      	orrs	r3, r2
 8003498:	610b      	str	r3, [r1, #16]
 800349a:	e011      	b.n	80034c0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800349c:	4b1d      	ldr	r3, [pc, #116]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e4>)
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80034a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6892      	ldr	r2, [r2, #8]
 80034ac:	0211      	lsls	r1, r2, #8
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6952      	ldr	r2, [r2, #20]
 80034b2:	0852      	lsrs	r2, r2, #1
 80034b4:	3a01      	subs	r2, #1
 80034b6:	0652      	lsls	r2, r2, #25
 80034b8:	430a      	orrs	r2, r1
 80034ba:	4916      	ldr	r1, [pc, #88]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80034c0:	4b14      	ldr	r3, [pc, #80]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a13      	ldr	r2, [pc, #76]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034cc:	f7fe fa8c 	bl	80019e8 <HAL_GetTick>
 80034d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034d2:	e009      	b.n	80034e8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034d4:	f7fe fa88 	bl	80019e8 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d902      	bls.n	80034e8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	73fb      	strb	r3, [r7, #15]
          break;
 80034e6:	e005      	b.n	80034f4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034e8:	4b0a      	ldr	r3, [pc, #40]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0ef      	beq.n	80034d4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80034f4:	7bfb      	ldrb	r3, [r7, #15]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d106      	bne.n	8003508 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80034fa:	4b06      	ldr	r3, [pc, #24]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034fc:	691a      	ldr	r2, [r3, #16]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	4904      	ldr	r1, [pc, #16]	; (8003514 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003504:	4313      	orrs	r3, r2
 8003506:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003508:	7bfb      	ldrb	r3, [r7, #15]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40021000 	.word	0x40021000

08003518 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003522:	2300      	movs	r3, #0
 8003524:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003526:	4b6a      	ldr	r3, [pc, #424]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d018      	beq.n	8003564 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003532:	4b67      	ldr	r3, [pc, #412]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	f003 0203 	and.w	r2, r3, #3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d10d      	bne.n	800355e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
       ||
 8003546:	2b00      	cmp	r3, #0
 8003548:	d009      	beq.n	800355e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800354a:	4b61      	ldr	r3, [pc, #388]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	091b      	lsrs	r3, r3, #4
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	1c5a      	adds	r2, r3, #1
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
       ||
 800355a:	429a      	cmp	r2, r3
 800355c:	d047      	beq.n	80035ee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	73fb      	strb	r3, [r7, #15]
 8003562:	e044      	b.n	80035ee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2b03      	cmp	r3, #3
 800356a:	d018      	beq.n	800359e <RCCEx_PLLSAI2_Config+0x86>
 800356c:	2b03      	cmp	r3, #3
 800356e:	d825      	bhi.n	80035bc <RCCEx_PLLSAI2_Config+0xa4>
 8003570:	2b01      	cmp	r3, #1
 8003572:	d002      	beq.n	800357a <RCCEx_PLLSAI2_Config+0x62>
 8003574:	2b02      	cmp	r3, #2
 8003576:	d009      	beq.n	800358c <RCCEx_PLLSAI2_Config+0x74>
 8003578:	e020      	b.n	80035bc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800357a:	4b55      	ldr	r3, [pc, #340]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d11d      	bne.n	80035c2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800358a:	e01a      	b.n	80035c2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800358c:	4b50      	ldr	r3, [pc, #320]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003594:	2b00      	cmp	r3, #0
 8003596:	d116      	bne.n	80035c6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800359c:	e013      	b.n	80035c6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800359e:	4b4c      	ldr	r3, [pc, #304]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10f      	bne.n	80035ca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035aa:	4b49      	ldr	r3, [pc, #292]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d109      	bne.n	80035ca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035ba:	e006      	b.n	80035ca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	73fb      	strb	r3, [r7, #15]
      break;
 80035c0:	e004      	b.n	80035cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80035c2:	bf00      	nop
 80035c4:	e002      	b.n	80035cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80035c6:	bf00      	nop
 80035c8:	e000      	b.n	80035cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80035ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80035cc:	7bfb      	ldrb	r3, [r7, #15]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10d      	bne.n	80035ee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80035d2:	4b3f      	ldr	r3, [pc, #252]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6819      	ldr	r1, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	3b01      	subs	r3, #1
 80035e4:	011b      	lsls	r3, r3, #4
 80035e6:	430b      	orrs	r3, r1
 80035e8:	4939      	ldr	r1, [pc, #228]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035ee:	7bfb      	ldrb	r3, [r7, #15]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d167      	bne.n	80036c4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80035f4:	4b36      	ldr	r3, [pc, #216]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a35      	ldr	r2, [pc, #212]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003600:	f7fe f9f2 	bl	80019e8 <HAL_GetTick>
 8003604:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003606:	e009      	b.n	800361c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003608:	f7fe f9ee 	bl	80019e8 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d902      	bls.n	800361c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	73fb      	strb	r3, [r7, #15]
        break;
 800361a:	e005      	b.n	8003628 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800361c:	4b2c      	ldr	r3, [pc, #176]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1ef      	bne.n	8003608 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003628:	7bfb      	ldrb	r3, [r7, #15]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d14a      	bne.n	80036c4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d111      	bne.n	8003658 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003634:	4b26      	ldr	r3, [pc, #152]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800363c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6892      	ldr	r2, [r2, #8]
 8003644:	0211      	lsls	r1, r2, #8
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	68d2      	ldr	r2, [r2, #12]
 800364a:	0912      	lsrs	r2, r2, #4
 800364c:	0452      	lsls	r2, r2, #17
 800364e:	430a      	orrs	r2, r1
 8003650:	491f      	ldr	r1, [pc, #124]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003652:	4313      	orrs	r3, r2
 8003654:	614b      	str	r3, [r1, #20]
 8003656:	e011      	b.n	800367c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003658:	4b1d      	ldr	r3, [pc, #116]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003660:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6892      	ldr	r2, [r2, #8]
 8003668:	0211      	lsls	r1, r2, #8
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6912      	ldr	r2, [r2, #16]
 800366e:	0852      	lsrs	r2, r2, #1
 8003670:	3a01      	subs	r2, #1
 8003672:	0652      	lsls	r2, r2, #25
 8003674:	430a      	orrs	r2, r1
 8003676:	4916      	ldr	r1, [pc, #88]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003678:	4313      	orrs	r3, r2
 800367a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800367c:	4b14      	ldr	r3, [pc, #80]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a13      	ldr	r2, [pc, #76]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003686:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003688:	f7fe f9ae 	bl	80019e8 <HAL_GetTick>
 800368c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800368e:	e009      	b.n	80036a4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003690:	f7fe f9aa 	bl	80019e8 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d902      	bls.n	80036a4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	73fb      	strb	r3, [r7, #15]
          break;
 80036a2:	e005      	b.n	80036b0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80036a4:	4b0a      	ldr	r3, [pc, #40]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0ef      	beq.n	8003690 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d106      	bne.n	80036c4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80036b6:	4b06      	ldr	r3, [pc, #24]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036b8:	695a      	ldr	r2, [r3, #20]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	4904      	ldr	r1, [pc, #16]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	40021000 	.word	0x40021000

080036d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e040      	b.n	8003768 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d106      	bne.n	80036fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7fe f89a 	bl	8001830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2224      	movs	r2, #36	; 0x24
 8003700:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0201 	bic.w	r2, r2, #1
 8003710:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 fb26 	bl	8003d64 <UART_SetConfig>
 8003718:	4603      	mov	r3, r0
 800371a:	2b01      	cmp	r3, #1
 800371c:	d101      	bne.n	8003722 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e022      	b.n	8003768 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003726:	2b00      	cmp	r3, #0
 8003728:	d002      	beq.n	8003730 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 fda4 	bl	8004278 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800373e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689a      	ldr	r2, [r3, #8]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800374e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0201 	orr.w	r2, r2, #1
 800375e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 fe2b 	bl	80043bc <UART_CheckIdleState>
 8003766:	4603      	mov	r3, r0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b08a      	sub	sp, #40	; 0x28
 8003774:	af02      	add	r7, sp, #8
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	603b      	str	r3, [r7, #0]
 800377c:	4613      	mov	r3, r2
 800377e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003784:	2b20      	cmp	r3, #32
 8003786:	f040 8082 	bne.w	800388e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <HAL_UART_Transmit+0x26>
 8003790:	88fb      	ldrh	r3, [r7, #6]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e07a      	b.n	8003890 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d101      	bne.n	80037a8 <HAL_UART_Transmit+0x38>
 80037a4:	2302      	movs	r3, #2
 80037a6:	e073      	b.n	8003890 <HAL_UART_Transmit+0x120>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2221      	movs	r2, #33	; 0x21
 80037bc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037be:	f7fe f913 	bl	80019e8 <HAL_GetTick>
 80037c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	88fa      	ldrh	r2, [r7, #6]
 80037c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	88fa      	ldrh	r2, [r7, #6]
 80037d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037dc:	d108      	bne.n	80037f0 <HAL_UART_Transmit+0x80>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d104      	bne.n	80037f0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80037e6:	2300      	movs	r3, #0
 80037e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	61bb      	str	r3, [r7, #24]
 80037ee:	e003      	b.n	80037f8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037f4:	2300      	movs	r3, #0
 80037f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003800:	e02d      	b.n	800385e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	2200      	movs	r2, #0
 800380a:	2180      	movs	r1, #128	; 0x80
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 fe1e 	bl	800444e <UART_WaitOnFlagUntilTimeout>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e039      	b.n	8003890 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10b      	bne.n	800383a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	881a      	ldrh	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800382e:	b292      	uxth	r2, r2
 8003830:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	3302      	adds	r3, #2
 8003836:	61bb      	str	r3, [r7, #24]
 8003838:	e008      	b.n	800384c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	781a      	ldrb	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	b292      	uxth	r2, r2
 8003844:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	3301      	adds	r3, #1
 800384a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003852:	b29b      	uxth	r3, r3
 8003854:	3b01      	subs	r3, #1
 8003856:	b29a      	uxth	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003864:	b29b      	uxth	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1cb      	bne.n	8003802 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	2200      	movs	r2, #0
 8003872:	2140      	movs	r1, #64	; 0x40
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 fdea 	bl	800444e <UART_WaitOnFlagUntilTimeout>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e005      	b.n	8003890 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2220      	movs	r2, #32
 8003888:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800388a:	2300      	movs	r3, #0
 800388c:	e000      	b.n	8003890 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800388e:	2302      	movs	r3, #2
  }
}
 8003890:	4618      	mov	r0, r3
 8003892:	3720      	adds	r7, #32
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	4613      	mov	r3, r2
 80038a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038aa:	2b20      	cmp	r3, #32
 80038ac:	d131      	bne.n	8003912 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <HAL_UART_Receive_IT+0x22>
 80038b4:	88fb      	ldrh	r3, [r7, #6]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e02a      	b.n	8003914 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d101      	bne.n	80038cc <HAL_UART_Receive_IT+0x34>
 80038c8:	2302      	movs	r3, #2
 80038ca:	e023      	b.n	8003914 <HAL_UART_Receive_IT+0x7c>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a0f      	ldr	r2, [pc, #60]	; (800391c <HAL_UART_Receive_IT+0x84>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d00e      	beq.n	8003902 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d007      	beq.n	8003902 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003900:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003902:	88fb      	ldrh	r3, [r7, #6]
 8003904:	461a      	mov	r2, r3
 8003906:	68b9      	ldr	r1, [r7, #8]
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f000 fe1d 	bl	8004548 <UART_Start_Receive_IT>
 800390e:	4603      	mov	r3, r0
 8003910:	e000      	b.n	8003914 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8003912:	2302      	movs	r3, #2
  }
}
 8003914:	4618      	mov	r0, r3
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40008000 	.word	0x40008000

08003920 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b088      	sub	sp, #32
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003940:	69fa      	ldr	r2, [r7, #28]
 8003942:	f640 030f 	movw	r3, #2063	; 0x80f
 8003946:	4013      	ands	r3, r2
 8003948:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d113      	bne.n	8003978 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f003 0320 	and.w	r3, r3, #32
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00e      	beq.n	8003978 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	f003 0320 	and.w	r3, r3, #32
 8003960:	2b00      	cmp	r3, #0
 8003962:	d009      	beq.n	8003978 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 81ce 	beq.w	8003d0a <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	4798      	blx	r3
      }
      return;
 8003976:	e1c8      	b.n	8003d0a <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 80e3 	beq.w	8003b46 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d105      	bne.n	8003996 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	4ba6      	ldr	r3, [pc, #664]	; (8003c28 <HAL_UART_IRQHandler+0x308>)
 800398e:	4013      	ands	r3, r2
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 80d8 	beq.w	8003b46 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b00      	cmp	r3, #0
 800399e:	d010      	beq.n	80039c2 <HAL_UART_IRQHandler+0xa2>
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00b      	beq.n	80039c2 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2201      	movs	r2, #1
 80039b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039b8:	f043 0201 	orr.w	r2, r3, #1
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d010      	beq.n	80039ee <HAL_UART_IRQHandler+0xce>
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00b      	beq.n	80039ee <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2202      	movs	r2, #2
 80039dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039e4:	f043 0204 	orr.w	r2, r3, #4
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d010      	beq.n	8003a1a <HAL_UART_IRQHandler+0xfa>
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00b      	beq.n	8003a1a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2204      	movs	r2, #4
 8003a08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a10:	f043 0202 	orr.w	r2, r3, #2
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d015      	beq.n	8003a50 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	f003 0320 	and.w	r3, r3, #32
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d104      	bne.n	8003a38 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00b      	beq.n	8003a50 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2208      	movs	r2, #8
 8003a3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a46:	f043 0208 	orr.w	r2, r3, #8
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d011      	beq.n	8003a7e <HAL_UART_IRQHandler+0x15e>
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00c      	beq.n	8003a7e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a74:	f043 0220 	orr.w	r2, r3, #32
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f000 8142 	beq.w	8003d0e <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	f003 0320 	and.w	r3, r3, #32
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00c      	beq.n	8003aae <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	f003 0320 	and.w	r3, r3, #32
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d007      	beq.n	8003aae <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ab4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac0:	2b40      	cmp	r3, #64	; 0x40
 8003ac2:	d004      	beq.n	8003ace <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d031      	beq.n	8003b32 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fdc2 	bl	8004658 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ade:	2b40      	cmp	r3, #64	; 0x40
 8003ae0:	d123      	bne.n	8003b2a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003af0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d013      	beq.n	8003b22 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afe:	4a4b      	ldr	r2, [pc, #300]	; (8003c2c <HAL_UART_IRQHandler+0x30c>)
 8003b00:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fe f8ed 	bl	8001ce6 <HAL_DMA_Abort_IT>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d017      	beq.n	8003b42 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003b1c:	4610      	mov	r0, r2
 8003b1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b20:	e00f      	b.n	8003b42 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f908 	bl	8003d38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b28:	e00b      	b.n	8003b42 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f904 	bl	8003d38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b30:	e007      	b.n	8003b42 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f900 	bl	8003d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003b40:	e0e5      	b.n	8003d0e <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b42:	bf00      	nop
    return;
 8003b44:	e0e3      	b.n	8003d0e <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	f040 80a9 	bne.w	8003ca2 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	f003 0310 	and.w	r3, r3, #16
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 80a3 	beq.w	8003ca2 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	f003 0310 	and.w	r3, r3, #16
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f000 809d 	beq.w	8003ca2 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2210      	movs	r2, #16
 8003b6e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7a:	2b40      	cmp	r3, #64	; 0x40
 8003b7c:	d158      	bne.n	8003c30 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003b88:	893b      	ldrh	r3, [r7, #8]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 80c1 	beq.w	8003d12 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003b96:	893a      	ldrh	r2, [r7, #8]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	f080 80ba 	bcs.w	8003d12 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	893a      	ldrh	r2, [r7, #8]
 8003ba2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0320 	and.w	r3, r3, #32
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d12a      	bne.n	8003c0c <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bc4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0201 	bic.w	r2, r2, #1
 8003bd4:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003be4:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2220      	movs	r2, #32
 8003bea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 0210 	bic.w	r2, r2, #16
 8003c00:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fe f82f 	bl	8001c6a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	4619      	mov	r1, r3
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 f893 	bl	8003d4c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003c26:	e074      	b.n	8003d12 <HAL_UART_IRQHandler+0x3f2>
 8003c28:	04000120 	.word	0x04000120
 8003c2c:	080046b7 	.word	0x080046b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d063      	beq.n	8003d16 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8003c4e:	897b      	ldrh	r3, [r7, #10]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d060      	beq.n	8003d16 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c62:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689a      	ldr	r2, [r3, #8]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0201 	bic.w	r2, r2, #1
 8003c72:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2220      	movs	r2, #32
 8003c78:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0210 	bic.w	r2, r2, #16
 8003c94:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c96:	897b      	ldrh	r3, [r7, #10]
 8003c98:	4619      	mov	r1, r3
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f856 	bl	8003d4c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003ca0:	e039      	b.n	8003d16 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00d      	beq.n	8003cc8 <HAL_UART_IRQHandler+0x3a8>
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d008      	beq.n	8003cc8 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003cbe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 fdff 	bl	80048c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003cc6:	e029      	b.n	8003d1c <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00d      	beq.n	8003cee <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d01a      	beq.n	8003d1a <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	4798      	blx	r3
    }
    return;
 8003cec:	e015      	b.n	8003d1a <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d011      	beq.n	8003d1c <HAL_UART_IRQHandler+0x3fc>
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00c      	beq.n	8003d1c <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 fced 	bl	80046e2 <UART_EndTransmit_IT>
    return;
 8003d08:	e008      	b.n	8003d1c <HAL_UART_IRQHandler+0x3fc>
      return;
 8003d0a:	bf00      	nop
 8003d0c:	e006      	b.n	8003d1c <HAL_UART_IRQHandler+0x3fc>
    return;
 8003d0e:	bf00      	nop
 8003d10:	e004      	b.n	8003d1c <HAL_UART_IRQHandler+0x3fc>
      return;
 8003d12:	bf00      	nop
 8003d14:	e002      	b.n	8003d1c <HAL_UART_IRQHandler+0x3fc>
      return;
 8003d16:	bf00      	nop
 8003d18:	e000      	b.n	8003d1c <HAL_UART_IRQHandler+0x3fc>
    return;
 8003d1a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003d1c:	3720      	adds	r7, #32
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop

08003d24 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	460b      	mov	r3, r1
 8003d56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d64:	b5b0      	push	{r4, r5, r7, lr}
 8003d66:	b088      	sub	sp, #32
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	69db      	ldr	r3, [r3, #28]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	4bad      	ldr	r3, [pc, #692]	; (8004044 <UART_SetConfig+0x2e0>)
 8003d90:	4013      	ands	r3, r2
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	6812      	ldr	r2, [r2, #0]
 8003d96:	69f9      	ldr	r1, [r7, #28]
 8003d98:	430b      	orrs	r3, r1
 8003d9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68da      	ldr	r2, [r3, #12]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4aa2      	ldr	r2, [pc, #648]	; (8004048 <UART_SetConfig+0x2e4>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d004      	beq.n	8003dcc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	69fa      	ldr	r2, [r7, #28]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	69fa      	ldr	r2, [r7, #28]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a99      	ldr	r2, [pc, #612]	; (800404c <UART_SetConfig+0x2e8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d121      	bne.n	8003e2e <UART_SetConfig+0xca>
 8003dea:	4b99      	ldr	r3, [pc, #612]	; (8004050 <UART_SetConfig+0x2ec>)
 8003dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df0:	f003 0303 	and.w	r3, r3, #3
 8003df4:	2b03      	cmp	r3, #3
 8003df6:	d817      	bhi.n	8003e28 <UART_SetConfig+0xc4>
 8003df8:	a201      	add	r2, pc, #4	; (adr r2, 8003e00 <UART_SetConfig+0x9c>)
 8003dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfe:	bf00      	nop
 8003e00:	08003e11 	.word	0x08003e11
 8003e04:	08003e1d 	.word	0x08003e1d
 8003e08:	08003e17 	.word	0x08003e17
 8003e0c:	08003e23 	.word	0x08003e23
 8003e10:	2301      	movs	r3, #1
 8003e12:	76fb      	strb	r3, [r7, #27]
 8003e14:	e0e7      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003e16:	2302      	movs	r3, #2
 8003e18:	76fb      	strb	r3, [r7, #27]
 8003e1a:	e0e4      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003e1c:	2304      	movs	r3, #4
 8003e1e:	76fb      	strb	r3, [r7, #27]
 8003e20:	e0e1      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003e22:	2308      	movs	r3, #8
 8003e24:	76fb      	strb	r3, [r7, #27]
 8003e26:	e0de      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003e28:	2310      	movs	r3, #16
 8003e2a:	76fb      	strb	r3, [r7, #27]
 8003e2c:	e0db      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a88      	ldr	r2, [pc, #544]	; (8004054 <UART_SetConfig+0x2f0>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d132      	bne.n	8003e9e <UART_SetConfig+0x13a>
 8003e38:	4b85      	ldr	r3, [pc, #532]	; (8004050 <UART_SetConfig+0x2ec>)
 8003e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3e:	f003 030c 	and.w	r3, r3, #12
 8003e42:	2b0c      	cmp	r3, #12
 8003e44:	d828      	bhi.n	8003e98 <UART_SetConfig+0x134>
 8003e46:	a201      	add	r2, pc, #4	; (adr r2, 8003e4c <UART_SetConfig+0xe8>)
 8003e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4c:	08003e81 	.word	0x08003e81
 8003e50:	08003e99 	.word	0x08003e99
 8003e54:	08003e99 	.word	0x08003e99
 8003e58:	08003e99 	.word	0x08003e99
 8003e5c:	08003e8d 	.word	0x08003e8d
 8003e60:	08003e99 	.word	0x08003e99
 8003e64:	08003e99 	.word	0x08003e99
 8003e68:	08003e99 	.word	0x08003e99
 8003e6c:	08003e87 	.word	0x08003e87
 8003e70:	08003e99 	.word	0x08003e99
 8003e74:	08003e99 	.word	0x08003e99
 8003e78:	08003e99 	.word	0x08003e99
 8003e7c:	08003e93 	.word	0x08003e93
 8003e80:	2300      	movs	r3, #0
 8003e82:	76fb      	strb	r3, [r7, #27]
 8003e84:	e0af      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003e86:	2302      	movs	r3, #2
 8003e88:	76fb      	strb	r3, [r7, #27]
 8003e8a:	e0ac      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003e8c:	2304      	movs	r3, #4
 8003e8e:	76fb      	strb	r3, [r7, #27]
 8003e90:	e0a9      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003e92:	2308      	movs	r3, #8
 8003e94:	76fb      	strb	r3, [r7, #27]
 8003e96:	e0a6      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003e98:	2310      	movs	r3, #16
 8003e9a:	76fb      	strb	r3, [r7, #27]
 8003e9c:	e0a3      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a6d      	ldr	r2, [pc, #436]	; (8004058 <UART_SetConfig+0x2f4>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d120      	bne.n	8003eea <UART_SetConfig+0x186>
 8003ea8:	4b69      	ldr	r3, [pc, #420]	; (8004050 <UART_SetConfig+0x2ec>)
 8003eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003eb2:	2b30      	cmp	r3, #48	; 0x30
 8003eb4:	d013      	beq.n	8003ede <UART_SetConfig+0x17a>
 8003eb6:	2b30      	cmp	r3, #48	; 0x30
 8003eb8:	d814      	bhi.n	8003ee4 <UART_SetConfig+0x180>
 8003eba:	2b20      	cmp	r3, #32
 8003ebc:	d009      	beq.n	8003ed2 <UART_SetConfig+0x16e>
 8003ebe:	2b20      	cmp	r3, #32
 8003ec0:	d810      	bhi.n	8003ee4 <UART_SetConfig+0x180>
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d002      	beq.n	8003ecc <UART_SetConfig+0x168>
 8003ec6:	2b10      	cmp	r3, #16
 8003ec8:	d006      	beq.n	8003ed8 <UART_SetConfig+0x174>
 8003eca:	e00b      	b.n	8003ee4 <UART_SetConfig+0x180>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	76fb      	strb	r3, [r7, #27]
 8003ed0:	e089      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	76fb      	strb	r3, [r7, #27]
 8003ed6:	e086      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003ed8:	2304      	movs	r3, #4
 8003eda:	76fb      	strb	r3, [r7, #27]
 8003edc:	e083      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003ede:	2308      	movs	r3, #8
 8003ee0:	76fb      	strb	r3, [r7, #27]
 8003ee2:	e080      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003ee4:	2310      	movs	r3, #16
 8003ee6:	76fb      	strb	r3, [r7, #27]
 8003ee8:	e07d      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a5b      	ldr	r2, [pc, #364]	; (800405c <UART_SetConfig+0x2f8>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d120      	bne.n	8003f36 <UART_SetConfig+0x1d2>
 8003ef4:	4b56      	ldr	r3, [pc, #344]	; (8004050 <UART_SetConfig+0x2ec>)
 8003ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003efe:	2bc0      	cmp	r3, #192	; 0xc0
 8003f00:	d013      	beq.n	8003f2a <UART_SetConfig+0x1c6>
 8003f02:	2bc0      	cmp	r3, #192	; 0xc0
 8003f04:	d814      	bhi.n	8003f30 <UART_SetConfig+0x1cc>
 8003f06:	2b80      	cmp	r3, #128	; 0x80
 8003f08:	d009      	beq.n	8003f1e <UART_SetConfig+0x1ba>
 8003f0a:	2b80      	cmp	r3, #128	; 0x80
 8003f0c:	d810      	bhi.n	8003f30 <UART_SetConfig+0x1cc>
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <UART_SetConfig+0x1b4>
 8003f12:	2b40      	cmp	r3, #64	; 0x40
 8003f14:	d006      	beq.n	8003f24 <UART_SetConfig+0x1c0>
 8003f16:	e00b      	b.n	8003f30 <UART_SetConfig+0x1cc>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	76fb      	strb	r3, [r7, #27]
 8003f1c:	e063      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	76fb      	strb	r3, [r7, #27]
 8003f22:	e060      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003f24:	2304      	movs	r3, #4
 8003f26:	76fb      	strb	r3, [r7, #27]
 8003f28:	e05d      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003f2a:	2308      	movs	r3, #8
 8003f2c:	76fb      	strb	r3, [r7, #27]
 8003f2e:	e05a      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003f30:	2310      	movs	r3, #16
 8003f32:	76fb      	strb	r3, [r7, #27]
 8003f34:	e057      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a49      	ldr	r2, [pc, #292]	; (8004060 <UART_SetConfig+0x2fc>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d125      	bne.n	8003f8c <UART_SetConfig+0x228>
 8003f40:	4b43      	ldr	r3, [pc, #268]	; (8004050 <UART_SetConfig+0x2ec>)
 8003f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f4e:	d017      	beq.n	8003f80 <UART_SetConfig+0x21c>
 8003f50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f54:	d817      	bhi.n	8003f86 <UART_SetConfig+0x222>
 8003f56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f5a:	d00b      	beq.n	8003f74 <UART_SetConfig+0x210>
 8003f5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f60:	d811      	bhi.n	8003f86 <UART_SetConfig+0x222>
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <UART_SetConfig+0x20a>
 8003f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f6a:	d006      	beq.n	8003f7a <UART_SetConfig+0x216>
 8003f6c:	e00b      	b.n	8003f86 <UART_SetConfig+0x222>
 8003f6e:	2300      	movs	r3, #0
 8003f70:	76fb      	strb	r3, [r7, #27]
 8003f72:	e038      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003f74:	2302      	movs	r3, #2
 8003f76:	76fb      	strb	r3, [r7, #27]
 8003f78:	e035      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003f7a:	2304      	movs	r3, #4
 8003f7c:	76fb      	strb	r3, [r7, #27]
 8003f7e:	e032      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003f80:	2308      	movs	r3, #8
 8003f82:	76fb      	strb	r3, [r7, #27]
 8003f84:	e02f      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003f86:	2310      	movs	r3, #16
 8003f88:	76fb      	strb	r3, [r7, #27]
 8003f8a:	e02c      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a2d      	ldr	r2, [pc, #180]	; (8004048 <UART_SetConfig+0x2e4>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d125      	bne.n	8003fe2 <UART_SetConfig+0x27e>
 8003f96:	4b2e      	ldr	r3, [pc, #184]	; (8004050 <UART_SetConfig+0x2ec>)
 8003f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003fa0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fa4:	d017      	beq.n	8003fd6 <UART_SetConfig+0x272>
 8003fa6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003faa:	d817      	bhi.n	8003fdc <UART_SetConfig+0x278>
 8003fac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fb0:	d00b      	beq.n	8003fca <UART_SetConfig+0x266>
 8003fb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fb6:	d811      	bhi.n	8003fdc <UART_SetConfig+0x278>
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d003      	beq.n	8003fc4 <UART_SetConfig+0x260>
 8003fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc0:	d006      	beq.n	8003fd0 <UART_SetConfig+0x26c>
 8003fc2:	e00b      	b.n	8003fdc <UART_SetConfig+0x278>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	76fb      	strb	r3, [r7, #27]
 8003fc8:	e00d      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003fca:	2302      	movs	r3, #2
 8003fcc:	76fb      	strb	r3, [r7, #27]
 8003fce:	e00a      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003fd0:	2304      	movs	r3, #4
 8003fd2:	76fb      	strb	r3, [r7, #27]
 8003fd4:	e007      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003fd6:	2308      	movs	r3, #8
 8003fd8:	76fb      	strb	r3, [r7, #27]
 8003fda:	e004      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003fdc:	2310      	movs	r3, #16
 8003fde:	76fb      	strb	r3, [r7, #27]
 8003fe0:	e001      	b.n	8003fe6 <UART_SetConfig+0x282>
 8003fe2:	2310      	movs	r3, #16
 8003fe4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a17      	ldr	r2, [pc, #92]	; (8004048 <UART_SetConfig+0x2e4>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	f040 8087 	bne.w	8004100 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ff2:	7efb      	ldrb	r3, [r7, #27]
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d837      	bhi.n	8004068 <UART_SetConfig+0x304>
 8003ff8:	a201      	add	r2, pc, #4	; (adr r2, 8004000 <UART_SetConfig+0x29c>)
 8003ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffe:	bf00      	nop
 8004000:	08004025 	.word	0x08004025
 8004004:	08004069 	.word	0x08004069
 8004008:	0800402d 	.word	0x0800402d
 800400c:	08004069 	.word	0x08004069
 8004010:	08004033 	.word	0x08004033
 8004014:	08004069 	.word	0x08004069
 8004018:	08004069 	.word	0x08004069
 800401c:	08004069 	.word	0x08004069
 8004020:	0800403b 	.word	0x0800403b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004024:	f7fe fe0e 	bl	8002c44 <HAL_RCC_GetPCLK1Freq>
 8004028:	6178      	str	r0, [r7, #20]
        break;
 800402a:	e022      	b.n	8004072 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800402c:	4b0d      	ldr	r3, [pc, #52]	; (8004064 <UART_SetConfig+0x300>)
 800402e:	617b      	str	r3, [r7, #20]
        break;
 8004030:	e01f      	b.n	8004072 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004032:	f7fe fd6f 	bl	8002b14 <HAL_RCC_GetSysClockFreq>
 8004036:	6178      	str	r0, [r7, #20]
        break;
 8004038:	e01b      	b.n	8004072 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800403a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800403e:	617b      	str	r3, [r7, #20]
        break;
 8004040:	e017      	b.n	8004072 <UART_SetConfig+0x30e>
 8004042:	bf00      	nop
 8004044:	efff69f3 	.word	0xefff69f3
 8004048:	40008000 	.word	0x40008000
 800404c:	40013800 	.word	0x40013800
 8004050:	40021000 	.word	0x40021000
 8004054:	40004400 	.word	0x40004400
 8004058:	40004800 	.word	0x40004800
 800405c:	40004c00 	.word	0x40004c00
 8004060:	40005000 	.word	0x40005000
 8004064:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	76bb      	strb	r3, [r7, #26]
        break;
 8004070:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 80f1 	beq.w	800425c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	4613      	mov	r3, r2
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	4413      	add	r3, r2
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	429a      	cmp	r2, r3
 8004088:	d305      	bcc.n	8004096 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	429a      	cmp	r2, r3
 8004094:	d902      	bls.n	800409c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	76bb      	strb	r3, [r7, #26]
 800409a:	e0df      	b.n	800425c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	4618      	mov	r0, r3
 80040a0:	f04f 0100 	mov.w	r1, #0
 80040a4:	f04f 0200 	mov.w	r2, #0
 80040a8:	f04f 0300 	mov.w	r3, #0
 80040ac:	020b      	lsls	r3, r1, #8
 80040ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80040b2:	0202      	lsls	r2, r0, #8
 80040b4:	6879      	ldr	r1, [r7, #4]
 80040b6:	6849      	ldr	r1, [r1, #4]
 80040b8:	0849      	lsrs	r1, r1, #1
 80040ba:	4608      	mov	r0, r1
 80040bc:	f04f 0100 	mov.w	r1, #0
 80040c0:	1814      	adds	r4, r2, r0
 80040c2:	eb43 0501 	adc.w	r5, r3, r1
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	461a      	mov	r2, r3
 80040cc:	f04f 0300 	mov.w	r3, #0
 80040d0:	4620      	mov	r0, r4
 80040d2:	4629      	mov	r1, r5
 80040d4:	f7fc f8e4 	bl	80002a0 <__aeabi_uldivmod>
 80040d8:	4602      	mov	r2, r0
 80040da:	460b      	mov	r3, r1
 80040dc:	4613      	mov	r3, r2
 80040de:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040e6:	d308      	bcc.n	80040fa <UART_SetConfig+0x396>
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040ee:	d204      	bcs.n	80040fa <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	60da      	str	r2, [r3, #12]
 80040f8:	e0b0      	b.n	800425c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	76bb      	strb	r3, [r7, #26]
 80040fe:	e0ad      	b.n	800425c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	69db      	ldr	r3, [r3, #28]
 8004104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004108:	d15c      	bne.n	80041c4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800410a:	7efb      	ldrb	r3, [r7, #27]
 800410c:	2b08      	cmp	r3, #8
 800410e:	d828      	bhi.n	8004162 <UART_SetConfig+0x3fe>
 8004110:	a201      	add	r2, pc, #4	; (adr r2, 8004118 <UART_SetConfig+0x3b4>)
 8004112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004116:	bf00      	nop
 8004118:	0800413d 	.word	0x0800413d
 800411c:	08004145 	.word	0x08004145
 8004120:	0800414d 	.word	0x0800414d
 8004124:	08004163 	.word	0x08004163
 8004128:	08004153 	.word	0x08004153
 800412c:	08004163 	.word	0x08004163
 8004130:	08004163 	.word	0x08004163
 8004134:	08004163 	.word	0x08004163
 8004138:	0800415b 	.word	0x0800415b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800413c:	f7fe fd82 	bl	8002c44 <HAL_RCC_GetPCLK1Freq>
 8004140:	6178      	str	r0, [r7, #20]
        break;
 8004142:	e013      	b.n	800416c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004144:	f7fe fd94 	bl	8002c70 <HAL_RCC_GetPCLK2Freq>
 8004148:	6178      	str	r0, [r7, #20]
        break;
 800414a:	e00f      	b.n	800416c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800414c:	4b49      	ldr	r3, [pc, #292]	; (8004274 <UART_SetConfig+0x510>)
 800414e:	617b      	str	r3, [r7, #20]
        break;
 8004150:	e00c      	b.n	800416c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004152:	f7fe fcdf 	bl	8002b14 <HAL_RCC_GetSysClockFreq>
 8004156:	6178      	str	r0, [r7, #20]
        break;
 8004158:	e008      	b.n	800416c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800415a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800415e:	617b      	str	r3, [r7, #20]
        break;
 8004160:	e004      	b.n	800416c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004162:	2300      	movs	r3, #0
 8004164:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	76bb      	strb	r3, [r7, #26]
        break;
 800416a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d074      	beq.n	800425c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	005a      	lsls	r2, r3, #1
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	085b      	lsrs	r3, r3, #1
 800417c:	441a      	add	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	fbb2 f3f3 	udiv	r3, r2, r3
 8004186:	b29b      	uxth	r3, r3
 8004188:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	2b0f      	cmp	r3, #15
 800418e:	d916      	bls.n	80041be <UART_SetConfig+0x45a>
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004196:	d212      	bcs.n	80041be <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	b29b      	uxth	r3, r3
 800419c:	f023 030f 	bic.w	r3, r3, #15
 80041a0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	085b      	lsrs	r3, r3, #1
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	89fb      	ldrh	r3, [r7, #14]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	89fa      	ldrh	r2, [r7, #14]
 80041ba:	60da      	str	r2, [r3, #12]
 80041bc:	e04e      	b.n	800425c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	76bb      	strb	r3, [r7, #26]
 80041c2:	e04b      	b.n	800425c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041c4:	7efb      	ldrb	r3, [r7, #27]
 80041c6:	2b08      	cmp	r3, #8
 80041c8:	d827      	bhi.n	800421a <UART_SetConfig+0x4b6>
 80041ca:	a201      	add	r2, pc, #4	; (adr r2, 80041d0 <UART_SetConfig+0x46c>)
 80041cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d0:	080041f5 	.word	0x080041f5
 80041d4:	080041fd 	.word	0x080041fd
 80041d8:	08004205 	.word	0x08004205
 80041dc:	0800421b 	.word	0x0800421b
 80041e0:	0800420b 	.word	0x0800420b
 80041e4:	0800421b 	.word	0x0800421b
 80041e8:	0800421b 	.word	0x0800421b
 80041ec:	0800421b 	.word	0x0800421b
 80041f0:	08004213 	.word	0x08004213
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041f4:	f7fe fd26 	bl	8002c44 <HAL_RCC_GetPCLK1Freq>
 80041f8:	6178      	str	r0, [r7, #20]
        break;
 80041fa:	e013      	b.n	8004224 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041fc:	f7fe fd38 	bl	8002c70 <HAL_RCC_GetPCLK2Freq>
 8004200:	6178      	str	r0, [r7, #20]
        break;
 8004202:	e00f      	b.n	8004224 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004204:	4b1b      	ldr	r3, [pc, #108]	; (8004274 <UART_SetConfig+0x510>)
 8004206:	617b      	str	r3, [r7, #20]
        break;
 8004208:	e00c      	b.n	8004224 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800420a:	f7fe fc83 	bl	8002b14 <HAL_RCC_GetSysClockFreq>
 800420e:	6178      	str	r0, [r7, #20]
        break;
 8004210:	e008      	b.n	8004224 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004216:	617b      	str	r3, [r7, #20]
        break;
 8004218:	e004      	b.n	8004224 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800421a:	2300      	movs	r3, #0
 800421c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	76bb      	strb	r3, [r7, #26]
        break;
 8004222:	bf00      	nop
    }

    if (pclk != 0U)
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d018      	beq.n	800425c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	085a      	lsrs	r2, r3, #1
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	441a      	add	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	fbb2 f3f3 	udiv	r3, r2, r3
 800423c:	b29b      	uxth	r3, r3
 800423e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	2b0f      	cmp	r3, #15
 8004244:	d908      	bls.n	8004258 <UART_SetConfig+0x4f4>
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800424c:	d204      	bcs.n	8004258 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	60da      	str	r2, [r3, #12]
 8004256:	e001      	b.n	800425c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004268:	7ebb      	ldrb	r3, [r7, #26]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3720      	adds	r7, #32
 800426e:	46bd      	mov	sp, r7
 8004270:	bdb0      	pop	{r4, r5, r7, pc}
 8004272:	bf00      	nop
 8004274:	00f42400 	.word	0x00f42400

08004278 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00a      	beq.n	80042a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00a      	beq.n	80042e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	f003 0308 	and.w	r3, r3, #8
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	f003 0310 	and.w	r3, r3, #16
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00a      	beq.n	800432a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	f003 0320 	and.w	r3, r3, #32
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00a      	beq.n	800434c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004354:	2b00      	cmp	r3, #0
 8004356:	d01a      	beq.n	800438e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004376:	d10a      	bne.n	800438e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00a      	beq.n	80043b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	430a      	orrs	r2, r1
 80043ae:	605a      	str	r2, [r3, #4]
  }
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af02      	add	r7, sp, #8
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043cc:	f7fd fb0c 	bl	80019e8 <HAL_GetTick>
 80043d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0308 	and.w	r3, r3, #8
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d10e      	bne.n	80043fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f82d 	bl	800444e <UART_WaitOnFlagUntilTimeout>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e023      	b.n	8004446 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b04      	cmp	r3, #4
 800440a:	d10e      	bne.n	800442a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800440c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f817 	bl	800444e <UART_WaitOnFlagUntilTimeout>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e00d      	b.n	8004446 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2220      	movs	r2, #32
 800442e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2220      	movs	r2, #32
 8004434:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b084      	sub	sp, #16
 8004452:	af00      	add	r7, sp, #0
 8004454:	60f8      	str	r0, [r7, #12]
 8004456:	60b9      	str	r1, [r7, #8]
 8004458:	603b      	str	r3, [r7, #0]
 800445a:	4613      	mov	r3, r2
 800445c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800445e:	e05e      	b.n	800451e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004466:	d05a      	beq.n	800451e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004468:	f7fd fabe 	bl	80019e8 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	429a      	cmp	r2, r3
 8004476:	d302      	bcc.n	800447e <UART_WaitOnFlagUntilTimeout+0x30>
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d11b      	bne.n	80044b6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800448c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0201 	bic.w	r2, r2, #1
 800449c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2220      	movs	r2, #32
 80044a2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2220      	movs	r2, #32
 80044a8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e043      	b.n	800453e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d02c      	beq.n	800451e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044d2:	d124      	bne.n	800451e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044dc:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044ec:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0201 	bic.w	r2, r2, #1
 80044fc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2220      	movs	r2, #32
 8004502:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2220      	movs	r2, #32
 8004508:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2220      	movs	r2, #32
 800450e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e00f      	b.n	800453e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	69da      	ldr	r2, [r3, #28]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	4013      	ands	r3, r2
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	429a      	cmp	r2, r3
 800452c:	bf0c      	ite	eq
 800452e:	2301      	moveq	r3, #1
 8004530:	2300      	movne	r3, #0
 8004532:	b2db      	uxtb	r3, r3
 8004534:	461a      	mov	r2, r3
 8004536:	79fb      	ldrb	r3, [r7, #7]
 8004538:	429a      	cmp	r2, r3
 800453a:	d091      	beq.n	8004460 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
	...

08004548 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	4613      	mov	r3, r2
 8004554:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	68ba      	ldr	r2, [r7, #8]
 800455a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	88fa      	ldrh	r2, [r7, #6]
 8004560:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	88fa      	ldrh	r2, [r7, #6]
 8004568:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800457a:	d10e      	bne.n	800459a <UART_Start_Receive_IT+0x52>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d105      	bne.n	8004590 <UART_Start_Receive_IT+0x48>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f240 12ff 	movw	r2, #511	; 0x1ff
 800458a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800458e:	e02d      	b.n	80045ec <UART_Start_Receive_IT+0xa4>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	22ff      	movs	r2, #255	; 0xff
 8004594:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004598:	e028      	b.n	80045ec <UART_Start_Receive_IT+0xa4>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10d      	bne.n	80045be <UART_Start_Receive_IT+0x76>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d104      	bne.n	80045b4 <UART_Start_Receive_IT+0x6c>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	22ff      	movs	r2, #255	; 0xff
 80045ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045b2:	e01b      	b.n	80045ec <UART_Start_Receive_IT+0xa4>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	227f      	movs	r2, #127	; 0x7f
 80045b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045bc:	e016      	b.n	80045ec <UART_Start_Receive_IT+0xa4>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045c6:	d10d      	bne.n	80045e4 <UART_Start_Receive_IT+0x9c>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d104      	bne.n	80045da <UART_Start_Receive_IT+0x92>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	227f      	movs	r2, #127	; 0x7f
 80045d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045d8:	e008      	b.n	80045ec <UART_Start_Receive_IT+0xa4>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	223f      	movs	r2, #63	; 0x3f
 80045de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045e2:	e003      	b.n	80045ec <UART_Start_Receive_IT+0xa4>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2222      	movs	r2, #34	; 0x22
 80045f8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f042 0201 	orr.w	r2, r2, #1
 8004608:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004612:	d107      	bne.n	8004624 <UART_Start_Receive_IT+0xdc>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d103      	bne.n	8004624 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	4a0c      	ldr	r2, [pc, #48]	; (8004650 <UART_Start_Receive_IT+0x108>)
 8004620:	665a      	str	r2, [r3, #100]	; 0x64
 8004622:	e002      	b.n	800462a <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4a0b      	ldr	r2, [pc, #44]	; (8004654 <UART_Start_Receive_IT+0x10c>)
 8004628:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004640:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	080047ed 	.word	0x080047ed
 8004654:	08004715 	.word	0x08004715

08004658 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800466e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689a      	ldr	r2, [r3, #8]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0201 	bic.w	r2, r2, #1
 800467e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004684:	2b01      	cmp	r3, #1
 8004686:	d107      	bne.n	8004698 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0210 	bic.w	r2, r2, #16
 8004696:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2220      	movs	r2, #32
 800469c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80046aa:	bf00      	nop
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b084      	sub	sp, #16
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f7ff fb2f 	bl	8003d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046da:	bf00      	nop
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b082      	sub	sp, #8
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046f8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2220      	movs	r2, #32
 80046fe:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7ff fb0c 	bl	8003d24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800470c:	bf00      	nop
 800470e:	3708      	adds	r7, #8
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004722:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004728:	2b22      	cmp	r3, #34	; 0x22
 800472a:	d151      	bne.n	80047d0 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004732:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004734:	89bb      	ldrh	r3, [r7, #12]
 8004736:	b2d9      	uxtb	r1, r3
 8004738:	89fb      	ldrh	r3, [r7, #14]
 800473a:	b2da      	uxtb	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004740:	400a      	ands	r2, r1
 8004742:	b2d2      	uxtb	r2, r2
 8004744:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474a:	1c5a      	adds	r2, r3, #1
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004756:	b29b      	uxth	r3, r3
 8004758:	3b01      	subs	r3, #1
 800475a:	b29a      	uxth	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004768:	b29b      	uxth	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d13a      	bne.n	80047e4 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800477c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0201 	bic.w	r2, r2, #1
 800478c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2220      	movs	r2, #32
 8004792:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d10f      	bne.n	80047c2 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 0210 	bic.w	r2, r2, #16
 80047b0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80047b8:	4619      	mov	r1, r3
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f7ff fac6 	bl	8003d4c <HAL_UARTEx_RxEventCallback>
 80047c0:	e002      	b.n	80047c8 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f7fb fef6 	bl	80005b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80047ce:	e009      	b.n	80047e4 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	8b1b      	ldrh	r3, [r3, #24]
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f042 0208 	orr.w	r2, r2, #8
 80047e0:	b292      	uxth	r2, r2
 80047e2:	831a      	strh	r2, [r3, #24]
}
 80047e4:	bf00      	nop
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80047fa:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004800:	2b22      	cmp	r3, #34	; 0x22
 8004802:	d151      	bne.n	80048a8 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800480a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004810:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004812:	89ba      	ldrh	r2, [r7, #12]
 8004814:	89fb      	ldrh	r3, [r7, #14]
 8004816:	4013      	ands	r3, r2
 8004818:	b29a      	uxth	r2, r3
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004822:	1c9a      	adds	r2, r3, #2
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800482e:	b29b      	uxth	r3, r3
 8004830:	3b01      	subs	r3, #1
 8004832:	b29a      	uxth	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004840:	b29b      	uxth	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d13a      	bne.n	80048bc <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004854:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0201 	bic.w	r2, r2, #1
 8004864:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2220      	movs	r2, #32
 800486a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004876:	2b01      	cmp	r3, #1
 8004878:	d10f      	bne.n	800489a <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 0210 	bic.w	r2, r2, #16
 8004888:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004890:	4619      	mov	r1, r3
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f7ff fa5a 	bl	8003d4c <HAL_UARTEx_RxEventCallback>
 8004898:	e002      	b.n	80048a0 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7fb fe8a 	bl	80005b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80048a6:	e009      	b.n	80048bc <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	8b1b      	ldrh	r3, [r3, #24]
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f042 0208 	orr.w	r2, r2, #8
 80048b8:	b292      	uxth	r2, r2
 80048ba:	831a      	strh	r2, [r3, #24]
}
 80048bc:	bf00      	nop
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <__errno>:
 80048d8:	4b01      	ldr	r3, [pc, #4]	; (80048e0 <__errno+0x8>)
 80048da:	6818      	ldr	r0, [r3, #0]
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	2000000c 	.word	0x2000000c

080048e4 <__libc_init_array>:
 80048e4:	b570      	push	{r4, r5, r6, lr}
 80048e6:	4d0d      	ldr	r5, [pc, #52]	; (800491c <__libc_init_array+0x38>)
 80048e8:	4c0d      	ldr	r4, [pc, #52]	; (8004920 <__libc_init_array+0x3c>)
 80048ea:	1b64      	subs	r4, r4, r5
 80048ec:	10a4      	asrs	r4, r4, #2
 80048ee:	2600      	movs	r6, #0
 80048f0:	42a6      	cmp	r6, r4
 80048f2:	d109      	bne.n	8004908 <__libc_init_array+0x24>
 80048f4:	4d0b      	ldr	r5, [pc, #44]	; (8004924 <__libc_init_array+0x40>)
 80048f6:	4c0c      	ldr	r4, [pc, #48]	; (8004928 <__libc_init_array+0x44>)
 80048f8:	f001 fa34 	bl	8005d64 <_init>
 80048fc:	1b64      	subs	r4, r4, r5
 80048fe:	10a4      	asrs	r4, r4, #2
 8004900:	2600      	movs	r6, #0
 8004902:	42a6      	cmp	r6, r4
 8004904:	d105      	bne.n	8004912 <__libc_init_array+0x2e>
 8004906:	bd70      	pop	{r4, r5, r6, pc}
 8004908:	f855 3b04 	ldr.w	r3, [r5], #4
 800490c:	4798      	blx	r3
 800490e:	3601      	adds	r6, #1
 8004910:	e7ee      	b.n	80048f0 <__libc_init_array+0xc>
 8004912:	f855 3b04 	ldr.w	r3, [r5], #4
 8004916:	4798      	blx	r3
 8004918:	3601      	adds	r6, #1
 800491a:	e7f2      	b.n	8004902 <__libc_init_array+0x1e>
 800491c:	080063cc 	.word	0x080063cc
 8004920:	080063cc 	.word	0x080063cc
 8004924:	080063cc 	.word	0x080063cc
 8004928:	080063d0 	.word	0x080063d0

0800492c <memcpy>:
 800492c:	440a      	add	r2, r1
 800492e:	4291      	cmp	r1, r2
 8004930:	f100 33ff 	add.w	r3, r0, #4294967295
 8004934:	d100      	bne.n	8004938 <memcpy+0xc>
 8004936:	4770      	bx	lr
 8004938:	b510      	push	{r4, lr}
 800493a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800493e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004942:	4291      	cmp	r1, r2
 8004944:	d1f9      	bne.n	800493a <memcpy+0xe>
 8004946:	bd10      	pop	{r4, pc}

08004948 <memset>:
 8004948:	4402      	add	r2, r0
 800494a:	4603      	mov	r3, r0
 800494c:	4293      	cmp	r3, r2
 800494e:	d100      	bne.n	8004952 <memset+0xa>
 8004950:	4770      	bx	lr
 8004952:	f803 1b01 	strb.w	r1, [r3], #1
 8004956:	e7f9      	b.n	800494c <memset+0x4>

08004958 <iprintf>:
 8004958:	b40f      	push	{r0, r1, r2, r3}
 800495a:	4b0a      	ldr	r3, [pc, #40]	; (8004984 <iprintf+0x2c>)
 800495c:	b513      	push	{r0, r1, r4, lr}
 800495e:	681c      	ldr	r4, [r3, #0]
 8004960:	b124      	cbz	r4, 800496c <iprintf+0x14>
 8004962:	69a3      	ldr	r3, [r4, #24]
 8004964:	b913      	cbnz	r3, 800496c <iprintf+0x14>
 8004966:	4620      	mov	r0, r4
 8004968:	f000 faac 	bl	8004ec4 <__sinit>
 800496c:	ab05      	add	r3, sp, #20
 800496e:	9a04      	ldr	r2, [sp, #16]
 8004970:	68a1      	ldr	r1, [r4, #8]
 8004972:	9301      	str	r3, [sp, #4]
 8004974:	4620      	mov	r0, r4
 8004976:	f000 fdd9 	bl	800552c <_vfiprintf_r>
 800497a:	b002      	add	sp, #8
 800497c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004980:	b004      	add	sp, #16
 8004982:	4770      	bx	lr
 8004984:	2000000c 	.word	0x2000000c

08004988 <putchar>:
 8004988:	4b09      	ldr	r3, [pc, #36]	; (80049b0 <putchar+0x28>)
 800498a:	b513      	push	{r0, r1, r4, lr}
 800498c:	681c      	ldr	r4, [r3, #0]
 800498e:	4601      	mov	r1, r0
 8004990:	b134      	cbz	r4, 80049a0 <putchar+0x18>
 8004992:	69a3      	ldr	r3, [r4, #24]
 8004994:	b923      	cbnz	r3, 80049a0 <putchar+0x18>
 8004996:	9001      	str	r0, [sp, #4]
 8004998:	4620      	mov	r0, r4
 800499a:	f000 fa93 	bl	8004ec4 <__sinit>
 800499e:	9901      	ldr	r1, [sp, #4]
 80049a0:	68a2      	ldr	r2, [r4, #8]
 80049a2:	4620      	mov	r0, r4
 80049a4:	b002      	add	sp, #8
 80049a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049aa:	f001 b883 	b.w	8005ab4 <_putc_r>
 80049ae:	bf00      	nop
 80049b0:	2000000c 	.word	0x2000000c

080049b4 <_puts_r>:
 80049b4:	b570      	push	{r4, r5, r6, lr}
 80049b6:	460e      	mov	r6, r1
 80049b8:	4605      	mov	r5, r0
 80049ba:	b118      	cbz	r0, 80049c4 <_puts_r+0x10>
 80049bc:	6983      	ldr	r3, [r0, #24]
 80049be:	b90b      	cbnz	r3, 80049c4 <_puts_r+0x10>
 80049c0:	f000 fa80 	bl	8004ec4 <__sinit>
 80049c4:	69ab      	ldr	r3, [r5, #24]
 80049c6:	68ac      	ldr	r4, [r5, #8]
 80049c8:	b913      	cbnz	r3, 80049d0 <_puts_r+0x1c>
 80049ca:	4628      	mov	r0, r5
 80049cc:	f000 fa7a 	bl	8004ec4 <__sinit>
 80049d0:	4b2c      	ldr	r3, [pc, #176]	; (8004a84 <_puts_r+0xd0>)
 80049d2:	429c      	cmp	r4, r3
 80049d4:	d120      	bne.n	8004a18 <_puts_r+0x64>
 80049d6:	686c      	ldr	r4, [r5, #4]
 80049d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049da:	07db      	lsls	r3, r3, #31
 80049dc:	d405      	bmi.n	80049ea <_puts_r+0x36>
 80049de:	89a3      	ldrh	r3, [r4, #12]
 80049e0:	0598      	lsls	r0, r3, #22
 80049e2:	d402      	bmi.n	80049ea <_puts_r+0x36>
 80049e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049e6:	f000 fb0b 	bl	8005000 <__retarget_lock_acquire_recursive>
 80049ea:	89a3      	ldrh	r3, [r4, #12]
 80049ec:	0719      	lsls	r1, r3, #28
 80049ee:	d51d      	bpl.n	8004a2c <_puts_r+0x78>
 80049f0:	6923      	ldr	r3, [r4, #16]
 80049f2:	b1db      	cbz	r3, 8004a2c <_puts_r+0x78>
 80049f4:	3e01      	subs	r6, #1
 80049f6:	68a3      	ldr	r3, [r4, #8]
 80049f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80049fc:	3b01      	subs	r3, #1
 80049fe:	60a3      	str	r3, [r4, #8]
 8004a00:	bb39      	cbnz	r1, 8004a52 <_puts_r+0x9e>
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	da38      	bge.n	8004a78 <_puts_r+0xc4>
 8004a06:	4622      	mov	r2, r4
 8004a08:	210a      	movs	r1, #10
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	f000 f880 	bl	8004b10 <__swbuf_r>
 8004a10:	3001      	adds	r0, #1
 8004a12:	d011      	beq.n	8004a38 <_puts_r+0x84>
 8004a14:	250a      	movs	r5, #10
 8004a16:	e011      	b.n	8004a3c <_puts_r+0x88>
 8004a18:	4b1b      	ldr	r3, [pc, #108]	; (8004a88 <_puts_r+0xd4>)
 8004a1a:	429c      	cmp	r4, r3
 8004a1c:	d101      	bne.n	8004a22 <_puts_r+0x6e>
 8004a1e:	68ac      	ldr	r4, [r5, #8]
 8004a20:	e7da      	b.n	80049d8 <_puts_r+0x24>
 8004a22:	4b1a      	ldr	r3, [pc, #104]	; (8004a8c <_puts_r+0xd8>)
 8004a24:	429c      	cmp	r4, r3
 8004a26:	bf08      	it	eq
 8004a28:	68ec      	ldreq	r4, [r5, #12]
 8004a2a:	e7d5      	b.n	80049d8 <_puts_r+0x24>
 8004a2c:	4621      	mov	r1, r4
 8004a2e:	4628      	mov	r0, r5
 8004a30:	f000 f8c0 	bl	8004bb4 <__swsetup_r>
 8004a34:	2800      	cmp	r0, #0
 8004a36:	d0dd      	beq.n	80049f4 <_puts_r+0x40>
 8004a38:	f04f 35ff 	mov.w	r5, #4294967295
 8004a3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a3e:	07da      	lsls	r2, r3, #31
 8004a40:	d405      	bmi.n	8004a4e <_puts_r+0x9a>
 8004a42:	89a3      	ldrh	r3, [r4, #12]
 8004a44:	059b      	lsls	r3, r3, #22
 8004a46:	d402      	bmi.n	8004a4e <_puts_r+0x9a>
 8004a48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a4a:	f000 fada 	bl	8005002 <__retarget_lock_release_recursive>
 8004a4e:	4628      	mov	r0, r5
 8004a50:	bd70      	pop	{r4, r5, r6, pc}
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	da04      	bge.n	8004a60 <_puts_r+0xac>
 8004a56:	69a2      	ldr	r2, [r4, #24]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	dc06      	bgt.n	8004a6a <_puts_r+0xb6>
 8004a5c:	290a      	cmp	r1, #10
 8004a5e:	d004      	beq.n	8004a6a <_puts_r+0xb6>
 8004a60:	6823      	ldr	r3, [r4, #0]
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	6022      	str	r2, [r4, #0]
 8004a66:	7019      	strb	r1, [r3, #0]
 8004a68:	e7c5      	b.n	80049f6 <_puts_r+0x42>
 8004a6a:	4622      	mov	r2, r4
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	f000 f84f 	bl	8004b10 <__swbuf_r>
 8004a72:	3001      	adds	r0, #1
 8004a74:	d1bf      	bne.n	80049f6 <_puts_r+0x42>
 8004a76:	e7df      	b.n	8004a38 <_puts_r+0x84>
 8004a78:	6823      	ldr	r3, [r4, #0]
 8004a7a:	250a      	movs	r5, #10
 8004a7c:	1c5a      	adds	r2, r3, #1
 8004a7e:	6022      	str	r2, [r4, #0]
 8004a80:	701d      	strb	r5, [r3, #0]
 8004a82:	e7db      	b.n	8004a3c <_puts_r+0x88>
 8004a84:	08006350 	.word	0x08006350
 8004a88:	08006370 	.word	0x08006370
 8004a8c:	08006330 	.word	0x08006330

08004a90 <puts>:
 8004a90:	4b02      	ldr	r3, [pc, #8]	; (8004a9c <puts+0xc>)
 8004a92:	4601      	mov	r1, r0
 8004a94:	6818      	ldr	r0, [r3, #0]
 8004a96:	f7ff bf8d 	b.w	80049b4 <_puts_r>
 8004a9a:	bf00      	nop
 8004a9c:	2000000c 	.word	0x2000000c

08004aa0 <siprintf>:
 8004aa0:	b40e      	push	{r1, r2, r3}
 8004aa2:	b500      	push	{lr}
 8004aa4:	b09c      	sub	sp, #112	; 0x70
 8004aa6:	ab1d      	add	r3, sp, #116	; 0x74
 8004aa8:	9002      	str	r0, [sp, #8]
 8004aaa:	9006      	str	r0, [sp, #24]
 8004aac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ab0:	4809      	ldr	r0, [pc, #36]	; (8004ad8 <siprintf+0x38>)
 8004ab2:	9107      	str	r1, [sp, #28]
 8004ab4:	9104      	str	r1, [sp, #16]
 8004ab6:	4909      	ldr	r1, [pc, #36]	; (8004adc <siprintf+0x3c>)
 8004ab8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004abc:	9105      	str	r1, [sp, #20]
 8004abe:	6800      	ldr	r0, [r0, #0]
 8004ac0:	9301      	str	r3, [sp, #4]
 8004ac2:	a902      	add	r1, sp, #8
 8004ac4:	f000 fc08 	bl	80052d8 <_svfiprintf_r>
 8004ac8:	9b02      	ldr	r3, [sp, #8]
 8004aca:	2200      	movs	r2, #0
 8004acc:	701a      	strb	r2, [r3, #0]
 8004ace:	b01c      	add	sp, #112	; 0x70
 8004ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ad4:	b003      	add	sp, #12
 8004ad6:	4770      	bx	lr
 8004ad8:	2000000c 	.word	0x2000000c
 8004adc:	ffff0208 	.word	0xffff0208

08004ae0 <strstr>:
 8004ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ae2:	780c      	ldrb	r4, [r1, #0]
 8004ae4:	b164      	cbz	r4, 8004b00 <strstr+0x20>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	781a      	ldrb	r2, [r3, #0]
 8004aea:	4618      	mov	r0, r3
 8004aec:	1c5e      	adds	r6, r3, #1
 8004aee:	b90a      	cbnz	r2, 8004af4 <strstr+0x14>
 8004af0:	4610      	mov	r0, r2
 8004af2:	e005      	b.n	8004b00 <strstr+0x20>
 8004af4:	4294      	cmp	r4, r2
 8004af6:	d108      	bne.n	8004b0a <strstr+0x2a>
 8004af8:	460d      	mov	r5, r1
 8004afa:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8004afe:	b902      	cbnz	r2, 8004b02 <strstr+0x22>
 8004b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b02:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8004b06:	4297      	cmp	r7, r2
 8004b08:	d0f7      	beq.n	8004afa <strstr+0x1a>
 8004b0a:	4633      	mov	r3, r6
 8004b0c:	e7ec      	b.n	8004ae8 <strstr+0x8>
	...

08004b10 <__swbuf_r>:
 8004b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b12:	460e      	mov	r6, r1
 8004b14:	4614      	mov	r4, r2
 8004b16:	4605      	mov	r5, r0
 8004b18:	b118      	cbz	r0, 8004b22 <__swbuf_r+0x12>
 8004b1a:	6983      	ldr	r3, [r0, #24]
 8004b1c:	b90b      	cbnz	r3, 8004b22 <__swbuf_r+0x12>
 8004b1e:	f000 f9d1 	bl	8004ec4 <__sinit>
 8004b22:	4b21      	ldr	r3, [pc, #132]	; (8004ba8 <__swbuf_r+0x98>)
 8004b24:	429c      	cmp	r4, r3
 8004b26:	d12b      	bne.n	8004b80 <__swbuf_r+0x70>
 8004b28:	686c      	ldr	r4, [r5, #4]
 8004b2a:	69a3      	ldr	r3, [r4, #24]
 8004b2c:	60a3      	str	r3, [r4, #8]
 8004b2e:	89a3      	ldrh	r3, [r4, #12]
 8004b30:	071a      	lsls	r2, r3, #28
 8004b32:	d52f      	bpl.n	8004b94 <__swbuf_r+0x84>
 8004b34:	6923      	ldr	r3, [r4, #16]
 8004b36:	b36b      	cbz	r3, 8004b94 <__swbuf_r+0x84>
 8004b38:	6923      	ldr	r3, [r4, #16]
 8004b3a:	6820      	ldr	r0, [r4, #0]
 8004b3c:	1ac0      	subs	r0, r0, r3
 8004b3e:	6963      	ldr	r3, [r4, #20]
 8004b40:	b2f6      	uxtb	r6, r6
 8004b42:	4283      	cmp	r3, r0
 8004b44:	4637      	mov	r7, r6
 8004b46:	dc04      	bgt.n	8004b52 <__swbuf_r+0x42>
 8004b48:	4621      	mov	r1, r4
 8004b4a:	4628      	mov	r0, r5
 8004b4c:	f000 f926 	bl	8004d9c <_fflush_r>
 8004b50:	bb30      	cbnz	r0, 8004ba0 <__swbuf_r+0x90>
 8004b52:	68a3      	ldr	r3, [r4, #8]
 8004b54:	3b01      	subs	r3, #1
 8004b56:	60a3      	str	r3, [r4, #8]
 8004b58:	6823      	ldr	r3, [r4, #0]
 8004b5a:	1c5a      	adds	r2, r3, #1
 8004b5c:	6022      	str	r2, [r4, #0]
 8004b5e:	701e      	strb	r6, [r3, #0]
 8004b60:	6963      	ldr	r3, [r4, #20]
 8004b62:	3001      	adds	r0, #1
 8004b64:	4283      	cmp	r3, r0
 8004b66:	d004      	beq.n	8004b72 <__swbuf_r+0x62>
 8004b68:	89a3      	ldrh	r3, [r4, #12]
 8004b6a:	07db      	lsls	r3, r3, #31
 8004b6c:	d506      	bpl.n	8004b7c <__swbuf_r+0x6c>
 8004b6e:	2e0a      	cmp	r6, #10
 8004b70:	d104      	bne.n	8004b7c <__swbuf_r+0x6c>
 8004b72:	4621      	mov	r1, r4
 8004b74:	4628      	mov	r0, r5
 8004b76:	f000 f911 	bl	8004d9c <_fflush_r>
 8004b7a:	b988      	cbnz	r0, 8004ba0 <__swbuf_r+0x90>
 8004b7c:	4638      	mov	r0, r7
 8004b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b80:	4b0a      	ldr	r3, [pc, #40]	; (8004bac <__swbuf_r+0x9c>)
 8004b82:	429c      	cmp	r4, r3
 8004b84:	d101      	bne.n	8004b8a <__swbuf_r+0x7a>
 8004b86:	68ac      	ldr	r4, [r5, #8]
 8004b88:	e7cf      	b.n	8004b2a <__swbuf_r+0x1a>
 8004b8a:	4b09      	ldr	r3, [pc, #36]	; (8004bb0 <__swbuf_r+0xa0>)
 8004b8c:	429c      	cmp	r4, r3
 8004b8e:	bf08      	it	eq
 8004b90:	68ec      	ldreq	r4, [r5, #12]
 8004b92:	e7ca      	b.n	8004b2a <__swbuf_r+0x1a>
 8004b94:	4621      	mov	r1, r4
 8004b96:	4628      	mov	r0, r5
 8004b98:	f000 f80c 	bl	8004bb4 <__swsetup_r>
 8004b9c:	2800      	cmp	r0, #0
 8004b9e:	d0cb      	beq.n	8004b38 <__swbuf_r+0x28>
 8004ba0:	f04f 37ff 	mov.w	r7, #4294967295
 8004ba4:	e7ea      	b.n	8004b7c <__swbuf_r+0x6c>
 8004ba6:	bf00      	nop
 8004ba8:	08006350 	.word	0x08006350
 8004bac:	08006370 	.word	0x08006370
 8004bb0:	08006330 	.word	0x08006330

08004bb4 <__swsetup_r>:
 8004bb4:	4b32      	ldr	r3, [pc, #200]	; (8004c80 <__swsetup_r+0xcc>)
 8004bb6:	b570      	push	{r4, r5, r6, lr}
 8004bb8:	681d      	ldr	r5, [r3, #0]
 8004bba:	4606      	mov	r6, r0
 8004bbc:	460c      	mov	r4, r1
 8004bbe:	b125      	cbz	r5, 8004bca <__swsetup_r+0x16>
 8004bc0:	69ab      	ldr	r3, [r5, #24]
 8004bc2:	b913      	cbnz	r3, 8004bca <__swsetup_r+0x16>
 8004bc4:	4628      	mov	r0, r5
 8004bc6:	f000 f97d 	bl	8004ec4 <__sinit>
 8004bca:	4b2e      	ldr	r3, [pc, #184]	; (8004c84 <__swsetup_r+0xd0>)
 8004bcc:	429c      	cmp	r4, r3
 8004bce:	d10f      	bne.n	8004bf0 <__swsetup_r+0x3c>
 8004bd0:	686c      	ldr	r4, [r5, #4]
 8004bd2:	89a3      	ldrh	r3, [r4, #12]
 8004bd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004bd8:	0719      	lsls	r1, r3, #28
 8004bda:	d42c      	bmi.n	8004c36 <__swsetup_r+0x82>
 8004bdc:	06dd      	lsls	r5, r3, #27
 8004bde:	d411      	bmi.n	8004c04 <__swsetup_r+0x50>
 8004be0:	2309      	movs	r3, #9
 8004be2:	6033      	str	r3, [r6, #0]
 8004be4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004be8:	81a3      	strh	r3, [r4, #12]
 8004bea:	f04f 30ff 	mov.w	r0, #4294967295
 8004bee:	e03e      	b.n	8004c6e <__swsetup_r+0xba>
 8004bf0:	4b25      	ldr	r3, [pc, #148]	; (8004c88 <__swsetup_r+0xd4>)
 8004bf2:	429c      	cmp	r4, r3
 8004bf4:	d101      	bne.n	8004bfa <__swsetup_r+0x46>
 8004bf6:	68ac      	ldr	r4, [r5, #8]
 8004bf8:	e7eb      	b.n	8004bd2 <__swsetup_r+0x1e>
 8004bfa:	4b24      	ldr	r3, [pc, #144]	; (8004c8c <__swsetup_r+0xd8>)
 8004bfc:	429c      	cmp	r4, r3
 8004bfe:	bf08      	it	eq
 8004c00:	68ec      	ldreq	r4, [r5, #12]
 8004c02:	e7e6      	b.n	8004bd2 <__swsetup_r+0x1e>
 8004c04:	0758      	lsls	r0, r3, #29
 8004c06:	d512      	bpl.n	8004c2e <__swsetup_r+0x7a>
 8004c08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c0a:	b141      	cbz	r1, 8004c1e <__swsetup_r+0x6a>
 8004c0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c10:	4299      	cmp	r1, r3
 8004c12:	d002      	beq.n	8004c1a <__swsetup_r+0x66>
 8004c14:	4630      	mov	r0, r6
 8004c16:	f000 fa59 	bl	80050cc <_free_r>
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	6363      	str	r3, [r4, #52]	; 0x34
 8004c1e:	89a3      	ldrh	r3, [r4, #12]
 8004c20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c24:	81a3      	strh	r3, [r4, #12]
 8004c26:	2300      	movs	r3, #0
 8004c28:	6063      	str	r3, [r4, #4]
 8004c2a:	6923      	ldr	r3, [r4, #16]
 8004c2c:	6023      	str	r3, [r4, #0]
 8004c2e:	89a3      	ldrh	r3, [r4, #12]
 8004c30:	f043 0308 	orr.w	r3, r3, #8
 8004c34:	81a3      	strh	r3, [r4, #12]
 8004c36:	6923      	ldr	r3, [r4, #16]
 8004c38:	b94b      	cbnz	r3, 8004c4e <__swsetup_r+0x9a>
 8004c3a:	89a3      	ldrh	r3, [r4, #12]
 8004c3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c44:	d003      	beq.n	8004c4e <__swsetup_r+0x9a>
 8004c46:	4621      	mov	r1, r4
 8004c48:	4630      	mov	r0, r6
 8004c4a:	f000 f9ff 	bl	800504c <__smakebuf_r>
 8004c4e:	89a0      	ldrh	r0, [r4, #12]
 8004c50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c54:	f010 0301 	ands.w	r3, r0, #1
 8004c58:	d00a      	beq.n	8004c70 <__swsetup_r+0xbc>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	60a3      	str	r3, [r4, #8]
 8004c5e:	6963      	ldr	r3, [r4, #20]
 8004c60:	425b      	negs	r3, r3
 8004c62:	61a3      	str	r3, [r4, #24]
 8004c64:	6923      	ldr	r3, [r4, #16]
 8004c66:	b943      	cbnz	r3, 8004c7a <__swsetup_r+0xc6>
 8004c68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c6c:	d1ba      	bne.n	8004be4 <__swsetup_r+0x30>
 8004c6e:	bd70      	pop	{r4, r5, r6, pc}
 8004c70:	0781      	lsls	r1, r0, #30
 8004c72:	bf58      	it	pl
 8004c74:	6963      	ldrpl	r3, [r4, #20]
 8004c76:	60a3      	str	r3, [r4, #8]
 8004c78:	e7f4      	b.n	8004c64 <__swsetup_r+0xb0>
 8004c7a:	2000      	movs	r0, #0
 8004c7c:	e7f7      	b.n	8004c6e <__swsetup_r+0xba>
 8004c7e:	bf00      	nop
 8004c80:	2000000c 	.word	0x2000000c
 8004c84:	08006350 	.word	0x08006350
 8004c88:	08006370 	.word	0x08006370
 8004c8c:	08006330 	.word	0x08006330

08004c90 <__sflush_r>:
 8004c90:	898a      	ldrh	r2, [r1, #12]
 8004c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c96:	4605      	mov	r5, r0
 8004c98:	0710      	lsls	r0, r2, #28
 8004c9a:	460c      	mov	r4, r1
 8004c9c:	d458      	bmi.n	8004d50 <__sflush_r+0xc0>
 8004c9e:	684b      	ldr	r3, [r1, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	dc05      	bgt.n	8004cb0 <__sflush_r+0x20>
 8004ca4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	dc02      	bgt.n	8004cb0 <__sflush_r+0x20>
 8004caa:	2000      	movs	r0, #0
 8004cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004cb2:	2e00      	cmp	r6, #0
 8004cb4:	d0f9      	beq.n	8004caa <__sflush_r+0x1a>
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004cbc:	682f      	ldr	r7, [r5, #0]
 8004cbe:	602b      	str	r3, [r5, #0]
 8004cc0:	d032      	beq.n	8004d28 <__sflush_r+0x98>
 8004cc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004cc4:	89a3      	ldrh	r3, [r4, #12]
 8004cc6:	075a      	lsls	r2, r3, #29
 8004cc8:	d505      	bpl.n	8004cd6 <__sflush_r+0x46>
 8004cca:	6863      	ldr	r3, [r4, #4]
 8004ccc:	1ac0      	subs	r0, r0, r3
 8004cce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004cd0:	b10b      	cbz	r3, 8004cd6 <__sflush_r+0x46>
 8004cd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004cd4:	1ac0      	subs	r0, r0, r3
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	4602      	mov	r2, r0
 8004cda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004cdc:	6a21      	ldr	r1, [r4, #32]
 8004cde:	4628      	mov	r0, r5
 8004ce0:	47b0      	blx	r6
 8004ce2:	1c43      	adds	r3, r0, #1
 8004ce4:	89a3      	ldrh	r3, [r4, #12]
 8004ce6:	d106      	bne.n	8004cf6 <__sflush_r+0x66>
 8004ce8:	6829      	ldr	r1, [r5, #0]
 8004cea:	291d      	cmp	r1, #29
 8004cec:	d82c      	bhi.n	8004d48 <__sflush_r+0xb8>
 8004cee:	4a2a      	ldr	r2, [pc, #168]	; (8004d98 <__sflush_r+0x108>)
 8004cf0:	40ca      	lsrs	r2, r1
 8004cf2:	07d6      	lsls	r6, r2, #31
 8004cf4:	d528      	bpl.n	8004d48 <__sflush_r+0xb8>
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	6062      	str	r2, [r4, #4]
 8004cfa:	04d9      	lsls	r1, r3, #19
 8004cfc:	6922      	ldr	r2, [r4, #16]
 8004cfe:	6022      	str	r2, [r4, #0]
 8004d00:	d504      	bpl.n	8004d0c <__sflush_r+0x7c>
 8004d02:	1c42      	adds	r2, r0, #1
 8004d04:	d101      	bne.n	8004d0a <__sflush_r+0x7a>
 8004d06:	682b      	ldr	r3, [r5, #0]
 8004d08:	b903      	cbnz	r3, 8004d0c <__sflush_r+0x7c>
 8004d0a:	6560      	str	r0, [r4, #84]	; 0x54
 8004d0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d0e:	602f      	str	r7, [r5, #0]
 8004d10:	2900      	cmp	r1, #0
 8004d12:	d0ca      	beq.n	8004caa <__sflush_r+0x1a>
 8004d14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d18:	4299      	cmp	r1, r3
 8004d1a:	d002      	beq.n	8004d22 <__sflush_r+0x92>
 8004d1c:	4628      	mov	r0, r5
 8004d1e:	f000 f9d5 	bl	80050cc <_free_r>
 8004d22:	2000      	movs	r0, #0
 8004d24:	6360      	str	r0, [r4, #52]	; 0x34
 8004d26:	e7c1      	b.n	8004cac <__sflush_r+0x1c>
 8004d28:	6a21      	ldr	r1, [r4, #32]
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	4628      	mov	r0, r5
 8004d2e:	47b0      	blx	r6
 8004d30:	1c41      	adds	r1, r0, #1
 8004d32:	d1c7      	bne.n	8004cc4 <__sflush_r+0x34>
 8004d34:	682b      	ldr	r3, [r5, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d0c4      	beq.n	8004cc4 <__sflush_r+0x34>
 8004d3a:	2b1d      	cmp	r3, #29
 8004d3c:	d001      	beq.n	8004d42 <__sflush_r+0xb2>
 8004d3e:	2b16      	cmp	r3, #22
 8004d40:	d101      	bne.n	8004d46 <__sflush_r+0xb6>
 8004d42:	602f      	str	r7, [r5, #0]
 8004d44:	e7b1      	b.n	8004caa <__sflush_r+0x1a>
 8004d46:	89a3      	ldrh	r3, [r4, #12]
 8004d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d4c:	81a3      	strh	r3, [r4, #12]
 8004d4e:	e7ad      	b.n	8004cac <__sflush_r+0x1c>
 8004d50:	690f      	ldr	r7, [r1, #16]
 8004d52:	2f00      	cmp	r7, #0
 8004d54:	d0a9      	beq.n	8004caa <__sflush_r+0x1a>
 8004d56:	0793      	lsls	r3, r2, #30
 8004d58:	680e      	ldr	r6, [r1, #0]
 8004d5a:	bf08      	it	eq
 8004d5c:	694b      	ldreq	r3, [r1, #20]
 8004d5e:	600f      	str	r7, [r1, #0]
 8004d60:	bf18      	it	ne
 8004d62:	2300      	movne	r3, #0
 8004d64:	eba6 0807 	sub.w	r8, r6, r7
 8004d68:	608b      	str	r3, [r1, #8]
 8004d6a:	f1b8 0f00 	cmp.w	r8, #0
 8004d6e:	dd9c      	ble.n	8004caa <__sflush_r+0x1a>
 8004d70:	6a21      	ldr	r1, [r4, #32]
 8004d72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d74:	4643      	mov	r3, r8
 8004d76:	463a      	mov	r2, r7
 8004d78:	4628      	mov	r0, r5
 8004d7a:	47b0      	blx	r6
 8004d7c:	2800      	cmp	r0, #0
 8004d7e:	dc06      	bgt.n	8004d8e <__sflush_r+0xfe>
 8004d80:	89a3      	ldrh	r3, [r4, #12]
 8004d82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d86:	81a3      	strh	r3, [r4, #12]
 8004d88:	f04f 30ff 	mov.w	r0, #4294967295
 8004d8c:	e78e      	b.n	8004cac <__sflush_r+0x1c>
 8004d8e:	4407      	add	r7, r0
 8004d90:	eba8 0800 	sub.w	r8, r8, r0
 8004d94:	e7e9      	b.n	8004d6a <__sflush_r+0xda>
 8004d96:	bf00      	nop
 8004d98:	20400001 	.word	0x20400001

08004d9c <_fflush_r>:
 8004d9c:	b538      	push	{r3, r4, r5, lr}
 8004d9e:	690b      	ldr	r3, [r1, #16]
 8004da0:	4605      	mov	r5, r0
 8004da2:	460c      	mov	r4, r1
 8004da4:	b913      	cbnz	r3, 8004dac <_fflush_r+0x10>
 8004da6:	2500      	movs	r5, #0
 8004da8:	4628      	mov	r0, r5
 8004daa:	bd38      	pop	{r3, r4, r5, pc}
 8004dac:	b118      	cbz	r0, 8004db6 <_fflush_r+0x1a>
 8004dae:	6983      	ldr	r3, [r0, #24]
 8004db0:	b90b      	cbnz	r3, 8004db6 <_fflush_r+0x1a>
 8004db2:	f000 f887 	bl	8004ec4 <__sinit>
 8004db6:	4b14      	ldr	r3, [pc, #80]	; (8004e08 <_fflush_r+0x6c>)
 8004db8:	429c      	cmp	r4, r3
 8004dba:	d11b      	bne.n	8004df4 <_fflush_r+0x58>
 8004dbc:	686c      	ldr	r4, [r5, #4]
 8004dbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d0ef      	beq.n	8004da6 <_fflush_r+0xa>
 8004dc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004dc8:	07d0      	lsls	r0, r2, #31
 8004dca:	d404      	bmi.n	8004dd6 <_fflush_r+0x3a>
 8004dcc:	0599      	lsls	r1, r3, #22
 8004dce:	d402      	bmi.n	8004dd6 <_fflush_r+0x3a>
 8004dd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dd2:	f000 f915 	bl	8005000 <__retarget_lock_acquire_recursive>
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	4621      	mov	r1, r4
 8004dda:	f7ff ff59 	bl	8004c90 <__sflush_r>
 8004dde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004de0:	07da      	lsls	r2, r3, #31
 8004de2:	4605      	mov	r5, r0
 8004de4:	d4e0      	bmi.n	8004da8 <_fflush_r+0xc>
 8004de6:	89a3      	ldrh	r3, [r4, #12]
 8004de8:	059b      	lsls	r3, r3, #22
 8004dea:	d4dd      	bmi.n	8004da8 <_fflush_r+0xc>
 8004dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dee:	f000 f908 	bl	8005002 <__retarget_lock_release_recursive>
 8004df2:	e7d9      	b.n	8004da8 <_fflush_r+0xc>
 8004df4:	4b05      	ldr	r3, [pc, #20]	; (8004e0c <_fflush_r+0x70>)
 8004df6:	429c      	cmp	r4, r3
 8004df8:	d101      	bne.n	8004dfe <_fflush_r+0x62>
 8004dfa:	68ac      	ldr	r4, [r5, #8]
 8004dfc:	e7df      	b.n	8004dbe <_fflush_r+0x22>
 8004dfe:	4b04      	ldr	r3, [pc, #16]	; (8004e10 <_fflush_r+0x74>)
 8004e00:	429c      	cmp	r4, r3
 8004e02:	bf08      	it	eq
 8004e04:	68ec      	ldreq	r4, [r5, #12]
 8004e06:	e7da      	b.n	8004dbe <_fflush_r+0x22>
 8004e08:	08006350 	.word	0x08006350
 8004e0c:	08006370 	.word	0x08006370
 8004e10:	08006330 	.word	0x08006330

08004e14 <std>:
 8004e14:	2300      	movs	r3, #0
 8004e16:	b510      	push	{r4, lr}
 8004e18:	4604      	mov	r4, r0
 8004e1a:	e9c0 3300 	strd	r3, r3, [r0]
 8004e1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e22:	6083      	str	r3, [r0, #8]
 8004e24:	8181      	strh	r1, [r0, #12]
 8004e26:	6643      	str	r3, [r0, #100]	; 0x64
 8004e28:	81c2      	strh	r2, [r0, #14]
 8004e2a:	6183      	str	r3, [r0, #24]
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	2208      	movs	r2, #8
 8004e30:	305c      	adds	r0, #92	; 0x5c
 8004e32:	f7ff fd89 	bl	8004948 <memset>
 8004e36:	4b05      	ldr	r3, [pc, #20]	; (8004e4c <std+0x38>)
 8004e38:	6263      	str	r3, [r4, #36]	; 0x24
 8004e3a:	4b05      	ldr	r3, [pc, #20]	; (8004e50 <std+0x3c>)
 8004e3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e3e:	4b05      	ldr	r3, [pc, #20]	; (8004e54 <std+0x40>)
 8004e40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e42:	4b05      	ldr	r3, [pc, #20]	; (8004e58 <std+0x44>)
 8004e44:	6224      	str	r4, [r4, #32]
 8004e46:	6323      	str	r3, [r4, #48]	; 0x30
 8004e48:	bd10      	pop	{r4, pc}
 8004e4a:	bf00      	nop
 8004e4c:	08005b65 	.word	0x08005b65
 8004e50:	08005b87 	.word	0x08005b87
 8004e54:	08005bbf 	.word	0x08005bbf
 8004e58:	08005be3 	.word	0x08005be3

08004e5c <_cleanup_r>:
 8004e5c:	4901      	ldr	r1, [pc, #4]	; (8004e64 <_cleanup_r+0x8>)
 8004e5e:	f000 b8af 	b.w	8004fc0 <_fwalk_reent>
 8004e62:	bf00      	nop
 8004e64:	08004d9d 	.word	0x08004d9d

08004e68 <__sfmoreglue>:
 8004e68:	b570      	push	{r4, r5, r6, lr}
 8004e6a:	1e4a      	subs	r2, r1, #1
 8004e6c:	2568      	movs	r5, #104	; 0x68
 8004e6e:	4355      	muls	r5, r2
 8004e70:	460e      	mov	r6, r1
 8004e72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004e76:	f000 f979 	bl	800516c <_malloc_r>
 8004e7a:	4604      	mov	r4, r0
 8004e7c:	b140      	cbz	r0, 8004e90 <__sfmoreglue+0x28>
 8004e7e:	2100      	movs	r1, #0
 8004e80:	e9c0 1600 	strd	r1, r6, [r0]
 8004e84:	300c      	adds	r0, #12
 8004e86:	60a0      	str	r0, [r4, #8]
 8004e88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004e8c:	f7ff fd5c 	bl	8004948 <memset>
 8004e90:	4620      	mov	r0, r4
 8004e92:	bd70      	pop	{r4, r5, r6, pc}

08004e94 <__sfp_lock_acquire>:
 8004e94:	4801      	ldr	r0, [pc, #4]	; (8004e9c <__sfp_lock_acquire+0x8>)
 8004e96:	f000 b8b3 	b.w	8005000 <__retarget_lock_acquire_recursive>
 8004e9a:	bf00      	nop
 8004e9c:	200011b4 	.word	0x200011b4

08004ea0 <__sfp_lock_release>:
 8004ea0:	4801      	ldr	r0, [pc, #4]	; (8004ea8 <__sfp_lock_release+0x8>)
 8004ea2:	f000 b8ae 	b.w	8005002 <__retarget_lock_release_recursive>
 8004ea6:	bf00      	nop
 8004ea8:	200011b4 	.word	0x200011b4

08004eac <__sinit_lock_acquire>:
 8004eac:	4801      	ldr	r0, [pc, #4]	; (8004eb4 <__sinit_lock_acquire+0x8>)
 8004eae:	f000 b8a7 	b.w	8005000 <__retarget_lock_acquire_recursive>
 8004eb2:	bf00      	nop
 8004eb4:	200011af 	.word	0x200011af

08004eb8 <__sinit_lock_release>:
 8004eb8:	4801      	ldr	r0, [pc, #4]	; (8004ec0 <__sinit_lock_release+0x8>)
 8004eba:	f000 b8a2 	b.w	8005002 <__retarget_lock_release_recursive>
 8004ebe:	bf00      	nop
 8004ec0:	200011af 	.word	0x200011af

08004ec4 <__sinit>:
 8004ec4:	b510      	push	{r4, lr}
 8004ec6:	4604      	mov	r4, r0
 8004ec8:	f7ff fff0 	bl	8004eac <__sinit_lock_acquire>
 8004ecc:	69a3      	ldr	r3, [r4, #24]
 8004ece:	b11b      	cbz	r3, 8004ed8 <__sinit+0x14>
 8004ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ed4:	f7ff bff0 	b.w	8004eb8 <__sinit_lock_release>
 8004ed8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004edc:	6523      	str	r3, [r4, #80]	; 0x50
 8004ede:	4b13      	ldr	r3, [pc, #76]	; (8004f2c <__sinit+0x68>)
 8004ee0:	4a13      	ldr	r2, [pc, #76]	; (8004f30 <__sinit+0x6c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	62a2      	str	r2, [r4, #40]	; 0x28
 8004ee6:	42a3      	cmp	r3, r4
 8004ee8:	bf04      	itt	eq
 8004eea:	2301      	moveq	r3, #1
 8004eec:	61a3      	streq	r3, [r4, #24]
 8004eee:	4620      	mov	r0, r4
 8004ef0:	f000 f820 	bl	8004f34 <__sfp>
 8004ef4:	6060      	str	r0, [r4, #4]
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	f000 f81c 	bl	8004f34 <__sfp>
 8004efc:	60a0      	str	r0, [r4, #8]
 8004efe:	4620      	mov	r0, r4
 8004f00:	f000 f818 	bl	8004f34 <__sfp>
 8004f04:	2200      	movs	r2, #0
 8004f06:	60e0      	str	r0, [r4, #12]
 8004f08:	2104      	movs	r1, #4
 8004f0a:	6860      	ldr	r0, [r4, #4]
 8004f0c:	f7ff ff82 	bl	8004e14 <std>
 8004f10:	68a0      	ldr	r0, [r4, #8]
 8004f12:	2201      	movs	r2, #1
 8004f14:	2109      	movs	r1, #9
 8004f16:	f7ff ff7d 	bl	8004e14 <std>
 8004f1a:	68e0      	ldr	r0, [r4, #12]
 8004f1c:	2202      	movs	r2, #2
 8004f1e:	2112      	movs	r1, #18
 8004f20:	f7ff ff78 	bl	8004e14 <std>
 8004f24:	2301      	movs	r3, #1
 8004f26:	61a3      	str	r3, [r4, #24]
 8004f28:	e7d2      	b.n	8004ed0 <__sinit+0xc>
 8004f2a:	bf00      	nop
 8004f2c:	0800632c 	.word	0x0800632c
 8004f30:	08004e5d 	.word	0x08004e5d

08004f34 <__sfp>:
 8004f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f36:	4607      	mov	r7, r0
 8004f38:	f7ff ffac 	bl	8004e94 <__sfp_lock_acquire>
 8004f3c:	4b1e      	ldr	r3, [pc, #120]	; (8004fb8 <__sfp+0x84>)
 8004f3e:	681e      	ldr	r6, [r3, #0]
 8004f40:	69b3      	ldr	r3, [r6, #24]
 8004f42:	b913      	cbnz	r3, 8004f4a <__sfp+0x16>
 8004f44:	4630      	mov	r0, r6
 8004f46:	f7ff ffbd 	bl	8004ec4 <__sinit>
 8004f4a:	3648      	adds	r6, #72	; 0x48
 8004f4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004f50:	3b01      	subs	r3, #1
 8004f52:	d503      	bpl.n	8004f5c <__sfp+0x28>
 8004f54:	6833      	ldr	r3, [r6, #0]
 8004f56:	b30b      	cbz	r3, 8004f9c <__sfp+0x68>
 8004f58:	6836      	ldr	r6, [r6, #0]
 8004f5a:	e7f7      	b.n	8004f4c <__sfp+0x18>
 8004f5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f60:	b9d5      	cbnz	r5, 8004f98 <__sfp+0x64>
 8004f62:	4b16      	ldr	r3, [pc, #88]	; (8004fbc <__sfp+0x88>)
 8004f64:	60e3      	str	r3, [r4, #12]
 8004f66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f6a:	6665      	str	r5, [r4, #100]	; 0x64
 8004f6c:	f000 f847 	bl	8004ffe <__retarget_lock_init_recursive>
 8004f70:	f7ff ff96 	bl	8004ea0 <__sfp_lock_release>
 8004f74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004f78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004f7c:	6025      	str	r5, [r4, #0]
 8004f7e:	61a5      	str	r5, [r4, #24]
 8004f80:	2208      	movs	r2, #8
 8004f82:	4629      	mov	r1, r5
 8004f84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004f88:	f7ff fcde 	bl	8004948 <memset>
 8004f8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004f90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004f94:	4620      	mov	r0, r4
 8004f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f98:	3468      	adds	r4, #104	; 0x68
 8004f9a:	e7d9      	b.n	8004f50 <__sfp+0x1c>
 8004f9c:	2104      	movs	r1, #4
 8004f9e:	4638      	mov	r0, r7
 8004fa0:	f7ff ff62 	bl	8004e68 <__sfmoreglue>
 8004fa4:	4604      	mov	r4, r0
 8004fa6:	6030      	str	r0, [r6, #0]
 8004fa8:	2800      	cmp	r0, #0
 8004faa:	d1d5      	bne.n	8004f58 <__sfp+0x24>
 8004fac:	f7ff ff78 	bl	8004ea0 <__sfp_lock_release>
 8004fb0:	230c      	movs	r3, #12
 8004fb2:	603b      	str	r3, [r7, #0]
 8004fb4:	e7ee      	b.n	8004f94 <__sfp+0x60>
 8004fb6:	bf00      	nop
 8004fb8:	0800632c 	.word	0x0800632c
 8004fbc:	ffff0001 	.word	0xffff0001

08004fc0 <_fwalk_reent>:
 8004fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fc4:	4606      	mov	r6, r0
 8004fc6:	4688      	mov	r8, r1
 8004fc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004fcc:	2700      	movs	r7, #0
 8004fce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004fd2:	f1b9 0901 	subs.w	r9, r9, #1
 8004fd6:	d505      	bpl.n	8004fe4 <_fwalk_reent+0x24>
 8004fd8:	6824      	ldr	r4, [r4, #0]
 8004fda:	2c00      	cmp	r4, #0
 8004fdc:	d1f7      	bne.n	8004fce <_fwalk_reent+0xe>
 8004fde:	4638      	mov	r0, r7
 8004fe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fe4:	89ab      	ldrh	r3, [r5, #12]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d907      	bls.n	8004ffa <_fwalk_reent+0x3a>
 8004fea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	d003      	beq.n	8004ffa <_fwalk_reent+0x3a>
 8004ff2:	4629      	mov	r1, r5
 8004ff4:	4630      	mov	r0, r6
 8004ff6:	47c0      	blx	r8
 8004ff8:	4307      	orrs	r7, r0
 8004ffa:	3568      	adds	r5, #104	; 0x68
 8004ffc:	e7e9      	b.n	8004fd2 <_fwalk_reent+0x12>

08004ffe <__retarget_lock_init_recursive>:
 8004ffe:	4770      	bx	lr

08005000 <__retarget_lock_acquire_recursive>:
 8005000:	4770      	bx	lr

08005002 <__retarget_lock_release_recursive>:
 8005002:	4770      	bx	lr

08005004 <__swhatbuf_r>:
 8005004:	b570      	push	{r4, r5, r6, lr}
 8005006:	460e      	mov	r6, r1
 8005008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800500c:	2900      	cmp	r1, #0
 800500e:	b096      	sub	sp, #88	; 0x58
 8005010:	4614      	mov	r4, r2
 8005012:	461d      	mov	r5, r3
 8005014:	da07      	bge.n	8005026 <__swhatbuf_r+0x22>
 8005016:	2300      	movs	r3, #0
 8005018:	602b      	str	r3, [r5, #0]
 800501a:	89b3      	ldrh	r3, [r6, #12]
 800501c:	061a      	lsls	r2, r3, #24
 800501e:	d410      	bmi.n	8005042 <__swhatbuf_r+0x3e>
 8005020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005024:	e00e      	b.n	8005044 <__swhatbuf_r+0x40>
 8005026:	466a      	mov	r2, sp
 8005028:	f000 fe02 	bl	8005c30 <_fstat_r>
 800502c:	2800      	cmp	r0, #0
 800502e:	dbf2      	blt.n	8005016 <__swhatbuf_r+0x12>
 8005030:	9a01      	ldr	r2, [sp, #4]
 8005032:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005036:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800503a:	425a      	negs	r2, r3
 800503c:	415a      	adcs	r2, r3
 800503e:	602a      	str	r2, [r5, #0]
 8005040:	e7ee      	b.n	8005020 <__swhatbuf_r+0x1c>
 8005042:	2340      	movs	r3, #64	; 0x40
 8005044:	2000      	movs	r0, #0
 8005046:	6023      	str	r3, [r4, #0]
 8005048:	b016      	add	sp, #88	; 0x58
 800504a:	bd70      	pop	{r4, r5, r6, pc}

0800504c <__smakebuf_r>:
 800504c:	898b      	ldrh	r3, [r1, #12]
 800504e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005050:	079d      	lsls	r5, r3, #30
 8005052:	4606      	mov	r6, r0
 8005054:	460c      	mov	r4, r1
 8005056:	d507      	bpl.n	8005068 <__smakebuf_r+0x1c>
 8005058:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800505c:	6023      	str	r3, [r4, #0]
 800505e:	6123      	str	r3, [r4, #16]
 8005060:	2301      	movs	r3, #1
 8005062:	6163      	str	r3, [r4, #20]
 8005064:	b002      	add	sp, #8
 8005066:	bd70      	pop	{r4, r5, r6, pc}
 8005068:	ab01      	add	r3, sp, #4
 800506a:	466a      	mov	r2, sp
 800506c:	f7ff ffca 	bl	8005004 <__swhatbuf_r>
 8005070:	9900      	ldr	r1, [sp, #0]
 8005072:	4605      	mov	r5, r0
 8005074:	4630      	mov	r0, r6
 8005076:	f000 f879 	bl	800516c <_malloc_r>
 800507a:	b948      	cbnz	r0, 8005090 <__smakebuf_r+0x44>
 800507c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005080:	059a      	lsls	r2, r3, #22
 8005082:	d4ef      	bmi.n	8005064 <__smakebuf_r+0x18>
 8005084:	f023 0303 	bic.w	r3, r3, #3
 8005088:	f043 0302 	orr.w	r3, r3, #2
 800508c:	81a3      	strh	r3, [r4, #12]
 800508e:	e7e3      	b.n	8005058 <__smakebuf_r+0xc>
 8005090:	4b0d      	ldr	r3, [pc, #52]	; (80050c8 <__smakebuf_r+0x7c>)
 8005092:	62b3      	str	r3, [r6, #40]	; 0x28
 8005094:	89a3      	ldrh	r3, [r4, #12]
 8005096:	6020      	str	r0, [r4, #0]
 8005098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800509c:	81a3      	strh	r3, [r4, #12]
 800509e:	9b00      	ldr	r3, [sp, #0]
 80050a0:	6163      	str	r3, [r4, #20]
 80050a2:	9b01      	ldr	r3, [sp, #4]
 80050a4:	6120      	str	r0, [r4, #16]
 80050a6:	b15b      	cbz	r3, 80050c0 <__smakebuf_r+0x74>
 80050a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050ac:	4630      	mov	r0, r6
 80050ae:	f000 fdd1 	bl	8005c54 <_isatty_r>
 80050b2:	b128      	cbz	r0, 80050c0 <__smakebuf_r+0x74>
 80050b4:	89a3      	ldrh	r3, [r4, #12]
 80050b6:	f023 0303 	bic.w	r3, r3, #3
 80050ba:	f043 0301 	orr.w	r3, r3, #1
 80050be:	81a3      	strh	r3, [r4, #12]
 80050c0:	89a0      	ldrh	r0, [r4, #12]
 80050c2:	4305      	orrs	r5, r0
 80050c4:	81a5      	strh	r5, [r4, #12]
 80050c6:	e7cd      	b.n	8005064 <__smakebuf_r+0x18>
 80050c8:	08004e5d 	.word	0x08004e5d

080050cc <_free_r>:
 80050cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050ce:	2900      	cmp	r1, #0
 80050d0:	d048      	beq.n	8005164 <_free_r+0x98>
 80050d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050d6:	9001      	str	r0, [sp, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f1a1 0404 	sub.w	r4, r1, #4
 80050de:	bfb8      	it	lt
 80050e0:	18e4      	addlt	r4, r4, r3
 80050e2:	f000 fdf3 	bl	8005ccc <__malloc_lock>
 80050e6:	4a20      	ldr	r2, [pc, #128]	; (8005168 <_free_r+0x9c>)
 80050e8:	9801      	ldr	r0, [sp, #4]
 80050ea:	6813      	ldr	r3, [r2, #0]
 80050ec:	4615      	mov	r5, r2
 80050ee:	b933      	cbnz	r3, 80050fe <_free_r+0x32>
 80050f0:	6063      	str	r3, [r4, #4]
 80050f2:	6014      	str	r4, [r2, #0]
 80050f4:	b003      	add	sp, #12
 80050f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050fa:	f000 bded 	b.w	8005cd8 <__malloc_unlock>
 80050fe:	42a3      	cmp	r3, r4
 8005100:	d90b      	bls.n	800511a <_free_r+0x4e>
 8005102:	6821      	ldr	r1, [r4, #0]
 8005104:	1862      	adds	r2, r4, r1
 8005106:	4293      	cmp	r3, r2
 8005108:	bf04      	itt	eq
 800510a:	681a      	ldreq	r2, [r3, #0]
 800510c:	685b      	ldreq	r3, [r3, #4]
 800510e:	6063      	str	r3, [r4, #4]
 8005110:	bf04      	itt	eq
 8005112:	1852      	addeq	r2, r2, r1
 8005114:	6022      	streq	r2, [r4, #0]
 8005116:	602c      	str	r4, [r5, #0]
 8005118:	e7ec      	b.n	80050f4 <_free_r+0x28>
 800511a:	461a      	mov	r2, r3
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	b10b      	cbz	r3, 8005124 <_free_r+0x58>
 8005120:	42a3      	cmp	r3, r4
 8005122:	d9fa      	bls.n	800511a <_free_r+0x4e>
 8005124:	6811      	ldr	r1, [r2, #0]
 8005126:	1855      	adds	r5, r2, r1
 8005128:	42a5      	cmp	r5, r4
 800512a:	d10b      	bne.n	8005144 <_free_r+0x78>
 800512c:	6824      	ldr	r4, [r4, #0]
 800512e:	4421      	add	r1, r4
 8005130:	1854      	adds	r4, r2, r1
 8005132:	42a3      	cmp	r3, r4
 8005134:	6011      	str	r1, [r2, #0]
 8005136:	d1dd      	bne.n	80050f4 <_free_r+0x28>
 8005138:	681c      	ldr	r4, [r3, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	6053      	str	r3, [r2, #4]
 800513e:	4421      	add	r1, r4
 8005140:	6011      	str	r1, [r2, #0]
 8005142:	e7d7      	b.n	80050f4 <_free_r+0x28>
 8005144:	d902      	bls.n	800514c <_free_r+0x80>
 8005146:	230c      	movs	r3, #12
 8005148:	6003      	str	r3, [r0, #0]
 800514a:	e7d3      	b.n	80050f4 <_free_r+0x28>
 800514c:	6825      	ldr	r5, [r4, #0]
 800514e:	1961      	adds	r1, r4, r5
 8005150:	428b      	cmp	r3, r1
 8005152:	bf04      	itt	eq
 8005154:	6819      	ldreq	r1, [r3, #0]
 8005156:	685b      	ldreq	r3, [r3, #4]
 8005158:	6063      	str	r3, [r4, #4]
 800515a:	bf04      	itt	eq
 800515c:	1949      	addeq	r1, r1, r5
 800515e:	6021      	streq	r1, [r4, #0]
 8005160:	6054      	str	r4, [r2, #4]
 8005162:	e7c7      	b.n	80050f4 <_free_r+0x28>
 8005164:	b003      	add	sp, #12
 8005166:	bd30      	pop	{r4, r5, pc}
 8005168:	20001098 	.word	0x20001098

0800516c <_malloc_r>:
 800516c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800516e:	1ccd      	adds	r5, r1, #3
 8005170:	f025 0503 	bic.w	r5, r5, #3
 8005174:	3508      	adds	r5, #8
 8005176:	2d0c      	cmp	r5, #12
 8005178:	bf38      	it	cc
 800517a:	250c      	movcc	r5, #12
 800517c:	2d00      	cmp	r5, #0
 800517e:	4606      	mov	r6, r0
 8005180:	db01      	blt.n	8005186 <_malloc_r+0x1a>
 8005182:	42a9      	cmp	r1, r5
 8005184:	d903      	bls.n	800518e <_malloc_r+0x22>
 8005186:	230c      	movs	r3, #12
 8005188:	6033      	str	r3, [r6, #0]
 800518a:	2000      	movs	r0, #0
 800518c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800518e:	f000 fd9d 	bl	8005ccc <__malloc_lock>
 8005192:	4921      	ldr	r1, [pc, #132]	; (8005218 <_malloc_r+0xac>)
 8005194:	680a      	ldr	r2, [r1, #0]
 8005196:	4614      	mov	r4, r2
 8005198:	b99c      	cbnz	r4, 80051c2 <_malloc_r+0x56>
 800519a:	4f20      	ldr	r7, [pc, #128]	; (800521c <_malloc_r+0xb0>)
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	b923      	cbnz	r3, 80051aa <_malloc_r+0x3e>
 80051a0:	4621      	mov	r1, r4
 80051a2:	4630      	mov	r0, r6
 80051a4:	f000 fcce 	bl	8005b44 <_sbrk_r>
 80051a8:	6038      	str	r0, [r7, #0]
 80051aa:	4629      	mov	r1, r5
 80051ac:	4630      	mov	r0, r6
 80051ae:	f000 fcc9 	bl	8005b44 <_sbrk_r>
 80051b2:	1c43      	adds	r3, r0, #1
 80051b4:	d123      	bne.n	80051fe <_malloc_r+0x92>
 80051b6:	230c      	movs	r3, #12
 80051b8:	6033      	str	r3, [r6, #0]
 80051ba:	4630      	mov	r0, r6
 80051bc:	f000 fd8c 	bl	8005cd8 <__malloc_unlock>
 80051c0:	e7e3      	b.n	800518a <_malloc_r+0x1e>
 80051c2:	6823      	ldr	r3, [r4, #0]
 80051c4:	1b5b      	subs	r3, r3, r5
 80051c6:	d417      	bmi.n	80051f8 <_malloc_r+0x8c>
 80051c8:	2b0b      	cmp	r3, #11
 80051ca:	d903      	bls.n	80051d4 <_malloc_r+0x68>
 80051cc:	6023      	str	r3, [r4, #0]
 80051ce:	441c      	add	r4, r3
 80051d0:	6025      	str	r5, [r4, #0]
 80051d2:	e004      	b.n	80051de <_malloc_r+0x72>
 80051d4:	6863      	ldr	r3, [r4, #4]
 80051d6:	42a2      	cmp	r2, r4
 80051d8:	bf0c      	ite	eq
 80051da:	600b      	streq	r3, [r1, #0]
 80051dc:	6053      	strne	r3, [r2, #4]
 80051de:	4630      	mov	r0, r6
 80051e0:	f000 fd7a 	bl	8005cd8 <__malloc_unlock>
 80051e4:	f104 000b 	add.w	r0, r4, #11
 80051e8:	1d23      	adds	r3, r4, #4
 80051ea:	f020 0007 	bic.w	r0, r0, #7
 80051ee:	1ac2      	subs	r2, r0, r3
 80051f0:	d0cc      	beq.n	800518c <_malloc_r+0x20>
 80051f2:	1a1b      	subs	r3, r3, r0
 80051f4:	50a3      	str	r3, [r4, r2]
 80051f6:	e7c9      	b.n	800518c <_malloc_r+0x20>
 80051f8:	4622      	mov	r2, r4
 80051fa:	6864      	ldr	r4, [r4, #4]
 80051fc:	e7cc      	b.n	8005198 <_malloc_r+0x2c>
 80051fe:	1cc4      	adds	r4, r0, #3
 8005200:	f024 0403 	bic.w	r4, r4, #3
 8005204:	42a0      	cmp	r0, r4
 8005206:	d0e3      	beq.n	80051d0 <_malloc_r+0x64>
 8005208:	1a21      	subs	r1, r4, r0
 800520a:	4630      	mov	r0, r6
 800520c:	f000 fc9a 	bl	8005b44 <_sbrk_r>
 8005210:	3001      	adds	r0, #1
 8005212:	d1dd      	bne.n	80051d0 <_malloc_r+0x64>
 8005214:	e7cf      	b.n	80051b6 <_malloc_r+0x4a>
 8005216:	bf00      	nop
 8005218:	20001098 	.word	0x20001098
 800521c:	2000109c 	.word	0x2000109c

08005220 <__ssputs_r>:
 8005220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005224:	688e      	ldr	r6, [r1, #8]
 8005226:	429e      	cmp	r6, r3
 8005228:	4682      	mov	sl, r0
 800522a:	460c      	mov	r4, r1
 800522c:	4690      	mov	r8, r2
 800522e:	461f      	mov	r7, r3
 8005230:	d838      	bhi.n	80052a4 <__ssputs_r+0x84>
 8005232:	898a      	ldrh	r2, [r1, #12]
 8005234:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005238:	d032      	beq.n	80052a0 <__ssputs_r+0x80>
 800523a:	6825      	ldr	r5, [r4, #0]
 800523c:	6909      	ldr	r1, [r1, #16]
 800523e:	eba5 0901 	sub.w	r9, r5, r1
 8005242:	6965      	ldr	r5, [r4, #20]
 8005244:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005248:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800524c:	3301      	adds	r3, #1
 800524e:	444b      	add	r3, r9
 8005250:	106d      	asrs	r5, r5, #1
 8005252:	429d      	cmp	r5, r3
 8005254:	bf38      	it	cc
 8005256:	461d      	movcc	r5, r3
 8005258:	0553      	lsls	r3, r2, #21
 800525a:	d531      	bpl.n	80052c0 <__ssputs_r+0xa0>
 800525c:	4629      	mov	r1, r5
 800525e:	f7ff ff85 	bl	800516c <_malloc_r>
 8005262:	4606      	mov	r6, r0
 8005264:	b950      	cbnz	r0, 800527c <__ssputs_r+0x5c>
 8005266:	230c      	movs	r3, #12
 8005268:	f8ca 3000 	str.w	r3, [sl]
 800526c:	89a3      	ldrh	r3, [r4, #12]
 800526e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005272:	81a3      	strh	r3, [r4, #12]
 8005274:	f04f 30ff 	mov.w	r0, #4294967295
 8005278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800527c:	6921      	ldr	r1, [r4, #16]
 800527e:	464a      	mov	r2, r9
 8005280:	f7ff fb54 	bl	800492c <memcpy>
 8005284:	89a3      	ldrh	r3, [r4, #12]
 8005286:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800528a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800528e:	81a3      	strh	r3, [r4, #12]
 8005290:	6126      	str	r6, [r4, #16]
 8005292:	6165      	str	r5, [r4, #20]
 8005294:	444e      	add	r6, r9
 8005296:	eba5 0509 	sub.w	r5, r5, r9
 800529a:	6026      	str	r6, [r4, #0]
 800529c:	60a5      	str	r5, [r4, #8]
 800529e:	463e      	mov	r6, r7
 80052a0:	42be      	cmp	r6, r7
 80052a2:	d900      	bls.n	80052a6 <__ssputs_r+0x86>
 80052a4:	463e      	mov	r6, r7
 80052a6:	4632      	mov	r2, r6
 80052a8:	6820      	ldr	r0, [r4, #0]
 80052aa:	4641      	mov	r1, r8
 80052ac:	f000 fcf4 	bl	8005c98 <memmove>
 80052b0:	68a3      	ldr	r3, [r4, #8]
 80052b2:	6822      	ldr	r2, [r4, #0]
 80052b4:	1b9b      	subs	r3, r3, r6
 80052b6:	4432      	add	r2, r6
 80052b8:	60a3      	str	r3, [r4, #8]
 80052ba:	6022      	str	r2, [r4, #0]
 80052bc:	2000      	movs	r0, #0
 80052be:	e7db      	b.n	8005278 <__ssputs_r+0x58>
 80052c0:	462a      	mov	r2, r5
 80052c2:	f000 fd0f 	bl	8005ce4 <_realloc_r>
 80052c6:	4606      	mov	r6, r0
 80052c8:	2800      	cmp	r0, #0
 80052ca:	d1e1      	bne.n	8005290 <__ssputs_r+0x70>
 80052cc:	6921      	ldr	r1, [r4, #16]
 80052ce:	4650      	mov	r0, sl
 80052d0:	f7ff fefc 	bl	80050cc <_free_r>
 80052d4:	e7c7      	b.n	8005266 <__ssputs_r+0x46>
	...

080052d8 <_svfiprintf_r>:
 80052d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052dc:	4698      	mov	r8, r3
 80052de:	898b      	ldrh	r3, [r1, #12]
 80052e0:	061b      	lsls	r3, r3, #24
 80052e2:	b09d      	sub	sp, #116	; 0x74
 80052e4:	4607      	mov	r7, r0
 80052e6:	460d      	mov	r5, r1
 80052e8:	4614      	mov	r4, r2
 80052ea:	d50e      	bpl.n	800530a <_svfiprintf_r+0x32>
 80052ec:	690b      	ldr	r3, [r1, #16]
 80052ee:	b963      	cbnz	r3, 800530a <_svfiprintf_r+0x32>
 80052f0:	2140      	movs	r1, #64	; 0x40
 80052f2:	f7ff ff3b 	bl	800516c <_malloc_r>
 80052f6:	6028      	str	r0, [r5, #0]
 80052f8:	6128      	str	r0, [r5, #16]
 80052fa:	b920      	cbnz	r0, 8005306 <_svfiprintf_r+0x2e>
 80052fc:	230c      	movs	r3, #12
 80052fe:	603b      	str	r3, [r7, #0]
 8005300:	f04f 30ff 	mov.w	r0, #4294967295
 8005304:	e0d1      	b.n	80054aa <_svfiprintf_r+0x1d2>
 8005306:	2340      	movs	r3, #64	; 0x40
 8005308:	616b      	str	r3, [r5, #20]
 800530a:	2300      	movs	r3, #0
 800530c:	9309      	str	r3, [sp, #36]	; 0x24
 800530e:	2320      	movs	r3, #32
 8005310:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005314:	f8cd 800c 	str.w	r8, [sp, #12]
 8005318:	2330      	movs	r3, #48	; 0x30
 800531a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80054c4 <_svfiprintf_r+0x1ec>
 800531e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005322:	f04f 0901 	mov.w	r9, #1
 8005326:	4623      	mov	r3, r4
 8005328:	469a      	mov	sl, r3
 800532a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800532e:	b10a      	cbz	r2, 8005334 <_svfiprintf_r+0x5c>
 8005330:	2a25      	cmp	r2, #37	; 0x25
 8005332:	d1f9      	bne.n	8005328 <_svfiprintf_r+0x50>
 8005334:	ebba 0b04 	subs.w	fp, sl, r4
 8005338:	d00b      	beq.n	8005352 <_svfiprintf_r+0x7a>
 800533a:	465b      	mov	r3, fp
 800533c:	4622      	mov	r2, r4
 800533e:	4629      	mov	r1, r5
 8005340:	4638      	mov	r0, r7
 8005342:	f7ff ff6d 	bl	8005220 <__ssputs_r>
 8005346:	3001      	adds	r0, #1
 8005348:	f000 80aa 	beq.w	80054a0 <_svfiprintf_r+0x1c8>
 800534c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800534e:	445a      	add	r2, fp
 8005350:	9209      	str	r2, [sp, #36]	; 0x24
 8005352:	f89a 3000 	ldrb.w	r3, [sl]
 8005356:	2b00      	cmp	r3, #0
 8005358:	f000 80a2 	beq.w	80054a0 <_svfiprintf_r+0x1c8>
 800535c:	2300      	movs	r3, #0
 800535e:	f04f 32ff 	mov.w	r2, #4294967295
 8005362:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005366:	f10a 0a01 	add.w	sl, sl, #1
 800536a:	9304      	str	r3, [sp, #16]
 800536c:	9307      	str	r3, [sp, #28]
 800536e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005372:	931a      	str	r3, [sp, #104]	; 0x68
 8005374:	4654      	mov	r4, sl
 8005376:	2205      	movs	r2, #5
 8005378:	f814 1b01 	ldrb.w	r1, [r4], #1
 800537c:	4851      	ldr	r0, [pc, #324]	; (80054c4 <_svfiprintf_r+0x1ec>)
 800537e:	f7fa ff3f 	bl	8000200 <memchr>
 8005382:	9a04      	ldr	r2, [sp, #16]
 8005384:	b9d8      	cbnz	r0, 80053be <_svfiprintf_r+0xe6>
 8005386:	06d0      	lsls	r0, r2, #27
 8005388:	bf44      	itt	mi
 800538a:	2320      	movmi	r3, #32
 800538c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005390:	0711      	lsls	r1, r2, #28
 8005392:	bf44      	itt	mi
 8005394:	232b      	movmi	r3, #43	; 0x2b
 8005396:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800539a:	f89a 3000 	ldrb.w	r3, [sl]
 800539e:	2b2a      	cmp	r3, #42	; 0x2a
 80053a0:	d015      	beq.n	80053ce <_svfiprintf_r+0xf6>
 80053a2:	9a07      	ldr	r2, [sp, #28]
 80053a4:	4654      	mov	r4, sl
 80053a6:	2000      	movs	r0, #0
 80053a8:	f04f 0c0a 	mov.w	ip, #10
 80053ac:	4621      	mov	r1, r4
 80053ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053b2:	3b30      	subs	r3, #48	; 0x30
 80053b4:	2b09      	cmp	r3, #9
 80053b6:	d94e      	bls.n	8005456 <_svfiprintf_r+0x17e>
 80053b8:	b1b0      	cbz	r0, 80053e8 <_svfiprintf_r+0x110>
 80053ba:	9207      	str	r2, [sp, #28]
 80053bc:	e014      	b.n	80053e8 <_svfiprintf_r+0x110>
 80053be:	eba0 0308 	sub.w	r3, r0, r8
 80053c2:	fa09 f303 	lsl.w	r3, r9, r3
 80053c6:	4313      	orrs	r3, r2
 80053c8:	9304      	str	r3, [sp, #16]
 80053ca:	46a2      	mov	sl, r4
 80053cc:	e7d2      	b.n	8005374 <_svfiprintf_r+0x9c>
 80053ce:	9b03      	ldr	r3, [sp, #12]
 80053d0:	1d19      	adds	r1, r3, #4
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	9103      	str	r1, [sp, #12]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	bfbb      	ittet	lt
 80053da:	425b      	neglt	r3, r3
 80053dc:	f042 0202 	orrlt.w	r2, r2, #2
 80053e0:	9307      	strge	r3, [sp, #28]
 80053e2:	9307      	strlt	r3, [sp, #28]
 80053e4:	bfb8      	it	lt
 80053e6:	9204      	strlt	r2, [sp, #16]
 80053e8:	7823      	ldrb	r3, [r4, #0]
 80053ea:	2b2e      	cmp	r3, #46	; 0x2e
 80053ec:	d10c      	bne.n	8005408 <_svfiprintf_r+0x130>
 80053ee:	7863      	ldrb	r3, [r4, #1]
 80053f0:	2b2a      	cmp	r3, #42	; 0x2a
 80053f2:	d135      	bne.n	8005460 <_svfiprintf_r+0x188>
 80053f4:	9b03      	ldr	r3, [sp, #12]
 80053f6:	1d1a      	adds	r2, r3, #4
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	9203      	str	r2, [sp, #12]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	bfb8      	it	lt
 8005400:	f04f 33ff 	movlt.w	r3, #4294967295
 8005404:	3402      	adds	r4, #2
 8005406:	9305      	str	r3, [sp, #20]
 8005408:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80054d4 <_svfiprintf_r+0x1fc>
 800540c:	7821      	ldrb	r1, [r4, #0]
 800540e:	2203      	movs	r2, #3
 8005410:	4650      	mov	r0, sl
 8005412:	f7fa fef5 	bl	8000200 <memchr>
 8005416:	b140      	cbz	r0, 800542a <_svfiprintf_r+0x152>
 8005418:	2340      	movs	r3, #64	; 0x40
 800541a:	eba0 000a 	sub.w	r0, r0, sl
 800541e:	fa03 f000 	lsl.w	r0, r3, r0
 8005422:	9b04      	ldr	r3, [sp, #16]
 8005424:	4303      	orrs	r3, r0
 8005426:	3401      	adds	r4, #1
 8005428:	9304      	str	r3, [sp, #16]
 800542a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800542e:	4826      	ldr	r0, [pc, #152]	; (80054c8 <_svfiprintf_r+0x1f0>)
 8005430:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005434:	2206      	movs	r2, #6
 8005436:	f7fa fee3 	bl	8000200 <memchr>
 800543a:	2800      	cmp	r0, #0
 800543c:	d038      	beq.n	80054b0 <_svfiprintf_r+0x1d8>
 800543e:	4b23      	ldr	r3, [pc, #140]	; (80054cc <_svfiprintf_r+0x1f4>)
 8005440:	bb1b      	cbnz	r3, 800548a <_svfiprintf_r+0x1b2>
 8005442:	9b03      	ldr	r3, [sp, #12]
 8005444:	3307      	adds	r3, #7
 8005446:	f023 0307 	bic.w	r3, r3, #7
 800544a:	3308      	adds	r3, #8
 800544c:	9303      	str	r3, [sp, #12]
 800544e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005450:	4433      	add	r3, r6
 8005452:	9309      	str	r3, [sp, #36]	; 0x24
 8005454:	e767      	b.n	8005326 <_svfiprintf_r+0x4e>
 8005456:	fb0c 3202 	mla	r2, ip, r2, r3
 800545a:	460c      	mov	r4, r1
 800545c:	2001      	movs	r0, #1
 800545e:	e7a5      	b.n	80053ac <_svfiprintf_r+0xd4>
 8005460:	2300      	movs	r3, #0
 8005462:	3401      	adds	r4, #1
 8005464:	9305      	str	r3, [sp, #20]
 8005466:	4619      	mov	r1, r3
 8005468:	f04f 0c0a 	mov.w	ip, #10
 800546c:	4620      	mov	r0, r4
 800546e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005472:	3a30      	subs	r2, #48	; 0x30
 8005474:	2a09      	cmp	r2, #9
 8005476:	d903      	bls.n	8005480 <_svfiprintf_r+0x1a8>
 8005478:	2b00      	cmp	r3, #0
 800547a:	d0c5      	beq.n	8005408 <_svfiprintf_r+0x130>
 800547c:	9105      	str	r1, [sp, #20]
 800547e:	e7c3      	b.n	8005408 <_svfiprintf_r+0x130>
 8005480:	fb0c 2101 	mla	r1, ip, r1, r2
 8005484:	4604      	mov	r4, r0
 8005486:	2301      	movs	r3, #1
 8005488:	e7f0      	b.n	800546c <_svfiprintf_r+0x194>
 800548a:	ab03      	add	r3, sp, #12
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	462a      	mov	r2, r5
 8005490:	4b0f      	ldr	r3, [pc, #60]	; (80054d0 <_svfiprintf_r+0x1f8>)
 8005492:	a904      	add	r1, sp, #16
 8005494:	4638      	mov	r0, r7
 8005496:	f3af 8000 	nop.w
 800549a:	1c42      	adds	r2, r0, #1
 800549c:	4606      	mov	r6, r0
 800549e:	d1d6      	bne.n	800544e <_svfiprintf_r+0x176>
 80054a0:	89ab      	ldrh	r3, [r5, #12]
 80054a2:	065b      	lsls	r3, r3, #25
 80054a4:	f53f af2c 	bmi.w	8005300 <_svfiprintf_r+0x28>
 80054a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054aa:	b01d      	add	sp, #116	; 0x74
 80054ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054b0:	ab03      	add	r3, sp, #12
 80054b2:	9300      	str	r3, [sp, #0]
 80054b4:	462a      	mov	r2, r5
 80054b6:	4b06      	ldr	r3, [pc, #24]	; (80054d0 <_svfiprintf_r+0x1f8>)
 80054b8:	a904      	add	r1, sp, #16
 80054ba:	4638      	mov	r0, r7
 80054bc:	f000 f9d4 	bl	8005868 <_printf_i>
 80054c0:	e7eb      	b.n	800549a <_svfiprintf_r+0x1c2>
 80054c2:	bf00      	nop
 80054c4:	08006390 	.word	0x08006390
 80054c8:	0800639a 	.word	0x0800639a
 80054cc:	00000000 	.word	0x00000000
 80054d0:	08005221 	.word	0x08005221
 80054d4:	08006396 	.word	0x08006396

080054d8 <__sfputc_r>:
 80054d8:	6893      	ldr	r3, [r2, #8]
 80054da:	3b01      	subs	r3, #1
 80054dc:	2b00      	cmp	r3, #0
 80054de:	b410      	push	{r4}
 80054e0:	6093      	str	r3, [r2, #8]
 80054e2:	da08      	bge.n	80054f6 <__sfputc_r+0x1e>
 80054e4:	6994      	ldr	r4, [r2, #24]
 80054e6:	42a3      	cmp	r3, r4
 80054e8:	db01      	blt.n	80054ee <__sfputc_r+0x16>
 80054ea:	290a      	cmp	r1, #10
 80054ec:	d103      	bne.n	80054f6 <__sfputc_r+0x1e>
 80054ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054f2:	f7ff bb0d 	b.w	8004b10 <__swbuf_r>
 80054f6:	6813      	ldr	r3, [r2, #0]
 80054f8:	1c58      	adds	r0, r3, #1
 80054fa:	6010      	str	r0, [r2, #0]
 80054fc:	7019      	strb	r1, [r3, #0]
 80054fe:	4608      	mov	r0, r1
 8005500:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005504:	4770      	bx	lr

08005506 <__sfputs_r>:
 8005506:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005508:	4606      	mov	r6, r0
 800550a:	460f      	mov	r7, r1
 800550c:	4614      	mov	r4, r2
 800550e:	18d5      	adds	r5, r2, r3
 8005510:	42ac      	cmp	r4, r5
 8005512:	d101      	bne.n	8005518 <__sfputs_r+0x12>
 8005514:	2000      	movs	r0, #0
 8005516:	e007      	b.n	8005528 <__sfputs_r+0x22>
 8005518:	f814 1b01 	ldrb.w	r1, [r4], #1
 800551c:	463a      	mov	r2, r7
 800551e:	4630      	mov	r0, r6
 8005520:	f7ff ffda 	bl	80054d8 <__sfputc_r>
 8005524:	1c43      	adds	r3, r0, #1
 8005526:	d1f3      	bne.n	8005510 <__sfputs_r+0xa>
 8005528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800552c <_vfiprintf_r>:
 800552c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005530:	460d      	mov	r5, r1
 8005532:	b09d      	sub	sp, #116	; 0x74
 8005534:	4614      	mov	r4, r2
 8005536:	4698      	mov	r8, r3
 8005538:	4606      	mov	r6, r0
 800553a:	b118      	cbz	r0, 8005544 <_vfiprintf_r+0x18>
 800553c:	6983      	ldr	r3, [r0, #24]
 800553e:	b90b      	cbnz	r3, 8005544 <_vfiprintf_r+0x18>
 8005540:	f7ff fcc0 	bl	8004ec4 <__sinit>
 8005544:	4b89      	ldr	r3, [pc, #548]	; (800576c <_vfiprintf_r+0x240>)
 8005546:	429d      	cmp	r5, r3
 8005548:	d11b      	bne.n	8005582 <_vfiprintf_r+0x56>
 800554a:	6875      	ldr	r5, [r6, #4]
 800554c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800554e:	07d9      	lsls	r1, r3, #31
 8005550:	d405      	bmi.n	800555e <_vfiprintf_r+0x32>
 8005552:	89ab      	ldrh	r3, [r5, #12]
 8005554:	059a      	lsls	r2, r3, #22
 8005556:	d402      	bmi.n	800555e <_vfiprintf_r+0x32>
 8005558:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800555a:	f7ff fd51 	bl	8005000 <__retarget_lock_acquire_recursive>
 800555e:	89ab      	ldrh	r3, [r5, #12]
 8005560:	071b      	lsls	r3, r3, #28
 8005562:	d501      	bpl.n	8005568 <_vfiprintf_r+0x3c>
 8005564:	692b      	ldr	r3, [r5, #16]
 8005566:	b9eb      	cbnz	r3, 80055a4 <_vfiprintf_r+0x78>
 8005568:	4629      	mov	r1, r5
 800556a:	4630      	mov	r0, r6
 800556c:	f7ff fb22 	bl	8004bb4 <__swsetup_r>
 8005570:	b1c0      	cbz	r0, 80055a4 <_vfiprintf_r+0x78>
 8005572:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005574:	07dc      	lsls	r4, r3, #31
 8005576:	d50e      	bpl.n	8005596 <_vfiprintf_r+0x6a>
 8005578:	f04f 30ff 	mov.w	r0, #4294967295
 800557c:	b01d      	add	sp, #116	; 0x74
 800557e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005582:	4b7b      	ldr	r3, [pc, #492]	; (8005770 <_vfiprintf_r+0x244>)
 8005584:	429d      	cmp	r5, r3
 8005586:	d101      	bne.n	800558c <_vfiprintf_r+0x60>
 8005588:	68b5      	ldr	r5, [r6, #8]
 800558a:	e7df      	b.n	800554c <_vfiprintf_r+0x20>
 800558c:	4b79      	ldr	r3, [pc, #484]	; (8005774 <_vfiprintf_r+0x248>)
 800558e:	429d      	cmp	r5, r3
 8005590:	bf08      	it	eq
 8005592:	68f5      	ldreq	r5, [r6, #12]
 8005594:	e7da      	b.n	800554c <_vfiprintf_r+0x20>
 8005596:	89ab      	ldrh	r3, [r5, #12]
 8005598:	0598      	lsls	r0, r3, #22
 800559a:	d4ed      	bmi.n	8005578 <_vfiprintf_r+0x4c>
 800559c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800559e:	f7ff fd30 	bl	8005002 <__retarget_lock_release_recursive>
 80055a2:	e7e9      	b.n	8005578 <_vfiprintf_r+0x4c>
 80055a4:	2300      	movs	r3, #0
 80055a6:	9309      	str	r3, [sp, #36]	; 0x24
 80055a8:	2320      	movs	r3, #32
 80055aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80055b2:	2330      	movs	r3, #48	; 0x30
 80055b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005778 <_vfiprintf_r+0x24c>
 80055b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055bc:	f04f 0901 	mov.w	r9, #1
 80055c0:	4623      	mov	r3, r4
 80055c2:	469a      	mov	sl, r3
 80055c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055c8:	b10a      	cbz	r2, 80055ce <_vfiprintf_r+0xa2>
 80055ca:	2a25      	cmp	r2, #37	; 0x25
 80055cc:	d1f9      	bne.n	80055c2 <_vfiprintf_r+0x96>
 80055ce:	ebba 0b04 	subs.w	fp, sl, r4
 80055d2:	d00b      	beq.n	80055ec <_vfiprintf_r+0xc0>
 80055d4:	465b      	mov	r3, fp
 80055d6:	4622      	mov	r2, r4
 80055d8:	4629      	mov	r1, r5
 80055da:	4630      	mov	r0, r6
 80055dc:	f7ff ff93 	bl	8005506 <__sfputs_r>
 80055e0:	3001      	adds	r0, #1
 80055e2:	f000 80aa 	beq.w	800573a <_vfiprintf_r+0x20e>
 80055e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055e8:	445a      	add	r2, fp
 80055ea:	9209      	str	r2, [sp, #36]	; 0x24
 80055ec:	f89a 3000 	ldrb.w	r3, [sl]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f000 80a2 	beq.w	800573a <_vfiprintf_r+0x20e>
 80055f6:	2300      	movs	r3, #0
 80055f8:	f04f 32ff 	mov.w	r2, #4294967295
 80055fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005600:	f10a 0a01 	add.w	sl, sl, #1
 8005604:	9304      	str	r3, [sp, #16]
 8005606:	9307      	str	r3, [sp, #28]
 8005608:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800560c:	931a      	str	r3, [sp, #104]	; 0x68
 800560e:	4654      	mov	r4, sl
 8005610:	2205      	movs	r2, #5
 8005612:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005616:	4858      	ldr	r0, [pc, #352]	; (8005778 <_vfiprintf_r+0x24c>)
 8005618:	f7fa fdf2 	bl	8000200 <memchr>
 800561c:	9a04      	ldr	r2, [sp, #16]
 800561e:	b9d8      	cbnz	r0, 8005658 <_vfiprintf_r+0x12c>
 8005620:	06d1      	lsls	r1, r2, #27
 8005622:	bf44      	itt	mi
 8005624:	2320      	movmi	r3, #32
 8005626:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800562a:	0713      	lsls	r3, r2, #28
 800562c:	bf44      	itt	mi
 800562e:	232b      	movmi	r3, #43	; 0x2b
 8005630:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005634:	f89a 3000 	ldrb.w	r3, [sl]
 8005638:	2b2a      	cmp	r3, #42	; 0x2a
 800563a:	d015      	beq.n	8005668 <_vfiprintf_r+0x13c>
 800563c:	9a07      	ldr	r2, [sp, #28]
 800563e:	4654      	mov	r4, sl
 8005640:	2000      	movs	r0, #0
 8005642:	f04f 0c0a 	mov.w	ip, #10
 8005646:	4621      	mov	r1, r4
 8005648:	f811 3b01 	ldrb.w	r3, [r1], #1
 800564c:	3b30      	subs	r3, #48	; 0x30
 800564e:	2b09      	cmp	r3, #9
 8005650:	d94e      	bls.n	80056f0 <_vfiprintf_r+0x1c4>
 8005652:	b1b0      	cbz	r0, 8005682 <_vfiprintf_r+0x156>
 8005654:	9207      	str	r2, [sp, #28]
 8005656:	e014      	b.n	8005682 <_vfiprintf_r+0x156>
 8005658:	eba0 0308 	sub.w	r3, r0, r8
 800565c:	fa09 f303 	lsl.w	r3, r9, r3
 8005660:	4313      	orrs	r3, r2
 8005662:	9304      	str	r3, [sp, #16]
 8005664:	46a2      	mov	sl, r4
 8005666:	e7d2      	b.n	800560e <_vfiprintf_r+0xe2>
 8005668:	9b03      	ldr	r3, [sp, #12]
 800566a:	1d19      	adds	r1, r3, #4
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	9103      	str	r1, [sp, #12]
 8005670:	2b00      	cmp	r3, #0
 8005672:	bfbb      	ittet	lt
 8005674:	425b      	neglt	r3, r3
 8005676:	f042 0202 	orrlt.w	r2, r2, #2
 800567a:	9307      	strge	r3, [sp, #28]
 800567c:	9307      	strlt	r3, [sp, #28]
 800567e:	bfb8      	it	lt
 8005680:	9204      	strlt	r2, [sp, #16]
 8005682:	7823      	ldrb	r3, [r4, #0]
 8005684:	2b2e      	cmp	r3, #46	; 0x2e
 8005686:	d10c      	bne.n	80056a2 <_vfiprintf_r+0x176>
 8005688:	7863      	ldrb	r3, [r4, #1]
 800568a:	2b2a      	cmp	r3, #42	; 0x2a
 800568c:	d135      	bne.n	80056fa <_vfiprintf_r+0x1ce>
 800568e:	9b03      	ldr	r3, [sp, #12]
 8005690:	1d1a      	adds	r2, r3, #4
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	9203      	str	r2, [sp, #12]
 8005696:	2b00      	cmp	r3, #0
 8005698:	bfb8      	it	lt
 800569a:	f04f 33ff 	movlt.w	r3, #4294967295
 800569e:	3402      	adds	r4, #2
 80056a0:	9305      	str	r3, [sp, #20]
 80056a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005788 <_vfiprintf_r+0x25c>
 80056a6:	7821      	ldrb	r1, [r4, #0]
 80056a8:	2203      	movs	r2, #3
 80056aa:	4650      	mov	r0, sl
 80056ac:	f7fa fda8 	bl	8000200 <memchr>
 80056b0:	b140      	cbz	r0, 80056c4 <_vfiprintf_r+0x198>
 80056b2:	2340      	movs	r3, #64	; 0x40
 80056b4:	eba0 000a 	sub.w	r0, r0, sl
 80056b8:	fa03 f000 	lsl.w	r0, r3, r0
 80056bc:	9b04      	ldr	r3, [sp, #16]
 80056be:	4303      	orrs	r3, r0
 80056c0:	3401      	adds	r4, #1
 80056c2:	9304      	str	r3, [sp, #16]
 80056c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056c8:	482c      	ldr	r0, [pc, #176]	; (800577c <_vfiprintf_r+0x250>)
 80056ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056ce:	2206      	movs	r2, #6
 80056d0:	f7fa fd96 	bl	8000200 <memchr>
 80056d4:	2800      	cmp	r0, #0
 80056d6:	d03f      	beq.n	8005758 <_vfiprintf_r+0x22c>
 80056d8:	4b29      	ldr	r3, [pc, #164]	; (8005780 <_vfiprintf_r+0x254>)
 80056da:	bb1b      	cbnz	r3, 8005724 <_vfiprintf_r+0x1f8>
 80056dc:	9b03      	ldr	r3, [sp, #12]
 80056de:	3307      	adds	r3, #7
 80056e0:	f023 0307 	bic.w	r3, r3, #7
 80056e4:	3308      	adds	r3, #8
 80056e6:	9303      	str	r3, [sp, #12]
 80056e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056ea:	443b      	add	r3, r7
 80056ec:	9309      	str	r3, [sp, #36]	; 0x24
 80056ee:	e767      	b.n	80055c0 <_vfiprintf_r+0x94>
 80056f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80056f4:	460c      	mov	r4, r1
 80056f6:	2001      	movs	r0, #1
 80056f8:	e7a5      	b.n	8005646 <_vfiprintf_r+0x11a>
 80056fa:	2300      	movs	r3, #0
 80056fc:	3401      	adds	r4, #1
 80056fe:	9305      	str	r3, [sp, #20]
 8005700:	4619      	mov	r1, r3
 8005702:	f04f 0c0a 	mov.w	ip, #10
 8005706:	4620      	mov	r0, r4
 8005708:	f810 2b01 	ldrb.w	r2, [r0], #1
 800570c:	3a30      	subs	r2, #48	; 0x30
 800570e:	2a09      	cmp	r2, #9
 8005710:	d903      	bls.n	800571a <_vfiprintf_r+0x1ee>
 8005712:	2b00      	cmp	r3, #0
 8005714:	d0c5      	beq.n	80056a2 <_vfiprintf_r+0x176>
 8005716:	9105      	str	r1, [sp, #20]
 8005718:	e7c3      	b.n	80056a2 <_vfiprintf_r+0x176>
 800571a:	fb0c 2101 	mla	r1, ip, r1, r2
 800571e:	4604      	mov	r4, r0
 8005720:	2301      	movs	r3, #1
 8005722:	e7f0      	b.n	8005706 <_vfiprintf_r+0x1da>
 8005724:	ab03      	add	r3, sp, #12
 8005726:	9300      	str	r3, [sp, #0]
 8005728:	462a      	mov	r2, r5
 800572a:	4b16      	ldr	r3, [pc, #88]	; (8005784 <_vfiprintf_r+0x258>)
 800572c:	a904      	add	r1, sp, #16
 800572e:	4630      	mov	r0, r6
 8005730:	f3af 8000 	nop.w
 8005734:	4607      	mov	r7, r0
 8005736:	1c78      	adds	r0, r7, #1
 8005738:	d1d6      	bne.n	80056e8 <_vfiprintf_r+0x1bc>
 800573a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800573c:	07d9      	lsls	r1, r3, #31
 800573e:	d405      	bmi.n	800574c <_vfiprintf_r+0x220>
 8005740:	89ab      	ldrh	r3, [r5, #12]
 8005742:	059a      	lsls	r2, r3, #22
 8005744:	d402      	bmi.n	800574c <_vfiprintf_r+0x220>
 8005746:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005748:	f7ff fc5b 	bl	8005002 <__retarget_lock_release_recursive>
 800574c:	89ab      	ldrh	r3, [r5, #12]
 800574e:	065b      	lsls	r3, r3, #25
 8005750:	f53f af12 	bmi.w	8005578 <_vfiprintf_r+0x4c>
 8005754:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005756:	e711      	b.n	800557c <_vfiprintf_r+0x50>
 8005758:	ab03      	add	r3, sp, #12
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	462a      	mov	r2, r5
 800575e:	4b09      	ldr	r3, [pc, #36]	; (8005784 <_vfiprintf_r+0x258>)
 8005760:	a904      	add	r1, sp, #16
 8005762:	4630      	mov	r0, r6
 8005764:	f000 f880 	bl	8005868 <_printf_i>
 8005768:	e7e4      	b.n	8005734 <_vfiprintf_r+0x208>
 800576a:	bf00      	nop
 800576c:	08006350 	.word	0x08006350
 8005770:	08006370 	.word	0x08006370
 8005774:	08006330 	.word	0x08006330
 8005778:	08006390 	.word	0x08006390
 800577c:	0800639a 	.word	0x0800639a
 8005780:	00000000 	.word	0x00000000
 8005784:	08005507 	.word	0x08005507
 8005788:	08006396 	.word	0x08006396

0800578c <_printf_common>:
 800578c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005790:	4616      	mov	r6, r2
 8005792:	4699      	mov	r9, r3
 8005794:	688a      	ldr	r2, [r1, #8]
 8005796:	690b      	ldr	r3, [r1, #16]
 8005798:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800579c:	4293      	cmp	r3, r2
 800579e:	bfb8      	it	lt
 80057a0:	4613      	movlt	r3, r2
 80057a2:	6033      	str	r3, [r6, #0]
 80057a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057a8:	4607      	mov	r7, r0
 80057aa:	460c      	mov	r4, r1
 80057ac:	b10a      	cbz	r2, 80057b2 <_printf_common+0x26>
 80057ae:	3301      	adds	r3, #1
 80057b0:	6033      	str	r3, [r6, #0]
 80057b2:	6823      	ldr	r3, [r4, #0]
 80057b4:	0699      	lsls	r1, r3, #26
 80057b6:	bf42      	ittt	mi
 80057b8:	6833      	ldrmi	r3, [r6, #0]
 80057ba:	3302      	addmi	r3, #2
 80057bc:	6033      	strmi	r3, [r6, #0]
 80057be:	6825      	ldr	r5, [r4, #0]
 80057c0:	f015 0506 	ands.w	r5, r5, #6
 80057c4:	d106      	bne.n	80057d4 <_printf_common+0x48>
 80057c6:	f104 0a19 	add.w	sl, r4, #25
 80057ca:	68e3      	ldr	r3, [r4, #12]
 80057cc:	6832      	ldr	r2, [r6, #0]
 80057ce:	1a9b      	subs	r3, r3, r2
 80057d0:	42ab      	cmp	r3, r5
 80057d2:	dc26      	bgt.n	8005822 <_printf_common+0x96>
 80057d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057d8:	1e13      	subs	r3, r2, #0
 80057da:	6822      	ldr	r2, [r4, #0]
 80057dc:	bf18      	it	ne
 80057de:	2301      	movne	r3, #1
 80057e0:	0692      	lsls	r2, r2, #26
 80057e2:	d42b      	bmi.n	800583c <_printf_common+0xb0>
 80057e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057e8:	4649      	mov	r1, r9
 80057ea:	4638      	mov	r0, r7
 80057ec:	47c0      	blx	r8
 80057ee:	3001      	adds	r0, #1
 80057f0:	d01e      	beq.n	8005830 <_printf_common+0xa4>
 80057f2:	6823      	ldr	r3, [r4, #0]
 80057f4:	68e5      	ldr	r5, [r4, #12]
 80057f6:	6832      	ldr	r2, [r6, #0]
 80057f8:	f003 0306 	and.w	r3, r3, #6
 80057fc:	2b04      	cmp	r3, #4
 80057fe:	bf08      	it	eq
 8005800:	1aad      	subeq	r5, r5, r2
 8005802:	68a3      	ldr	r3, [r4, #8]
 8005804:	6922      	ldr	r2, [r4, #16]
 8005806:	bf0c      	ite	eq
 8005808:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800580c:	2500      	movne	r5, #0
 800580e:	4293      	cmp	r3, r2
 8005810:	bfc4      	itt	gt
 8005812:	1a9b      	subgt	r3, r3, r2
 8005814:	18ed      	addgt	r5, r5, r3
 8005816:	2600      	movs	r6, #0
 8005818:	341a      	adds	r4, #26
 800581a:	42b5      	cmp	r5, r6
 800581c:	d11a      	bne.n	8005854 <_printf_common+0xc8>
 800581e:	2000      	movs	r0, #0
 8005820:	e008      	b.n	8005834 <_printf_common+0xa8>
 8005822:	2301      	movs	r3, #1
 8005824:	4652      	mov	r2, sl
 8005826:	4649      	mov	r1, r9
 8005828:	4638      	mov	r0, r7
 800582a:	47c0      	blx	r8
 800582c:	3001      	adds	r0, #1
 800582e:	d103      	bne.n	8005838 <_printf_common+0xac>
 8005830:	f04f 30ff 	mov.w	r0, #4294967295
 8005834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005838:	3501      	adds	r5, #1
 800583a:	e7c6      	b.n	80057ca <_printf_common+0x3e>
 800583c:	18e1      	adds	r1, r4, r3
 800583e:	1c5a      	adds	r2, r3, #1
 8005840:	2030      	movs	r0, #48	; 0x30
 8005842:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005846:	4422      	add	r2, r4
 8005848:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800584c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005850:	3302      	adds	r3, #2
 8005852:	e7c7      	b.n	80057e4 <_printf_common+0x58>
 8005854:	2301      	movs	r3, #1
 8005856:	4622      	mov	r2, r4
 8005858:	4649      	mov	r1, r9
 800585a:	4638      	mov	r0, r7
 800585c:	47c0      	blx	r8
 800585e:	3001      	adds	r0, #1
 8005860:	d0e6      	beq.n	8005830 <_printf_common+0xa4>
 8005862:	3601      	adds	r6, #1
 8005864:	e7d9      	b.n	800581a <_printf_common+0x8e>
	...

08005868 <_printf_i>:
 8005868:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800586c:	460c      	mov	r4, r1
 800586e:	4691      	mov	r9, r2
 8005870:	7e27      	ldrb	r7, [r4, #24]
 8005872:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005874:	2f78      	cmp	r7, #120	; 0x78
 8005876:	4680      	mov	r8, r0
 8005878:	469a      	mov	sl, r3
 800587a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800587e:	d807      	bhi.n	8005890 <_printf_i+0x28>
 8005880:	2f62      	cmp	r7, #98	; 0x62
 8005882:	d80a      	bhi.n	800589a <_printf_i+0x32>
 8005884:	2f00      	cmp	r7, #0
 8005886:	f000 80d8 	beq.w	8005a3a <_printf_i+0x1d2>
 800588a:	2f58      	cmp	r7, #88	; 0x58
 800588c:	f000 80a3 	beq.w	80059d6 <_printf_i+0x16e>
 8005890:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005894:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005898:	e03a      	b.n	8005910 <_printf_i+0xa8>
 800589a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800589e:	2b15      	cmp	r3, #21
 80058a0:	d8f6      	bhi.n	8005890 <_printf_i+0x28>
 80058a2:	a001      	add	r0, pc, #4	; (adr r0, 80058a8 <_printf_i+0x40>)
 80058a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80058a8:	08005901 	.word	0x08005901
 80058ac:	08005915 	.word	0x08005915
 80058b0:	08005891 	.word	0x08005891
 80058b4:	08005891 	.word	0x08005891
 80058b8:	08005891 	.word	0x08005891
 80058bc:	08005891 	.word	0x08005891
 80058c0:	08005915 	.word	0x08005915
 80058c4:	08005891 	.word	0x08005891
 80058c8:	08005891 	.word	0x08005891
 80058cc:	08005891 	.word	0x08005891
 80058d0:	08005891 	.word	0x08005891
 80058d4:	08005a21 	.word	0x08005a21
 80058d8:	08005945 	.word	0x08005945
 80058dc:	08005a03 	.word	0x08005a03
 80058e0:	08005891 	.word	0x08005891
 80058e4:	08005891 	.word	0x08005891
 80058e8:	08005a43 	.word	0x08005a43
 80058ec:	08005891 	.word	0x08005891
 80058f0:	08005945 	.word	0x08005945
 80058f4:	08005891 	.word	0x08005891
 80058f8:	08005891 	.word	0x08005891
 80058fc:	08005a0b 	.word	0x08005a0b
 8005900:	680b      	ldr	r3, [r1, #0]
 8005902:	1d1a      	adds	r2, r3, #4
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	600a      	str	r2, [r1, #0]
 8005908:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800590c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005910:	2301      	movs	r3, #1
 8005912:	e0a3      	b.n	8005a5c <_printf_i+0x1f4>
 8005914:	6825      	ldr	r5, [r4, #0]
 8005916:	6808      	ldr	r0, [r1, #0]
 8005918:	062e      	lsls	r6, r5, #24
 800591a:	f100 0304 	add.w	r3, r0, #4
 800591e:	d50a      	bpl.n	8005936 <_printf_i+0xce>
 8005920:	6805      	ldr	r5, [r0, #0]
 8005922:	600b      	str	r3, [r1, #0]
 8005924:	2d00      	cmp	r5, #0
 8005926:	da03      	bge.n	8005930 <_printf_i+0xc8>
 8005928:	232d      	movs	r3, #45	; 0x2d
 800592a:	426d      	negs	r5, r5
 800592c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005930:	485e      	ldr	r0, [pc, #376]	; (8005aac <_printf_i+0x244>)
 8005932:	230a      	movs	r3, #10
 8005934:	e019      	b.n	800596a <_printf_i+0x102>
 8005936:	f015 0f40 	tst.w	r5, #64	; 0x40
 800593a:	6805      	ldr	r5, [r0, #0]
 800593c:	600b      	str	r3, [r1, #0]
 800593e:	bf18      	it	ne
 8005940:	b22d      	sxthne	r5, r5
 8005942:	e7ef      	b.n	8005924 <_printf_i+0xbc>
 8005944:	680b      	ldr	r3, [r1, #0]
 8005946:	6825      	ldr	r5, [r4, #0]
 8005948:	1d18      	adds	r0, r3, #4
 800594a:	6008      	str	r0, [r1, #0]
 800594c:	0628      	lsls	r0, r5, #24
 800594e:	d501      	bpl.n	8005954 <_printf_i+0xec>
 8005950:	681d      	ldr	r5, [r3, #0]
 8005952:	e002      	b.n	800595a <_printf_i+0xf2>
 8005954:	0669      	lsls	r1, r5, #25
 8005956:	d5fb      	bpl.n	8005950 <_printf_i+0xe8>
 8005958:	881d      	ldrh	r5, [r3, #0]
 800595a:	4854      	ldr	r0, [pc, #336]	; (8005aac <_printf_i+0x244>)
 800595c:	2f6f      	cmp	r7, #111	; 0x6f
 800595e:	bf0c      	ite	eq
 8005960:	2308      	moveq	r3, #8
 8005962:	230a      	movne	r3, #10
 8005964:	2100      	movs	r1, #0
 8005966:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800596a:	6866      	ldr	r6, [r4, #4]
 800596c:	60a6      	str	r6, [r4, #8]
 800596e:	2e00      	cmp	r6, #0
 8005970:	bfa2      	ittt	ge
 8005972:	6821      	ldrge	r1, [r4, #0]
 8005974:	f021 0104 	bicge.w	r1, r1, #4
 8005978:	6021      	strge	r1, [r4, #0]
 800597a:	b90d      	cbnz	r5, 8005980 <_printf_i+0x118>
 800597c:	2e00      	cmp	r6, #0
 800597e:	d04d      	beq.n	8005a1c <_printf_i+0x1b4>
 8005980:	4616      	mov	r6, r2
 8005982:	fbb5 f1f3 	udiv	r1, r5, r3
 8005986:	fb03 5711 	mls	r7, r3, r1, r5
 800598a:	5dc7      	ldrb	r7, [r0, r7]
 800598c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005990:	462f      	mov	r7, r5
 8005992:	42bb      	cmp	r3, r7
 8005994:	460d      	mov	r5, r1
 8005996:	d9f4      	bls.n	8005982 <_printf_i+0x11a>
 8005998:	2b08      	cmp	r3, #8
 800599a:	d10b      	bne.n	80059b4 <_printf_i+0x14c>
 800599c:	6823      	ldr	r3, [r4, #0]
 800599e:	07df      	lsls	r7, r3, #31
 80059a0:	d508      	bpl.n	80059b4 <_printf_i+0x14c>
 80059a2:	6923      	ldr	r3, [r4, #16]
 80059a4:	6861      	ldr	r1, [r4, #4]
 80059a6:	4299      	cmp	r1, r3
 80059a8:	bfde      	ittt	le
 80059aa:	2330      	movle	r3, #48	; 0x30
 80059ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80059b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80059b4:	1b92      	subs	r2, r2, r6
 80059b6:	6122      	str	r2, [r4, #16]
 80059b8:	f8cd a000 	str.w	sl, [sp]
 80059bc:	464b      	mov	r3, r9
 80059be:	aa03      	add	r2, sp, #12
 80059c0:	4621      	mov	r1, r4
 80059c2:	4640      	mov	r0, r8
 80059c4:	f7ff fee2 	bl	800578c <_printf_common>
 80059c8:	3001      	adds	r0, #1
 80059ca:	d14c      	bne.n	8005a66 <_printf_i+0x1fe>
 80059cc:	f04f 30ff 	mov.w	r0, #4294967295
 80059d0:	b004      	add	sp, #16
 80059d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059d6:	4835      	ldr	r0, [pc, #212]	; (8005aac <_printf_i+0x244>)
 80059d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80059dc:	6823      	ldr	r3, [r4, #0]
 80059de:	680e      	ldr	r6, [r1, #0]
 80059e0:	061f      	lsls	r7, r3, #24
 80059e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80059e6:	600e      	str	r6, [r1, #0]
 80059e8:	d514      	bpl.n	8005a14 <_printf_i+0x1ac>
 80059ea:	07d9      	lsls	r1, r3, #31
 80059ec:	bf44      	itt	mi
 80059ee:	f043 0320 	orrmi.w	r3, r3, #32
 80059f2:	6023      	strmi	r3, [r4, #0]
 80059f4:	b91d      	cbnz	r5, 80059fe <_printf_i+0x196>
 80059f6:	6823      	ldr	r3, [r4, #0]
 80059f8:	f023 0320 	bic.w	r3, r3, #32
 80059fc:	6023      	str	r3, [r4, #0]
 80059fe:	2310      	movs	r3, #16
 8005a00:	e7b0      	b.n	8005964 <_printf_i+0xfc>
 8005a02:	6823      	ldr	r3, [r4, #0]
 8005a04:	f043 0320 	orr.w	r3, r3, #32
 8005a08:	6023      	str	r3, [r4, #0]
 8005a0a:	2378      	movs	r3, #120	; 0x78
 8005a0c:	4828      	ldr	r0, [pc, #160]	; (8005ab0 <_printf_i+0x248>)
 8005a0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a12:	e7e3      	b.n	80059dc <_printf_i+0x174>
 8005a14:	065e      	lsls	r6, r3, #25
 8005a16:	bf48      	it	mi
 8005a18:	b2ad      	uxthmi	r5, r5
 8005a1a:	e7e6      	b.n	80059ea <_printf_i+0x182>
 8005a1c:	4616      	mov	r6, r2
 8005a1e:	e7bb      	b.n	8005998 <_printf_i+0x130>
 8005a20:	680b      	ldr	r3, [r1, #0]
 8005a22:	6826      	ldr	r6, [r4, #0]
 8005a24:	6960      	ldr	r0, [r4, #20]
 8005a26:	1d1d      	adds	r5, r3, #4
 8005a28:	600d      	str	r5, [r1, #0]
 8005a2a:	0635      	lsls	r5, r6, #24
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	d501      	bpl.n	8005a34 <_printf_i+0x1cc>
 8005a30:	6018      	str	r0, [r3, #0]
 8005a32:	e002      	b.n	8005a3a <_printf_i+0x1d2>
 8005a34:	0671      	lsls	r1, r6, #25
 8005a36:	d5fb      	bpl.n	8005a30 <_printf_i+0x1c8>
 8005a38:	8018      	strh	r0, [r3, #0]
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	6123      	str	r3, [r4, #16]
 8005a3e:	4616      	mov	r6, r2
 8005a40:	e7ba      	b.n	80059b8 <_printf_i+0x150>
 8005a42:	680b      	ldr	r3, [r1, #0]
 8005a44:	1d1a      	adds	r2, r3, #4
 8005a46:	600a      	str	r2, [r1, #0]
 8005a48:	681e      	ldr	r6, [r3, #0]
 8005a4a:	6862      	ldr	r2, [r4, #4]
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	4630      	mov	r0, r6
 8005a50:	f7fa fbd6 	bl	8000200 <memchr>
 8005a54:	b108      	cbz	r0, 8005a5a <_printf_i+0x1f2>
 8005a56:	1b80      	subs	r0, r0, r6
 8005a58:	6060      	str	r0, [r4, #4]
 8005a5a:	6863      	ldr	r3, [r4, #4]
 8005a5c:	6123      	str	r3, [r4, #16]
 8005a5e:	2300      	movs	r3, #0
 8005a60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a64:	e7a8      	b.n	80059b8 <_printf_i+0x150>
 8005a66:	6923      	ldr	r3, [r4, #16]
 8005a68:	4632      	mov	r2, r6
 8005a6a:	4649      	mov	r1, r9
 8005a6c:	4640      	mov	r0, r8
 8005a6e:	47d0      	blx	sl
 8005a70:	3001      	adds	r0, #1
 8005a72:	d0ab      	beq.n	80059cc <_printf_i+0x164>
 8005a74:	6823      	ldr	r3, [r4, #0]
 8005a76:	079b      	lsls	r3, r3, #30
 8005a78:	d413      	bmi.n	8005aa2 <_printf_i+0x23a>
 8005a7a:	68e0      	ldr	r0, [r4, #12]
 8005a7c:	9b03      	ldr	r3, [sp, #12]
 8005a7e:	4298      	cmp	r0, r3
 8005a80:	bfb8      	it	lt
 8005a82:	4618      	movlt	r0, r3
 8005a84:	e7a4      	b.n	80059d0 <_printf_i+0x168>
 8005a86:	2301      	movs	r3, #1
 8005a88:	4632      	mov	r2, r6
 8005a8a:	4649      	mov	r1, r9
 8005a8c:	4640      	mov	r0, r8
 8005a8e:	47d0      	blx	sl
 8005a90:	3001      	adds	r0, #1
 8005a92:	d09b      	beq.n	80059cc <_printf_i+0x164>
 8005a94:	3501      	adds	r5, #1
 8005a96:	68e3      	ldr	r3, [r4, #12]
 8005a98:	9903      	ldr	r1, [sp, #12]
 8005a9a:	1a5b      	subs	r3, r3, r1
 8005a9c:	42ab      	cmp	r3, r5
 8005a9e:	dcf2      	bgt.n	8005a86 <_printf_i+0x21e>
 8005aa0:	e7eb      	b.n	8005a7a <_printf_i+0x212>
 8005aa2:	2500      	movs	r5, #0
 8005aa4:	f104 0619 	add.w	r6, r4, #25
 8005aa8:	e7f5      	b.n	8005a96 <_printf_i+0x22e>
 8005aaa:	bf00      	nop
 8005aac:	080063a1 	.word	0x080063a1
 8005ab0:	080063b2 	.word	0x080063b2

08005ab4 <_putc_r>:
 8005ab4:	b570      	push	{r4, r5, r6, lr}
 8005ab6:	460d      	mov	r5, r1
 8005ab8:	4614      	mov	r4, r2
 8005aba:	4606      	mov	r6, r0
 8005abc:	b118      	cbz	r0, 8005ac6 <_putc_r+0x12>
 8005abe:	6983      	ldr	r3, [r0, #24]
 8005ac0:	b90b      	cbnz	r3, 8005ac6 <_putc_r+0x12>
 8005ac2:	f7ff f9ff 	bl	8004ec4 <__sinit>
 8005ac6:	4b1c      	ldr	r3, [pc, #112]	; (8005b38 <_putc_r+0x84>)
 8005ac8:	429c      	cmp	r4, r3
 8005aca:	d124      	bne.n	8005b16 <_putc_r+0x62>
 8005acc:	6874      	ldr	r4, [r6, #4]
 8005ace:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ad0:	07d8      	lsls	r0, r3, #31
 8005ad2:	d405      	bmi.n	8005ae0 <_putc_r+0x2c>
 8005ad4:	89a3      	ldrh	r3, [r4, #12]
 8005ad6:	0599      	lsls	r1, r3, #22
 8005ad8:	d402      	bmi.n	8005ae0 <_putc_r+0x2c>
 8005ada:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005adc:	f7ff fa90 	bl	8005000 <__retarget_lock_acquire_recursive>
 8005ae0:	68a3      	ldr	r3, [r4, #8]
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	60a3      	str	r3, [r4, #8]
 8005ae8:	da05      	bge.n	8005af6 <_putc_r+0x42>
 8005aea:	69a2      	ldr	r2, [r4, #24]
 8005aec:	4293      	cmp	r3, r2
 8005aee:	db1c      	blt.n	8005b2a <_putc_r+0x76>
 8005af0:	b2eb      	uxtb	r3, r5
 8005af2:	2b0a      	cmp	r3, #10
 8005af4:	d019      	beq.n	8005b2a <_putc_r+0x76>
 8005af6:	6823      	ldr	r3, [r4, #0]
 8005af8:	1c5a      	adds	r2, r3, #1
 8005afa:	6022      	str	r2, [r4, #0]
 8005afc:	701d      	strb	r5, [r3, #0]
 8005afe:	b2ed      	uxtb	r5, r5
 8005b00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b02:	07da      	lsls	r2, r3, #31
 8005b04:	d405      	bmi.n	8005b12 <_putc_r+0x5e>
 8005b06:	89a3      	ldrh	r3, [r4, #12]
 8005b08:	059b      	lsls	r3, r3, #22
 8005b0a:	d402      	bmi.n	8005b12 <_putc_r+0x5e>
 8005b0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b0e:	f7ff fa78 	bl	8005002 <__retarget_lock_release_recursive>
 8005b12:	4628      	mov	r0, r5
 8005b14:	bd70      	pop	{r4, r5, r6, pc}
 8005b16:	4b09      	ldr	r3, [pc, #36]	; (8005b3c <_putc_r+0x88>)
 8005b18:	429c      	cmp	r4, r3
 8005b1a:	d101      	bne.n	8005b20 <_putc_r+0x6c>
 8005b1c:	68b4      	ldr	r4, [r6, #8]
 8005b1e:	e7d6      	b.n	8005ace <_putc_r+0x1a>
 8005b20:	4b07      	ldr	r3, [pc, #28]	; (8005b40 <_putc_r+0x8c>)
 8005b22:	429c      	cmp	r4, r3
 8005b24:	bf08      	it	eq
 8005b26:	68f4      	ldreq	r4, [r6, #12]
 8005b28:	e7d1      	b.n	8005ace <_putc_r+0x1a>
 8005b2a:	4629      	mov	r1, r5
 8005b2c:	4622      	mov	r2, r4
 8005b2e:	4630      	mov	r0, r6
 8005b30:	f7fe ffee 	bl	8004b10 <__swbuf_r>
 8005b34:	4605      	mov	r5, r0
 8005b36:	e7e3      	b.n	8005b00 <_putc_r+0x4c>
 8005b38:	08006350 	.word	0x08006350
 8005b3c:	08006370 	.word	0x08006370
 8005b40:	08006330 	.word	0x08006330

08005b44 <_sbrk_r>:
 8005b44:	b538      	push	{r3, r4, r5, lr}
 8005b46:	4d06      	ldr	r5, [pc, #24]	; (8005b60 <_sbrk_r+0x1c>)
 8005b48:	2300      	movs	r3, #0
 8005b4a:	4604      	mov	r4, r0
 8005b4c:	4608      	mov	r0, r1
 8005b4e:	602b      	str	r3, [r5, #0]
 8005b50:	f7fb f95e 	bl	8000e10 <_sbrk>
 8005b54:	1c43      	adds	r3, r0, #1
 8005b56:	d102      	bne.n	8005b5e <_sbrk_r+0x1a>
 8005b58:	682b      	ldr	r3, [r5, #0]
 8005b5a:	b103      	cbz	r3, 8005b5e <_sbrk_r+0x1a>
 8005b5c:	6023      	str	r3, [r4, #0]
 8005b5e:	bd38      	pop	{r3, r4, r5, pc}
 8005b60:	200011b8 	.word	0x200011b8

08005b64 <__sread>:
 8005b64:	b510      	push	{r4, lr}
 8005b66:	460c      	mov	r4, r1
 8005b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b6c:	f000 f8e0 	bl	8005d30 <_read_r>
 8005b70:	2800      	cmp	r0, #0
 8005b72:	bfab      	itete	ge
 8005b74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b76:	89a3      	ldrhlt	r3, [r4, #12]
 8005b78:	181b      	addge	r3, r3, r0
 8005b7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b7e:	bfac      	ite	ge
 8005b80:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b82:	81a3      	strhlt	r3, [r4, #12]
 8005b84:	bd10      	pop	{r4, pc}

08005b86 <__swrite>:
 8005b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b8a:	461f      	mov	r7, r3
 8005b8c:	898b      	ldrh	r3, [r1, #12]
 8005b8e:	05db      	lsls	r3, r3, #23
 8005b90:	4605      	mov	r5, r0
 8005b92:	460c      	mov	r4, r1
 8005b94:	4616      	mov	r6, r2
 8005b96:	d505      	bpl.n	8005ba4 <__swrite+0x1e>
 8005b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f000 f868 	bl	8005c74 <_lseek_r>
 8005ba4:	89a3      	ldrh	r3, [r4, #12]
 8005ba6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005baa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bae:	81a3      	strh	r3, [r4, #12]
 8005bb0:	4632      	mov	r2, r6
 8005bb2:	463b      	mov	r3, r7
 8005bb4:	4628      	mov	r0, r5
 8005bb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bba:	f000 b817 	b.w	8005bec <_write_r>

08005bbe <__sseek>:
 8005bbe:	b510      	push	{r4, lr}
 8005bc0:	460c      	mov	r4, r1
 8005bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bc6:	f000 f855 	bl	8005c74 <_lseek_r>
 8005bca:	1c43      	adds	r3, r0, #1
 8005bcc:	89a3      	ldrh	r3, [r4, #12]
 8005bce:	bf15      	itete	ne
 8005bd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005bd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005bd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005bda:	81a3      	strheq	r3, [r4, #12]
 8005bdc:	bf18      	it	ne
 8005bde:	81a3      	strhne	r3, [r4, #12]
 8005be0:	bd10      	pop	{r4, pc}

08005be2 <__sclose>:
 8005be2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005be6:	f000 b813 	b.w	8005c10 <_close_r>
	...

08005bec <_write_r>:
 8005bec:	b538      	push	{r3, r4, r5, lr}
 8005bee:	4d07      	ldr	r5, [pc, #28]	; (8005c0c <_write_r+0x20>)
 8005bf0:	4604      	mov	r4, r0
 8005bf2:	4608      	mov	r0, r1
 8005bf4:	4611      	mov	r1, r2
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	602a      	str	r2, [r5, #0]
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	f7fa ffbb 	bl	8000b76 <_write>
 8005c00:	1c43      	adds	r3, r0, #1
 8005c02:	d102      	bne.n	8005c0a <_write_r+0x1e>
 8005c04:	682b      	ldr	r3, [r5, #0]
 8005c06:	b103      	cbz	r3, 8005c0a <_write_r+0x1e>
 8005c08:	6023      	str	r3, [r4, #0]
 8005c0a:	bd38      	pop	{r3, r4, r5, pc}
 8005c0c:	200011b8 	.word	0x200011b8

08005c10 <_close_r>:
 8005c10:	b538      	push	{r3, r4, r5, lr}
 8005c12:	4d06      	ldr	r5, [pc, #24]	; (8005c2c <_close_r+0x1c>)
 8005c14:	2300      	movs	r3, #0
 8005c16:	4604      	mov	r4, r0
 8005c18:	4608      	mov	r0, r1
 8005c1a:	602b      	str	r3, [r5, #0]
 8005c1c:	f7fb f8c3 	bl	8000da6 <_close>
 8005c20:	1c43      	adds	r3, r0, #1
 8005c22:	d102      	bne.n	8005c2a <_close_r+0x1a>
 8005c24:	682b      	ldr	r3, [r5, #0]
 8005c26:	b103      	cbz	r3, 8005c2a <_close_r+0x1a>
 8005c28:	6023      	str	r3, [r4, #0]
 8005c2a:	bd38      	pop	{r3, r4, r5, pc}
 8005c2c:	200011b8 	.word	0x200011b8

08005c30 <_fstat_r>:
 8005c30:	b538      	push	{r3, r4, r5, lr}
 8005c32:	4d07      	ldr	r5, [pc, #28]	; (8005c50 <_fstat_r+0x20>)
 8005c34:	2300      	movs	r3, #0
 8005c36:	4604      	mov	r4, r0
 8005c38:	4608      	mov	r0, r1
 8005c3a:	4611      	mov	r1, r2
 8005c3c:	602b      	str	r3, [r5, #0]
 8005c3e:	f7fb f8be 	bl	8000dbe <_fstat>
 8005c42:	1c43      	adds	r3, r0, #1
 8005c44:	d102      	bne.n	8005c4c <_fstat_r+0x1c>
 8005c46:	682b      	ldr	r3, [r5, #0]
 8005c48:	b103      	cbz	r3, 8005c4c <_fstat_r+0x1c>
 8005c4a:	6023      	str	r3, [r4, #0]
 8005c4c:	bd38      	pop	{r3, r4, r5, pc}
 8005c4e:	bf00      	nop
 8005c50:	200011b8 	.word	0x200011b8

08005c54 <_isatty_r>:
 8005c54:	b538      	push	{r3, r4, r5, lr}
 8005c56:	4d06      	ldr	r5, [pc, #24]	; (8005c70 <_isatty_r+0x1c>)
 8005c58:	2300      	movs	r3, #0
 8005c5a:	4604      	mov	r4, r0
 8005c5c:	4608      	mov	r0, r1
 8005c5e:	602b      	str	r3, [r5, #0]
 8005c60:	f7fb f8bd 	bl	8000dde <_isatty>
 8005c64:	1c43      	adds	r3, r0, #1
 8005c66:	d102      	bne.n	8005c6e <_isatty_r+0x1a>
 8005c68:	682b      	ldr	r3, [r5, #0]
 8005c6a:	b103      	cbz	r3, 8005c6e <_isatty_r+0x1a>
 8005c6c:	6023      	str	r3, [r4, #0]
 8005c6e:	bd38      	pop	{r3, r4, r5, pc}
 8005c70:	200011b8 	.word	0x200011b8

08005c74 <_lseek_r>:
 8005c74:	b538      	push	{r3, r4, r5, lr}
 8005c76:	4d07      	ldr	r5, [pc, #28]	; (8005c94 <_lseek_r+0x20>)
 8005c78:	4604      	mov	r4, r0
 8005c7a:	4608      	mov	r0, r1
 8005c7c:	4611      	mov	r1, r2
 8005c7e:	2200      	movs	r2, #0
 8005c80:	602a      	str	r2, [r5, #0]
 8005c82:	461a      	mov	r2, r3
 8005c84:	f7fb f8b6 	bl	8000df4 <_lseek>
 8005c88:	1c43      	adds	r3, r0, #1
 8005c8a:	d102      	bne.n	8005c92 <_lseek_r+0x1e>
 8005c8c:	682b      	ldr	r3, [r5, #0]
 8005c8e:	b103      	cbz	r3, 8005c92 <_lseek_r+0x1e>
 8005c90:	6023      	str	r3, [r4, #0]
 8005c92:	bd38      	pop	{r3, r4, r5, pc}
 8005c94:	200011b8 	.word	0x200011b8

08005c98 <memmove>:
 8005c98:	4288      	cmp	r0, r1
 8005c9a:	b510      	push	{r4, lr}
 8005c9c:	eb01 0402 	add.w	r4, r1, r2
 8005ca0:	d902      	bls.n	8005ca8 <memmove+0x10>
 8005ca2:	4284      	cmp	r4, r0
 8005ca4:	4623      	mov	r3, r4
 8005ca6:	d807      	bhi.n	8005cb8 <memmove+0x20>
 8005ca8:	1e43      	subs	r3, r0, #1
 8005caa:	42a1      	cmp	r1, r4
 8005cac:	d008      	beq.n	8005cc0 <memmove+0x28>
 8005cae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005cb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005cb6:	e7f8      	b.n	8005caa <memmove+0x12>
 8005cb8:	4402      	add	r2, r0
 8005cba:	4601      	mov	r1, r0
 8005cbc:	428a      	cmp	r2, r1
 8005cbe:	d100      	bne.n	8005cc2 <memmove+0x2a>
 8005cc0:	bd10      	pop	{r4, pc}
 8005cc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005cc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005cca:	e7f7      	b.n	8005cbc <memmove+0x24>

08005ccc <__malloc_lock>:
 8005ccc:	4801      	ldr	r0, [pc, #4]	; (8005cd4 <__malloc_lock+0x8>)
 8005cce:	f7ff b997 	b.w	8005000 <__retarget_lock_acquire_recursive>
 8005cd2:	bf00      	nop
 8005cd4:	200011b0 	.word	0x200011b0

08005cd8 <__malloc_unlock>:
 8005cd8:	4801      	ldr	r0, [pc, #4]	; (8005ce0 <__malloc_unlock+0x8>)
 8005cda:	f7ff b992 	b.w	8005002 <__retarget_lock_release_recursive>
 8005cde:	bf00      	nop
 8005ce0:	200011b0 	.word	0x200011b0

08005ce4 <_realloc_r>:
 8005ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ce6:	4607      	mov	r7, r0
 8005ce8:	4614      	mov	r4, r2
 8005cea:	460e      	mov	r6, r1
 8005cec:	b921      	cbnz	r1, 8005cf8 <_realloc_r+0x14>
 8005cee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005cf2:	4611      	mov	r1, r2
 8005cf4:	f7ff ba3a 	b.w	800516c <_malloc_r>
 8005cf8:	b922      	cbnz	r2, 8005d04 <_realloc_r+0x20>
 8005cfa:	f7ff f9e7 	bl	80050cc <_free_r>
 8005cfe:	4625      	mov	r5, r4
 8005d00:	4628      	mov	r0, r5
 8005d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d04:	f000 f826 	bl	8005d54 <_malloc_usable_size_r>
 8005d08:	42a0      	cmp	r0, r4
 8005d0a:	d20f      	bcs.n	8005d2c <_realloc_r+0x48>
 8005d0c:	4621      	mov	r1, r4
 8005d0e:	4638      	mov	r0, r7
 8005d10:	f7ff fa2c 	bl	800516c <_malloc_r>
 8005d14:	4605      	mov	r5, r0
 8005d16:	2800      	cmp	r0, #0
 8005d18:	d0f2      	beq.n	8005d00 <_realloc_r+0x1c>
 8005d1a:	4631      	mov	r1, r6
 8005d1c:	4622      	mov	r2, r4
 8005d1e:	f7fe fe05 	bl	800492c <memcpy>
 8005d22:	4631      	mov	r1, r6
 8005d24:	4638      	mov	r0, r7
 8005d26:	f7ff f9d1 	bl	80050cc <_free_r>
 8005d2a:	e7e9      	b.n	8005d00 <_realloc_r+0x1c>
 8005d2c:	4635      	mov	r5, r6
 8005d2e:	e7e7      	b.n	8005d00 <_realloc_r+0x1c>

08005d30 <_read_r>:
 8005d30:	b538      	push	{r3, r4, r5, lr}
 8005d32:	4d07      	ldr	r5, [pc, #28]	; (8005d50 <_read_r+0x20>)
 8005d34:	4604      	mov	r4, r0
 8005d36:	4608      	mov	r0, r1
 8005d38:	4611      	mov	r1, r2
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	602a      	str	r2, [r5, #0]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	f7fb f814 	bl	8000d6c <_read>
 8005d44:	1c43      	adds	r3, r0, #1
 8005d46:	d102      	bne.n	8005d4e <_read_r+0x1e>
 8005d48:	682b      	ldr	r3, [r5, #0]
 8005d4a:	b103      	cbz	r3, 8005d4e <_read_r+0x1e>
 8005d4c:	6023      	str	r3, [r4, #0]
 8005d4e:	bd38      	pop	{r3, r4, r5, pc}
 8005d50:	200011b8 	.word	0x200011b8

08005d54 <_malloc_usable_size_r>:
 8005d54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d58:	1f18      	subs	r0, r3, #4
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	bfbc      	itt	lt
 8005d5e:	580b      	ldrlt	r3, [r1, r0]
 8005d60:	18c0      	addlt	r0, r0, r3
 8005d62:	4770      	bx	lr

08005d64 <_init>:
 8005d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d66:	bf00      	nop
 8005d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d6a:	bc08      	pop	{r3}
 8005d6c:	469e      	mov	lr, r3
 8005d6e:	4770      	bx	lr

08005d70 <_fini>:
 8005d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d72:	bf00      	nop
 8005d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d76:	bc08      	pop	{r3}
 8005d78:	469e      	mov	lr, r3
 8005d7a:	4770      	bx	lr
