
OEM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005334  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  080054c4  080054c4  000154c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005860  08005860  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005860  08005860  00015860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005868  08005868  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005868  08005868  00015868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800586c  0800586c  0001586c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000054c  20000070  080058e0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005bc  080058e0  000205bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b07  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b47  00000000  00000000  00032ba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  000356f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b70  00000000  00000000  00036378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029592  00000000  00000000  00036ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef69  00000000  00000000  0006047a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106600  00000000  00000000  0006f3e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001759e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003978  00000000  00000000  00175a38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080054ac 	.word	0x080054ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080054ac 	.word	0x080054ac

080001d0 <setjmp>:
 80001d0:	46ec      	mov	ip, sp
 80001d2:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80001d6:	f04f 0000 	mov.w	r0, #0
 80001da:	4770      	bx	lr

080001dc <longjmp>:
 80001dc:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80001e0:	46e5      	mov	sp, ip
 80001e2:	0008      	movs	r0, r1
 80001e4:	bf08      	it	eq
 80001e6:	2001      	moveq	r0, #1
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr
 80001fc:	0000      	movs	r0, r0
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <init_uart_interrupt>:

static uint8_t rx_variable;
static char rx_buffer[RX_BUFFER_SIZE];
static uint8_t rx_buffer_index = 0;

void init_uart_interrupt(void){
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart4, &rx_variable, 1);
 800059c:	2201      	movs	r2, #1
 800059e:	4903      	ldr	r1, [pc, #12]	; (80005ac <init_uart_interrupt+0x14>)
 80005a0:	4803      	ldr	r0, [pc, #12]	; (80005b0 <init_uart_interrupt+0x18>)
 80005a2:	f002 feef 	bl	8003384 <HAL_UART_Receive_IT>
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	2000008e 	.word	0x2000008e
 80005b0:	20000524 	.word	0x20000524

080005b4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]

   if (huart->Instance == UART4) {
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a0b      	ldr	r2, [pc, #44]	; (80005f0 <HAL_UART_RxCpltCallback+0x3c>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d10a      	bne.n	80005dc <HAL_UART_RxCpltCallback+0x28>
      rx_buffer[rx_buffer_index++] = rx_variable;    // Add 1 byte to Rx_Buffer
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <HAL_UART_RxCpltCallback+0x40>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	1c5a      	adds	r2, r3, #1
 80005cc:	b2d1      	uxtb	r1, r2
 80005ce:	4a09      	ldr	r2, [pc, #36]	; (80005f4 <HAL_UART_RxCpltCallback+0x40>)
 80005d0:	7011      	strb	r1, [r2, #0]
 80005d2:	461a      	mov	r2, r3
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <HAL_UART_RxCpltCallback+0x44>)
 80005d6:	7819      	ldrb	r1, [r3, #0]
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <HAL_UART_RxCpltCallback+0x48>)
 80005da:	5499      	strb	r1, [r3, r2]
    }
      HAL_UART_Receive_IT(&huart4, &rx_variable, 1);
 80005dc:	2201      	movs	r2, #1
 80005de:	4906      	ldr	r1, [pc, #24]	; (80005f8 <HAL_UART_RxCpltCallback+0x44>)
 80005e0:	4807      	ldr	r0, [pc, #28]	; (8000600 <HAL_UART_RxCpltCallback+0x4c>)
 80005e2:	f002 fecf 	bl	8003384 <HAL_UART_Receive_IT>
}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40004c00 	.word	0x40004c00
 80005f4:	20000490 	.word	0x20000490
 80005f8:	2000008e 	.word	0x2000008e
 80005fc:	20000090 	.word	0x20000090
 8000600:	20000524 	.word	0x20000524

08000604 <hash>:

/* djb2 hashing algorithm */
const unsigned long hash(const char *str) {
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
    unsigned long hash = 5381;
 800060c:	f241 5305 	movw	r3, #5381	; 0x1505
 8000610:	60fb      	str	r3, [r7, #12]
    int c;

    while ((c = *str++))
 8000612:	e006      	b.n	8000622 <hash+0x1e>
        hash = ((hash << 5) + hash) + c;
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	015a      	lsls	r2, r3, #5
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	441a      	add	r2, r3
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	4413      	add	r3, r2
 8000620:	60fb      	str	r3, [r7, #12]
    while ((c = *str++))
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	1c5a      	adds	r2, r3, #1
 8000626:	607a      	str	r2, [r7, #4]
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d1f0      	bne.n	8000614 <hash+0x10>
    return hash;
 8000632:	68fb      	ldr	r3, [r7, #12]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3714      	adds	r7, #20
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr

08000640 <uart_send>:

char* uart_send(const char* command){
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	rx_buffer_index = 0;
 8000648:	4b72      	ldr	r3, [pc, #456]	; (8000814 <uart_send+0x1d4>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
	ERROR_FLAG = false;
 800064e:	4b72      	ldr	r3, [pc, #456]	; (8000818 <uart_send+0x1d8>)
 8000650:	2200      	movs	r2, #0
 8000652:	701a      	strb	r2, [r3, #0]
	FAIL_FLAG = false;
 8000654:	4b71      	ldr	r3, [pc, #452]	; (800081c <uart_send+0x1dc>)
 8000656:	2200      	movs	r2, #0
 8000658:	701a      	strb	r2, [r3, #0]
	memset(rx_buffer, 0, RX_BUFFER_SIZE);
 800065a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800065e:	2100      	movs	r1, #0
 8000660:	486f      	ldr	r0, [pc, #444]	; (8000820 <uart_send+0x1e0>)
 8000662:	f003 fed9 	bl	8004418 <memset>
	HAL_UART_Transmit(&huart4, (uint8_t*) command, strlen(command), 100);
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f7ff fdc0 	bl	80001ec <strlen>
 800066c:	4603      	mov	r3, r0
 800066e:	b29a      	uxth	r2, r3
 8000670:	2364      	movs	r3, #100	; 0x64
 8000672:	6879      	ldr	r1, [r7, #4]
 8000674:	486b      	ldr	r0, [pc, #428]	; (8000824 <uart_send+0x1e4>)
 8000676:	f002 fdf1 	bl	800325c <HAL_UART_Transmit>

	// wait for OK or ERROR/FAIL
	while((strstr(rx_buffer, "OK\r\n") == NULL)){
 800067a:	e015      	b.n	80006a8 <uart_send+0x68>
		if(strstr(rx_buffer, "ERROR") != NULL){
 800067c:	496a      	ldr	r1, [pc, #424]	; (8000828 <uart_send+0x1e8>)
 800067e:	4868      	ldr	r0, [pc, #416]	; (8000820 <uart_send+0x1e0>)
 8000680:	f003 ff76 	bl	8004570 <strstr>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d003      	beq.n	8000692 <uart_send+0x52>
			ERROR_FLAG = true;
 800068a:	4b63      	ldr	r3, [pc, #396]	; (8000818 <uart_send+0x1d8>)
 800068c:	2201      	movs	r2, #1
 800068e:	701a      	strb	r2, [r3, #0]
			break;
 8000690:	e011      	b.n	80006b6 <uart_send+0x76>
		}
		if(strstr(rx_buffer, "FAIL") != NULL){
 8000692:	4966      	ldr	r1, [pc, #408]	; (800082c <uart_send+0x1ec>)
 8000694:	4862      	ldr	r0, [pc, #392]	; (8000820 <uart_send+0x1e0>)
 8000696:	f003 ff6b 	bl	8004570 <strstr>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d003      	beq.n	80006a8 <uart_send+0x68>
			FAIL_FLAG = true;
 80006a0:	4b5e      	ldr	r3, [pc, #376]	; (800081c <uart_send+0x1dc>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	701a      	strb	r2, [r3, #0]
			break;
 80006a6:	e006      	b.n	80006b6 <uart_send+0x76>
	while((strstr(rx_buffer, "OK\r\n") == NULL)){
 80006a8:	4961      	ldr	r1, [pc, #388]	; (8000830 <uart_send+0x1f0>)
 80006aa:	485d      	ldr	r0, [pc, #372]	; (8000820 <uart_send+0x1e0>)
 80006ac:	f003 ff60 	bl	8004570 <strstr>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d0e2      	beq.n	800067c <uart_send+0x3c>
		}
	}

	switch (hash(command)) {
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f7ff ffa4 	bl	8000604 <hash>
 80006bc:	4603      	mov	r3, r0
 80006be:	4a5d      	ldr	r2, [pc, #372]	; (8000834 <uart_send+0x1f4>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d04e      	beq.n	8000762 <uart_send+0x122>
 80006c4:	4a5b      	ldr	r2, [pc, #364]	; (8000834 <uart_send+0x1f4>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	f200 809f 	bhi.w	800080a <uart_send+0x1ca>
 80006cc:	4a5a      	ldr	r2, [pc, #360]	; (8000838 <uart_send+0x1f8>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d025      	beq.n	800071e <uart_send+0xde>
 80006d2:	4a59      	ldr	r2, [pc, #356]	; (8000838 <uart_send+0x1f8>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	f200 8098 	bhi.w	800080a <uart_send+0x1ca>
 80006da:	4a58      	ldr	r2, [pc, #352]	; (800083c <uart_send+0x1fc>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d073      	beq.n	80007c8 <uart_send+0x188>
 80006e0:	4a56      	ldr	r2, [pc, #344]	; (800083c <uart_send+0x1fc>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	f200 8091 	bhi.w	800080a <uart_send+0x1ca>
 80006e8:	4a55      	ldr	r2, [pc, #340]	; (8000840 <uart_send+0x200>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d02b      	beq.n	8000746 <uart_send+0x106>
 80006ee:	4a54      	ldr	r2, [pc, #336]	; (8000840 <uart_send+0x200>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	f200 808a 	bhi.w	800080a <uart_send+0x1ca>
 80006f6:	4a53      	ldr	r2, [pc, #332]	; (8000844 <uart_send+0x204>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d059      	beq.n	80007b0 <uart_send+0x170>
 80006fc:	4a51      	ldr	r2, [pc, #324]	; (8000844 <uart_send+0x204>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	f200 8083 	bhi.w	800080a <uart_send+0x1ca>
 8000704:	4a50      	ldr	r2, [pc, #320]	; (8000848 <uart_send+0x208>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d011      	beq.n	800072e <uart_send+0xee>
 800070a:	4a4f      	ldr	r2, [pc, #316]	; (8000848 <uart_send+0x208>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d87c      	bhi.n	800080a <uart_send+0x1ca>
 8000710:	4a4e      	ldr	r2, [pc, #312]	; (800084c <uart_send+0x20c>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d023      	beq.n	800075e <uart_send+0x11e>
 8000716:	4a4e      	ldr	r2, [pc, #312]	; (8000850 <uart_send+0x210>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d06a      	beq.n	80007f2 <uart_send+0x1b2>
 800071c:	e075      	b.n	800080a <uart_send+0x1ca>

		case ESP8266_AT_KEY:
			if(ERROR_FLAG)
 800071e:	4b3e      	ldr	r3, [pc, #248]	; (8000818 <uart_send+0x1d8>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <uart_send+0xea>
				return "ERROR";
 8000726:	4b40      	ldr	r3, [pc, #256]	; (8000828 <uart_send+0x1e8>)
 8000728:	e070      	b.n	800080c <uart_send+0x1cc>
			return "OK";
 800072a:	4b4a      	ldr	r3, [pc, #296]	; (8000854 <uart_send+0x214>)
 800072c:	e06e      	b.n	800080c <uart_send+0x1cc>

		case ESP8266_AT_GMR_KEY:
			if(ERROR_FLAG || FAIL_FLAG)
 800072e:	4b3a      	ldr	r3, [pc, #232]	; (8000818 <uart_send+0x1d8>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d103      	bne.n	800073e <uart_send+0xfe>
 8000736:	4b39      	ldr	r3, [pc, #228]	; (800081c <uart_send+0x1dc>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <uart_send+0x102>
				return "ERROR";
 800073e:	4b3a      	ldr	r3, [pc, #232]	; (8000828 <uart_send+0x1e8>)
 8000740:	e064      	b.n	800080c <uart_send+0x1cc>
			return "OK";
 8000742:	4b44      	ldr	r3, [pc, #272]	; (8000854 <uart_send+0x214>)
 8000744:	e062      	b.n	800080c <uart_send+0x1cc>

		case ESP8266_AT_RST_KEY:
			if(ERROR_FLAG || FAIL_FLAG)
 8000746:	4b34      	ldr	r3, [pc, #208]	; (8000818 <uart_send+0x1d8>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d103      	bne.n	8000756 <uart_send+0x116>
 800074e:	4b33      	ldr	r3, [pc, #204]	; (800081c <uart_send+0x1dc>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <uart_send+0x11a>
				return "ERROR";
 8000756:	4b34      	ldr	r3, [pc, #208]	; (8000828 <uart_send+0x1e8>)
 8000758:	e058      	b.n	800080c <uart_send+0x1cc>
			return "OK";
 800075a:	4b3e      	ldr	r3, [pc, #248]	; (8000854 <uart_send+0x214>)
 800075c:	e056      	b.n	800080c <uart_send+0x1cc>

		case ESP8266_DEBUG_KEY:
			return rx_buffer;
 800075e:	4b30      	ldr	r3, [pc, #192]	; (8000820 <uart_send+0x1e0>)
 8000760:	e054      	b.n	800080c <uart_send+0x1cc>

		case ESP8266_AT_CWMODE_TEST_KEY:
			if(ERROR_FLAG || FAIL_FLAG)
 8000762:	4b2d      	ldr	r3, [pc, #180]	; (8000818 <uart_send+0x1d8>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d103      	bne.n	8000772 <uart_send+0x132>
 800076a:	4b2c      	ldr	r3, [pc, #176]	; (800081c <uart_send+0x1dc>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <uart_send+0x136>
				return "ERROR";
 8000772:	4b2d      	ldr	r3, [pc, #180]	; (8000828 <uart_send+0x1e8>)
 8000774:	e04a      	b.n	800080c <uart_send+0x1cc>
			else {
				if (strstr(rx_buffer, "CWMODE_CUR:1") != NULL)
 8000776:	4938      	ldr	r1, [pc, #224]	; (8000858 <uart_send+0x218>)
 8000778:	4829      	ldr	r0, [pc, #164]	; (8000820 <uart_send+0x1e0>)
 800077a:	f003 fef9 	bl	8004570 <strstr>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <uart_send+0x148>
					return "CWMODE:1";
 8000784:	4b35      	ldr	r3, [pc, #212]	; (800085c <uart_send+0x21c>)
 8000786:	e041      	b.n	800080c <uart_send+0x1cc>
				else if(strstr(rx_buffer, "CWMODE_CUR:2") != NULL)
 8000788:	4935      	ldr	r1, [pc, #212]	; (8000860 <uart_send+0x220>)
 800078a:	4825      	ldr	r0, [pc, #148]	; (8000820 <uart_send+0x1e0>)
 800078c:	f003 fef0 	bl	8004570 <strstr>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <uart_send+0x15a>
					return "CWMODE:2";
 8000796:	4b33      	ldr	r3, [pc, #204]	; (8000864 <uart_send+0x224>)
 8000798:	e038      	b.n	800080c <uart_send+0x1cc>
				else if(strstr(rx_buffer, "CWMODE_CUR:3") != NULL)
 800079a:	4933      	ldr	r1, [pc, #204]	; (8000868 <uart_send+0x228>)
 800079c:	4820      	ldr	r0, [pc, #128]	; (8000820 <uart_send+0x1e0>)
 800079e:	f003 fee7 	bl	8004570 <strstr>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <uart_send+0x16c>
					return "CWMODE:3";
 80007a8:	4b30      	ldr	r3, [pc, #192]	; (800086c <uart_send+0x22c>)
 80007aa:	e02f      	b.n	800080c <uart_send+0x1cc>
				else
					return "CWMODE:?";
 80007ac:	4b30      	ldr	r3, [pc, #192]	; (8000870 <uart_send+0x230>)
 80007ae:	e02d      	b.n	800080c <uart_send+0x1cc>
			}

		case ESP8266_AT_CWMODE_STATION_MODE_KEY:
			if(ERROR_FLAG || FAIL_FLAG)
 80007b0:	4b19      	ldr	r3, [pc, #100]	; (8000818 <uart_send+0x1d8>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d103      	bne.n	80007c0 <uart_send+0x180>
 80007b8:	4b18      	ldr	r3, [pc, #96]	; (800081c <uart_send+0x1dc>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <uart_send+0x184>
				return "ERROR";
 80007c0:	4b19      	ldr	r3, [pc, #100]	; (8000828 <uart_send+0x1e8>)
 80007c2:	e023      	b.n	800080c <uart_send+0x1cc>
			return "OK";
 80007c4:	4b23      	ldr	r3, [pc, #140]	; (8000854 <uart_send+0x214>)
 80007c6:	e021      	b.n	800080c <uart_send+0x1cc>

		case ESP8266_AT_CWJAP_TEST_KEY:
			if(ERROR_FLAG || FAIL_FLAG)
 80007c8:	4b13      	ldr	r3, [pc, #76]	; (8000818 <uart_send+0x1d8>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d103      	bne.n	80007d8 <uart_send+0x198>
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <uart_send+0x1dc>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <uart_send+0x19c>
				return "ERROR";
 80007d8:	4b13      	ldr	r3, [pc, #76]	; (8000828 <uart_send+0x1e8>)
 80007da:	e017      	b.n	800080c <uart_send+0x1cc>
			else {
				if(strstr(rx_buffer, "No AP\r\n"))
 80007dc:	4925      	ldr	r1, [pc, #148]	; (8000874 <uart_send+0x234>)
 80007de:	4810      	ldr	r0, [pc, #64]	; (8000820 <uart_send+0x1e0>)
 80007e0:	f003 fec6 	bl	8004570 <strstr>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <uart_send+0x1ae>
					return "NO AP";
 80007ea:	4b23      	ldr	r3, [pc, #140]	; (8000878 <uart_send+0x238>)
 80007ec:	e00e      	b.n	800080c <uart_send+0x1cc>
				else
					return "CONNECTED";
 80007ee:	4b23      	ldr	r3, [pc, #140]	; (800087c <uart_send+0x23c>)
 80007f0:	e00c      	b.n	800080c <uart_send+0x1cc>
			}

		case ESP8266_AT_CWQAP_KEY:
			if(ERROR_FLAG || FAIL_FLAG)
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <uart_send+0x1d8>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d103      	bne.n	8000802 <uart_send+0x1c2>
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <uart_send+0x1dc>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <uart_send+0x1c6>
				return "ERROR";
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <uart_send+0x1e8>)
 8000804:	e002      	b.n	800080c <uart_send+0x1cc>
			return "OK";
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <uart_send+0x214>)
 8000808:	e000      	b.n	800080c <uart_send+0x1cc>
				else
					return "CWJAP:?";

			}*/
		default:
			return "not implemented";
 800080a:	4b1d      	ldr	r3, [pc, #116]	; (8000880 <uart_send+0x240>)
			break;
	}
}
 800080c:	4618      	mov	r0, r3
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000490 	.word	0x20000490
 8000818:	2000008c 	.word	0x2000008c
 800081c:	2000008d 	.word	0x2000008d
 8000820:	20000090 	.word	0x20000090
 8000824:	20000524 	.word	0x20000524
 8000828:	080054c4 	.word	0x080054c4
 800082c:	080054cc 	.word	0x080054cc
 8000830:	080054d4 	.word	0x080054d4
 8000834:	f5600f43 	.word	0xf5600f43
 8000838:	7c821b31 	.word	0x7c821b31
 800083c:	5bfaa730 	.word	0x5bfaa730
 8000840:	24cedd55 	.word	0x24cedd55
 8000844:	243fa9a9 	.word	0x243fa9a9
 8000848:	24047d02 	.word	0x24047d02
 800084c:	0cf47c8c 	.word	0x0cf47c8c
 8000850:	1a8dff78 	.word	0x1a8dff78
 8000854:	080054dc 	.word	0x080054dc
 8000858:	080054e0 	.word	0x080054e0
 800085c:	080054f0 	.word	0x080054f0
 8000860:	080054fc 	.word	0x080054fc
 8000864:	0800550c 	.word	0x0800550c
 8000868:	08005518 	.word	0x08005518
 800086c:	08005528 	.word	0x08005528
 8000870:	08005534 	.word	0x08005534
 8000874:	08005540 	.word	0x08005540
 8000878:	08005548 	.word	0x08005548
 800087c:	08005550 	.word	0x08005550
 8000880:	0800555c 	.word	0x0800555c

08000884 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_GPIO_Init+0x2c>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	4a08      	ldr	r2, [pc, #32]	; (80008b0 <MX_GPIO_Init+0x2c>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_GPIO_Init+0x2c>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

}
 80008a2:	bf00      	nop
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	40021000 	.word	0x40021000

080008b4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80008bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008c0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80008c4:	f003 0301 	and.w	r3, r3, #1
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d013      	beq.n	80008f4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80008cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008d0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80008d4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d00b      	beq.n	80008f4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80008dc:	e000      	b.n	80008e0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80008de:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80008e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d0f9      	beq.n	80008de <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80008ea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	b2d2      	uxtb	r2, r2
 80008f2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80008f4:	687b      	ldr	r3, [r7, #4]
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b086      	sub	sp, #24
 8000906:	af00      	add	r7, sp, #0
 8000908:	60f8      	str	r0, [r7, #12]
 800090a:	60b9      	str	r1, [r7, #8]
 800090c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
 8000912:	e009      	b.n	8000928 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	1c5a      	adds	r2, r3, #1
 8000918:	60ba      	str	r2, [r7, #8]
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff ffc9 	bl	80008b4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	3301      	adds	r3, #1
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	697a      	ldr	r2, [r7, #20]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	429a      	cmp	r2, r3
 800092e:	dbf1      	blt.n	8000914 <_write+0x12>
	}
	return len;
 8000930:	687b      	ldr	r3, [r7, #4]
}
 8000932:	4618      	mov	r0, r3
 8000934:	3718      	adds	r7, #24
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093e:	f000 fd84 	bl	800144a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000942:	f000 f807 	bl	8000954 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000946:	f7ff ff9d 	bl	8000884 <MX_GPIO_Init>
  MX_UART4_Init();
 800094a:	f000 fcdb 	bl	8001304 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  #ifdef RUN_UNIT_TEST
  	  unit_test();
 800094e:	f000 fa19 	bl	8000d84 <unit_test>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000952:	e7fe      	b.n	8000952 <main+0x18>

08000954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b0b8      	sub	sp, #224	; 0xe0
 8000958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800095e:	2244      	movs	r2, #68	; 0x44
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f003 fd58 	bl	8004418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000968:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000978:	463b      	mov	r3, r7
 800097a:	2288      	movs	r2, #136	; 0x88
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f003 fd4a 	bl	8004418 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000984:	2302      	movs	r3, #2
 8000986:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800098a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800098e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000992:	2310      	movs	r3, #16
 8000994:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000998:	2302      	movs	r3, #2
 800099a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800099e:	2302      	movs	r3, #2
 80009a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009a4:	2301      	movs	r3, #1
 80009a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80009aa:	230a      	movs	r3, #10
 80009ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009b0:	2307      	movs	r3, #7
 80009b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009b6:	2302      	movs	r3, #2
 80009b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009bc:	2302      	movs	r3, #2
 80009be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009c6:	4618      	mov	r0, r3
 80009c8:	f001 f952 	bl	8001c70 <HAL_RCC_OscConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80009d2:	f000 f834 	bl	8000a3e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d6:	230f      	movs	r3, #15
 80009d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009dc:	2303      	movs	r3, #3
 80009de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ee:	2300      	movs	r3, #0
 80009f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009f4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80009f8:	2104      	movs	r1, #4
 80009fa:	4618      	mov	r0, r3
 80009fc:	f001 fd1e 	bl	800243c <HAL_RCC_ClockConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000a06:	f000 f81a 	bl	8000a3e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000a0a:	2308      	movs	r3, #8
 8000a0c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 8000a0e:	2340      	movs	r3, #64	; 0x40
 8000a10:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a12:	463b      	mov	r3, r7
 8000a14:	4618      	mov	r0, r3
 8000a16:	f001 ff17 	bl	8002848 <HAL_RCCEx_PeriphCLKConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000a20:	f000 f80d 	bl	8000a3e <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a24:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a28:	f001 f8cc 	bl	8001bc4 <HAL_PWREx_ControlVoltageScaling>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000a32:	f000 f804 	bl	8000a3e <Error_Handler>
  }
}
 8000a36:	bf00      	nop
 8000a38:	37e0      	adds	r7, #224	; 0xe0
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a42:	b672      	cpsid	i
}
 8000a44:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <Error_Handler+0x8>

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <HAL_MspInit+0x44>)
 8000a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a52:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <HAL_MspInit+0x44>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6613      	str	r3, [r2, #96]	; 0x60
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <HAL_MspInit+0x44>)
 8000a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <HAL_MspInit+0x44>)
 8000a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a6a:	4a08      	ldr	r2, [pc, #32]	; (8000a8c <HAL_MspInit+0x44>)
 8000a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a70:	6593      	str	r3, [r2, #88]	; 0x58
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_MspInit+0x44>)
 8000a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	40021000 	.word	0x40021000

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <NMI_Handler+0x4>

08000a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <HardFault_Handler+0x4>

08000a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <MemManage_Handler+0x4>

08000aa2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <BusFault_Handler+0x4>

08000aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <UsageFault_Handler+0x4>

08000aae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000adc:	f000 fd0a 	bl	80014f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000ae8:	4802      	ldr	r0, [pc, #8]	; (8000af4 <UART4_IRQHandler+0x10>)
 8000aea:	f002 fc8f 	bl	800340c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000524 	.word	0x20000524

08000af8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	e00a      	b.n	8000b20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b0a:	f3af 8000 	nop.w
 8000b0e:	4601      	mov	r1, r0
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	1c5a      	adds	r2, r3, #1
 8000b14:	60ba      	str	r2, [r7, #8]
 8000b16:	b2ca      	uxtb	r2, r1
 8000b18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	697a      	ldr	r2, [r7, #20]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	dbf0      	blt.n	8000b0a <_read+0x12>
	}

return len;
 8000b28:	687b      	ldr	r3, [r7, #4]
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000b32:	b480      	push	{r7}
 8000b34:	b083      	sub	sp, #12
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
	return -1;
 8000b3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	b083      	sub	sp, #12
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
 8000b52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b5a:	605a      	str	r2, [r3, #4]
	return 0;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <_isatty>:

int _isatty(int file)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	b083      	sub	sp, #12
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
	return 1;
 8000b72:	2301      	movs	r3, #1
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
	return 0;
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3714      	adds	r7, #20
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
	...

08000b9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba4:	4a14      	ldr	r2, [pc, #80]	; (8000bf8 <_sbrk+0x5c>)
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <_sbrk+0x60>)
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb0:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <_sbrk+0x64>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d102      	bne.n	8000bbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <_sbrk+0x64>)
 8000bba:	4a12      	ldr	r2, [pc, #72]	; (8000c04 <_sbrk+0x68>)
 8000bbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <_sbrk+0x64>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d207      	bcs.n	8000bdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bcc:	f003 fbfa 	bl	80043c4 <__errno>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bda:	e009      	b.n	8000bf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bdc:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <_sbrk+0x64>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000be2:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <_sbrk+0x64>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	4a05      	ldr	r2, [pc, #20]	; (8000c00 <_sbrk+0x64>)
 8000bec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bee:	68fb      	ldr	r3, [r7, #12]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3718      	adds	r7, #24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20018000 	.word	0x20018000
 8000bfc:	00000400 	.word	0x00000400
 8000c00:	20000494 	.word	0x20000494
 8000c04:	200005c0 	.word	0x200005c0

08000c08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c0c:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <SystemInit+0x5c>)
 8000c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c12:	4a14      	ldr	r2, [pc, #80]	; (8000c64 <SystemInit+0x5c>)
 8000c14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <SystemInit+0x60>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a11      	ldr	r2, [pc, #68]	; (8000c68 <SystemInit+0x60>)
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <SystemInit+0x60>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <SystemInit+0x60>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a0d      	ldr	r2, [pc, #52]	; (8000c68 <SystemInit+0x60>)
 8000c34:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c38:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c3c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <SystemInit+0x60>)
 8000c40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c44:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <SystemInit+0x60>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a07      	ldr	r2, [pc, #28]	; (8000c68 <SystemInit+0x60>)
 8000c4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c50:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c52:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <SystemInit+0x60>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00
 8000c68:	40021000 	.word	0x40021000

08000c6c <setUp>:
******************************************************************************
*/

#include "unit_test.h"

void setUp(void){
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <tearDown>:

void tearDown(void){
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
}
 8000c7e:	bf00      	nop
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <test_ESP8266_AT_RST>:

void test_ESP8266_AT_RST(void){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	TEST_ASSERT_EQUAL_STRING("OK", uart_send(ESP8266_AT_RST));
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <test_ESP8266_AT_RST+0x1c>)
 8000c8e:	f7ff fcd7 	bl	8000640 <uart_send>
 8000c92:	4601      	mov	r1, r0
 8000c94:	2316      	movs	r3, #22
 8000c96:	2200      	movs	r2, #0
 8000c98:	4803      	ldr	r0, [pc, #12]	; (8000ca8 <test_ESP8266_AT_RST+0x20>)
 8000c9a:	f000 fa33 	bl	8001104 <UnityAssertEqualString>
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	080056d0 	.word	0x080056d0
 8000ca8:	08005574 	.word	0x08005574

08000cac <test_ESP8266_AT>:

void test_ESP8266_AT(void){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	TEST_ASSERT_EQUAL_STRING("OK", uart_send(ESP8266_AT));
 8000cb0:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <test_ESP8266_AT+0x1c>)
 8000cb2:	f7ff fcc5 	bl	8000640 <uart_send>
 8000cb6:	4601      	mov	r1, r0
 8000cb8:	231a      	movs	r3, #26
 8000cba:	2200      	movs	r2, #0
 8000cbc:	4803      	ldr	r0, [pc, #12]	; (8000ccc <test_ESP8266_AT+0x20>)
 8000cbe:	f000 fa21 	bl	8001104 <UnityAssertEqualString>
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	080056c8 	.word	0x080056c8
 8000ccc:	08005574 	.word	0x08005574

08000cd0 <test_ESP8266_AT_GMR>:

void test_ESP8266_AT_GMR(void){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	TEST_ASSERT_EQUAL_STRING("OK", uart_send(ESP8266_AT_GMR));
 8000cd4:	4805      	ldr	r0, [pc, #20]	; (8000cec <test_ESP8266_AT_GMR+0x1c>)
 8000cd6:	f7ff fcb3 	bl	8000640 <uart_send>
 8000cda:	4601      	mov	r1, r0
 8000cdc:	231e      	movs	r3, #30
 8000cde:	2200      	movs	r2, #0
 8000ce0:	4803      	ldr	r0, [pc, #12]	; (8000cf0 <test_ESP8266_AT_GMR+0x20>)
 8000ce2:	f000 fa0f 	bl	8001104 <UnityAssertEqualString>
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	080056dc 	.word	0x080056dc
 8000cf0:	08005574 	.word	0x08005574

08000cf4 <test_ESP8266_AT_CWQAP>:

void test_ESP8266_AT_CWQAP(void){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	TEST_ASSERT_EQUAL_STRING("OK", uart_send(ESP8266_AT_CWQAP));
 8000cf8:	4805      	ldr	r0, [pc, #20]	; (8000d10 <test_ESP8266_AT_CWQAP+0x1c>)
 8000cfa:	f7ff fca1 	bl	8000640 <uart_send>
 8000cfe:	4601      	mov	r1, r0
 8000d00:	2322      	movs	r3, #34	; 0x22
 8000d02:	2200      	movs	r2, #0
 8000d04:	4803      	ldr	r0, [pc, #12]	; (8000d14 <test_ESP8266_AT_CWQAP+0x20>)
 8000d06:	f000 f9fd 	bl	8001104 <UnityAssertEqualString>
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	08005718 	.word	0x08005718
 8000d14:	08005574 	.word	0x08005574

08000d18 <test_ESP8266_AT_CWMODE_1>:

void test_ESP8266_AT_CWMODE_1(void){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
	TEST_ASSERT_EQUAL_STRING("OK", uart_send(ESP8266_AT_CWMODE_STATION_MODE));
 8000d1c:	4805      	ldr	r0, [pc, #20]	; (8000d34 <test_ESP8266_AT_CWMODE_1+0x1c>)
 8000d1e:	f7ff fc8f 	bl	8000640 <uart_send>
 8000d22:	4601      	mov	r1, r0
 8000d24:	2326      	movs	r3, #38	; 0x26
 8000d26:	2200      	movs	r2, #0
 8000d28:	4803      	ldr	r0, [pc, #12]	; (8000d38 <test_ESP8266_AT_CWMODE_1+0x20>)
 8000d2a:	f000 f9eb 	bl	8001104 <UnityAssertEqualString>
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	080056fc 	.word	0x080056fc
 8000d38:	08005574 	.word	0x08005574

08000d3c <test_ESP8266_AT_CWMODE_1_VERIFY>:

void test_ESP8266_AT_CWMODE_1_VERIFY(void){
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
	TEST_ASSERT_EQUAL_STRING("CWMODE:1", uart_send(ESP8266_AT_CWMODE_TEST));
 8000d40:	4805      	ldr	r0, [pc, #20]	; (8000d58 <test_ESP8266_AT_CWMODE_1_VERIFY+0x1c>)
 8000d42:	f7ff fc7d 	bl	8000640 <uart_send>
 8000d46:	4601      	mov	r1, r0
 8000d48:	232a      	movs	r3, #42	; 0x2a
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	4803      	ldr	r0, [pc, #12]	; (8000d5c <test_ESP8266_AT_CWMODE_1_VERIFY+0x20>)
 8000d4e:	f000 f9d9 	bl	8001104 <UnityAssertEqualString>
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	080056e8 	.word	0x080056e8
 8000d5c:	08005578 	.word	0x08005578

08000d60 <test_ESP8266_AT_CWJAP_VERIFY>:
	char buffer[256] = {0};
	ESP8266_get_cwjap_command(buffer);
	TEST_ASSERT_EQUAL_STRING("OK", uart_send(buffer));
}

void test_ESP8266_AT_CWJAP_VERIFY(void){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	TEST_ASSERT_EQUAL_STRING("NO AP", uart_send(ESP8266_AT_CWJAP_TEST));
 8000d64:	4805      	ldr	r0, [pc, #20]	; (8000d7c <test_ESP8266_AT_CWJAP_VERIFY+0x1c>)
 8000d66:	f7ff fc6b 	bl	8000640 <uart_send>
 8000d6a:	4601      	mov	r1, r0
 8000d6c:	2334      	movs	r3, #52	; 0x34
 8000d6e:	2200      	movs	r2, #0
 8000d70:	4803      	ldr	r0, [pc, #12]	; (8000d80 <test_ESP8266_AT_CWJAP_VERIFY+0x20>)
 8000d72:	f000 f9c7 	bl	8001104 <UnityAssertEqualString>
	//TEST_ASSERT_EQUAL_STRING("CONNECTED", uart_send(ESP8266_AT_CWJAP_TEST, connection_status));
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	0800570c 	.word	0x0800570c
 8000d80:	08005584 	.word	0x08005584

08000d84 <unit_test>:

void unit_test(void){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0

	init_uart_interrupt();
 8000d88:	f7ff fc06 	bl	8000598 <init_uart_interrupt>

	UNITY_BEGIN();
 8000d8c:	4814      	ldr	r0, [pc, #80]	; (8000de0 <unit_test+0x5c>)
 8000d8e:	f000 fa43 	bl	8001218 <UnityBegin>
	RUN_TEST(test_ESP8266_AT_RST);
 8000d92:	223d      	movs	r2, #61	; 0x3d
 8000d94:	4913      	ldr	r1, [pc, #76]	; (8000de4 <unit_test+0x60>)
 8000d96:	4814      	ldr	r0, [pc, #80]	; (8000de8 <unit_test+0x64>)
 8000d98:	f000 fa0a 	bl	80011b0 <UnityDefaultTestRun>
	RUN_TEST(test_ESP8266_AT);
 8000d9c:	223e      	movs	r2, #62	; 0x3e
 8000d9e:	4913      	ldr	r1, [pc, #76]	; (8000dec <unit_test+0x68>)
 8000da0:	4813      	ldr	r0, [pc, #76]	; (8000df0 <unit_test+0x6c>)
 8000da2:	f000 fa05 	bl	80011b0 <UnityDefaultTestRun>
	RUN_TEST(test_ESP8266_AT_GMR);
 8000da6:	223f      	movs	r2, #63	; 0x3f
 8000da8:	4912      	ldr	r1, [pc, #72]	; (8000df4 <unit_test+0x70>)
 8000daa:	4813      	ldr	r0, [pc, #76]	; (8000df8 <unit_test+0x74>)
 8000dac:	f000 fa00 	bl	80011b0 <UnityDefaultTestRun>
	RUN_TEST(test_ESP8266_AT_CWMODE_1);
 8000db0:	2240      	movs	r2, #64	; 0x40
 8000db2:	4912      	ldr	r1, [pc, #72]	; (8000dfc <unit_test+0x78>)
 8000db4:	4812      	ldr	r0, [pc, #72]	; (8000e00 <unit_test+0x7c>)
 8000db6:	f000 f9fb 	bl	80011b0 <UnityDefaultTestRun>
	RUN_TEST(test_ESP8266_AT_CWMODE_1_VERIFY);
 8000dba:	2241      	movs	r2, #65	; 0x41
 8000dbc:	4911      	ldr	r1, [pc, #68]	; (8000e04 <unit_test+0x80>)
 8000dbe:	4812      	ldr	r0, [pc, #72]	; (8000e08 <unit_test+0x84>)
 8000dc0:	f000 f9f6 	bl	80011b0 <UnityDefaultTestRun>
	//RUN_TEST(test_ESP8266_AT_CWJAP_SET);
	RUN_TEST(test_ESP8266_AT_CWQAP);
 8000dc4:	2243      	movs	r2, #67	; 0x43
 8000dc6:	4911      	ldr	r1, [pc, #68]	; (8000e0c <unit_test+0x88>)
 8000dc8:	4811      	ldr	r0, [pc, #68]	; (8000e10 <unit_test+0x8c>)
 8000dca:	f000 f9f1 	bl	80011b0 <UnityDefaultTestRun>
	RUN_TEST(test_ESP8266_AT_CWJAP_VERIFY);
 8000dce:	2244      	movs	r2, #68	; 0x44
 8000dd0:	4910      	ldr	r1, [pc, #64]	; (8000e14 <unit_test+0x90>)
 8000dd2:	4811      	ldr	r0, [pc, #68]	; (8000e18 <unit_test+0x94>)
 8000dd4:	f000 f9ec 	bl	80011b0 <UnityDefaultTestRun>
	UNITY_END();
 8000dd8:	f000 fa48 	bl	800126c <UnityEnd>
		uart_send("AT+CWLAP\r\n");
		uart_send(ESP8266_AT_CWQAP);
	//uart_send(ESP8266_AT_CWQAP, connection_status);
		uart_send(ESP8266_AT_CWJAP_TEST);
	*/
}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	0800558c 	.word	0x0800558c
 8000de4:	080055a4 	.word	0x080055a4
 8000de8:	08000c89 	.word	0x08000c89
 8000dec:	080055b8 	.word	0x080055b8
 8000df0:	08000cad 	.word	0x08000cad
 8000df4:	080055c8 	.word	0x080055c8
 8000df8:	08000cd1 	.word	0x08000cd1
 8000dfc:	080055dc 	.word	0x080055dc
 8000e00:	08000d19 	.word	0x08000d19
 8000e04:	080055f8 	.word	0x080055f8
 8000e08:	08000d3d 	.word	0x08000d3d
 8000e0c:	08005618 	.word	0x08005618
 8000e10:	08000cf5 	.word	0x08000cf5
 8000e14:	08005630 	.word	0x08005630
 8000e18:	08000d61 	.word	0x08000d61

08000e1c <UnityPrintChar>:
 *-----------------------------------------------*/

/*-----------------------------------------------*/
/* Local helper function to print characters. */
static void UnityPrintChar(const char* pch)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
    /* printable characters plus CR & LF are printed */
    if ((*pch <= 126) && (*pch >= 32))
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b7e      	cmp	r3, #126	; 0x7e
 8000e2a:	d80a      	bhi.n	8000e42 <UnityPrintChar+0x26>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b1f      	cmp	r3, #31
 8000e32:	d906      	bls.n	8000e42 <UnityPrintChar+0x26>
    {
        UNITY_OUTPUT_CHAR(*pch);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f003 fb0d 	bl	8004458 <putchar>
 8000e3e:	bf00      	nop
    {
        UNITY_OUTPUT_CHAR('\\');
        UNITY_OUTPUT_CHAR('x');
        UnityPrintNumberHex((UNITY_UINT)*pch, 2);
    }
}
 8000e40:	e021      	b.n	8000e86 <UnityPrintChar+0x6a>
    else if (*pch == 13)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b0d      	cmp	r3, #13
 8000e48:	d106      	bne.n	8000e58 <UnityPrintChar+0x3c>
        UNITY_OUTPUT_CHAR('\\');
 8000e4a:	205c      	movs	r0, #92	; 0x5c
 8000e4c:	f003 fb04 	bl	8004458 <putchar>
        UNITY_OUTPUT_CHAR('r');
 8000e50:	2072      	movs	r0, #114	; 0x72
 8000e52:	f003 fb01 	bl	8004458 <putchar>
}
 8000e56:	e016      	b.n	8000e86 <UnityPrintChar+0x6a>
    else if (*pch == 10)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b0a      	cmp	r3, #10
 8000e5e:	d106      	bne.n	8000e6e <UnityPrintChar+0x52>
        UNITY_OUTPUT_CHAR('\\');
 8000e60:	205c      	movs	r0, #92	; 0x5c
 8000e62:	f003 faf9 	bl	8004458 <putchar>
        UNITY_OUTPUT_CHAR('n');
 8000e66:	206e      	movs	r0, #110	; 0x6e
 8000e68:	f003 faf6 	bl	8004458 <putchar>
}
 8000e6c:	e00b      	b.n	8000e86 <UnityPrintChar+0x6a>
        UNITY_OUTPUT_CHAR('\\');
 8000e6e:	205c      	movs	r0, #92	; 0x5c
 8000e70:	f003 faf2 	bl	8004458 <putchar>
        UNITY_OUTPUT_CHAR('x');
 8000e74:	2078      	movs	r0, #120	; 0x78
 8000e76:	f003 faef 	bl	8004458 <putchar>
        UnityPrintNumberHex((UNITY_UINT)*pch, 2);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2102      	movs	r1, #2
 8000e80:	4618      	mov	r0, r3
 8000e82:	f000 f869 	bl	8000f58 <UnityPrintNumberHex>
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <UnityPrint>:
}
#endif

/*-----------------------------------------------*/
void UnityPrint(const char* string)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b084      	sub	sp, #16
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
    const char* pch = string;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	60fb      	str	r3, [r7, #12]

    if (pch != NULL)
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d00a      	beq.n	8000eb6 <UnityPrint+0x28>
    {
        while (*pch)
 8000ea0:	e005      	b.n	8000eae <UnityPrint+0x20>
            {
                pch += UnityPrintAnsiEscapeString(pch);
                continue;
            }
#endif
            UnityPrintChar(pch);
 8000ea2:	68f8      	ldr	r0, [r7, #12]
 8000ea4:	f7ff ffba 	bl	8000e1c <UnityPrintChar>
            pch++;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	60fb      	str	r3, [r7, #12]
        while (*pch)
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1f5      	bne.n	8000ea2 <UnityPrint+0x14>
        }
    }
}
 8000eb6:	bf00      	nop
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <UnityPrintNumber>:
    }
}

/*-----------------------------------------------*/
void UnityPrintNumber(const UNITY_INT number_to_print)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b084      	sub	sp, #16
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
    UNITY_UINT number = (UNITY_UINT)number_to_print;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	60fb      	str	r3, [r7, #12]

    if (number_to_print < 0)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	da05      	bge.n	8000edc <UnityPrintNumber+0x1e>
    {
        /* A negative number, including MIN negative */
        UNITY_OUTPUT_CHAR('-');
 8000ed0:	202d      	movs	r0, #45	; 0x2d
 8000ed2:	f003 fac1 	bl	8004458 <putchar>
        number = (~number) + 1;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	425b      	negs	r3, r3
 8000eda:	60fb      	str	r3, [r7, #12]
    }
    UnityPrintNumberUnsigned(number);
 8000edc:	68f8      	ldr	r0, [r7, #12]
 8000ede:	f000 f805 	bl	8000eec <UnityPrintNumberUnsigned>
}
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <UnityPrintNumberUnsigned>:

/*-----------------------------------------------
 * basically do an itoa using as little ram as possible */
void UnityPrintNumberUnsigned(const UNITY_UINT number)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
    UNITY_UINT divisor = 1;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	60fb      	str	r3, [r7, #12]

    /* figure out initial divisor */
    while (number / divisor > 9)
 8000ef8:	e005      	b.n	8000f06 <UnityPrintNumberUnsigned+0x1a>
    {
        divisor *= 10;
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	4613      	mov	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	4413      	add	r3, r2
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	60fb      	str	r3, [r7, #12]
    while (number / divisor > 9)
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0e:	2b09      	cmp	r3, #9
 8000f10:	d8f3      	bhi.n	8000efa <UnityPrintNumberUnsigned+0xe>
    }

    /* now mod and print, then divide divisor */
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	fbb2 f1f3 	udiv	r1, r2, r3
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <UnityPrintNumberUnsigned+0x68>)
 8000f1c:	fba3 2301 	umull	r2, r3, r3, r1
 8000f20:	08da      	lsrs	r2, r3, #3
 8000f22:	4613      	mov	r3, r2
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	4413      	add	r3, r2
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	1aca      	subs	r2, r1, r3
 8000f2c:	b2d3      	uxtb	r3, r2
 8000f2e:	3330      	adds	r3, #48	; 0x30
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	4618      	mov	r0, r3
 8000f34:	f003 fa90 	bl	8004458 <putchar>
        divisor /= 10;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4a06      	ldr	r2, [pc, #24]	; (8000f54 <UnityPrintNumberUnsigned+0x68>)
 8000f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f40:	08db      	lsrs	r3, r3, #3
 8000f42:	60fb      	str	r3, [r7, #12]
    } while (divisor > 0);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d1e3      	bne.n	8000f12 <UnityPrintNumberUnsigned+0x26>
}
 8000f4a:	bf00      	nop
 8000f4c:	bf00      	nop
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	cccccccd 	.word	0xcccccccd

08000f58 <UnityPrintNumberHex>:

/*-----------------------------------------------*/
void UnityPrintNumberHex(const UNITY_UINT number, const char nibbles_to_print)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	70fb      	strb	r3, [r7, #3]
    int nibble;
    char nibbles = nibbles_to_print;
 8000f64:	78fb      	ldrb	r3, [r7, #3]
 8000f66:	73fb      	strb	r3, [r7, #15]

    if ((unsigned)nibbles > UNITY_MAX_NIBBLES)
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	2b08      	cmp	r3, #8
 8000f6c:	d91f      	bls.n	8000fae <UnityPrintNumberHex+0x56>
    {
        nibbles = UNITY_MAX_NIBBLES;
 8000f6e:	2308      	movs	r3, #8
 8000f70:	73fb      	strb	r3, [r7, #15]
    }

    while (nibbles > 0)
 8000f72:	e01c      	b.n	8000fae <UnityPrintNumberHex+0x56>
    {
        nibbles--;
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	73fb      	strb	r3, [r7, #15]
        nibble = (int)(number >> (nibbles * 4)) & 0x0F;
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	fa22 f303 	lsr.w	r3, r2, r3
 8000f84:	f003 030f 	and.w	r3, r3, #15
 8000f88:	60bb      	str	r3, [r7, #8]
        if (nibble <= 9)
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	2b09      	cmp	r3, #9
 8000f8e:	dc07      	bgt.n	8000fa0 <UnityPrintNumberHex+0x48>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	3330      	adds	r3, #48	; 0x30
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f003 fa5d 	bl	8004458 <putchar>
 8000f9e:	e006      	b.n	8000fae <UnityPrintNumberHex+0x56>
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	3337      	adds	r3, #55	; 0x37
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f003 fa55 	bl	8004458 <putchar>
    while (nibbles > 0)
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1df      	bne.n	8000f74 <UnityPrintNumberHex+0x1c>
        }
    }
}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <UnityTestResultsBegin>:
}
#endif /* ! UNITY_EXCLUDE_FLOAT_PRINT */

/*-----------------------------------------------*/
static void UnityTestResultsBegin(const char* file, const UNITY_LINE_TYPE line)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
    UnityPrintNumber((UNITY_INT)line);
    UNITY_OUTPUT_CHAR(' ');
    UnityPrint(Unity.CurrentTestName);
    UNITY_OUTPUT_CHAR(':');
#else
    UnityPrint(file);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ff5f 	bl	8000e8e <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
 8000fd0:	203a      	movs	r0, #58	; 0x3a
 8000fd2:	f003 fa41 	bl	8004458 <putchar>
    UnityPrintNumber((UNITY_INT)line);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff70 	bl	8000ebe <UnityPrintNumber>
    UNITY_OUTPUT_CHAR(':');
 8000fde:	203a      	movs	r0, #58	; 0x3a
 8000fe0:	f003 fa3a 	bl	8004458 <putchar>
    UnityPrint(Unity.CurrentTestName);
 8000fe4:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <UnityTestResultsBegin+0x3c>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ff50 	bl	8000e8e <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
 8000fee:	203a      	movs	r0, #58	; 0x3a
 8000ff0:	f003 fa32 	bl	8004458 <putchar>
#endif
#endif
#endif
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	200004a0 	.word	0x200004a0

08001000 <UnityTestResultsFailBegin>:

/*-----------------------------------------------*/
static void UnityTestResultsFailBegin(const UNITY_LINE_TYPE line)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
    UnityTestResultsBegin(Unity.TestFile, line);
 8001008:	4b07      	ldr	r3, [pc, #28]	; (8001028 <UnityTestResultsFailBegin+0x28>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	6879      	ldr	r1, [r7, #4]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff ffd6 	bl	8000fc0 <UnityTestResultsBegin>
    //UnityPrint(UnityStrFail);
    printf(UnityStrFail);
 8001014:	4805      	ldr	r0, [pc, #20]	; (800102c <UnityTestResultsFailBegin+0x2c>)
 8001016:	f003 fa07 	bl	8004428 <iprintf>
    UNITY_OUTPUT_CHAR(':');
 800101a:	203a      	movs	r0, #58	; 0x3a
 800101c:	f003 fa1c 	bl	8004458 <putchar>
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	200004a0 	.word	0x200004a0
 800102c:	08005730 	.word	0x08005730

08001030 <UnityConcludeTest>:

/*-----------------------------------------------*/
void UnityConcludeTest(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
    if (Unity.CurrentTestIgnored)
 8001034:	4b14      	ldr	r3, [pc, #80]	; (8001088 <UnityConcludeTest+0x58>)
 8001036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001038:	2b00      	cmp	r3, #0
 800103a:	d005      	beq.n	8001048 <UnityConcludeTest+0x18>
    {
        Unity.TestIgnores++;
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <UnityConcludeTest+0x58>)
 800103e:	69db      	ldr	r3, [r3, #28]
 8001040:	3301      	adds	r3, #1
 8001042:	4a11      	ldr	r2, [pc, #68]	; (8001088 <UnityConcludeTest+0x58>)
 8001044:	61d3      	str	r3, [r2, #28]
 8001046:	e014      	b.n	8001072 <UnityConcludeTest+0x42>
    }
    else if (!Unity.CurrentTestFailed)
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <UnityConcludeTest+0x58>)
 800104a:	6a1b      	ldr	r3, [r3, #32]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d10b      	bne.n	8001068 <UnityConcludeTest+0x38>
    {
        UnityTestResultsBegin(Unity.TestFile, Unity.CurrentTestLineNumber);
 8001050:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <UnityConcludeTest+0x58>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a0c      	ldr	r2, [pc, #48]	; (8001088 <UnityConcludeTest+0x58>)
 8001056:	6912      	ldr	r2, [r2, #16]
 8001058:	4611      	mov	r1, r2
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff ffb0 	bl	8000fc0 <UnityTestResultsBegin>
        //UnityPrint(UnityStrPass);
        printf(UnityStrPass);
 8001060:	480a      	ldr	r0, [pc, #40]	; (800108c <UnityConcludeTest+0x5c>)
 8001062:	f003 f9e1 	bl	8004428 <iprintf>
 8001066:	e004      	b.n	8001072 <UnityConcludeTest+0x42>
    }
    else
    {
        Unity.TestFailures++;
 8001068:	4b07      	ldr	r3, [pc, #28]	; (8001088 <UnityConcludeTest+0x58>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	3301      	adds	r3, #1
 800106e:	4a06      	ldr	r2, [pc, #24]	; (8001088 <UnityConcludeTest+0x58>)
 8001070:	6193      	str	r3, [r2, #24]
    }

    Unity.CurrentTestFailed = 0;
 8001072:	4b05      	ldr	r3, [pc, #20]	; (8001088 <UnityConcludeTest+0x58>)
 8001074:	2200      	movs	r2, #0
 8001076:	621a      	str	r2, [r3, #32]
    Unity.CurrentTestIgnored = 0;
 8001078:	4b03      	ldr	r3, [pc, #12]	; (8001088 <UnityConcludeTest+0x58>)
 800107a:	2200      	movs	r2, #0
 800107c:	625a      	str	r2, [r3, #36]	; 0x24
    //printf("%d\n", (Unity.CurrentTestStopTime - Unity.CurrentTestStartTime));
    UNITY_PRINT_EXEC_TIME();
    UNITY_PRINT_EOL();
 800107e:	200a      	movs	r0, #10
 8001080:	f003 f9ea 	bl	8004458 <putchar>
    UNITY_FLUSH_CALL();
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200004a0 	.word	0x200004a0
 800108c:	08005728 	.word	0x08005728

08001090 <UnityPrintExpectedAndActualStrings>:
    }
}

/*-----------------------------------------------*/
static void UnityPrintExpectedAndActualStrings(const char* expected, const char* actual)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
	printf("\n");
 800109a:	200a      	movs	r0, #10
 800109c:	f003 f9dc 	bl	8004458 <putchar>
	UnityPrint(UnityStrExpected);
 80010a0:	4814      	ldr	r0, [pc, #80]	; (80010f4 <UnityPrintExpectedAndActualStrings+0x64>)
 80010a2:	f7ff fef4 	bl	8000e8e <UnityPrint>
    if (expected != NULL)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d009      	beq.n	80010c0 <UnityPrintExpectedAndActualStrings+0x30>
    {
        //UNITY_OUTPUT_CHAR('\'');
        //UnityPrint(expected);
    	printf("\'");
 80010ac:	2027      	movs	r0, #39	; 0x27
 80010ae:	f003 f9d3 	bl	8004458 <putchar>
    	printf(expected);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f003 f9b8 	bl	8004428 <iprintf>
    	printf("\'\n");
 80010b8:	480f      	ldr	r0, [pc, #60]	; (80010f8 <UnityPrintExpectedAndActualStrings+0x68>)
 80010ba:	f003 fa51 	bl	8004560 <puts>
 80010be:	e002      	b.n	80010c6 <UnityPrintExpectedAndActualStrings+0x36>
    	//UNITY_OUTPUT_CHAR('\'');
    }
    else
    {
        //UnityPrint(UnityStrNull);
    	printf(UnityStrNull);
 80010c0:	480e      	ldr	r0, [pc, #56]	; (80010fc <UnityPrintExpectedAndActualStrings+0x6c>)
 80010c2:	f003 f9b1 	bl	8004428 <iprintf>
    }
    //UnityPrint(UnityStrWas);
    printf(UnityStrWas);
 80010c6:	480e      	ldr	r0, [pc, #56]	; (8001100 <UnityPrintExpectedAndActualStrings+0x70>)
 80010c8:	f003 f9ae 	bl	8004428 <iprintf>
    if (actual != NULL)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d009      	beq.n	80010e6 <UnityPrintExpectedAndActualStrings+0x56>
    {
        printf("\'");
 80010d2:	2027      	movs	r0, #39	; 0x27
 80010d4:	f003 f9c0 	bl	8004458 <putchar>
    	printf(actual);
 80010d8:	6838      	ldr	r0, [r7, #0]
 80010da:	f003 f9a5 	bl	8004428 <iprintf>
    	printf("\'");
 80010de:	2027      	movs	r0, #39	; 0x27
 80010e0:	f003 f9ba 	bl	8004458 <putchar>
    else
    {
        //UnityPrint(UnityStrNull);
    	printf(UnityStrNull);
    }
}
 80010e4:	e002      	b.n	80010ec <UnityPrintExpectedAndActualStrings+0x5c>
    	printf(UnityStrNull);
 80010e6:	4805      	ldr	r0, [pc, #20]	; (80010fc <UnityPrintExpectedAndActualStrings+0x6c>)
 80010e8:	f003 f99e 	bl	8004428 <iprintf>
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	08005740 	.word	0x08005740
 80010f8:	0800565c 	.word	0x0800565c
 80010fc:	08005738 	.word	0x08005738
 8001100:	0800574c 	.word	0x0800574c

08001104 <UnityAssertEqualString>:
/*-----------------------------------------------*/
void UnityAssertEqualString(const char* expected,
                            const char* actual,
                            const char* msg,
                            const UNITY_LINE_TYPE lineNumber)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
 8001110:	603b      	str	r3, [r7, #0]
    UNITY_UINT32 i;

    RETURN_IF_FAIL_OR_IGNORE;
 8001112:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <UnityAssertEqualString+0xa4>)
 8001114:	6a1b      	ldr	r3, [r3, #32]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d103      	bne.n	8001122 <UnityAssertEqualString+0x1e>
 800111a:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <UnityAssertEqualString+0xa4>)
 800111c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <UnityAssertEqualString+0x26>
 8001122:	2101      	movs	r1, #1
 8001124:	4821      	ldr	r0, [pc, #132]	; (80011ac <UnityAssertEqualString+0xa8>)
 8001126:	f7ff f859 	bl	80001dc <longjmp>

    /* if both pointers not null compare the strings */
    if (expected && actual)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d024      	beq.n	800117a <UnityAssertEqualString+0x76>
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d021      	beq.n	800117a <UnityAssertEqualString+0x76>
    {
        for (i = 0; expected[i] || actual[i]; i++)
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
 800113a:	e011      	b.n	8001160 <UnityAssertEqualString+0x5c>
        {
            if (expected[i] != actual[i])
 800113c:	68fa      	ldr	r2, [r7, #12]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	4413      	add	r3, r2
 8001142:	781a      	ldrb	r2, [r3, #0]
 8001144:	68b9      	ldr	r1, [r7, #8]
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	440b      	add	r3, r1
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	429a      	cmp	r2, r3
 800114e:	d004      	beq.n	800115a <UnityAssertEqualString+0x56>
            {
                Unity.CurrentTestFailed = 1;
 8001150:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <UnityAssertEqualString+0xa4>)
 8001152:	2201      	movs	r2, #1
 8001154:	621a      	str	r2, [r3, #32]
                break;
 8001156:	bf00      	nop
    if (expected && actual)
 8001158:	e016      	b.n	8001188 <UnityAssertEqualString+0x84>
        for (i = 0; expected[i] || actual[i]; i++)
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	3301      	adds	r3, #1
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	68fa      	ldr	r2, [r7, #12]
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	4413      	add	r3, r2
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1e7      	bne.n	800113c <UnityAssertEqualString+0x38>
 800116c:	68ba      	ldr	r2, [r7, #8]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	4413      	add	r3, r2
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1e1      	bne.n	800113c <UnityAssertEqualString+0x38>
    if (expected && actual)
 8001178:	e006      	b.n	8001188 <UnityAssertEqualString+0x84>
            }
        }
    }
    else
    { /* handle case of one pointers being null (if both null, test should pass) */
        if (expected != actual)
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	429a      	cmp	r2, r3
 8001180:	d002      	beq.n	8001188 <UnityAssertEqualString+0x84>
        {
            Unity.CurrentTestFailed = 1;
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <UnityAssertEqualString+0xa4>)
 8001184:	2201      	movs	r2, #1
 8001186:	621a      	str	r2, [r3, #32]
        }
    }

    if (Unity.CurrentTestFailed)
 8001188:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <UnityAssertEqualString+0xa4>)
 800118a:	6a1b      	ldr	r3, [r3, #32]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d006      	beq.n	800119e <UnityAssertEqualString+0x9a>
    {
    	UnityTestResultsFailBegin(lineNumber);
 8001190:	6838      	ldr	r0, [r7, #0]
 8001192:	f7ff ff35 	bl	8001000 <UnityTestResultsFailBegin>
        UnityPrintExpectedAndActualStrings(expected, actual);
 8001196:	68b9      	ldr	r1, [r7, #8]
 8001198:	68f8      	ldr	r0, [r7, #12]
 800119a:	f7ff ff79 	bl	8001090 <UnityPrintExpectedAndActualStrings>
        UnityPrintExpectedAndActualStrings(expected, actual);
        UnityAddMsgIfSpecified(msg);
        UNITY_FAIL_AND_BAIL;
    	*/
    }
}
 800119e:	bf00      	nop
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200004a0 	.word	0x200004a0
 80011ac:	200004c8 	.word	0x200004c8

080011b0 <UnityDefaultTestRun>:
/*-----------------------------------------------*/
/* If we have not defined our own test runner, then include our default test runner to make life easier */
#ifndef UNITY_SKIP_DEFAULT_RUNNER

void UnityDefaultTestRun(UnityTestFunction Func, const char* FuncName, const int FuncLineNum)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
    Unity.CurrentTestName = FuncName;
 80011bc:	4a14      	ldr	r2, [pc, #80]	; (8001210 <UnityDefaultTestRun+0x60>)
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	6053      	str	r3, [r2, #4]
    Unity.CurrentTestLineNumber = (UNITY_LINE_TYPE)FuncLineNum;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a12      	ldr	r2, [pc, #72]	; (8001210 <UnityDefaultTestRun+0x60>)
 80011c6:	6113      	str	r3, [r2, #16]
    Unity.NumberOfTests++;
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <UnityDefaultTestRun+0x60>)
 80011ca:	695b      	ldr	r3, [r3, #20]
 80011cc:	3301      	adds	r3, #1
 80011ce:	4a10      	ldr	r2, [pc, #64]	; (8001210 <UnityDefaultTestRun+0x60>)
 80011d0:	6153      	str	r3, [r2, #20]
    UNITY_CLR_DETAILS();
 80011d2:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <UnityDefaultTestRun+0x60>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <UnityDefaultTestRun+0x60>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]

    //UNITY_EXEC_TIME_START();
    if (TEST_PROTECT())
 80011de:	480d      	ldr	r0, [pc, #52]	; (8001214 <UnityDefaultTestRun+0x64>)
 80011e0:	f7fe fff6 	bl	80001d0 <setjmp>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d103      	bne.n	80011f2 <UnityDefaultTestRun+0x42>
    {
        setUp();
 80011ea:	f7ff fd3f 	bl	8000c6c <setUp>
        Func();
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4798      	blx	r3
    }
    if (TEST_PROTECT())
 80011f2:	4808      	ldr	r0, [pc, #32]	; (8001214 <UnityDefaultTestRun+0x64>)
 80011f4:	f7fe ffec 	bl	80001d0 <setjmp>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <UnityDefaultTestRun+0x52>
    {
        tearDown();
 80011fe:	f7ff fd3c 	bl	8000c7a <tearDown>
    }
    //UNITY_EXEC_TIME_STOP();

    UnityConcludeTest();
 8001202:	f7ff ff15 	bl	8001030 <UnityConcludeTest>
}
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	200004a0 	.word	0x200004a0
 8001214:	200004c8 	.word	0x200004c8

08001218 <UnityBegin>:
	Unity.TestFile = filename;
}

/*-----------------------------------------------*/
void UnityBegin(const char* filename)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
    Unity.TestFile = filename;
 8001220:	4a11      	ldr	r2, [pc, #68]	; (8001268 <UnityBegin+0x50>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6013      	str	r3, [r2, #0]
    Unity.CurrentTestName = NULL;
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <UnityBegin+0x50>)
 8001228:	2200      	movs	r2, #0
 800122a:	605a      	str	r2, [r3, #4]
    Unity.CurrentTestLineNumber = 0;
 800122c:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <UnityBegin+0x50>)
 800122e:	2200      	movs	r2, #0
 8001230:	611a      	str	r2, [r3, #16]
    Unity.NumberOfTests = 0;
 8001232:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <UnityBegin+0x50>)
 8001234:	2200      	movs	r2, #0
 8001236:	615a      	str	r2, [r3, #20]
    Unity.TestFailures = 0;
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <UnityBegin+0x50>)
 800123a:	2200      	movs	r2, #0
 800123c:	619a      	str	r2, [r3, #24]
    Unity.TestIgnores = 0;
 800123e:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <UnityBegin+0x50>)
 8001240:	2200      	movs	r2, #0
 8001242:	61da      	str	r2, [r3, #28]
    Unity.CurrentTestFailed = 0;
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <UnityBegin+0x50>)
 8001246:	2200      	movs	r2, #0
 8001248:	621a      	str	r2, [r3, #32]
    Unity.CurrentTestIgnored = 0;
 800124a:	4b07      	ldr	r3, [pc, #28]	; (8001268 <UnityBegin+0x50>)
 800124c:	2200      	movs	r2, #0
 800124e:	625a      	str	r2, [r3, #36]	; 0x24

    UNITY_CLR_DETAILS();
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <UnityBegin+0x50>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	4b04      	ldr	r3, [pc, #16]	; (8001268 <UnityBegin+0x50>)
 8001258:	2200      	movs	r2, #0
 800125a:	60da      	str	r2, [r3, #12]
    UNITY_OUTPUT_START();
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	200004a0 	.word	0x200004a0

0800126c <UnityEnd>:

/*-----------------------------------------------*/
int UnityEnd(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
    printf(UnityStrBreaker);
 8001270:	481c      	ldr	r0, [pc, #112]	; (80012e4 <UnityEnd+0x78>)
 8001272:	f003 f8d9 	bl	8004428 <iprintf>
    printf("\n");
 8001276:	200a      	movs	r0, #10
 8001278:	f003 f8ee 	bl	8004458 <putchar>
    printf(UnityStrResultsTests);
 800127c:	481a      	ldr	r0, [pc, #104]	; (80012e8 <UnityEnd+0x7c>)
 800127e:	f003 f8d3 	bl	8004428 <iprintf>
    printf("%d\n", (UNITY_INT)(Unity.NumberOfTests));
 8001282:	4b1a      	ldr	r3, [pc, #104]	; (80012ec <UnityEnd+0x80>)
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	4619      	mov	r1, r3
 8001288:	4819      	ldr	r0, [pc, #100]	; (80012f0 <UnityEnd+0x84>)
 800128a:	f003 f8cd 	bl	8004428 <iprintf>
    printf(UnityStrResultsFailures);
 800128e:	4819      	ldr	r0, [pc, #100]	; (80012f4 <UnityEnd+0x88>)
 8001290:	f003 f8ca 	bl	8004428 <iprintf>
    printf("%d\n", (UNITY_INT)(Unity.TestFailures));
 8001294:	4b15      	ldr	r3, [pc, #84]	; (80012ec <UnityEnd+0x80>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	4619      	mov	r1, r3
 800129a:	4815      	ldr	r0, [pc, #84]	; (80012f0 <UnityEnd+0x84>)
 800129c:	f003 f8c4 	bl	8004428 <iprintf>
    printf(UnityStrResultsIgnored);
 80012a0:	4815      	ldr	r0, [pc, #84]	; (80012f8 <UnityEnd+0x8c>)
 80012a2:	f003 f8c1 	bl	8004428 <iprintf>
    printf("%d\n", (UNITY_INT)(Unity.TestIgnores));
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <UnityEnd+0x80>)
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	4619      	mov	r1, r3
 80012ac:	4810      	ldr	r0, [pc, #64]	; (80012f0 <UnityEnd+0x84>)
 80012ae:	f003 f8bb 	bl	8004428 <iprintf>
    printf("\n");
 80012b2:	200a      	movs	r0, #10
 80012b4:	f003 f8d0 	bl	8004458 <putchar>
    if (Unity.TestFailures == 0U)
 80012b8:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <UnityEnd+0x80>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d106      	bne.n	80012ce <UnityEnd+0x62>
    {
        printf(UnityStrOk);
 80012c0:	480e      	ldr	r0, [pc, #56]	; (80012fc <UnityEnd+0x90>)
 80012c2:	f003 f8b1 	bl	8004428 <iprintf>
        printf("\n");
 80012c6:	200a      	movs	r0, #10
 80012c8:	f003 f8c6 	bl	8004458 <putchar>
 80012cc:	e002      	b.n	80012d4 <UnityEnd+0x68>
    }
    else
    {
        printf(UnityStrFail);
 80012ce:	480c      	ldr	r0, [pc, #48]	; (8001300 <UnityEnd+0x94>)
 80012d0:	f003 f8aa 	bl	8004428 <iprintf>
		#ifdef UNITY_DIFFERENTIATE_FINAL_FAIL
        printf('E'); printf('D');
		#endif
    }
    printf("\n");
 80012d4:	200a      	movs	r0, #10
 80012d6:	f003 f8bf 	bl	8004458 <putchar>
    UNITY_FLUSH_CALL();
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures);
 80012da:	4b04      	ldr	r3, [pc, #16]	; (80012ec <UnityEnd+0x80>)
 80012dc:	699b      	ldr	r3, [r3, #24]
    UNITY_PRINT_EOL();
    UNITY_FLUSH_CALL();
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures); */

}
 80012de:	4618      	mov	r0, r3
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	08005784 	.word	0x08005784
 80012e8:	0800579c 	.word	0x0800579c
 80012ec:	200004a0 	.word	0x200004a0
 80012f0:	08005660 	.word	0x08005660
 80012f4:	080057b0 	.word	0x080057b0
 80012f8:	080057bc 	.word	0x080057bc
 80012fc:	08005724 	.word	0x08005724
 8001300:	08005730 	.word	0x08005730

08001304 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001308:	4b14      	ldr	r3, [pc, #80]	; (800135c <MX_UART4_Init+0x58>)
 800130a:	4a15      	ldr	r2, [pc, #84]	; (8001360 <MX_UART4_Init+0x5c>)
 800130c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800130e:	4b13      	ldr	r3, [pc, #76]	; (800135c <MX_UART4_Init+0x58>)
 8001310:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001314:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001316:	4b11      	ldr	r3, [pc, #68]	; (800135c <MX_UART4_Init+0x58>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <MX_UART4_Init+0x58>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001322:	4b0e      	ldr	r3, [pc, #56]	; (800135c <MX_UART4_Init+0x58>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <MX_UART4_Init+0x58>)
 800132a:	220c      	movs	r2, #12
 800132c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <MX_UART4_Init+0x58>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <MX_UART4_Init+0x58>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <MX_UART4_Init+0x58>)
 800133c:	2200      	movs	r2, #0
 800133e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <MX_UART4_Init+0x58>)
 8001342:	2200      	movs	r2, #0
 8001344:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001346:	4805      	ldr	r0, [pc, #20]	; (800135c <MX_UART4_Init+0x58>)
 8001348:	f001 ff3a 	bl	80031c0 <HAL_UART_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001352:	f7ff fb74 	bl	8000a3e <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000524 	.word	0x20000524
 8001360:	40004c00 	.word	0x40004c00

08001364 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a1b      	ldr	r2, [pc, #108]	; (80013f0 <HAL_UART_MspInit+0x8c>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d130      	bne.n	80013e8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001386:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <HAL_UART_MspInit+0x90>)
 8001388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138a:	4a1a      	ldr	r2, [pc, #104]	; (80013f4 <HAL_UART_MspInit+0x90>)
 800138c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001390:	6593      	str	r3, [r2, #88]	; 0x58
 8001392:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <HAL_UART_MspInit+0x90>)
 8001394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001396:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <HAL_UART_MspInit+0x90>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <HAL_UART_MspInit+0x90>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013aa:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <HAL_UART_MspInit+0x90>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013b6:	2303      	movs	r3, #3
 80013b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c2:	2303      	movs	r3, #3
 80013c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80013c6:	2308      	movs	r3, #8
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	4619      	mov	r1, r3
 80013d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d4:	f000 fa3e 	bl	8001854 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80013d8:	2200      	movs	r2, #0
 80013da:	2100      	movs	r1, #0
 80013dc:	2034      	movs	r0, #52	; 0x34
 80013de:	f000 f984 	bl	80016ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80013e2:	2034      	movs	r0, #52	; 0x34
 80013e4:	f000 f99d 	bl	8001722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 80013e8:	bf00      	nop
 80013ea:	3728      	adds	r7, #40	; 0x28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40004c00 	.word	0x40004c00
 80013f4:	40021000 	.word	0x40021000

080013f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001430 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013fc:	f7ff fc04 	bl	8000c08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001400:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001402:	e003      	b.n	800140c <LoopCopyDataInit>

08001404 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001404:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001406:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001408:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800140a:	3104      	adds	r1, #4

0800140c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800140c:	480a      	ldr	r0, [pc, #40]	; (8001438 <LoopForever+0xa>)
	ldr	r3, =_edata
 800140e:	4b0b      	ldr	r3, [pc, #44]	; (800143c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001410:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001412:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001414:	d3f6      	bcc.n	8001404 <CopyDataInit>
	ldr	r2, =_sbss
 8001416:	4a0a      	ldr	r2, [pc, #40]	; (8001440 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001418:	e002      	b.n	8001420 <LoopFillZerobss>

0800141a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800141a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800141c:	f842 3b04 	str.w	r3, [r2], #4

08001420 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001420:	4b08      	ldr	r3, [pc, #32]	; (8001444 <LoopForever+0x16>)
	cmp	r2, r3
 8001422:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001424:	d3f9      	bcc.n	800141a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001426:	f002 ffd3 	bl	80043d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800142a:	f7ff fa86 	bl	800093a <main>

0800142e <LoopForever>:

LoopForever:
    b LoopForever
 800142e:	e7fe      	b.n	800142e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001430:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001434:	08005870 	.word	0x08005870
	ldr	r0, =_sdata
 8001438:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800143c:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001440:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001444:	200005bc 	.word	0x200005bc

08001448 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001448:	e7fe      	b.n	8001448 <ADC1_2_IRQHandler>

0800144a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001450:	2300      	movs	r3, #0
 8001452:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001454:	2003      	movs	r0, #3
 8001456:	f000 f93d 	bl	80016d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800145a:	2000      	movs	r0, #0
 800145c:	f000 f80e 	bl	800147c <HAL_InitTick>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d002      	beq.n	800146c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	71fb      	strb	r3, [r7, #7]
 800146a:	e001      	b.n	8001470 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800146c:	f7ff faec 	bl	8000a48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001470:	79fb      	ldrb	r3, [r7, #7]
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001484:	2300      	movs	r3, #0
 8001486:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001488:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <HAL_InitTick+0x6c>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d023      	beq.n	80014d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001490:	4b16      	ldr	r3, [pc, #88]	; (80014ec <HAL_InitTick+0x70>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <HAL_InitTick+0x6c>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	4619      	mov	r1, r3
 800149a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800149e:	fbb3 f3f1 	udiv	r3, r3, r1
 80014a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 f949 	bl	800173e <HAL_SYSTICK_Config>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10f      	bne.n	80014d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b0f      	cmp	r3, #15
 80014b6:	d809      	bhi.n	80014cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b8:	2200      	movs	r2, #0
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	f04f 30ff 	mov.w	r0, #4294967295
 80014c0:	f000 f913 	bl	80016ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014c4:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <HAL_InitTick+0x74>)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	e007      	b.n	80014dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	73fb      	strb	r3, [r7, #15]
 80014d0:	e004      	b.n	80014dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	73fb      	strb	r3, [r7, #15]
 80014d6:	e001      	b.n	80014dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000008 	.word	0x20000008
 80014ec:	20000000 	.word	0x20000000
 80014f0:	20000004 	.word	0x20000004

080014f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_IncTick+0x20>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_IncTick+0x24>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4413      	add	r3, r2
 8001504:	4a04      	ldr	r2, [pc, #16]	; (8001518 <HAL_IncTick+0x24>)
 8001506:	6013      	str	r3, [r2, #0]
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	20000008 	.word	0x20000008
 8001518:	200005a8 	.word	0x200005a8

0800151c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return uwTick;
 8001520:	4b03      	ldr	r3, [pc, #12]	; (8001530 <HAL_GetTick+0x14>)
 8001522:	681b      	ldr	r3, [r3, #0]
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	200005a8 	.word	0x200005a8

08001534 <__NVIC_SetPriorityGrouping>:
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <__NVIC_SetPriorityGrouping+0x44>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001550:	4013      	ands	r3, r2
 8001552:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800155c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001566:	4a04      	ldr	r2, [pc, #16]	; (8001578 <__NVIC_SetPriorityGrouping+0x44>)
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	60d3      	str	r3, [r2, #12]
}
 800156c:	bf00      	nop
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <__NVIC_GetPriorityGrouping>:
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001580:	4b04      	ldr	r3, [pc, #16]	; (8001594 <__NVIC_GetPriorityGrouping+0x18>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	0a1b      	lsrs	r3, r3, #8
 8001586:	f003 0307 	and.w	r3, r3, #7
}
 800158a:	4618      	mov	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <__NVIC_EnableIRQ>:
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	db0b      	blt.n	80015c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	f003 021f 	and.w	r2, r3, #31
 80015b0:	4907      	ldr	r1, [pc, #28]	; (80015d0 <__NVIC_EnableIRQ+0x38>)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	095b      	lsrs	r3, r3, #5
 80015b8:	2001      	movs	r0, #1
 80015ba:	fa00 f202 	lsl.w	r2, r0, r2
 80015be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000e100 	.word	0xe000e100

080015d4 <__NVIC_SetPriority>:
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	6039      	str	r1, [r7, #0]
 80015de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	db0a      	blt.n	80015fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	490c      	ldr	r1, [pc, #48]	; (8001620 <__NVIC_SetPriority+0x4c>)
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	0112      	lsls	r2, r2, #4
 80015f4:	b2d2      	uxtb	r2, r2
 80015f6:	440b      	add	r3, r1
 80015f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80015fc:	e00a      	b.n	8001614 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4908      	ldr	r1, [pc, #32]	; (8001624 <__NVIC_SetPriority+0x50>)
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	3b04      	subs	r3, #4
 800160c:	0112      	lsls	r2, r2, #4
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	440b      	add	r3, r1
 8001612:	761a      	strb	r2, [r3, #24]
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000e100 	.word	0xe000e100
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <NVIC_EncodePriority>:
{
 8001628:	b480      	push	{r7}
 800162a:	b089      	sub	sp, #36	; 0x24
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f1c3 0307 	rsb	r3, r3, #7
 8001642:	2b04      	cmp	r3, #4
 8001644:	bf28      	it	cs
 8001646:	2304      	movcs	r3, #4
 8001648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3304      	adds	r3, #4
 800164e:	2b06      	cmp	r3, #6
 8001650:	d902      	bls.n	8001658 <NVIC_EncodePriority+0x30>
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3b03      	subs	r3, #3
 8001656:	e000      	b.n	800165a <NVIC_EncodePriority+0x32>
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800165c:	f04f 32ff 	mov.w	r2, #4294967295
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43da      	mvns	r2, r3
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	401a      	ands	r2, r3
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001670:	f04f 31ff 	mov.w	r1, #4294967295
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	fa01 f303 	lsl.w	r3, r1, r3
 800167a:	43d9      	mvns	r1, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	4313      	orrs	r3, r2
}
 8001682:	4618      	mov	r0, r3
 8001684:	3724      	adds	r7, #36	; 0x24
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <SysTick_Config>:
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3b01      	subs	r3, #1
 800169c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016a0:	d301      	bcc.n	80016a6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80016a2:	2301      	movs	r3, #1
 80016a4:	e00f      	b.n	80016c6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016a6:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <SysTick_Config+0x40>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ae:	210f      	movs	r1, #15
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295
 80016b4:	f7ff ff8e 	bl	80015d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <SysTick_Config+0x40>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016be:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <SysTick_Config+0x40>)
 80016c0:	2207      	movs	r2, #7
 80016c2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	e000e010 	.word	0xe000e010

080016d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff ff29 	bl	8001534 <__NVIC_SetPriorityGrouping>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b086      	sub	sp, #24
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
 80016f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016fc:	f7ff ff3e 	bl	800157c <__NVIC_GetPriorityGrouping>
 8001700:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	68b9      	ldr	r1, [r7, #8]
 8001706:	6978      	ldr	r0, [r7, #20]
 8001708:	f7ff ff8e 	bl	8001628 <NVIC_EncodePriority>
 800170c:	4602      	mov	r2, r0
 800170e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001712:	4611      	mov	r1, r2
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff5d 	bl	80015d4 <__NVIC_SetPriority>
}
 800171a:	bf00      	nop
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff31 	bl	8001598 <__NVIC_EnableIRQ>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ffa2 	bl	8001690 <SysTick_Config>
 800174c:	4603      	mov	r3, r0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001756:	b480      	push	{r7}
 8001758:	b085      	sub	sp, #20
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800175e:	2300      	movs	r3, #0
 8001760:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d008      	beq.n	8001780 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2204      	movs	r2, #4
 8001772:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e022      	b.n	80017c6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 020e 	bic.w	r2, r2, #14
 800178e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0201 	bic.w	r2, r2, #1
 800179e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a4:	f003 021c 	and.w	r2, r3, #28
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	2101      	movs	r1, #1
 80017ae:	fa01 f202 	lsl.w	r2, r1, r2
 80017b2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b084      	sub	sp, #16
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d005      	beq.n	80017f6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2204      	movs	r2, #4
 80017ee:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	73fb      	strb	r3, [r7, #15]
 80017f4:	e029      	b.n	800184a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f022 020e 	bic.w	r2, r2, #14
 8001804:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f022 0201 	bic.w	r2, r2, #1
 8001814:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	f003 021c 	and.w	r2, r3, #28
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	2101      	movs	r1, #1
 8001824:	fa01 f202 	lsl.w	r2, r1, r2
 8001828:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	4798      	blx	r3
    }
  }
  return status;
 800184a:	7bfb      	ldrb	r3, [r7, #15]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001854:	b480      	push	{r7}
 8001856:	b087      	sub	sp, #28
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001862:	e17f      	b.n	8001b64 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	2101      	movs	r1, #1
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	fa01 f303 	lsl.w	r3, r1, r3
 8001870:	4013      	ands	r3, r2
 8001872:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2b00      	cmp	r3, #0
 8001878:	f000 8171 	beq.w	8001b5e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d00b      	beq.n	800189c <HAL_GPIO_Init+0x48>
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	2b02      	cmp	r3, #2
 800188a:	d007      	beq.n	800189c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001890:	2b11      	cmp	r3, #17
 8001892:	d003      	beq.n	800189c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b12      	cmp	r3, #18
 800189a:	d130      	bne.n	80018fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	2203      	movs	r2, #3
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4013      	ands	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	68da      	ldr	r2, [r3, #12]
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018d2:	2201      	movs	r2, #1
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	091b      	lsrs	r3, r3, #4
 80018e8:	f003 0201 	and.w	r2, r3, #1
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	2b03      	cmp	r3, #3
 8001908:	d118      	bne.n	800193c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001910:	2201      	movs	r2, #1
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4013      	ands	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	08db      	lsrs	r3, r3, #3
 8001926:	f003 0201 	and.w	r2, r3, #1
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	4313      	orrs	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	2203      	movs	r2, #3
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	4013      	ands	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4313      	orrs	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	2b02      	cmp	r3, #2
 8001972:	d003      	beq.n	800197c <HAL_GPIO_Init+0x128>
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b12      	cmp	r3, #18
 800197a:	d123      	bne.n	80019c4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	08da      	lsrs	r2, r3, #3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3208      	adds	r2, #8
 8001984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001988:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	220f      	movs	r2, #15
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	691a      	ldr	r2, [r3, #16]
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	08da      	lsrs	r2, r3, #3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3208      	adds	r2, #8
 80019be:	6939      	ldr	r1, [r7, #16]
 80019c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	2203      	movs	r2, #3
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4013      	ands	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 0203 	and.w	r2, r3, #3
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 80ac 	beq.w	8001b5e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a06:	4b5f      	ldr	r3, [pc, #380]	; (8001b84 <HAL_GPIO_Init+0x330>)
 8001a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a0a:	4a5e      	ldr	r2, [pc, #376]	; (8001b84 <HAL_GPIO_Init+0x330>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	6613      	str	r3, [r2, #96]	; 0x60
 8001a12:	4b5c      	ldr	r3, [pc, #368]	; (8001b84 <HAL_GPIO_Init+0x330>)
 8001a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a1e:	4a5a      	ldr	r2, [pc, #360]	; (8001b88 <HAL_GPIO_Init+0x334>)
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	089b      	lsrs	r3, r3, #2
 8001a24:	3302      	adds	r3, #2
 8001a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	f003 0303 	and.w	r3, r3, #3
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	220f      	movs	r2, #15
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a48:	d025      	beq.n	8001a96 <HAL_GPIO_Init+0x242>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a4f      	ldr	r2, [pc, #316]	; (8001b8c <HAL_GPIO_Init+0x338>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d01f      	beq.n	8001a92 <HAL_GPIO_Init+0x23e>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a4e      	ldr	r2, [pc, #312]	; (8001b90 <HAL_GPIO_Init+0x33c>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d019      	beq.n	8001a8e <HAL_GPIO_Init+0x23a>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a4d      	ldr	r2, [pc, #308]	; (8001b94 <HAL_GPIO_Init+0x340>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d013      	beq.n	8001a8a <HAL_GPIO_Init+0x236>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a4c      	ldr	r2, [pc, #304]	; (8001b98 <HAL_GPIO_Init+0x344>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d00d      	beq.n	8001a86 <HAL_GPIO_Init+0x232>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a4b      	ldr	r2, [pc, #300]	; (8001b9c <HAL_GPIO_Init+0x348>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d007      	beq.n	8001a82 <HAL_GPIO_Init+0x22e>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a4a      	ldr	r2, [pc, #296]	; (8001ba0 <HAL_GPIO_Init+0x34c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d101      	bne.n	8001a7e <HAL_GPIO_Init+0x22a>
 8001a7a:	2306      	movs	r3, #6
 8001a7c:	e00c      	b.n	8001a98 <HAL_GPIO_Init+0x244>
 8001a7e:	2307      	movs	r3, #7
 8001a80:	e00a      	b.n	8001a98 <HAL_GPIO_Init+0x244>
 8001a82:	2305      	movs	r3, #5
 8001a84:	e008      	b.n	8001a98 <HAL_GPIO_Init+0x244>
 8001a86:	2304      	movs	r3, #4
 8001a88:	e006      	b.n	8001a98 <HAL_GPIO_Init+0x244>
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e004      	b.n	8001a98 <HAL_GPIO_Init+0x244>
 8001a8e:	2302      	movs	r3, #2
 8001a90:	e002      	b.n	8001a98 <HAL_GPIO_Init+0x244>
 8001a92:	2301      	movs	r3, #1
 8001a94:	e000      	b.n	8001a98 <HAL_GPIO_Init+0x244>
 8001a96:	2300      	movs	r3, #0
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	f002 0203 	and.w	r2, r2, #3
 8001a9e:	0092      	lsls	r2, r2, #2
 8001aa0:	4093      	lsls	r3, r2
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001aa8:	4937      	ldr	r1, [pc, #220]	; (8001b88 <HAL_GPIO_Init+0x334>)
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	089b      	lsrs	r3, r3, #2
 8001aae:	3302      	adds	r3, #2
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ab6:	4b3b      	ldr	r3, [pc, #236]	; (8001ba4 <HAL_GPIO_Init+0x350>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ada:	4a32      	ldr	r2, [pc, #200]	; (8001ba4 <HAL_GPIO_Init+0x350>)
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001ae0:	4b30      	ldr	r3, [pc, #192]	; (8001ba4 <HAL_GPIO_Init+0x350>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4013      	ands	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b04:	4a27      	ldr	r2, [pc, #156]	; (8001ba4 <HAL_GPIO_Init+0x350>)
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b0a:	4b26      	ldr	r3, [pc, #152]	; (8001ba4 <HAL_GPIO_Init+0x350>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	43db      	mvns	r3, r3
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4013      	ands	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b2e:	4a1d      	ldr	r2, [pc, #116]	; (8001ba4 <HAL_GPIO_Init+0x350>)
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b34:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <HAL_GPIO_Init+0x350>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4013      	ands	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b58:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <HAL_GPIO_Init+0x350>)
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	3301      	adds	r3, #1
 8001b62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f47f ae78 	bne.w	8001864 <HAL_GPIO_Init+0x10>
  }
}
 8001b74:	bf00      	nop
 8001b76:	bf00      	nop
 8001b78:	371c      	adds	r7, #28
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40010000 	.word	0x40010000
 8001b8c:	48000400 	.word	0x48000400
 8001b90:	48000800 	.word	0x48000800
 8001b94:	48000c00 	.word	0x48000c00
 8001b98:	48001000 	.word	0x48001000
 8001b9c:	48001400 	.word	0x48001400
 8001ba0:	48001800 	.word	0x48001800
 8001ba4:	40010400 	.word	0x40010400

08001ba8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001bac:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	40007000 	.word	0x40007000

08001bc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bd2:	d130      	bne.n	8001c36 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bd4:	4b23      	ldr	r3, [pc, #140]	; (8001c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001be0:	d038      	beq.n	8001c54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001be2:	4b20      	ldr	r3, [pc, #128]	; (8001c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bea:	4a1e      	ldr	r2, [pc, #120]	; (8001c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bf0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bf2:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2232      	movs	r2, #50	; 0x32
 8001bf8:	fb02 f303 	mul.w	r3, r2, r3
 8001bfc:	4a1b      	ldr	r2, [pc, #108]	; (8001c6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001c02:	0c9b      	lsrs	r3, r3, #18
 8001c04:	3301      	adds	r3, #1
 8001c06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c08:	e002      	b.n	8001c10 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c10:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c12:	695b      	ldr	r3, [r3, #20]
 8001c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c1c:	d102      	bne.n	8001c24 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1f2      	bne.n	8001c0a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c24:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c30:	d110      	bne.n	8001c54 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e00f      	b.n	8001c56 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c36:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c42:	d007      	beq.n	8001c54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c44:	4b07      	ldr	r3, [pc, #28]	; (8001c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c4c:	4a05      	ldr	r2, [pc, #20]	; (8001c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c52:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	40007000 	.word	0x40007000
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	431bde83 	.word	0x431bde83

08001c70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b088      	sub	sp, #32
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e3d4      	b.n	800242c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c82:	4ba1      	ldr	r3, [pc, #644]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 030c 	and.w	r3, r3, #12
 8001c8a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c8c:	4b9e      	ldr	r3, [pc, #632]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0310 	and.w	r3, r3, #16
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 80e4 	beq.w	8001e6c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d007      	beq.n	8001cba <HAL_RCC_OscConfig+0x4a>
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	2b0c      	cmp	r3, #12
 8001cae:	f040 808b 	bne.w	8001dc8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	f040 8087 	bne.w	8001dc8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cba:	4b93      	ldr	r3, [pc, #588]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d005      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x62>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e3ac      	b.n	800242c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a1a      	ldr	r2, [r3, #32]
 8001cd6:	4b8c      	ldr	r3, [pc, #560]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d004      	beq.n	8001cec <HAL_RCC_OscConfig+0x7c>
 8001ce2:	4b89      	ldr	r3, [pc, #548]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cea:	e005      	b.n	8001cf8 <HAL_RCC_OscConfig+0x88>
 8001cec:	4b86      	ldr	r3, [pc, #536]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cf2:	091b      	lsrs	r3, r3, #4
 8001cf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d223      	bcs.n	8001d44 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f000 fd41 	bl	8002788 <RCC_SetFlashLatencyFromMSIRange>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e38d      	b.n	800242c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d10:	4b7d      	ldr	r3, [pc, #500]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a7c      	ldr	r2, [pc, #496]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001d16:	f043 0308 	orr.w	r3, r3, #8
 8001d1a:	6013      	str	r3, [r2, #0]
 8001d1c:	4b7a      	ldr	r3, [pc, #488]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	4977      	ldr	r1, [pc, #476]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d2e:	4b76      	ldr	r3, [pc, #472]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	021b      	lsls	r3, r3, #8
 8001d3c:	4972      	ldr	r1, [pc, #456]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	604b      	str	r3, [r1, #4]
 8001d42:	e025      	b.n	8001d90 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d44:	4b70      	ldr	r3, [pc, #448]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a6f      	ldr	r2, [pc, #444]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001d4a:	f043 0308 	orr.w	r3, r3, #8
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	4b6d      	ldr	r3, [pc, #436]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	496a      	ldr	r1, [pc, #424]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d62:	4b69      	ldr	r3, [pc, #420]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	021b      	lsls	r3, r3, #8
 8001d70:	4965      	ldr	r1, [pc, #404]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d109      	bne.n	8001d90 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f000 fd01 	bl	8002788 <RCC_SetFlashLatencyFromMSIRange>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e34d      	b.n	800242c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d90:	f000 fc36 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 8001d94:	4602      	mov	r2, r0
 8001d96:	4b5c      	ldr	r3, [pc, #368]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	091b      	lsrs	r3, r3, #4
 8001d9c:	f003 030f 	and.w	r3, r3, #15
 8001da0:	495a      	ldr	r1, [pc, #360]	; (8001f0c <HAL_RCC_OscConfig+0x29c>)
 8001da2:	5ccb      	ldrb	r3, [r1, r3]
 8001da4:	f003 031f 	and.w	r3, r3, #31
 8001da8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dac:	4a58      	ldr	r2, [pc, #352]	; (8001f10 <HAL_RCC_OscConfig+0x2a0>)
 8001dae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001db0:	4b58      	ldr	r3, [pc, #352]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fb61 	bl	800147c <HAL_InitTick>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001dbe:	7bfb      	ldrb	r3, [r7, #15]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d052      	beq.n	8001e6a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
 8001dc6:	e331      	b.n	800242c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d032      	beq.n	8001e36 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001dd0:	4b4d      	ldr	r3, [pc, #308]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a4c      	ldr	r2, [pc, #304]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ddc:	f7ff fb9e 	bl	800151c <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001de4:	f7ff fb9a 	bl	800151c <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e31a      	b.n	800242c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001df6:	4b44      	ldr	r3, [pc, #272]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0f0      	beq.n	8001de4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e02:	4b41      	ldr	r3, [pc, #260]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a40      	ldr	r2, [pc, #256]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001e08:	f043 0308 	orr.w	r3, r3, #8
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	4b3e      	ldr	r3, [pc, #248]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	493b      	ldr	r1, [pc, #236]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e20:	4b39      	ldr	r3, [pc, #228]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69db      	ldr	r3, [r3, #28]
 8001e2c:	021b      	lsls	r3, r3, #8
 8001e2e:	4936      	ldr	r1, [pc, #216]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	604b      	str	r3, [r1, #4]
 8001e34:	e01a      	b.n	8001e6c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e36:	4b34      	ldr	r3, [pc, #208]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a33      	ldr	r2, [pc, #204]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001e3c:	f023 0301 	bic.w	r3, r3, #1
 8001e40:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e42:	f7ff fb6b 	bl	800151c <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e4a:	f7ff fb67 	bl	800151c <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e2e7      	b.n	800242c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e5c:	4b2a      	ldr	r3, [pc, #168]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1f0      	bne.n	8001e4a <HAL_RCC_OscConfig+0x1da>
 8001e68:	e000      	b.n	8001e6c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e6a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d074      	beq.n	8001f62 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d005      	beq.n	8001e8a <HAL_RCC_OscConfig+0x21a>
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	2b0c      	cmp	r3, #12
 8001e82:	d10e      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	d10b      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e8a:	4b1f      	ldr	r3, [pc, #124]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d064      	beq.n	8001f60 <HAL_RCC_OscConfig+0x2f0>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d160      	bne.n	8001f60 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e2c4      	b.n	800242c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eaa:	d106      	bne.n	8001eba <HAL_RCC_OscConfig+0x24a>
 8001eac:	4b16      	ldr	r3, [pc, #88]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a15      	ldr	r2, [pc, #84]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001eb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	e01d      	b.n	8001ef6 <HAL_RCC_OscConfig+0x286>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ec2:	d10c      	bne.n	8001ede <HAL_RCC_OscConfig+0x26e>
 8001ec4:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a0f      	ldr	r2, [pc, #60]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001eca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ece:	6013      	str	r3, [r2, #0]
 8001ed0:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a0c      	ldr	r2, [pc, #48]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001ed6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eda:	6013      	str	r3, [r2, #0]
 8001edc:	e00b      	b.n	8001ef6 <HAL_RCC_OscConfig+0x286>
 8001ede:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a09      	ldr	r2, [pc, #36]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	4b07      	ldr	r3, [pc, #28]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a06      	ldr	r2, [pc, #24]	; (8001f08 <HAL_RCC_OscConfig+0x298>)
 8001ef0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ef4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d01c      	beq.n	8001f38 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efe:	f7ff fb0d 	bl	800151c <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f04:	e011      	b.n	8001f2a <HAL_RCC_OscConfig+0x2ba>
 8001f06:	bf00      	nop
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	08005680 	.word	0x08005680
 8001f10:	20000000 	.word	0x20000000
 8001f14:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f18:	f7ff fb00 	bl	800151c <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b64      	cmp	r3, #100	; 0x64
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e280      	b.n	800242c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f2a:	4baf      	ldr	r3, [pc, #700]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0f0      	beq.n	8001f18 <HAL_RCC_OscConfig+0x2a8>
 8001f36:	e014      	b.n	8001f62 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f38:	f7ff faf0 	bl	800151c <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f40:	f7ff faec 	bl	800151c <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b64      	cmp	r3, #100	; 0x64
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e26c      	b.n	800242c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f52:	4ba5      	ldr	r3, [pc, #660]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1f0      	bne.n	8001f40 <HAL_RCC_OscConfig+0x2d0>
 8001f5e:	e000      	b.n	8001f62 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d060      	beq.n	8002030 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	d005      	beq.n	8001f80 <HAL_RCC_OscConfig+0x310>
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	2b0c      	cmp	r3, #12
 8001f78:	d119      	bne.n	8001fae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d116      	bne.n	8001fae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f80:	4b99      	ldr	r3, [pc, #612]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d005      	beq.n	8001f98 <HAL_RCC_OscConfig+0x328>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e249      	b.n	800242c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f98:	4b93      	ldr	r3, [pc, #588]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	061b      	lsls	r3, r3, #24
 8001fa6:	4990      	ldr	r1, [pc, #576]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fac:	e040      	b.n	8002030 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d023      	beq.n	8001ffe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fb6:	4b8c      	ldr	r3, [pc, #560]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a8b      	ldr	r2, [pc, #556]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8001fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc2:	f7ff faab 	bl	800151c <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fca:	f7ff faa7 	bl	800151c <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e227      	b.n	800242c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fdc:	4b82      	ldr	r3, [pc, #520]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0f0      	beq.n	8001fca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe8:	4b7f      	ldr	r3, [pc, #508]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	061b      	lsls	r3, r3, #24
 8001ff6:	497c      	ldr	r1, [pc, #496]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	604b      	str	r3, [r1, #4]
 8001ffc:	e018      	b.n	8002030 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ffe:	4b7a      	ldr	r3, [pc, #488]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a79      	ldr	r2, [pc, #484]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8002004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002008:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200a:	f7ff fa87 	bl	800151c <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002012:	f7ff fa83 	bl	800151c <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e203      	b.n	800242c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002024:	4b70      	ldr	r3, [pc, #448]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1f0      	bne.n	8002012 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0308 	and.w	r3, r3, #8
 8002038:	2b00      	cmp	r3, #0
 800203a:	d03c      	beq.n	80020b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d01c      	beq.n	800207e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002044:	4b68      	ldr	r3, [pc, #416]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8002046:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800204a:	4a67      	ldr	r2, [pc, #412]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002054:	f7ff fa62 	bl	800151c <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800205c:	f7ff fa5e 	bl	800151c <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e1de      	b.n	800242c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800206e:	4b5e      	ldr	r3, [pc, #376]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8002070:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0ef      	beq.n	800205c <HAL_RCC_OscConfig+0x3ec>
 800207c:	e01b      	b.n	80020b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800207e:	4b5a      	ldr	r3, [pc, #360]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8002080:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002084:	4a58      	ldr	r2, [pc, #352]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8002086:	f023 0301 	bic.w	r3, r3, #1
 800208a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800208e:	f7ff fa45 	bl	800151c <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002096:	f7ff fa41 	bl	800151c <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e1c1      	b.n	800242c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020a8:	4b4f      	ldr	r3, [pc, #316]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 80020aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1ef      	bne.n	8002096 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0304 	and.w	r3, r3, #4
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 80a6 	beq.w	8002210 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020c4:	2300      	movs	r3, #0
 80020c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020c8:	4b47      	ldr	r3, [pc, #284]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 80020ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10d      	bne.n	80020f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020d4:	4b44      	ldr	r3, [pc, #272]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 80020d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d8:	4a43      	ldr	r2, [pc, #268]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 80020da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020de:	6593      	str	r3, [r2, #88]	; 0x58
 80020e0:	4b41      	ldr	r3, [pc, #260]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 80020e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ec:	2301      	movs	r3, #1
 80020ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020f0:	4b3e      	ldr	r3, [pc, #248]	; (80021ec <HAL_RCC_OscConfig+0x57c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d118      	bne.n	800212e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020fc:	4b3b      	ldr	r3, [pc, #236]	; (80021ec <HAL_RCC_OscConfig+0x57c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a3a      	ldr	r2, [pc, #232]	; (80021ec <HAL_RCC_OscConfig+0x57c>)
 8002102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002106:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002108:	f7ff fa08 	bl	800151c <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002110:	f7ff fa04 	bl	800151c <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e184      	b.n	800242c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002122:	4b32      	ldr	r3, [pc, #200]	; (80021ec <HAL_RCC_OscConfig+0x57c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d108      	bne.n	8002148 <HAL_RCC_OscConfig+0x4d8>
 8002136:	4b2c      	ldr	r3, [pc, #176]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8002138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213c:	4a2a      	ldr	r2, [pc, #168]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002146:	e024      	b.n	8002192 <HAL_RCC_OscConfig+0x522>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	2b05      	cmp	r3, #5
 800214e:	d110      	bne.n	8002172 <HAL_RCC_OscConfig+0x502>
 8002150:	4b25      	ldr	r3, [pc, #148]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8002152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002156:	4a24      	ldr	r2, [pc, #144]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8002158:	f043 0304 	orr.w	r3, r3, #4
 800215c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002160:	4b21      	ldr	r3, [pc, #132]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8002162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002166:	4a20      	ldr	r2, [pc, #128]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002170:	e00f      	b.n	8002192 <HAL_RCC_OscConfig+0x522>
 8002172:	4b1d      	ldr	r3, [pc, #116]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8002174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002178:	4a1b      	ldr	r2, [pc, #108]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 800217a:	f023 0301 	bic.w	r3, r3, #1
 800217e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002182:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 8002184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002188:	4a17      	ldr	r2, [pc, #92]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 800218a:	f023 0304 	bic.w	r3, r3, #4
 800218e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d016      	beq.n	80021c8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219a:	f7ff f9bf 	bl	800151c <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021a0:	e00a      	b.n	80021b8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a2:	f7ff f9bb 	bl	800151c <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e139      	b.n	800242c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021b8:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <HAL_RCC_OscConfig+0x578>)
 80021ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0ed      	beq.n	80021a2 <HAL_RCC_OscConfig+0x532>
 80021c6:	e01a      	b.n	80021fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c8:	f7ff f9a8 	bl	800151c <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021ce:	e00f      	b.n	80021f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d0:	f7ff f9a4 	bl	800151c <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	f241 3288 	movw	r2, #5000	; 0x1388
 80021de:	4293      	cmp	r3, r2
 80021e0:	d906      	bls.n	80021f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e122      	b.n	800242c <HAL_RCC_OscConfig+0x7bc>
 80021e6:	bf00      	nop
 80021e8:	40021000 	.word	0x40021000
 80021ec:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021f0:	4b90      	ldr	r3, [pc, #576]	; (8002434 <HAL_RCC_OscConfig+0x7c4>)
 80021f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1e8      	bne.n	80021d0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021fe:	7ffb      	ldrb	r3, [r7, #31]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d105      	bne.n	8002210 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002204:	4b8b      	ldr	r3, [pc, #556]	; (8002434 <HAL_RCC_OscConfig+0x7c4>)
 8002206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002208:	4a8a      	ldr	r2, [pc, #552]	; (8002434 <HAL_RCC_OscConfig+0x7c4>)
 800220a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800220e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 8108 	beq.w	800242a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221e:	2b02      	cmp	r3, #2
 8002220:	f040 80d0 	bne.w	80023c4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002224:	4b83      	ldr	r3, [pc, #524]	; (8002434 <HAL_RCC_OscConfig+0x7c4>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f003 0203 	and.w	r2, r3, #3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002234:	429a      	cmp	r2, r3
 8002236:	d130      	bne.n	800229a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	3b01      	subs	r3, #1
 8002244:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002246:	429a      	cmp	r2, r3
 8002248:	d127      	bne.n	800229a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002254:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002256:	429a      	cmp	r2, r3
 8002258:	d11f      	bne.n	800229a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002264:	2a07      	cmp	r2, #7
 8002266:	bf14      	ite	ne
 8002268:	2201      	movne	r2, #1
 800226a:	2200      	moveq	r2, #0
 800226c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800226e:	4293      	cmp	r3, r2
 8002270:	d113      	bne.n	800229a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227c:	085b      	lsrs	r3, r3, #1
 800227e:	3b01      	subs	r3, #1
 8002280:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002282:	429a      	cmp	r2, r3
 8002284:	d109      	bne.n	800229a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	085b      	lsrs	r3, r3, #1
 8002292:	3b01      	subs	r3, #1
 8002294:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002296:	429a      	cmp	r2, r3
 8002298:	d06e      	beq.n	8002378 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	2b0c      	cmp	r3, #12
 800229e:	d069      	beq.n	8002374 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80022a0:	4b64      	ldr	r3, [pc, #400]	; (8002434 <HAL_RCC_OscConfig+0x7c4>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d105      	bne.n	80022b8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80022ac:	4b61      	ldr	r3, [pc, #388]	; (8002434 <HAL_RCC_OscConfig+0x7c4>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0b7      	b.n	800242c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80022bc:	4b5d      	ldr	r3, [pc, #372]	; (8002434 <HAL_RCC_OscConfig+0x7c4>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a5c      	ldr	r2, [pc, #368]	; (8002434 <HAL_RCC_OscConfig+0x7c4>)
 80022c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022c6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022c8:	f7ff f928 	bl	800151c <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d0:	f7ff f924 	bl	800151c <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e0a4      	b.n	800242c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022e2:	4b54      	ldr	r3, [pc, #336]	; (8002434 <HAL_RCC_OscConfig+0x7c4>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ee:	4b51      	ldr	r3, [pc, #324]	; (8002434 <HAL_RCC_OscConfig+0x7c4>)
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	4b51      	ldr	r3, [pc, #324]	; (8002438 <HAL_RCC_OscConfig+0x7c8>)
 80022f4:	4013      	ands	r3, r2
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022fe:	3a01      	subs	r2, #1
 8002300:	0112      	lsls	r2, r2, #4
 8002302:	4311      	orrs	r1, r2
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002308:	0212      	lsls	r2, r2, #8
 800230a:	4311      	orrs	r1, r2
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002310:	0852      	lsrs	r2, r2, #1
 8002312:	3a01      	subs	r2, #1
 8002314:	0552      	lsls	r2, r2, #21
 8002316:	4311      	orrs	r1, r2
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800231c:	0852      	lsrs	r2, r2, #1
 800231e:	3a01      	subs	r2, #1
 8002320:	0652      	lsls	r2, r2, #25
 8002322:	4311      	orrs	r1, r2
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002328:	0912      	lsrs	r2, r2, #4
 800232a:	0452      	lsls	r2, r2, #17
 800232c:	430a      	orrs	r2, r1
 800232e:	4941      	ldr	r1, [pc, #260]	; (8002434 <HAL_RCC_OscConfig+0x7c4>)
 8002330:	4313      	orrs	r3, r2
 8002332:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002334:	4b3f      	ldr	r3, [pc, #252]	; (8002434 <HAL_RCC_OscConfig+0x7c4>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a3e      	ldr	r2, [pc, #248]	; (8002434 <HAL_RCC_OscConfig+0x7c4>)
 800233a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800233e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002340:	4b3c      	ldr	r3, [pc, #240]	; (8002434 <HAL_RCC_OscConfig+0x7c4>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	4a3b      	ldr	r2, [pc, #236]	; (8002434 <HAL_RCC_OscConfig+0x7c4>)
 8002346:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800234a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800234c:	f7ff f8e6 	bl	800151c <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002354:	f7ff f8e2 	bl	800151c <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e062      	b.n	800242c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002366:	4b33      	ldr	r3, [pc, #204]	; (8002434 <HAL_RCC_OscConfig+0x7c4>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f0      	beq.n	8002354 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002372:	e05a      	b.n	800242a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e059      	b.n	800242c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002378:	4b2e      	ldr	r3, [pc, #184]	; (8002434 <HAL_RCC_OscConfig+0x7c4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d152      	bne.n	800242a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002384:	4b2b      	ldr	r3, [pc, #172]	; (8002434 <HAL_RCC_OscConfig+0x7c4>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a2a      	ldr	r2, [pc, #168]	; (8002434 <HAL_RCC_OscConfig+0x7c4>)
 800238a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800238e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002390:	4b28      	ldr	r3, [pc, #160]	; (8002434 <HAL_RCC_OscConfig+0x7c4>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	4a27      	ldr	r2, [pc, #156]	; (8002434 <HAL_RCC_OscConfig+0x7c4>)
 8002396:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800239a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800239c:	f7ff f8be 	bl	800151c <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a4:	f7ff f8ba 	bl	800151c <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e03a      	b.n	800242c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023b6:	4b1f      	ldr	r3, [pc, #124]	; (8002434 <HAL_RCC_OscConfig+0x7c4>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0f0      	beq.n	80023a4 <HAL_RCC_OscConfig+0x734>
 80023c2:	e032      	b.n	800242a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	2b0c      	cmp	r3, #12
 80023c8:	d02d      	beq.n	8002426 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ca:	4b1a      	ldr	r3, [pc, #104]	; (8002434 <HAL_RCC_OscConfig+0x7c4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a19      	ldr	r2, [pc, #100]	; (8002434 <HAL_RCC_OscConfig+0x7c4>)
 80023d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023d4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80023d6:	4b17      	ldr	r3, [pc, #92]	; (8002434 <HAL_RCC_OscConfig+0x7c4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d105      	bne.n	80023ee <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80023e2:	4b14      	ldr	r3, [pc, #80]	; (8002434 <HAL_RCC_OscConfig+0x7c4>)
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	4a13      	ldr	r2, [pc, #76]	; (8002434 <HAL_RCC_OscConfig+0x7c4>)
 80023e8:	f023 0303 	bic.w	r3, r3, #3
 80023ec:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80023ee:	4b11      	ldr	r3, [pc, #68]	; (8002434 <HAL_RCC_OscConfig+0x7c4>)
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	4a10      	ldr	r2, [pc, #64]	; (8002434 <HAL_RCC_OscConfig+0x7c4>)
 80023f4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80023f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023fc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fe:	f7ff f88d 	bl	800151c <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002406:	f7ff f889 	bl	800151c <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e009      	b.n	800242c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002418:	4b06      	ldr	r3, [pc, #24]	; (8002434 <HAL_RCC_OscConfig+0x7c4>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1f0      	bne.n	8002406 <HAL_RCC_OscConfig+0x796>
 8002424:	e001      	b.n	800242a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3720      	adds	r7, #32
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40021000 	.word	0x40021000
 8002438:	f99d808c 	.word	0xf99d808c

0800243c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e0c8      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002450:	4b66      	ldr	r3, [pc, #408]	; (80025ec <HAL_RCC_ClockConfig+0x1b0>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d910      	bls.n	8002480 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245e:	4b63      	ldr	r3, [pc, #396]	; (80025ec <HAL_RCC_ClockConfig+0x1b0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f023 0207 	bic.w	r2, r3, #7
 8002466:	4961      	ldr	r1, [pc, #388]	; (80025ec <HAL_RCC_ClockConfig+0x1b0>)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	4313      	orrs	r3, r2
 800246c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800246e:	4b5f      	ldr	r3, [pc, #380]	; (80025ec <HAL_RCC_ClockConfig+0x1b0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d001      	beq.n	8002480 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e0b0      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b00      	cmp	r3, #0
 800248a:	d04c      	beq.n	8002526 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b03      	cmp	r3, #3
 8002492:	d107      	bne.n	80024a4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002494:	4b56      	ldr	r3, [pc, #344]	; (80025f0 <HAL_RCC_ClockConfig+0x1b4>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d121      	bne.n	80024e4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e09e      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d107      	bne.n	80024bc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ac:	4b50      	ldr	r3, [pc, #320]	; (80025f0 <HAL_RCC_ClockConfig+0x1b4>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d115      	bne.n	80024e4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e092      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d107      	bne.n	80024d4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024c4:	4b4a      	ldr	r3, [pc, #296]	; (80025f0 <HAL_RCC_ClockConfig+0x1b4>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d109      	bne.n	80024e4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e086      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024d4:	4b46      	ldr	r3, [pc, #280]	; (80025f0 <HAL_RCC_ClockConfig+0x1b4>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e07e      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024e4:	4b42      	ldr	r3, [pc, #264]	; (80025f0 <HAL_RCC_ClockConfig+0x1b4>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f023 0203 	bic.w	r2, r3, #3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	493f      	ldr	r1, [pc, #252]	; (80025f0 <HAL_RCC_ClockConfig+0x1b4>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024f6:	f7ff f811 	bl	800151c <HAL_GetTick>
 80024fa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fc:	e00a      	b.n	8002514 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024fe:	f7ff f80d 	bl	800151c <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	f241 3288 	movw	r2, #5000	; 0x1388
 800250c:	4293      	cmp	r3, r2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e066      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002514:	4b36      	ldr	r3, [pc, #216]	; (80025f0 <HAL_RCC_ClockConfig+0x1b4>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 020c 	and.w	r2, r3, #12
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	429a      	cmp	r2, r3
 8002524:	d1eb      	bne.n	80024fe <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d008      	beq.n	8002544 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002532:	4b2f      	ldr	r3, [pc, #188]	; (80025f0 <HAL_RCC_ClockConfig+0x1b4>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	492c      	ldr	r1, [pc, #176]	; (80025f0 <HAL_RCC_ClockConfig+0x1b4>)
 8002540:	4313      	orrs	r3, r2
 8002542:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002544:	4b29      	ldr	r3, [pc, #164]	; (80025ec <HAL_RCC_ClockConfig+0x1b0>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d210      	bcs.n	8002574 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002552:	4b26      	ldr	r3, [pc, #152]	; (80025ec <HAL_RCC_ClockConfig+0x1b0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f023 0207 	bic.w	r2, r3, #7
 800255a:	4924      	ldr	r1, [pc, #144]	; (80025ec <HAL_RCC_ClockConfig+0x1b0>)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	4313      	orrs	r3, r2
 8002560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002562:	4b22      	ldr	r3, [pc, #136]	; (80025ec <HAL_RCC_ClockConfig+0x1b0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d001      	beq.n	8002574 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e036      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d008      	beq.n	8002592 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002580:	4b1b      	ldr	r3, [pc, #108]	; (80025f0 <HAL_RCC_ClockConfig+0x1b4>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	4918      	ldr	r1, [pc, #96]	; (80025f0 <HAL_RCC_ClockConfig+0x1b4>)
 800258e:	4313      	orrs	r3, r2
 8002590:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b00      	cmp	r3, #0
 800259c:	d009      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800259e:	4b14      	ldr	r3, [pc, #80]	; (80025f0 <HAL_RCC_ClockConfig+0x1b4>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	4910      	ldr	r1, [pc, #64]	; (80025f0 <HAL_RCC_ClockConfig+0x1b4>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025b2:	f000 f825 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 80025b6:	4602      	mov	r2, r0
 80025b8:	4b0d      	ldr	r3, [pc, #52]	; (80025f0 <HAL_RCC_ClockConfig+0x1b4>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	490c      	ldr	r1, [pc, #48]	; (80025f4 <HAL_RCC_ClockConfig+0x1b8>)
 80025c4:	5ccb      	ldrb	r3, [r1, r3]
 80025c6:	f003 031f 	and.w	r3, r3, #31
 80025ca:	fa22 f303 	lsr.w	r3, r2, r3
 80025ce:	4a0a      	ldr	r2, [pc, #40]	; (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 80025d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025d2:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <HAL_RCC_ClockConfig+0x1c0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fe ff50 	bl	800147c <HAL_InitTick>
 80025dc:	4603      	mov	r3, r0
 80025de:	72fb      	strb	r3, [r7, #11]

  return status;
 80025e0:	7afb      	ldrb	r3, [r7, #11]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40022000 	.word	0x40022000
 80025f0:	40021000 	.word	0x40021000
 80025f4:	08005680 	.word	0x08005680
 80025f8:	20000000 	.word	0x20000000
 80025fc:	20000004 	.word	0x20000004

08002600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002600:	b480      	push	{r7}
 8002602:	b089      	sub	sp, #36	; 0x24
 8002604:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002606:	2300      	movs	r3, #0
 8002608:	61fb      	str	r3, [r7, #28]
 800260a:	2300      	movs	r3, #0
 800260c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800260e:	4b3e      	ldr	r3, [pc, #248]	; (8002708 <HAL_RCC_GetSysClockFreq+0x108>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 030c 	and.w	r3, r3, #12
 8002616:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002618:	4b3b      	ldr	r3, [pc, #236]	; (8002708 <HAL_RCC_GetSysClockFreq+0x108>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <HAL_RCC_GetSysClockFreq+0x34>
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	2b0c      	cmp	r3, #12
 800262c:	d121      	bne.n	8002672 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d11e      	bne.n	8002672 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002634:	4b34      	ldr	r3, [pc, #208]	; (8002708 <HAL_RCC_GetSysClockFreq+0x108>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	2b00      	cmp	r3, #0
 800263e:	d107      	bne.n	8002650 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002640:	4b31      	ldr	r3, [pc, #196]	; (8002708 <HAL_RCC_GetSysClockFreq+0x108>)
 8002642:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002646:	0a1b      	lsrs	r3, r3, #8
 8002648:	f003 030f 	and.w	r3, r3, #15
 800264c:	61fb      	str	r3, [r7, #28]
 800264e:	e005      	b.n	800265c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002650:	4b2d      	ldr	r3, [pc, #180]	; (8002708 <HAL_RCC_GetSysClockFreq+0x108>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	091b      	lsrs	r3, r3, #4
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800265c:	4a2b      	ldr	r2, [pc, #172]	; (800270c <HAL_RCC_GetSysClockFreq+0x10c>)
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002664:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10d      	bne.n	8002688 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002670:	e00a      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	2b04      	cmp	r3, #4
 8002676:	d102      	bne.n	800267e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002678:	4b25      	ldr	r3, [pc, #148]	; (8002710 <HAL_RCC_GetSysClockFreq+0x110>)
 800267a:	61bb      	str	r3, [r7, #24]
 800267c:	e004      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	2b08      	cmp	r3, #8
 8002682:	d101      	bne.n	8002688 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002684:	4b23      	ldr	r3, [pc, #140]	; (8002714 <HAL_RCC_GetSysClockFreq+0x114>)
 8002686:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	2b0c      	cmp	r3, #12
 800268c:	d134      	bne.n	80026f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800268e:	4b1e      	ldr	r3, [pc, #120]	; (8002708 <HAL_RCC_GetSysClockFreq+0x108>)
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d003      	beq.n	80026a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d003      	beq.n	80026ac <HAL_RCC_GetSysClockFreq+0xac>
 80026a4:	e005      	b.n	80026b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80026a6:	4b1a      	ldr	r3, [pc, #104]	; (8002710 <HAL_RCC_GetSysClockFreq+0x110>)
 80026a8:	617b      	str	r3, [r7, #20]
      break;
 80026aa:	e005      	b.n	80026b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80026ac:	4b19      	ldr	r3, [pc, #100]	; (8002714 <HAL_RCC_GetSysClockFreq+0x114>)
 80026ae:	617b      	str	r3, [r7, #20]
      break;
 80026b0:	e002      	b.n	80026b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	617b      	str	r3, [r7, #20]
      break;
 80026b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026b8:	4b13      	ldr	r3, [pc, #76]	; (8002708 <HAL_RCC_GetSysClockFreq+0x108>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	091b      	lsrs	r3, r3, #4
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	3301      	adds	r3, #1
 80026c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026c6:	4b10      	ldr	r3, [pc, #64]	; (8002708 <HAL_RCC_GetSysClockFreq+0x108>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	0a1b      	lsrs	r3, r3, #8
 80026cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	fb02 f203 	mul.w	r2, r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026de:	4b0a      	ldr	r3, [pc, #40]	; (8002708 <HAL_RCC_GetSysClockFreq+0x108>)
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	0e5b      	lsrs	r3, r3, #25
 80026e4:	f003 0303 	and.w	r3, r3, #3
 80026e8:	3301      	adds	r3, #1
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026f8:	69bb      	ldr	r3, [r7, #24]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3724      	adds	r7, #36	; 0x24
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40021000 	.word	0x40021000
 800270c:	08005698 	.word	0x08005698
 8002710:	00f42400 	.word	0x00f42400
 8002714:	02dc6c00 	.word	0x02dc6c00

08002718 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800271c:	4b03      	ldr	r3, [pc, #12]	; (800272c <HAL_RCC_GetHCLKFreq+0x14>)
 800271e:	681b      	ldr	r3, [r3, #0]
}
 8002720:	4618      	mov	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	20000000 	.word	0x20000000

08002730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002734:	f7ff fff0 	bl	8002718 <HAL_RCC_GetHCLKFreq>
 8002738:	4602      	mov	r2, r0
 800273a:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_RCC_GetPCLK1Freq+0x24>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	0a1b      	lsrs	r3, r3, #8
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	4904      	ldr	r1, [pc, #16]	; (8002758 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002746:	5ccb      	ldrb	r3, [r1, r3]
 8002748:	f003 031f 	and.w	r3, r3, #31
 800274c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002750:	4618      	mov	r0, r3
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40021000 	.word	0x40021000
 8002758:	08005690 	.word	0x08005690

0800275c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002760:	f7ff ffda 	bl	8002718 <HAL_RCC_GetHCLKFreq>
 8002764:	4602      	mov	r2, r0
 8002766:	4b06      	ldr	r3, [pc, #24]	; (8002780 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	0adb      	lsrs	r3, r3, #11
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	4904      	ldr	r1, [pc, #16]	; (8002784 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002772:	5ccb      	ldrb	r3, [r1, r3]
 8002774:	f003 031f 	and.w	r3, r3, #31
 8002778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800277c:	4618      	mov	r0, r3
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40021000 	.word	0x40021000
 8002784:	08005690 	.word	0x08005690

08002788 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002790:	2300      	movs	r3, #0
 8002792:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002794:	4b2a      	ldr	r3, [pc, #168]	; (8002840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027a0:	f7ff fa02 	bl	8001ba8 <HAL_PWREx_GetVoltageRange>
 80027a4:	6178      	str	r0, [r7, #20]
 80027a6:	e014      	b.n	80027d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027a8:	4b25      	ldr	r3, [pc, #148]	; (8002840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ac:	4a24      	ldr	r2, [pc, #144]	; (8002840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b2:	6593      	str	r3, [r2, #88]	; 0x58
 80027b4:	4b22      	ldr	r3, [pc, #136]	; (8002840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80027c0:	f7ff f9f2 	bl	8001ba8 <HAL_PWREx_GetVoltageRange>
 80027c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80027c6:	4b1e      	ldr	r3, [pc, #120]	; (8002840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ca:	4a1d      	ldr	r2, [pc, #116]	; (8002840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027d8:	d10b      	bne.n	80027f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b80      	cmp	r3, #128	; 0x80
 80027de:	d919      	bls.n	8002814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2ba0      	cmp	r3, #160	; 0xa0
 80027e4:	d902      	bls.n	80027ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027e6:	2302      	movs	r3, #2
 80027e8:	613b      	str	r3, [r7, #16]
 80027ea:	e013      	b.n	8002814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027ec:	2301      	movs	r3, #1
 80027ee:	613b      	str	r3, [r7, #16]
 80027f0:	e010      	b.n	8002814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b80      	cmp	r3, #128	; 0x80
 80027f6:	d902      	bls.n	80027fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80027f8:	2303      	movs	r3, #3
 80027fa:	613b      	str	r3, [r7, #16]
 80027fc:	e00a      	b.n	8002814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b80      	cmp	r3, #128	; 0x80
 8002802:	d102      	bne.n	800280a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002804:	2302      	movs	r3, #2
 8002806:	613b      	str	r3, [r7, #16]
 8002808:	e004      	b.n	8002814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b70      	cmp	r3, #112	; 0x70
 800280e:	d101      	bne.n	8002814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002810:	2301      	movs	r3, #1
 8002812:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002814:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f023 0207 	bic.w	r2, r3, #7
 800281c:	4909      	ldr	r1, [pc, #36]	; (8002844 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4313      	orrs	r3, r2
 8002822:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002824:	4b07      	ldr	r3, [pc, #28]	; (8002844 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	429a      	cmp	r2, r3
 8002830:	d001      	beq.n	8002836 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40021000 	.word	0x40021000
 8002844:	40022000 	.word	0x40022000

08002848 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002850:	2300      	movs	r3, #0
 8002852:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002854:	2300      	movs	r3, #0
 8002856:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002860:	2b00      	cmp	r3, #0
 8002862:	d041      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002868:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800286c:	d02a      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800286e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002872:	d824      	bhi.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002874:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002878:	d008      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800287a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800287e:	d81e      	bhi.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00a      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002884:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002888:	d010      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800288a:	e018      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800288c:	4b86      	ldr	r3, [pc, #536]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	4a85      	ldr	r2, [pc, #532]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002896:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002898:	e015      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	3304      	adds	r3, #4
 800289e:	2100      	movs	r1, #0
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 fabb 	bl	8002e1c <RCCEx_PLLSAI1_Config>
 80028a6:	4603      	mov	r3, r0
 80028a8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028aa:	e00c      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3320      	adds	r3, #32
 80028b0:	2100      	movs	r1, #0
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 fba6 	bl	8003004 <RCCEx_PLLSAI2_Config>
 80028b8:	4603      	mov	r3, r0
 80028ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028bc:	e003      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	74fb      	strb	r3, [r7, #19]
      break;
 80028c2:	e000      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80028c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028c6:	7cfb      	ldrb	r3, [r7, #19]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10b      	bne.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028cc:	4b76      	ldr	r3, [pc, #472]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028da:	4973      	ldr	r1, [pc, #460]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028e2:	e001      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028e4:	7cfb      	ldrb	r3, [r7, #19]
 80028e6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d041      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80028fc:	d02a      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80028fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002902:	d824      	bhi.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002904:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002908:	d008      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800290a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800290e:	d81e      	bhi.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00a      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002918:	d010      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800291a:	e018      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800291c:	4b62      	ldr	r3, [pc, #392]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	4a61      	ldr	r2, [pc, #388]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002922:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002926:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002928:	e015      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3304      	adds	r3, #4
 800292e:	2100      	movs	r1, #0
 8002930:	4618      	mov	r0, r3
 8002932:	f000 fa73 	bl	8002e1c <RCCEx_PLLSAI1_Config>
 8002936:	4603      	mov	r3, r0
 8002938:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800293a:	e00c      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3320      	adds	r3, #32
 8002940:	2100      	movs	r1, #0
 8002942:	4618      	mov	r0, r3
 8002944:	f000 fb5e 	bl	8003004 <RCCEx_PLLSAI2_Config>
 8002948:	4603      	mov	r3, r0
 800294a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800294c:	e003      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	74fb      	strb	r3, [r7, #19]
      break;
 8002952:	e000      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002954:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002956:	7cfb      	ldrb	r3, [r7, #19]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10b      	bne.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800295c:	4b52      	ldr	r3, [pc, #328]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800295e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002962:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800296a:	494f      	ldr	r1, [pc, #316]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800296c:	4313      	orrs	r3, r2
 800296e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002972:	e001      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002974:	7cfb      	ldrb	r3, [r7, #19]
 8002976:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 80a0 	beq.w	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002986:	2300      	movs	r3, #0
 8002988:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800298a:	4b47      	ldr	r3, [pc, #284]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800298c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800299a:	2300      	movs	r3, #0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00d      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029a0:	4b41      	ldr	r3, [pc, #260]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a4:	4a40      	ldr	r2, [pc, #256]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029aa:	6593      	str	r3, [r2, #88]	; 0x58
 80029ac:	4b3e      	ldr	r3, [pc, #248]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029b8:	2301      	movs	r3, #1
 80029ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029bc:	4b3b      	ldr	r3, [pc, #236]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a3a      	ldr	r2, [pc, #232]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029c8:	f7fe fda8 	bl	800151c <HAL_GetTick>
 80029cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029ce:	e009      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d0:	f7fe fda4 	bl	800151c <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d902      	bls.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	74fb      	strb	r3, [r7, #19]
        break;
 80029e2:	e005      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029e4:	4b31      	ldr	r3, [pc, #196]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0ef      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80029f0:	7cfb      	ldrb	r3, [r7, #19]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d15c      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029f6:	4b2c      	ldr	r3, [pc, #176]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a00:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d01f      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d019      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a14:	4b24      	ldr	r3, [pc, #144]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a20:	4b21      	ldr	r3, [pc, #132]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a26:	4a20      	ldr	r2, [pc, #128]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a30:	4b1d      	ldr	r3, [pc, #116]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a36:	4a1c      	ldr	r2, [pc, #112]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a40:	4a19      	ldr	r2, [pc, #100]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d016      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a52:	f7fe fd63 	bl	800151c <HAL_GetTick>
 8002a56:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a58:	e00b      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a5a:	f7fe fd5f 	bl	800151c <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d902      	bls.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	74fb      	strb	r3, [r7, #19]
            break;
 8002a70:	e006      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a72:	4b0d      	ldr	r3, [pc, #52]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0ec      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002a80:	7cfb      	ldrb	r3, [r7, #19]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10c      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a86:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a96:	4904      	ldr	r1, [pc, #16]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a9e:	e009      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002aa0:	7cfb      	ldrb	r3, [r7, #19]
 8002aa2:	74bb      	strb	r3, [r7, #18]
 8002aa4:	e006      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002aa6:	bf00      	nop
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab0:	7cfb      	ldrb	r3, [r7, #19]
 8002ab2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ab4:	7c7b      	ldrb	r3, [r7, #17]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d105      	bne.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aba:	4b9e      	ldr	r3, [pc, #632]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abe:	4a9d      	ldr	r2, [pc, #628]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ac4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00a      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ad2:	4b98      	ldr	r3, [pc, #608]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad8:	f023 0203 	bic.w	r2, r3, #3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae0:	4994      	ldr	r1, [pc, #592]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00a      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002af4:	4b8f      	ldr	r3, [pc, #572]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afa:	f023 020c 	bic.w	r2, r3, #12
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b02:	498c      	ldr	r1, [pc, #560]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00a      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b16:	4b87      	ldr	r3, [pc, #540]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	4983      	ldr	r1, [pc, #524]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00a      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b38:	4b7e      	ldr	r3, [pc, #504]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b46:	497b      	ldr	r1, [pc, #492]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0310 	and.w	r3, r3, #16
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00a      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b5a:	4b76      	ldr	r3, [pc, #472]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b68:	4972      	ldr	r1, [pc, #456]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0320 	and.w	r3, r3, #32
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00a      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b7c:	4b6d      	ldr	r3, [pc, #436]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8a:	496a      	ldr	r1, [pc, #424]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00a      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b9e:	4b65      	ldr	r3, [pc, #404]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bac:	4961      	ldr	r1, [pc, #388]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00a      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002bc0:	4b5c      	ldr	r3, [pc, #368]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bce:	4959      	ldr	r1, [pc, #356]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00a      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002be2:	4b54      	ldr	r3, [pc, #336]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bf0:	4950      	ldr	r1, [pc, #320]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00a      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c04:	4b4b      	ldr	r3, [pc, #300]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c12:	4948      	ldr	r1, [pc, #288]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00a      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c26:	4b43      	ldr	r3, [pc, #268]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c34:	493f      	ldr	r1, [pc, #252]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d028      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c48:	4b3a      	ldr	r3, [pc, #232]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c56:	4937      	ldr	r1, [pc, #220]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c66:	d106      	bne.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c68:	4b32      	ldr	r3, [pc, #200]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	4a31      	ldr	r2, [pc, #196]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c72:	60d3      	str	r3, [r2, #12]
 8002c74:	e011      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c7e:	d10c      	bne.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3304      	adds	r3, #4
 8002c84:	2101      	movs	r1, #1
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 f8c8 	bl	8002e1c <RCCEx_PLLSAI1_Config>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c90:	7cfb      	ldrb	r3, [r7, #19]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002c96:	7cfb      	ldrb	r3, [r7, #19]
 8002c98:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d028      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ca6:	4b23      	ldr	r3, [pc, #140]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb4:	491f      	ldr	r1, [pc, #124]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cc4:	d106      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cc6:	4b1b      	ldr	r3, [pc, #108]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	4a1a      	ldr	r2, [pc, #104]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ccc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cd0:	60d3      	str	r3, [r2, #12]
 8002cd2:	e011      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cdc:	d10c      	bne.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f000 f899 	bl	8002e1c <RCCEx_PLLSAI1_Config>
 8002cea:	4603      	mov	r3, r0
 8002cec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cee:	7cfb      	ldrb	r3, [r7, #19]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002cf4:	7cfb      	ldrb	r3, [r7, #19]
 8002cf6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d02b      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d04:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d12:	4908      	ldr	r1, [pc, #32]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d22:	d109      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d24:	4b03      	ldr	r3, [pc, #12]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	4a02      	ldr	r2, [pc, #8]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d2e:	60d3      	str	r3, [r2, #12]
 8002d30:	e014      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002d32:	bf00      	nop
 8002d34:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	3304      	adds	r3, #4
 8002d46:	2101      	movs	r1, #1
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 f867 	bl	8002e1c <RCCEx_PLLSAI1_Config>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d52:	7cfb      	ldrb	r3, [r7, #19]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002d58:	7cfb      	ldrb	r3, [r7, #19]
 8002d5a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d02f      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d68:	4b2b      	ldr	r3, [pc, #172]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d76:	4928      	ldr	r1, [pc, #160]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d86:	d10d      	bne.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	2102      	movs	r1, #2
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 f844 	bl	8002e1c <RCCEx_PLLSAI1_Config>
 8002d94:	4603      	mov	r3, r0
 8002d96:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d98:	7cfb      	ldrb	r3, [r7, #19]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d014      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d9e:	7cfb      	ldrb	r3, [r7, #19]
 8002da0:	74bb      	strb	r3, [r7, #18]
 8002da2:	e011      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002da8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dac:	d10c      	bne.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	3320      	adds	r3, #32
 8002db2:	2102      	movs	r1, #2
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 f925 	bl	8003004 <RCCEx_PLLSAI2_Config>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dbe:	7cfb      	ldrb	r3, [r7, #19]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002dc4:	7cfb      	ldrb	r3, [r7, #19]
 8002dc6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00a      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002dd4:	4b10      	ldr	r3, [pc, #64]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dda:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002de2:	490d      	ldr	r1, [pc, #52]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00b      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002df6:	4b08      	ldr	r3, [pc, #32]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e06:	4904      	ldr	r1, [pc, #16]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e0e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40021000 	.word	0x40021000

08002e1c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e2a:	4b75      	ldr	r3, [pc, #468]	; (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d018      	beq.n	8002e68 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e36:	4b72      	ldr	r3, [pc, #456]	; (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f003 0203 	and.w	r2, r3, #3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d10d      	bne.n	8002e62 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
       ||
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d009      	beq.n	8002e62 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e4e:	4b6c      	ldr	r3, [pc, #432]	; (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	091b      	lsrs	r3, r3, #4
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
       ||
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d047      	beq.n	8002ef2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	73fb      	strb	r3, [r7, #15]
 8002e66:	e044      	b.n	8002ef2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b03      	cmp	r3, #3
 8002e6e:	d018      	beq.n	8002ea2 <RCCEx_PLLSAI1_Config+0x86>
 8002e70:	2b03      	cmp	r3, #3
 8002e72:	d825      	bhi.n	8002ec0 <RCCEx_PLLSAI1_Config+0xa4>
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d002      	beq.n	8002e7e <RCCEx_PLLSAI1_Config+0x62>
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d009      	beq.n	8002e90 <RCCEx_PLLSAI1_Config+0x74>
 8002e7c:	e020      	b.n	8002ec0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e7e:	4b60      	ldr	r3, [pc, #384]	; (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d11d      	bne.n	8002ec6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e8e:	e01a      	b.n	8002ec6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e90:	4b5b      	ldr	r3, [pc, #364]	; (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d116      	bne.n	8002eca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ea0:	e013      	b.n	8002eca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ea2:	4b57      	ldr	r3, [pc, #348]	; (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10f      	bne.n	8002ece <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002eae:	4b54      	ldr	r3, [pc, #336]	; (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d109      	bne.n	8002ece <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ebe:	e006      	b.n	8002ece <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ec4:	e004      	b.n	8002ed0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ec6:	bf00      	nop
 8002ec8:	e002      	b.n	8002ed0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002eca:	bf00      	nop
 8002ecc:	e000      	b.n	8002ed0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ece:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10d      	bne.n	8002ef2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ed6:	4b4a      	ldr	r3, [pc, #296]	; (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6819      	ldr	r1, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	430b      	orrs	r3, r1
 8002eec:	4944      	ldr	r1, [pc, #272]	; (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d17d      	bne.n	8002ff4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ef8:	4b41      	ldr	r3, [pc, #260]	; (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a40      	ldr	r2, [pc, #256]	; (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002efe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f04:	f7fe fb0a 	bl	800151c <HAL_GetTick>
 8002f08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f0a:	e009      	b.n	8002f20 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f0c:	f7fe fb06 	bl	800151c <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d902      	bls.n	8002f20 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	73fb      	strb	r3, [r7, #15]
        break;
 8002f1e:	e005      	b.n	8002f2c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f20:	4b37      	ldr	r3, [pc, #220]	; (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1ef      	bne.n	8002f0c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d160      	bne.n	8002ff4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d111      	bne.n	8002f5c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f38:	4b31      	ldr	r3, [pc, #196]	; (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6892      	ldr	r2, [r2, #8]
 8002f48:	0211      	lsls	r1, r2, #8
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	68d2      	ldr	r2, [r2, #12]
 8002f4e:	0912      	lsrs	r2, r2, #4
 8002f50:	0452      	lsls	r2, r2, #17
 8002f52:	430a      	orrs	r2, r1
 8002f54:	492a      	ldr	r1, [pc, #168]	; (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	610b      	str	r3, [r1, #16]
 8002f5a:	e027      	b.n	8002fac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d112      	bne.n	8002f88 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f62:	4b27      	ldr	r3, [pc, #156]	; (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002f6a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6892      	ldr	r2, [r2, #8]
 8002f72:	0211      	lsls	r1, r2, #8
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6912      	ldr	r2, [r2, #16]
 8002f78:	0852      	lsrs	r2, r2, #1
 8002f7a:	3a01      	subs	r2, #1
 8002f7c:	0552      	lsls	r2, r2, #21
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	491f      	ldr	r1, [pc, #124]	; (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	610b      	str	r3, [r1, #16]
 8002f86:	e011      	b.n	8002fac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f88:	4b1d      	ldr	r3, [pc, #116]	; (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f90:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6892      	ldr	r2, [r2, #8]
 8002f98:	0211      	lsls	r1, r2, #8
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6952      	ldr	r2, [r2, #20]
 8002f9e:	0852      	lsrs	r2, r2, #1
 8002fa0:	3a01      	subs	r2, #1
 8002fa2:	0652      	lsls	r2, r2, #25
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	4916      	ldr	r1, [pc, #88]	; (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002fac:	4b14      	ldr	r3, [pc, #80]	; (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a13      	ldr	r2, [pc, #76]	; (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fb2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fb6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb8:	f7fe fab0 	bl	800151c <HAL_GetTick>
 8002fbc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fbe:	e009      	b.n	8002fd4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fc0:	f7fe faac 	bl	800151c <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d902      	bls.n	8002fd4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	73fb      	strb	r3, [r7, #15]
          break;
 8002fd2:	e005      	b.n	8002fe0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fd4:	4b0a      	ldr	r3, [pc, #40]	; (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d0ef      	beq.n	8002fc0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d106      	bne.n	8002ff4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002fe6:	4b06      	ldr	r3, [pc, #24]	; (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fe8:	691a      	ldr	r2, [r3, #16]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	4904      	ldr	r1, [pc, #16]	; (8003000 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	40021000 	.word	0x40021000

08003004 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003012:	4b6a      	ldr	r3, [pc, #424]	; (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d018      	beq.n	8003050 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800301e:	4b67      	ldr	r3, [pc, #412]	; (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f003 0203 	and.w	r2, r3, #3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	429a      	cmp	r2, r3
 800302c:	d10d      	bne.n	800304a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
       ||
 8003032:	2b00      	cmp	r3, #0
 8003034:	d009      	beq.n	800304a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003036:	4b61      	ldr	r3, [pc, #388]	; (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	091b      	lsrs	r3, r3, #4
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
       ||
 8003046:	429a      	cmp	r2, r3
 8003048:	d047      	beq.n	80030da <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	73fb      	strb	r3, [r7, #15]
 800304e:	e044      	b.n	80030da <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2b03      	cmp	r3, #3
 8003056:	d018      	beq.n	800308a <RCCEx_PLLSAI2_Config+0x86>
 8003058:	2b03      	cmp	r3, #3
 800305a:	d825      	bhi.n	80030a8 <RCCEx_PLLSAI2_Config+0xa4>
 800305c:	2b01      	cmp	r3, #1
 800305e:	d002      	beq.n	8003066 <RCCEx_PLLSAI2_Config+0x62>
 8003060:	2b02      	cmp	r3, #2
 8003062:	d009      	beq.n	8003078 <RCCEx_PLLSAI2_Config+0x74>
 8003064:	e020      	b.n	80030a8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003066:	4b55      	ldr	r3, [pc, #340]	; (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d11d      	bne.n	80030ae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003076:	e01a      	b.n	80030ae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003078:	4b50      	ldr	r3, [pc, #320]	; (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003080:	2b00      	cmp	r3, #0
 8003082:	d116      	bne.n	80030b2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003088:	e013      	b.n	80030b2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800308a:	4b4c      	ldr	r3, [pc, #304]	; (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10f      	bne.n	80030b6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003096:	4b49      	ldr	r3, [pc, #292]	; (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d109      	bne.n	80030b6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030a6:	e006      	b.n	80030b6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	73fb      	strb	r3, [r7, #15]
      break;
 80030ac:	e004      	b.n	80030b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030ae:	bf00      	nop
 80030b0:	e002      	b.n	80030b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030b2:	bf00      	nop
 80030b4:	e000      	b.n	80030b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10d      	bne.n	80030da <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030be:	4b3f      	ldr	r3, [pc, #252]	; (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6819      	ldr	r1, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	430b      	orrs	r3, r1
 80030d4:	4939      	ldr	r1, [pc, #228]	; (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80030da:	7bfb      	ldrb	r3, [r7, #15]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d167      	bne.n	80031b0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80030e0:	4b36      	ldr	r3, [pc, #216]	; (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a35      	ldr	r2, [pc, #212]	; (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80030e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030ec:	f7fe fa16 	bl	800151c <HAL_GetTick>
 80030f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80030f2:	e009      	b.n	8003108 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030f4:	f7fe fa12 	bl	800151c <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d902      	bls.n	8003108 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	73fb      	strb	r3, [r7, #15]
        break;
 8003106:	e005      	b.n	8003114 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003108:	4b2c      	ldr	r3, [pc, #176]	; (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1ef      	bne.n	80030f4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003114:	7bfb      	ldrb	r3, [r7, #15]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d14a      	bne.n	80031b0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d111      	bne.n	8003144 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003120:	4b26      	ldr	r3, [pc, #152]	; (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6892      	ldr	r2, [r2, #8]
 8003130:	0211      	lsls	r1, r2, #8
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	68d2      	ldr	r2, [r2, #12]
 8003136:	0912      	lsrs	r2, r2, #4
 8003138:	0452      	lsls	r2, r2, #17
 800313a:	430a      	orrs	r2, r1
 800313c:	491f      	ldr	r1, [pc, #124]	; (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800313e:	4313      	orrs	r3, r2
 8003140:	614b      	str	r3, [r1, #20]
 8003142:	e011      	b.n	8003168 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003144:	4b1d      	ldr	r3, [pc, #116]	; (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800314c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6892      	ldr	r2, [r2, #8]
 8003154:	0211      	lsls	r1, r2, #8
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6912      	ldr	r2, [r2, #16]
 800315a:	0852      	lsrs	r2, r2, #1
 800315c:	3a01      	subs	r2, #1
 800315e:	0652      	lsls	r2, r2, #25
 8003160:	430a      	orrs	r2, r1
 8003162:	4916      	ldr	r1, [pc, #88]	; (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003164:	4313      	orrs	r3, r2
 8003166:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003168:	4b14      	ldr	r3, [pc, #80]	; (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a13      	ldr	r2, [pc, #76]	; (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800316e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003172:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003174:	f7fe f9d2 	bl	800151c <HAL_GetTick>
 8003178:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800317a:	e009      	b.n	8003190 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800317c:	f7fe f9ce 	bl	800151c <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d902      	bls.n	8003190 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	73fb      	strb	r3, [r7, #15]
          break;
 800318e:	e005      	b.n	800319c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003190:	4b0a      	ldr	r3, [pc, #40]	; (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0ef      	beq.n	800317c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800319c:	7bfb      	ldrb	r3, [r7, #15]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d106      	bne.n	80031b0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80031a2:	4b06      	ldr	r3, [pc, #24]	; (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80031a4:	695a      	ldr	r2, [r3, #20]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	4904      	ldr	r1, [pc, #16]	; (80031bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40021000 	.word	0x40021000

080031c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e040      	b.n	8003254 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d106      	bne.n	80031e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7fe f8be 	bl	8001364 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2224      	movs	r2, #36	; 0x24
 80031ec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 0201 	bic.w	r2, r2, #1
 80031fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 fb26 	bl	8003850 <UART_SetConfig>
 8003204:	4603      	mov	r3, r0
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e022      	b.n	8003254 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	2b00      	cmp	r3, #0
 8003214:	d002      	beq.n	800321c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 fda4 	bl	8003d64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800322a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689a      	ldr	r2, [r3, #8]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800323a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0201 	orr.w	r2, r2, #1
 800324a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 fe2b 	bl	8003ea8 <UART_CheckIdleState>
 8003252:	4603      	mov	r3, r0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b08a      	sub	sp, #40	; 0x28
 8003260:	af02      	add	r7, sp, #8
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	603b      	str	r3, [r7, #0]
 8003268:	4613      	mov	r3, r2
 800326a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003270:	2b20      	cmp	r3, #32
 8003272:	f040 8082 	bne.w	800337a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d002      	beq.n	8003282 <HAL_UART_Transmit+0x26>
 800327c:	88fb      	ldrh	r3, [r7, #6]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e07a      	b.n	800337c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800328c:	2b01      	cmp	r3, #1
 800328e:	d101      	bne.n	8003294 <HAL_UART_Transmit+0x38>
 8003290:	2302      	movs	r3, #2
 8003292:	e073      	b.n	800337c <HAL_UART_Transmit+0x120>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2221      	movs	r2, #33	; 0x21
 80032a8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032aa:	f7fe f937 	bl	800151c <HAL_GetTick>
 80032ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	88fa      	ldrh	r2, [r7, #6]
 80032b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	88fa      	ldrh	r2, [r7, #6]
 80032bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032c8:	d108      	bne.n	80032dc <HAL_UART_Transmit+0x80>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d104      	bne.n	80032dc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80032d2:	2300      	movs	r3, #0
 80032d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	61bb      	str	r3, [r7, #24]
 80032da:	e003      	b.n	80032e4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032e0:	2300      	movs	r3, #0
 80032e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80032ec:	e02d      	b.n	800334a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2200      	movs	r2, #0
 80032f6:	2180      	movs	r1, #128	; 0x80
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 fe1e 	bl	8003f3a <UART_WaitOnFlagUntilTimeout>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e039      	b.n	800337c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10b      	bne.n	8003326 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	881a      	ldrh	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800331a:	b292      	uxth	r2, r2
 800331c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	3302      	adds	r3, #2
 8003322:	61bb      	str	r3, [r7, #24]
 8003324:	e008      	b.n	8003338 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	781a      	ldrb	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	b292      	uxth	r2, r2
 8003330:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	3301      	adds	r3, #1
 8003336:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800333e:	b29b      	uxth	r3, r3
 8003340:	3b01      	subs	r3, #1
 8003342:	b29a      	uxth	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003350:	b29b      	uxth	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1cb      	bne.n	80032ee <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	2200      	movs	r2, #0
 800335e:	2140      	movs	r1, #64	; 0x40
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 fdea 	bl	8003f3a <UART_WaitOnFlagUntilTimeout>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e005      	b.n	800337c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2220      	movs	r2, #32
 8003374:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003376:	2300      	movs	r3, #0
 8003378:	e000      	b.n	800337c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800337a:	2302      	movs	r3, #2
  }
}
 800337c:	4618      	mov	r0, r3
 800337e:	3720      	adds	r7, #32
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	4613      	mov	r3, r2
 8003390:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003396:	2b20      	cmp	r3, #32
 8003398:	d131      	bne.n	80033fe <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d002      	beq.n	80033a6 <HAL_UART_Receive_IT+0x22>
 80033a0:	88fb      	ldrh	r3, [r7, #6]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e02a      	b.n	8003400 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d101      	bne.n	80033b8 <HAL_UART_Receive_IT+0x34>
 80033b4:	2302      	movs	r3, #2
 80033b6:	e023      	b.n	8003400 <HAL_UART_Receive_IT+0x7c>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a0f      	ldr	r2, [pc, #60]	; (8003408 <HAL_UART_Receive_IT+0x84>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d00e      	beq.n	80033ee <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d007      	beq.n	80033ee <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80033ec:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80033ee:	88fb      	ldrh	r3, [r7, #6]
 80033f0:	461a      	mov	r2, r3
 80033f2:	68b9      	ldr	r1, [r7, #8]
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 fe1d 	bl	8004034 <UART_Start_Receive_IT>
 80033fa:	4603      	mov	r3, r0
 80033fc:	e000      	b.n	8003400 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 80033fe:	2302      	movs	r3, #2
  }
}
 8003400:	4618      	mov	r0, r3
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40008000 	.word	0x40008000

0800340c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800342c:	69fa      	ldr	r2, [r7, #28]
 800342e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003432:	4013      	ands	r3, r2
 8003434:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d113      	bne.n	8003464 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f003 0320 	and.w	r3, r3, #32
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00e      	beq.n	8003464 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	f003 0320 	and.w	r3, r3, #32
 800344c:	2b00      	cmp	r3, #0
 800344e:	d009      	beq.n	8003464 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 81ce 	beq.w	80037f6 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	4798      	blx	r3
      }
      return;
 8003462:	e1c8      	b.n	80037f6 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 80e3 	beq.w	8003632 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d105      	bne.n	8003482 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4ba6      	ldr	r3, [pc, #664]	; (8003714 <HAL_UART_IRQHandler+0x308>)
 800347a:	4013      	ands	r3, r2
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 80d8 	beq.w	8003632 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	2b00      	cmp	r3, #0
 800348a:	d010      	beq.n	80034ae <HAL_UART_IRQHandler+0xa2>
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00b      	beq.n	80034ae <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2201      	movs	r2, #1
 800349c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034a4:	f043 0201 	orr.w	r2, r3, #1
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d010      	beq.n	80034da <HAL_UART_IRQHandler+0xce>
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00b      	beq.n	80034da <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2202      	movs	r2, #2
 80034c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034d0:	f043 0204 	orr.w	r2, r3, #4
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d010      	beq.n	8003506 <HAL_UART_IRQHandler+0xfa>
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00b      	beq.n	8003506 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2204      	movs	r2, #4
 80034f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034fc:	f043 0202 	orr.w	r2, r3, #2
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	f003 0308 	and.w	r3, r3, #8
 800350c:	2b00      	cmp	r3, #0
 800350e:	d015      	beq.n	800353c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	f003 0320 	and.w	r3, r3, #32
 8003516:	2b00      	cmp	r3, #0
 8003518:	d104      	bne.n	8003524 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00b      	beq.n	800353c <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2208      	movs	r2, #8
 800352a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003532:	f043 0208 	orr.w	r2, r3, #8
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003542:	2b00      	cmp	r3, #0
 8003544:	d011      	beq.n	800356a <HAL_UART_IRQHandler+0x15e>
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00c      	beq.n	800356a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003558:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003560:	f043 0220 	orr.w	r2, r3, #32
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 8142 	beq.w	80037fa <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	f003 0320 	and.w	r3, r3, #32
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00c      	beq.n	800359a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	f003 0320 	and.w	r3, r3, #32
 8003586:	2b00      	cmp	r3, #0
 8003588:	d007      	beq.n	800359a <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035a0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ac:	2b40      	cmp	r3, #64	; 0x40
 80035ae:	d004      	beq.n	80035ba <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d031      	beq.n	800361e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 fdc2 	bl	8004144 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ca:	2b40      	cmp	r3, #64	; 0x40
 80035cc:	d123      	bne.n	8003616 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035dc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d013      	beq.n	800360e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ea:	4a4b      	ldr	r2, [pc, #300]	; (8003718 <HAL_UART_IRQHandler+0x30c>)
 80035ec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fe f8ed 	bl	80017d2 <HAL_DMA_Abort_IT>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d017      	beq.n	800362e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003608:	4610      	mov	r0, r2
 800360a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800360c:	e00f      	b.n	800362e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f908 	bl	8003824 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003614:	e00b      	b.n	800362e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f904 	bl	8003824 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800361c:	e007      	b.n	800362e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f900 	bl	8003824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800362c:	e0e5      	b.n	80037fa <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800362e:	bf00      	nop
    return;
 8003630:	e0e3      	b.n	80037fa <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003636:	2b01      	cmp	r3, #1
 8003638:	f040 80a9 	bne.w	800378e <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f003 0310 	and.w	r3, r3, #16
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 80a3 	beq.w	800378e <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	f003 0310 	and.w	r3, r3, #16
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 809d 	beq.w	800378e <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2210      	movs	r2, #16
 800365a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003666:	2b40      	cmp	r3, #64	; 0x40
 8003668:	d158      	bne.n	800371c <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003674:	893b      	ldrh	r3, [r7, #8]
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 80c1 	beq.w	80037fe <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003682:	893a      	ldrh	r2, [r7, #8]
 8003684:	429a      	cmp	r2, r3
 8003686:	f080 80ba 	bcs.w	80037fe <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	893a      	ldrh	r2, [r7, #8]
 800368e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0320 	and.w	r3, r3, #32
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d12a      	bne.n	80036f8 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036b0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0201 	bic.w	r2, r2, #1
 80036c0:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036d0:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2220      	movs	r2, #32
 80036d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 0210 	bic.w	r2, r2, #16
 80036ec:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fe f82f 	bl	8001756 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003704:	b29b      	uxth	r3, r3
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	b29b      	uxth	r3, r3
 800370a:	4619      	mov	r1, r3
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 f893 	bl	8003838 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003712:	e074      	b.n	80037fe <HAL_UART_IRQHandler+0x3f2>
 8003714:	04000120 	.word	0x04000120
 8003718:	080041a3 	.word	0x080041a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003728:	b29b      	uxth	r3, r3
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003734:	b29b      	uxth	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d063      	beq.n	8003802 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 800373a:	897b      	ldrh	r3, [r7, #10]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d060      	beq.n	8003802 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800374e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689a      	ldr	r2, [r3, #8]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0201 	bic.w	r2, r2, #1
 800375e:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2220      	movs	r2, #32
 8003764:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 0210 	bic.w	r2, r2, #16
 8003780:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003782:	897b      	ldrh	r3, [r7, #10]
 8003784:	4619      	mov	r1, r3
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f856 	bl	8003838 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800378c:	e039      	b.n	8003802 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00d      	beq.n	80037b4 <HAL_UART_IRQHandler+0x3a8>
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d008      	beq.n	80037b4 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80037aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 fdff 	bl	80043b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80037b2:	e029      	b.n	8003808 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00d      	beq.n	80037da <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d008      	beq.n	80037da <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d01a      	beq.n	8003806 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	4798      	blx	r3
    }
    return;
 80037d8:	e015      	b.n	8003806 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d011      	beq.n	8003808 <HAL_UART_IRQHandler+0x3fc>
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00c      	beq.n	8003808 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 fced 	bl	80041ce <UART_EndTransmit_IT>
    return;
 80037f4:	e008      	b.n	8003808 <HAL_UART_IRQHandler+0x3fc>
      return;
 80037f6:	bf00      	nop
 80037f8:	e006      	b.n	8003808 <HAL_UART_IRQHandler+0x3fc>
    return;
 80037fa:	bf00      	nop
 80037fc:	e004      	b.n	8003808 <HAL_UART_IRQHandler+0x3fc>
      return;
 80037fe:	bf00      	nop
 8003800:	e002      	b.n	8003808 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003802:	bf00      	nop
 8003804:	e000      	b.n	8003808 <HAL_UART_IRQHandler+0x3fc>
    return;
 8003806:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003808:	3720      	adds	r7, #32
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop

08003810 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	460b      	mov	r3, r1
 8003842:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003850:	b5b0      	push	{r4, r5, r7, lr}
 8003852:	b088      	sub	sp, #32
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003858:	2300      	movs	r3, #0
 800385a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	431a      	orrs	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	431a      	orrs	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	4313      	orrs	r3, r2
 8003872:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	4bad      	ldr	r3, [pc, #692]	; (8003b30 <UART_SetConfig+0x2e0>)
 800387c:	4013      	ands	r3, r2
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6812      	ldr	r2, [r2, #0]
 8003882:	69f9      	ldr	r1, [r7, #28]
 8003884:	430b      	orrs	r3, r1
 8003886:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4aa2      	ldr	r2, [pc, #648]	; (8003b34 <UART_SetConfig+0x2e4>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d004      	beq.n	80038b8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	69fa      	ldr	r2, [r7, #28]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	69fa      	ldr	r2, [r7, #28]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a99      	ldr	r2, [pc, #612]	; (8003b38 <UART_SetConfig+0x2e8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d121      	bne.n	800391a <UART_SetConfig+0xca>
 80038d6:	4b99      	ldr	r3, [pc, #612]	; (8003b3c <UART_SetConfig+0x2ec>)
 80038d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038dc:	f003 0303 	and.w	r3, r3, #3
 80038e0:	2b03      	cmp	r3, #3
 80038e2:	d817      	bhi.n	8003914 <UART_SetConfig+0xc4>
 80038e4:	a201      	add	r2, pc, #4	; (adr r2, 80038ec <UART_SetConfig+0x9c>)
 80038e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ea:	bf00      	nop
 80038ec:	080038fd 	.word	0x080038fd
 80038f0:	08003909 	.word	0x08003909
 80038f4:	08003903 	.word	0x08003903
 80038f8:	0800390f 	.word	0x0800390f
 80038fc:	2301      	movs	r3, #1
 80038fe:	76fb      	strb	r3, [r7, #27]
 8003900:	e0e7      	b.n	8003ad2 <UART_SetConfig+0x282>
 8003902:	2302      	movs	r3, #2
 8003904:	76fb      	strb	r3, [r7, #27]
 8003906:	e0e4      	b.n	8003ad2 <UART_SetConfig+0x282>
 8003908:	2304      	movs	r3, #4
 800390a:	76fb      	strb	r3, [r7, #27]
 800390c:	e0e1      	b.n	8003ad2 <UART_SetConfig+0x282>
 800390e:	2308      	movs	r3, #8
 8003910:	76fb      	strb	r3, [r7, #27]
 8003912:	e0de      	b.n	8003ad2 <UART_SetConfig+0x282>
 8003914:	2310      	movs	r3, #16
 8003916:	76fb      	strb	r3, [r7, #27]
 8003918:	e0db      	b.n	8003ad2 <UART_SetConfig+0x282>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a88      	ldr	r2, [pc, #544]	; (8003b40 <UART_SetConfig+0x2f0>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d132      	bne.n	800398a <UART_SetConfig+0x13a>
 8003924:	4b85      	ldr	r3, [pc, #532]	; (8003b3c <UART_SetConfig+0x2ec>)
 8003926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392a:	f003 030c 	and.w	r3, r3, #12
 800392e:	2b0c      	cmp	r3, #12
 8003930:	d828      	bhi.n	8003984 <UART_SetConfig+0x134>
 8003932:	a201      	add	r2, pc, #4	; (adr r2, 8003938 <UART_SetConfig+0xe8>)
 8003934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003938:	0800396d 	.word	0x0800396d
 800393c:	08003985 	.word	0x08003985
 8003940:	08003985 	.word	0x08003985
 8003944:	08003985 	.word	0x08003985
 8003948:	08003979 	.word	0x08003979
 800394c:	08003985 	.word	0x08003985
 8003950:	08003985 	.word	0x08003985
 8003954:	08003985 	.word	0x08003985
 8003958:	08003973 	.word	0x08003973
 800395c:	08003985 	.word	0x08003985
 8003960:	08003985 	.word	0x08003985
 8003964:	08003985 	.word	0x08003985
 8003968:	0800397f 	.word	0x0800397f
 800396c:	2300      	movs	r3, #0
 800396e:	76fb      	strb	r3, [r7, #27]
 8003970:	e0af      	b.n	8003ad2 <UART_SetConfig+0x282>
 8003972:	2302      	movs	r3, #2
 8003974:	76fb      	strb	r3, [r7, #27]
 8003976:	e0ac      	b.n	8003ad2 <UART_SetConfig+0x282>
 8003978:	2304      	movs	r3, #4
 800397a:	76fb      	strb	r3, [r7, #27]
 800397c:	e0a9      	b.n	8003ad2 <UART_SetConfig+0x282>
 800397e:	2308      	movs	r3, #8
 8003980:	76fb      	strb	r3, [r7, #27]
 8003982:	e0a6      	b.n	8003ad2 <UART_SetConfig+0x282>
 8003984:	2310      	movs	r3, #16
 8003986:	76fb      	strb	r3, [r7, #27]
 8003988:	e0a3      	b.n	8003ad2 <UART_SetConfig+0x282>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a6d      	ldr	r2, [pc, #436]	; (8003b44 <UART_SetConfig+0x2f4>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d120      	bne.n	80039d6 <UART_SetConfig+0x186>
 8003994:	4b69      	ldr	r3, [pc, #420]	; (8003b3c <UART_SetConfig+0x2ec>)
 8003996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800399e:	2b30      	cmp	r3, #48	; 0x30
 80039a0:	d013      	beq.n	80039ca <UART_SetConfig+0x17a>
 80039a2:	2b30      	cmp	r3, #48	; 0x30
 80039a4:	d814      	bhi.n	80039d0 <UART_SetConfig+0x180>
 80039a6:	2b20      	cmp	r3, #32
 80039a8:	d009      	beq.n	80039be <UART_SetConfig+0x16e>
 80039aa:	2b20      	cmp	r3, #32
 80039ac:	d810      	bhi.n	80039d0 <UART_SetConfig+0x180>
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d002      	beq.n	80039b8 <UART_SetConfig+0x168>
 80039b2:	2b10      	cmp	r3, #16
 80039b4:	d006      	beq.n	80039c4 <UART_SetConfig+0x174>
 80039b6:	e00b      	b.n	80039d0 <UART_SetConfig+0x180>
 80039b8:	2300      	movs	r3, #0
 80039ba:	76fb      	strb	r3, [r7, #27]
 80039bc:	e089      	b.n	8003ad2 <UART_SetConfig+0x282>
 80039be:	2302      	movs	r3, #2
 80039c0:	76fb      	strb	r3, [r7, #27]
 80039c2:	e086      	b.n	8003ad2 <UART_SetConfig+0x282>
 80039c4:	2304      	movs	r3, #4
 80039c6:	76fb      	strb	r3, [r7, #27]
 80039c8:	e083      	b.n	8003ad2 <UART_SetConfig+0x282>
 80039ca:	2308      	movs	r3, #8
 80039cc:	76fb      	strb	r3, [r7, #27]
 80039ce:	e080      	b.n	8003ad2 <UART_SetConfig+0x282>
 80039d0:	2310      	movs	r3, #16
 80039d2:	76fb      	strb	r3, [r7, #27]
 80039d4:	e07d      	b.n	8003ad2 <UART_SetConfig+0x282>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a5b      	ldr	r2, [pc, #364]	; (8003b48 <UART_SetConfig+0x2f8>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d120      	bne.n	8003a22 <UART_SetConfig+0x1d2>
 80039e0:	4b56      	ldr	r3, [pc, #344]	; (8003b3c <UART_SetConfig+0x2ec>)
 80039e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80039ea:	2bc0      	cmp	r3, #192	; 0xc0
 80039ec:	d013      	beq.n	8003a16 <UART_SetConfig+0x1c6>
 80039ee:	2bc0      	cmp	r3, #192	; 0xc0
 80039f0:	d814      	bhi.n	8003a1c <UART_SetConfig+0x1cc>
 80039f2:	2b80      	cmp	r3, #128	; 0x80
 80039f4:	d009      	beq.n	8003a0a <UART_SetConfig+0x1ba>
 80039f6:	2b80      	cmp	r3, #128	; 0x80
 80039f8:	d810      	bhi.n	8003a1c <UART_SetConfig+0x1cc>
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d002      	beq.n	8003a04 <UART_SetConfig+0x1b4>
 80039fe:	2b40      	cmp	r3, #64	; 0x40
 8003a00:	d006      	beq.n	8003a10 <UART_SetConfig+0x1c0>
 8003a02:	e00b      	b.n	8003a1c <UART_SetConfig+0x1cc>
 8003a04:	2300      	movs	r3, #0
 8003a06:	76fb      	strb	r3, [r7, #27]
 8003a08:	e063      	b.n	8003ad2 <UART_SetConfig+0x282>
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	76fb      	strb	r3, [r7, #27]
 8003a0e:	e060      	b.n	8003ad2 <UART_SetConfig+0x282>
 8003a10:	2304      	movs	r3, #4
 8003a12:	76fb      	strb	r3, [r7, #27]
 8003a14:	e05d      	b.n	8003ad2 <UART_SetConfig+0x282>
 8003a16:	2308      	movs	r3, #8
 8003a18:	76fb      	strb	r3, [r7, #27]
 8003a1a:	e05a      	b.n	8003ad2 <UART_SetConfig+0x282>
 8003a1c:	2310      	movs	r3, #16
 8003a1e:	76fb      	strb	r3, [r7, #27]
 8003a20:	e057      	b.n	8003ad2 <UART_SetConfig+0x282>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a49      	ldr	r2, [pc, #292]	; (8003b4c <UART_SetConfig+0x2fc>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d125      	bne.n	8003a78 <UART_SetConfig+0x228>
 8003a2c:	4b43      	ldr	r3, [pc, #268]	; (8003b3c <UART_SetConfig+0x2ec>)
 8003a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a3a:	d017      	beq.n	8003a6c <UART_SetConfig+0x21c>
 8003a3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a40:	d817      	bhi.n	8003a72 <UART_SetConfig+0x222>
 8003a42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a46:	d00b      	beq.n	8003a60 <UART_SetConfig+0x210>
 8003a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a4c:	d811      	bhi.n	8003a72 <UART_SetConfig+0x222>
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <UART_SetConfig+0x20a>
 8003a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a56:	d006      	beq.n	8003a66 <UART_SetConfig+0x216>
 8003a58:	e00b      	b.n	8003a72 <UART_SetConfig+0x222>
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	76fb      	strb	r3, [r7, #27]
 8003a5e:	e038      	b.n	8003ad2 <UART_SetConfig+0x282>
 8003a60:	2302      	movs	r3, #2
 8003a62:	76fb      	strb	r3, [r7, #27]
 8003a64:	e035      	b.n	8003ad2 <UART_SetConfig+0x282>
 8003a66:	2304      	movs	r3, #4
 8003a68:	76fb      	strb	r3, [r7, #27]
 8003a6a:	e032      	b.n	8003ad2 <UART_SetConfig+0x282>
 8003a6c:	2308      	movs	r3, #8
 8003a6e:	76fb      	strb	r3, [r7, #27]
 8003a70:	e02f      	b.n	8003ad2 <UART_SetConfig+0x282>
 8003a72:	2310      	movs	r3, #16
 8003a74:	76fb      	strb	r3, [r7, #27]
 8003a76:	e02c      	b.n	8003ad2 <UART_SetConfig+0x282>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a2d      	ldr	r2, [pc, #180]	; (8003b34 <UART_SetConfig+0x2e4>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d125      	bne.n	8003ace <UART_SetConfig+0x27e>
 8003a82:	4b2e      	ldr	r3, [pc, #184]	; (8003b3c <UART_SetConfig+0x2ec>)
 8003a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a90:	d017      	beq.n	8003ac2 <UART_SetConfig+0x272>
 8003a92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a96:	d817      	bhi.n	8003ac8 <UART_SetConfig+0x278>
 8003a98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a9c:	d00b      	beq.n	8003ab6 <UART_SetConfig+0x266>
 8003a9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aa2:	d811      	bhi.n	8003ac8 <UART_SetConfig+0x278>
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <UART_SetConfig+0x260>
 8003aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aac:	d006      	beq.n	8003abc <UART_SetConfig+0x26c>
 8003aae:	e00b      	b.n	8003ac8 <UART_SetConfig+0x278>
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	76fb      	strb	r3, [r7, #27]
 8003ab4:	e00d      	b.n	8003ad2 <UART_SetConfig+0x282>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	76fb      	strb	r3, [r7, #27]
 8003aba:	e00a      	b.n	8003ad2 <UART_SetConfig+0x282>
 8003abc:	2304      	movs	r3, #4
 8003abe:	76fb      	strb	r3, [r7, #27]
 8003ac0:	e007      	b.n	8003ad2 <UART_SetConfig+0x282>
 8003ac2:	2308      	movs	r3, #8
 8003ac4:	76fb      	strb	r3, [r7, #27]
 8003ac6:	e004      	b.n	8003ad2 <UART_SetConfig+0x282>
 8003ac8:	2310      	movs	r3, #16
 8003aca:	76fb      	strb	r3, [r7, #27]
 8003acc:	e001      	b.n	8003ad2 <UART_SetConfig+0x282>
 8003ace:	2310      	movs	r3, #16
 8003ad0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a17      	ldr	r2, [pc, #92]	; (8003b34 <UART_SetConfig+0x2e4>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	f040 8087 	bne.w	8003bec <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ade:	7efb      	ldrb	r3, [r7, #27]
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d837      	bhi.n	8003b54 <UART_SetConfig+0x304>
 8003ae4:	a201      	add	r2, pc, #4	; (adr r2, 8003aec <UART_SetConfig+0x29c>)
 8003ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aea:	bf00      	nop
 8003aec:	08003b11 	.word	0x08003b11
 8003af0:	08003b55 	.word	0x08003b55
 8003af4:	08003b19 	.word	0x08003b19
 8003af8:	08003b55 	.word	0x08003b55
 8003afc:	08003b1f 	.word	0x08003b1f
 8003b00:	08003b55 	.word	0x08003b55
 8003b04:	08003b55 	.word	0x08003b55
 8003b08:	08003b55 	.word	0x08003b55
 8003b0c:	08003b27 	.word	0x08003b27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b10:	f7fe fe0e 	bl	8002730 <HAL_RCC_GetPCLK1Freq>
 8003b14:	6178      	str	r0, [r7, #20]
        break;
 8003b16:	e022      	b.n	8003b5e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b18:	4b0d      	ldr	r3, [pc, #52]	; (8003b50 <UART_SetConfig+0x300>)
 8003b1a:	617b      	str	r3, [r7, #20]
        break;
 8003b1c:	e01f      	b.n	8003b5e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b1e:	f7fe fd6f 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 8003b22:	6178      	str	r0, [r7, #20]
        break;
 8003b24:	e01b      	b.n	8003b5e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b2a:	617b      	str	r3, [r7, #20]
        break;
 8003b2c:	e017      	b.n	8003b5e <UART_SetConfig+0x30e>
 8003b2e:	bf00      	nop
 8003b30:	efff69f3 	.word	0xefff69f3
 8003b34:	40008000 	.word	0x40008000
 8003b38:	40013800 	.word	0x40013800
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	40004400 	.word	0x40004400
 8003b44:	40004800 	.word	0x40004800
 8003b48:	40004c00 	.word	0x40004c00
 8003b4c:	40005000 	.word	0x40005000
 8003b50:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	76bb      	strb	r3, [r7, #26]
        break;
 8003b5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 80f1 	beq.w	8003d48 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	4413      	add	r3, r2
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d305      	bcc.n	8003b82 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d902      	bls.n	8003b88 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	76bb      	strb	r3, [r7, #26]
 8003b86:	e0df      	b.n	8003d48 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f04f 0100 	mov.w	r1, #0
 8003b90:	f04f 0200 	mov.w	r2, #0
 8003b94:	f04f 0300 	mov.w	r3, #0
 8003b98:	020b      	lsls	r3, r1, #8
 8003b9a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003b9e:	0202      	lsls	r2, r0, #8
 8003ba0:	6879      	ldr	r1, [r7, #4]
 8003ba2:	6849      	ldr	r1, [r1, #4]
 8003ba4:	0849      	lsrs	r1, r1, #1
 8003ba6:	4608      	mov	r0, r1
 8003ba8:	f04f 0100 	mov.w	r1, #0
 8003bac:	1814      	adds	r4, r2, r0
 8003bae:	eb43 0501 	adc.w	r5, r3, r1
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	f04f 0300 	mov.w	r3, #0
 8003bbc:	4620      	mov	r0, r4
 8003bbe:	4629      	mov	r1, r5
 8003bc0:	f7fc fb6e 	bl	80002a0 <__aeabi_uldivmod>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	4613      	mov	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bd2:	d308      	bcc.n	8003be6 <UART_SetConfig+0x396>
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bda:	d204      	bcs.n	8003be6 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	60da      	str	r2, [r3, #12]
 8003be4:	e0b0      	b.n	8003d48 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	76bb      	strb	r3, [r7, #26]
 8003bea:	e0ad      	b.n	8003d48 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	69db      	ldr	r3, [r3, #28]
 8003bf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bf4:	d15c      	bne.n	8003cb0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003bf6:	7efb      	ldrb	r3, [r7, #27]
 8003bf8:	2b08      	cmp	r3, #8
 8003bfa:	d828      	bhi.n	8003c4e <UART_SetConfig+0x3fe>
 8003bfc:	a201      	add	r2, pc, #4	; (adr r2, 8003c04 <UART_SetConfig+0x3b4>)
 8003bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c02:	bf00      	nop
 8003c04:	08003c29 	.word	0x08003c29
 8003c08:	08003c31 	.word	0x08003c31
 8003c0c:	08003c39 	.word	0x08003c39
 8003c10:	08003c4f 	.word	0x08003c4f
 8003c14:	08003c3f 	.word	0x08003c3f
 8003c18:	08003c4f 	.word	0x08003c4f
 8003c1c:	08003c4f 	.word	0x08003c4f
 8003c20:	08003c4f 	.word	0x08003c4f
 8003c24:	08003c47 	.word	0x08003c47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c28:	f7fe fd82 	bl	8002730 <HAL_RCC_GetPCLK1Freq>
 8003c2c:	6178      	str	r0, [r7, #20]
        break;
 8003c2e:	e013      	b.n	8003c58 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c30:	f7fe fd94 	bl	800275c <HAL_RCC_GetPCLK2Freq>
 8003c34:	6178      	str	r0, [r7, #20]
        break;
 8003c36:	e00f      	b.n	8003c58 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c38:	4b49      	ldr	r3, [pc, #292]	; (8003d60 <UART_SetConfig+0x510>)
 8003c3a:	617b      	str	r3, [r7, #20]
        break;
 8003c3c:	e00c      	b.n	8003c58 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c3e:	f7fe fcdf 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 8003c42:	6178      	str	r0, [r7, #20]
        break;
 8003c44:	e008      	b.n	8003c58 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c4a:	617b      	str	r3, [r7, #20]
        break;
 8003c4c:	e004      	b.n	8003c58 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	76bb      	strb	r3, [r7, #26]
        break;
 8003c56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d074      	beq.n	8003d48 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	005a      	lsls	r2, r3, #1
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	085b      	lsrs	r3, r3, #1
 8003c68:	441a      	add	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	2b0f      	cmp	r3, #15
 8003c7a:	d916      	bls.n	8003caa <UART_SetConfig+0x45a>
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c82:	d212      	bcs.n	8003caa <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	f023 030f 	bic.w	r3, r3, #15
 8003c8c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	085b      	lsrs	r3, r3, #1
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	f003 0307 	and.w	r3, r3, #7
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	89fb      	ldrh	r3, [r7, #14]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	89fa      	ldrh	r2, [r7, #14]
 8003ca6:	60da      	str	r2, [r3, #12]
 8003ca8:	e04e      	b.n	8003d48 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	76bb      	strb	r3, [r7, #26]
 8003cae:	e04b      	b.n	8003d48 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003cb0:	7efb      	ldrb	r3, [r7, #27]
 8003cb2:	2b08      	cmp	r3, #8
 8003cb4:	d827      	bhi.n	8003d06 <UART_SetConfig+0x4b6>
 8003cb6:	a201      	add	r2, pc, #4	; (adr r2, 8003cbc <UART_SetConfig+0x46c>)
 8003cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cbc:	08003ce1 	.word	0x08003ce1
 8003cc0:	08003ce9 	.word	0x08003ce9
 8003cc4:	08003cf1 	.word	0x08003cf1
 8003cc8:	08003d07 	.word	0x08003d07
 8003ccc:	08003cf7 	.word	0x08003cf7
 8003cd0:	08003d07 	.word	0x08003d07
 8003cd4:	08003d07 	.word	0x08003d07
 8003cd8:	08003d07 	.word	0x08003d07
 8003cdc:	08003cff 	.word	0x08003cff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ce0:	f7fe fd26 	bl	8002730 <HAL_RCC_GetPCLK1Freq>
 8003ce4:	6178      	str	r0, [r7, #20]
        break;
 8003ce6:	e013      	b.n	8003d10 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ce8:	f7fe fd38 	bl	800275c <HAL_RCC_GetPCLK2Freq>
 8003cec:	6178      	str	r0, [r7, #20]
        break;
 8003cee:	e00f      	b.n	8003d10 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cf0:	4b1b      	ldr	r3, [pc, #108]	; (8003d60 <UART_SetConfig+0x510>)
 8003cf2:	617b      	str	r3, [r7, #20]
        break;
 8003cf4:	e00c      	b.n	8003d10 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cf6:	f7fe fc83 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 8003cfa:	6178      	str	r0, [r7, #20]
        break;
 8003cfc:	e008      	b.n	8003d10 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d02:	617b      	str	r3, [r7, #20]
        break;
 8003d04:	e004      	b.n	8003d10 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003d06:	2300      	movs	r3, #0
 8003d08:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	76bb      	strb	r3, [r7, #26]
        break;
 8003d0e:	bf00      	nop
    }

    if (pclk != 0U)
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d018      	beq.n	8003d48 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	085a      	lsrs	r2, r3, #1
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	441a      	add	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	2b0f      	cmp	r3, #15
 8003d30:	d908      	bls.n	8003d44 <UART_SetConfig+0x4f4>
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d38:	d204      	bcs.n	8003d44 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	60da      	str	r2, [r3, #12]
 8003d42:	e001      	b.n	8003d48 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003d54:	7ebb      	ldrb	r3, [r7, #26]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3720      	adds	r7, #32
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bdb0      	pop	{r4, r5, r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	00f42400 	.word	0x00f42400

08003d64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00a      	beq.n	8003d8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00a      	beq.n	8003dd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	f003 0308 	and.w	r3, r3, #8
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00a      	beq.n	8003df4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df8:	f003 0310 	and.w	r3, r3, #16
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00a      	beq.n	8003e16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1a:	f003 0320 	and.w	r3, r3, #32
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00a      	beq.n	8003e38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d01a      	beq.n	8003e7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e62:	d10a      	bne.n	8003e7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00a      	beq.n	8003e9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	605a      	str	r2, [r3, #4]
  }
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af02      	add	r7, sp, #8
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003eb8:	f7fd fb30 	bl	800151c <HAL_GetTick>
 8003ebc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0308 	and.w	r3, r3, #8
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d10e      	bne.n	8003eea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ecc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f82d 	bl	8003f3a <UART_WaitOnFlagUntilTimeout>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e023      	b.n	8003f32 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b04      	cmp	r3, #4
 8003ef6:	d10e      	bne.n	8003f16 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ef8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f817 	bl	8003f3a <UART_WaitOnFlagUntilTimeout>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e00d      	b.n	8003f32 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b084      	sub	sp, #16
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	60f8      	str	r0, [r7, #12]
 8003f42:	60b9      	str	r1, [r7, #8]
 8003f44:	603b      	str	r3, [r7, #0]
 8003f46:	4613      	mov	r3, r2
 8003f48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f4a:	e05e      	b.n	800400a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f52:	d05a      	beq.n	800400a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f54:	f7fd fae2 	bl	800151c <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d302      	bcc.n	8003f6a <UART_WaitOnFlagUntilTimeout+0x30>
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d11b      	bne.n	8003fa2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f78:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689a      	ldr	r2, [r3, #8]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 0201 	bic.w	r2, r2, #1
 8003f88:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2220      	movs	r2, #32
 8003f94:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e043      	b.n	800402a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d02c      	beq.n	800400a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fbe:	d124      	bne.n	800400a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fc8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fd8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0201 	bic.w	r2, r2, #1
 8003fe8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2220      	movs	r2, #32
 8003fee:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e00f      	b.n	800402a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	69da      	ldr	r2, [r3, #28]
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	4013      	ands	r3, r2
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	429a      	cmp	r2, r3
 8004018:	bf0c      	ite	eq
 800401a:	2301      	moveq	r3, #1
 800401c:	2300      	movne	r3, #0
 800401e:	b2db      	uxtb	r3, r3
 8004020:	461a      	mov	r2, r3
 8004022:	79fb      	ldrb	r3, [r7, #7]
 8004024:	429a      	cmp	r2, r3
 8004026:	d091      	beq.n	8003f4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	4613      	mov	r3, r2
 8004040:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	88fa      	ldrh	r2, [r7, #6]
 800404c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	88fa      	ldrh	r2, [r7, #6]
 8004054:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004066:	d10e      	bne.n	8004086 <UART_Start_Receive_IT+0x52>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d105      	bne.n	800407c <UART_Start_Receive_IT+0x48>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004076:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800407a:	e02d      	b.n	80040d8 <UART_Start_Receive_IT+0xa4>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	22ff      	movs	r2, #255	; 0xff
 8004080:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004084:	e028      	b.n	80040d8 <UART_Start_Receive_IT+0xa4>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10d      	bne.n	80040aa <UART_Start_Receive_IT+0x76>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d104      	bne.n	80040a0 <UART_Start_Receive_IT+0x6c>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	22ff      	movs	r2, #255	; 0xff
 800409a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800409e:	e01b      	b.n	80040d8 <UART_Start_Receive_IT+0xa4>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	227f      	movs	r2, #127	; 0x7f
 80040a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040a8:	e016      	b.n	80040d8 <UART_Start_Receive_IT+0xa4>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040b2:	d10d      	bne.n	80040d0 <UART_Start_Receive_IT+0x9c>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d104      	bne.n	80040c6 <UART_Start_Receive_IT+0x92>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	227f      	movs	r2, #127	; 0x7f
 80040c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040c4:	e008      	b.n	80040d8 <UART_Start_Receive_IT+0xa4>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	223f      	movs	r2, #63	; 0x3f
 80040ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040ce:	e003      	b.n	80040d8 <UART_Start_Receive_IT+0xa4>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2222      	movs	r2, #34	; 0x22
 80040e4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f042 0201 	orr.w	r2, r2, #1
 80040f4:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040fe:	d107      	bne.n	8004110 <UART_Start_Receive_IT+0xdc>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d103      	bne.n	8004110 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4a0c      	ldr	r2, [pc, #48]	; (800413c <UART_Start_Receive_IT+0x108>)
 800410c:	665a      	str	r2, [r3, #100]	; 0x64
 800410e:	e002      	b.n	8004116 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4a0b      	ldr	r2, [pc, #44]	; (8004140 <UART_Start_Receive_IT+0x10c>)
 8004114:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800412c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	080042d9 	.word	0x080042d9
 8004140:	08004201 	.word	0x08004201

08004144 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800415a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689a      	ldr	r2, [r3, #8]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 0201 	bic.w	r2, r2, #1
 800416a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004170:	2b01      	cmp	r3, #1
 8004172:	d107      	bne.n	8004184 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0210 	bic.w	r2, r2, #16
 8004182:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2220      	movs	r2, #32
 8004188:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004196:	bf00      	nop
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b084      	sub	sp, #16
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f7ff fb2f 	bl	8003824 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041c6:	bf00      	nop
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b082      	sub	sp, #8
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041e4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2220      	movs	r2, #32
 80041ea:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7ff fb0c 	bl	8003810 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041f8:	bf00      	nop
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800420e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004214:	2b22      	cmp	r3, #34	; 0x22
 8004216:	d151      	bne.n	80042bc <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800421e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004220:	89bb      	ldrh	r3, [r7, #12]
 8004222:	b2d9      	uxtb	r1, r3
 8004224:	89fb      	ldrh	r3, [r7, #14]
 8004226:	b2da      	uxtb	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422c:	400a      	ands	r2, r1
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004236:	1c5a      	adds	r2, r3, #1
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004242:	b29b      	uxth	r3, r3
 8004244:	3b01      	subs	r3, #1
 8004246:	b29a      	uxth	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004254:	b29b      	uxth	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d13a      	bne.n	80042d0 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004268:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 0201 	bic.w	r2, r2, #1
 8004278:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2220      	movs	r2, #32
 800427e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800428a:	2b01      	cmp	r3, #1
 800428c:	d10f      	bne.n	80042ae <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 0210 	bic.w	r2, r2, #16
 800429c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80042a4:	4619      	mov	r1, r3
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7ff fac6 	bl	8003838 <HAL_UARTEx_RxEventCallback>
 80042ac:	e002      	b.n	80042b4 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7fc f980 	bl	80005b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80042ba:	e009      	b.n	80042d0 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	8b1b      	ldrh	r3, [r3, #24]
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f042 0208 	orr.w	r2, r2, #8
 80042cc:	b292      	uxth	r2, r2
 80042ce:	831a      	strh	r2, [r3, #24]
}
 80042d0:	bf00      	nop
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80042e6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042ec:	2b22      	cmp	r3, #34	; 0x22
 80042ee:	d151      	bne.n	8004394 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80042f6:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fc:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80042fe:	89ba      	ldrh	r2, [r7, #12]
 8004300:	89fb      	ldrh	r3, [r7, #14]
 8004302:	4013      	ands	r3, r2
 8004304:	b29a      	uxth	r2, r3
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430e:	1c9a      	adds	r2, r3, #2
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800431a:	b29b      	uxth	r3, r3
 800431c:	3b01      	subs	r3, #1
 800431e:	b29a      	uxth	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800432c:	b29b      	uxth	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d13a      	bne.n	80043a8 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004340:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0201 	bic.w	r2, r2, #1
 8004350:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2220      	movs	r2, #32
 8004356:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004362:	2b01      	cmp	r3, #1
 8004364:	d10f      	bne.n	8004386 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0210 	bic.w	r2, r2, #16
 8004374:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800437c:	4619      	mov	r1, r3
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7ff fa5a 	bl	8003838 <HAL_UARTEx_RxEventCallback>
 8004384:	e002      	b.n	800438c <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7fc f914 	bl	80005b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004392:	e009      	b.n	80043a8 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	8b1b      	ldrh	r3, [r3, #24]
 800439a:	b29a      	uxth	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f042 0208 	orr.w	r2, r2, #8
 80043a4:	b292      	uxth	r2, r2
 80043a6:	831a      	strh	r2, [r3, #24]
}
 80043a8:	bf00      	nop
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <__errno>:
 80043c4:	4b01      	ldr	r3, [pc, #4]	; (80043cc <__errno+0x8>)
 80043c6:	6818      	ldr	r0, [r3, #0]
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	2000000c 	.word	0x2000000c

080043d0 <__libc_init_array>:
 80043d0:	b570      	push	{r4, r5, r6, lr}
 80043d2:	4d0d      	ldr	r5, [pc, #52]	; (8004408 <__libc_init_array+0x38>)
 80043d4:	4c0d      	ldr	r4, [pc, #52]	; (800440c <__libc_init_array+0x3c>)
 80043d6:	1b64      	subs	r4, r4, r5
 80043d8:	10a4      	asrs	r4, r4, #2
 80043da:	2600      	movs	r6, #0
 80043dc:	42a6      	cmp	r6, r4
 80043de:	d109      	bne.n	80043f4 <__libc_init_array+0x24>
 80043e0:	4d0b      	ldr	r5, [pc, #44]	; (8004410 <__libc_init_array+0x40>)
 80043e2:	4c0c      	ldr	r4, [pc, #48]	; (8004414 <__libc_init_array+0x44>)
 80043e4:	f001 f862 	bl	80054ac <_init>
 80043e8:	1b64      	subs	r4, r4, r5
 80043ea:	10a4      	asrs	r4, r4, #2
 80043ec:	2600      	movs	r6, #0
 80043ee:	42a6      	cmp	r6, r4
 80043f0:	d105      	bne.n	80043fe <__libc_init_array+0x2e>
 80043f2:	bd70      	pop	{r4, r5, r6, pc}
 80043f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80043f8:	4798      	blx	r3
 80043fa:	3601      	adds	r6, #1
 80043fc:	e7ee      	b.n	80043dc <__libc_init_array+0xc>
 80043fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004402:	4798      	blx	r3
 8004404:	3601      	adds	r6, #1
 8004406:	e7f2      	b.n	80043ee <__libc_init_array+0x1e>
 8004408:	08005868 	.word	0x08005868
 800440c:	08005868 	.word	0x08005868
 8004410:	08005868 	.word	0x08005868
 8004414:	0800586c 	.word	0x0800586c

08004418 <memset>:
 8004418:	4402      	add	r2, r0
 800441a:	4603      	mov	r3, r0
 800441c:	4293      	cmp	r3, r2
 800441e:	d100      	bne.n	8004422 <memset+0xa>
 8004420:	4770      	bx	lr
 8004422:	f803 1b01 	strb.w	r1, [r3], #1
 8004426:	e7f9      	b.n	800441c <memset+0x4>

08004428 <iprintf>:
 8004428:	b40f      	push	{r0, r1, r2, r3}
 800442a:	4b0a      	ldr	r3, [pc, #40]	; (8004454 <iprintf+0x2c>)
 800442c:	b513      	push	{r0, r1, r4, lr}
 800442e:	681c      	ldr	r4, [r3, #0]
 8004430:	b124      	cbz	r4, 800443c <iprintf+0x14>
 8004432:	69a3      	ldr	r3, [r4, #24]
 8004434:	b913      	cbnz	r3, 800443c <iprintf+0x14>
 8004436:	4620      	mov	r0, r4
 8004438:	f000 fa8c 	bl	8004954 <__sinit>
 800443c:	ab05      	add	r3, sp, #20
 800443e:	9a04      	ldr	r2, [sp, #16]
 8004440:	68a1      	ldr	r1, [r4, #8]
 8004442:	9301      	str	r3, [sp, #4]
 8004444:	4620      	mov	r0, r4
 8004446:	f000 fc5d 	bl	8004d04 <_vfiprintf_r>
 800444a:	b002      	add	sp, #8
 800444c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004450:	b004      	add	sp, #16
 8004452:	4770      	bx	lr
 8004454:	2000000c 	.word	0x2000000c

08004458 <putchar>:
 8004458:	4b09      	ldr	r3, [pc, #36]	; (8004480 <putchar+0x28>)
 800445a:	b513      	push	{r0, r1, r4, lr}
 800445c:	681c      	ldr	r4, [r3, #0]
 800445e:	4601      	mov	r1, r0
 8004460:	b134      	cbz	r4, 8004470 <putchar+0x18>
 8004462:	69a3      	ldr	r3, [r4, #24]
 8004464:	b923      	cbnz	r3, 8004470 <putchar+0x18>
 8004466:	9001      	str	r0, [sp, #4]
 8004468:	4620      	mov	r0, r4
 800446a:	f000 fa73 	bl	8004954 <__sinit>
 800446e:	9901      	ldr	r1, [sp, #4]
 8004470:	68a2      	ldr	r2, [r4, #8]
 8004472:	4620      	mov	r0, r4
 8004474:	b002      	add	sp, #8
 8004476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800447a:	f000 bf07 	b.w	800528c <_putc_r>
 800447e:	bf00      	nop
 8004480:	2000000c 	.word	0x2000000c

08004484 <_puts_r>:
 8004484:	b570      	push	{r4, r5, r6, lr}
 8004486:	460e      	mov	r6, r1
 8004488:	4605      	mov	r5, r0
 800448a:	b118      	cbz	r0, 8004494 <_puts_r+0x10>
 800448c:	6983      	ldr	r3, [r0, #24]
 800448e:	b90b      	cbnz	r3, 8004494 <_puts_r+0x10>
 8004490:	f000 fa60 	bl	8004954 <__sinit>
 8004494:	69ab      	ldr	r3, [r5, #24]
 8004496:	68ac      	ldr	r4, [r5, #8]
 8004498:	b913      	cbnz	r3, 80044a0 <_puts_r+0x1c>
 800449a:	4628      	mov	r0, r5
 800449c:	f000 fa5a 	bl	8004954 <__sinit>
 80044a0:	4b2c      	ldr	r3, [pc, #176]	; (8004554 <_puts_r+0xd0>)
 80044a2:	429c      	cmp	r4, r3
 80044a4:	d120      	bne.n	80044e8 <_puts_r+0x64>
 80044a6:	686c      	ldr	r4, [r5, #4]
 80044a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044aa:	07db      	lsls	r3, r3, #31
 80044ac:	d405      	bmi.n	80044ba <_puts_r+0x36>
 80044ae:	89a3      	ldrh	r3, [r4, #12]
 80044b0:	0598      	lsls	r0, r3, #22
 80044b2:	d402      	bmi.n	80044ba <_puts_r+0x36>
 80044b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044b6:	f000 faeb 	bl	8004a90 <__retarget_lock_acquire_recursive>
 80044ba:	89a3      	ldrh	r3, [r4, #12]
 80044bc:	0719      	lsls	r1, r3, #28
 80044be:	d51d      	bpl.n	80044fc <_puts_r+0x78>
 80044c0:	6923      	ldr	r3, [r4, #16]
 80044c2:	b1db      	cbz	r3, 80044fc <_puts_r+0x78>
 80044c4:	3e01      	subs	r6, #1
 80044c6:	68a3      	ldr	r3, [r4, #8]
 80044c8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80044cc:	3b01      	subs	r3, #1
 80044ce:	60a3      	str	r3, [r4, #8]
 80044d0:	bb39      	cbnz	r1, 8004522 <_puts_r+0x9e>
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	da38      	bge.n	8004548 <_puts_r+0xc4>
 80044d6:	4622      	mov	r2, r4
 80044d8:	210a      	movs	r1, #10
 80044da:	4628      	mov	r0, r5
 80044dc:	f000 f860 	bl	80045a0 <__swbuf_r>
 80044e0:	3001      	adds	r0, #1
 80044e2:	d011      	beq.n	8004508 <_puts_r+0x84>
 80044e4:	250a      	movs	r5, #10
 80044e6:	e011      	b.n	800450c <_puts_r+0x88>
 80044e8:	4b1b      	ldr	r3, [pc, #108]	; (8004558 <_puts_r+0xd4>)
 80044ea:	429c      	cmp	r4, r3
 80044ec:	d101      	bne.n	80044f2 <_puts_r+0x6e>
 80044ee:	68ac      	ldr	r4, [r5, #8]
 80044f0:	e7da      	b.n	80044a8 <_puts_r+0x24>
 80044f2:	4b1a      	ldr	r3, [pc, #104]	; (800455c <_puts_r+0xd8>)
 80044f4:	429c      	cmp	r4, r3
 80044f6:	bf08      	it	eq
 80044f8:	68ec      	ldreq	r4, [r5, #12]
 80044fa:	e7d5      	b.n	80044a8 <_puts_r+0x24>
 80044fc:	4621      	mov	r1, r4
 80044fe:	4628      	mov	r0, r5
 8004500:	f000 f8a0 	bl	8004644 <__swsetup_r>
 8004504:	2800      	cmp	r0, #0
 8004506:	d0dd      	beq.n	80044c4 <_puts_r+0x40>
 8004508:	f04f 35ff 	mov.w	r5, #4294967295
 800450c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800450e:	07da      	lsls	r2, r3, #31
 8004510:	d405      	bmi.n	800451e <_puts_r+0x9a>
 8004512:	89a3      	ldrh	r3, [r4, #12]
 8004514:	059b      	lsls	r3, r3, #22
 8004516:	d402      	bmi.n	800451e <_puts_r+0x9a>
 8004518:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800451a:	f000 faba 	bl	8004a92 <__retarget_lock_release_recursive>
 800451e:	4628      	mov	r0, r5
 8004520:	bd70      	pop	{r4, r5, r6, pc}
 8004522:	2b00      	cmp	r3, #0
 8004524:	da04      	bge.n	8004530 <_puts_r+0xac>
 8004526:	69a2      	ldr	r2, [r4, #24]
 8004528:	429a      	cmp	r2, r3
 800452a:	dc06      	bgt.n	800453a <_puts_r+0xb6>
 800452c:	290a      	cmp	r1, #10
 800452e:	d004      	beq.n	800453a <_puts_r+0xb6>
 8004530:	6823      	ldr	r3, [r4, #0]
 8004532:	1c5a      	adds	r2, r3, #1
 8004534:	6022      	str	r2, [r4, #0]
 8004536:	7019      	strb	r1, [r3, #0]
 8004538:	e7c5      	b.n	80044c6 <_puts_r+0x42>
 800453a:	4622      	mov	r2, r4
 800453c:	4628      	mov	r0, r5
 800453e:	f000 f82f 	bl	80045a0 <__swbuf_r>
 8004542:	3001      	adds	r0, #1
 8004544:	d1bf      	bne.n	80044c6 <_puts_r+0x42>
 8004546:	e7df      	b.n	8004508 <_puts_r+0x84>
 8004548:	6823      	ldr	r3, [r4, #0]
 800454a:	250a      	movs	r5, #10
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	6022      	str	r2, [r4, #0]
 8004550:	701d      	strb	r5, [r3, #0]
 8004552:	e7db      	b.n	800450c <_puts_r+0x88>
 8004554:	080057ec 	.word	0x080057ec
 8004558:	0800580c 	.word	0x0800580c
 800455c:	080057cc 	.word	0x080057cc

08004560 <puts>:
 8004560:	4b02      	ldr	r3, [pc, #8]	; (800456c <puts+0xc>)
 8004562:	4601      	mov	r1, r0
 8004564:	6818      	ldr	r0, [r3, #0]
 8004566:	f7ff bf8d 	b.w	8004484 <_puts_r>
 800456a:	bf00      	nop
 800456c:	2000000c 	.word	0x2000000c

08004570 <strstr>:
 8004570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004572:	780c      	ldrb	r4, [r1, #0]
 8004574:	b164      	cbz	r4, 8004590 <strstr+0x20>
 8004576:	4603      	mov	r3, r0
 8004578:	781a      	ldrb	r2, [r3, #0]
 800457a:	4618      	mov	r0, r3
 800457c:	1c5e      	adds	r6, r3, #1
 800457e:	b90a      	cbnz	r2, 8004584 <strstr+0x14>
 8004580:	4610      	mov	r0, r2
 8004582:	e005      	b.n	8004590 <strstr+0x20>
 8004584:	4294      	cmp	r4, r2
 8004586:	d108      	bne.n	800459a <strstr+0x2a>
 8004588:	460d      	mov	r5, r1
 800458a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800458e:	b902      	cbnz	r2, 8004592 <strstr+0x22>
 8004590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004592:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8004596:	4297      	cmp	r7, r2
 8004598:	d0f7      	beq.n	800458a <strstr+0x1a>
 800459a:	4633      	mov	r3, r6
 800459c:	e7ec      	b.n	8004578 <strstr+0x8>
	...

080045a0 <__swbuf_r>:
 80045a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045a2:	460e      	mov	r6, r1
 80045a4:	4614      	mov	r4, r2
 80045a6:	4605      	mov	r5, r0
 80045a8:	b118      	cbz	r0, 80045b2 <__swbuf_r+0x12>
 80045aa:	6983      	ldr	r3, [r0, #24]
 80045ac:	b90b      	cbnz	r3, 80045b2 <__swbuf_r+0x12>
 80045ae:	f000 f9d1 	bl	8004954 <__sinit>
 80045b2:	4b21      	ldr	r3, [pc, #132]	; (8004638 <__swbuf_r+0x98>)
 80045b4:	429c      	cmp	r4, r3
 80045b6:	d12b      	bne.n	8004610 <__swbuf_r+0x70>
 80045b8:	686c      	ldr	r4, [r5, #4]
 80045ba:	69a3      	ldr	r3, [r4, #24]
 80045bc:	60a3      	str	r3, [r4, #8]
 80045be:	89a3      	ldrh	r3, [r4, #12]
 80045c0:	071a      	lsls	r2, r3, #28
 80045c2:	d52f      	bpl.n	8004624 <__swbuf_r+0x84>
 80045c4:	6923      	ldr	r3, [r4, #16]
 80045c6:	b36b      	cbz	r3, 8004624 <__swbuf_r+0x84>
 80045c8:	6923      	ldr	r3, [r4, #16]
 80045ca:	6820      	ldr	r0, [r4, #0]
 80045cc:	1ac0      	subs	r0, r0, r3
 80045ce:	6963      	ldr	r3, [r4, #20]
 80045d0:	b2f6      	uxtb	r6, r6
 80045d2:	4283      	cmp	r3, r0
 80045d4:	4637      	mov	r7, r6
 80045d6:	dc04      	bgt.n	80045e2 <__swbuf_r+0x42>
 80045d8:	4621      	mov	r1, r4
 80045da:	4628      	mov	r0, r5
 80045dc:	f000 f926 	bl	800482c <_fflush_r>
 80045e0:	bb30      	cbnz	r0, 8004630 <__swbuf_r+0x90>
 80045e2:	68a3      	ldr	r3, [r4, #8]
 80045e4:	3b01      	subs	r3, #1
 80045e6:	60a3      	str	r3, [r4, #8]
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	1c5a      	adds	r2, r3, #1
 80045ec:	6022      	str	r2, [r4, #0]
 80045ee:	701e      	strb	r6, [r3, #0]
 80045f0:	6963      	ldr	r3, [r4, #20]
 80045f2:	3001      	adds	r0, #1
 80045f4:	4283      	cmp	r3, r0
 80045f6:	d004      	beq.n	8004602 <__swbuf_r+0x62>
 80045f8:	89a3      	ldrh	r3, [r4, #12]
 80045fa:	07db      	lsls	r3, r3, #31
 80045fc:	d506      	bpl.n	800460c <__swbuf_r+0x6c>
 80045fe:	2e0a      	cmp	r6, #10
 8004600:	d104      	bne.n	800460c <__swbuf_r+0x6c>
 8004602:	4621      	mov	r1, r4
 8004604:	4628      	mov	r0, r5
 8004606:	f000 f911 	bl	800482c <_fflush_r>
 800460a:	b988      	cbnz	r0, 8004630 <__swbuf_r+0x90>
 800460c:	4638      	mov	r0, r7
 800460e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004610:	4b0a      	ldr	r3, [pc, #40]	; (800463c <__swbuf_r+0x9c>)
 8004612:	429c      	cmp	r4, r3
 8004614:	d101      	bne.n	800461a <__swbuf_r+0x7a>
 8004616:	68ac      	ldr	r4, [r5, #8]
 8004618:	e7cf      	b.n	80045ba <__swbuf_r+0x1a>
 800461a:	4b09      	ldr	r3, [pc, #36]	; (8004640 <__swbuf_r+0xa0>)
 800461c:	429c      	cmp	r4, r3
 800461e:	bf08      	it	eq
 8004620:	68ec      	ldreq	r4, [r5, #12]
 8004622:	e7ca      	b.n	80045ba <__swbuf_r+0x1a>
 8004624:	4621      	mov	r1, r4
 8004626:	4628      	mov	r0, r5
 8004628:	f000 f80c 	bl	8004644 <__swsetup_r>
 800462c:	2800      	cmp	r0, #0
 800462e:	d0cb      	beq.n	80045c8 <__swbuf_r+0x28>
 8004630:	f04f 37ff 	mov.w	r7, #4294967295
 8004634:	e7ea      	b.n	800460c <__swbuf_r+0x6c>
 8004636:	bf00      	nop
 8004638:	080057ec 	.word	0x080057ec
 800463c:	0800580c 	.word	0x0800580c
 8004640:	080057cc 	.word	0x080057cc

08004644 <__swsetup_r>:
 8004644:	4b32      	ldr	r3, [pc, #200]	; (8004710 <__swsetup_r+0xcc>)
 8004646:	b570      	push	{r4, r5, r6, lr}
 8004648:	681d      	ldr	r5, [r3, #0]
 800464a:	4606      	mov	r6, r0
 800464c:	460c      	mov	r4, r1
 800464e:	b125      	cbz	r5, 800465a <__swsetup_r+0x16>
 8004650:	69ab      	ldr	r3, [r5, #24]
 8004652:	b913      	cbnz	r3, 800465a <__swsetup_r+0x16>
 8004654:	4628      	mov	r0, r5
 8004656:	f000 f97d 	bl	8004954 <__sinit>
 800465a:	4b2e      	ldr	r3, [pc, #184]	; (8004714 <__swsetup_r+0xd0>)
 800465c:	429c      	cmp	r4, r3
 800465e:	d10f      	bne.n	8004680 <__swsetup_r+0x3c>
 8004660:	686c      	ldr	r4, [r5, #4]
 8004662:	89a3      	ldrh	r3, [r4, #12]
 8004664:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004668:	0719      	lsls	r1, r3, #28
 800466a:	d42c      	bmi.n	80046c6 <__swsetup_r+0x82>
 800466c:	06dd      	lsls	r5, r3, #27
 800466e:	d411      	bmi.n	8004694 <__swsetup_r+0x50>
 8004670:	2309      	movs	r3, #9
 8004672:	6033      	str	r3, [r6, #0]
 8004674:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004678:	81a3      	strh	r3, [r4, #12]
 800467a:	f04f 30ff 	mov.w	r0, #4294967295
 800467e:	e03e      	b.n	80046fe <__swsetup_r+0xba>
 8004680:	4b25      	ldr	r3, [pc, #148]	; (8004718 <__swsetup_r+0xd4>)
 8004682:	429c      	cmp	r4, r3
 8004684:	d101      	bne.n	800468a <__swsetup_r+0x46>
 8004686:	68ac      	ldr	r4, [r5, #8]
 8004688:	e7eb      	b.n	8004662 <__swsetup_r+0x1e>
 800468a:	4b24      	ldr	r3, [pc, #144]	; (800471c <__swsetup_r+0xd8>)
 800468c:	429c      	cmp	r4, r3
 800468e:	bf08      	it	eq
 8004690:	68ec      	ldreq	r4, [r5, #12]
 8004692:	e7e6      	b.n	8004662 <__swsetup_r+0x1e>
 8004694:	0758      	lsls	r0, r3, #29
 8004696:	d512      	bpl.n	80046be <__swsetup_r+0x7a>
 8004698:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800469a:	b141      	cbz	r1, 80046ae <__swsetup_r+0x6a>
 800469c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046a0:	4299      	cmp	r1, r3
 80046a2:	d002      	beq.n	80046aa <__swsetup_r+0x66>
 80046a4:	4630      	mov	r0, r6
 80046a6:	f000 fa59 	bl	8004b5c <_free_r>
 80046aa:	2300      	movs	r3, #0
 80046ac:	6363      	str	r3, [r4, #52]	; 0x34
 80046ae:	89a3      	ldrh	r3, [r4, #12]
 80046b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80046b4:	81a3      	strh	r3, [r4, #12]
 80046b6:	2300      	movs	r3, #0
 80046b8:	6063      	str	r3, [r4, #4]
 80046ba:	6923      	ldr	r3, [r4, #16]
 80046bc:	6023      	str	r3, [r4, #0]
 80046be:	89a3      	ldrh	r3, [r4, #12]
 80046c0:	f043 0308 	orr.w	r3, r3, #8
 80046c4:	81a3      	strh	r3, [r4, #12]
 80046c6:	6923      	ldr	r3, [r4, #16]
 80046c8:	b94b      	cbnz	r3, 80046de <__swsetup_r+0x9a>
 80046ca:	89a3      	ldrh	r3, [r4, #12]
 80046cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80046d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046d4:	d003      	beq.n	80046de <__swsetup_r+0x9a>
 80046d6:	4621      	mov	r1, r4
 80046d8:	4630      	mov	r0, r6
 80046da:	f000 f9ff 	bl	8004adc <__smakebuf_r>
 80046de:	89a0      	ldrh	r0, [r4, #12]
 80046e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80046e4:	f010 0301 	ands.w	r3, r0, #1
 80046e8:	d00a      	beq.n	8004700 <__swsetup_r+0xbc>
 80046ea:	2300      	movs	r3, #0
 80046ec:	60a3      	str	r3, [r4, #8]
 80046ee:	6963      	ldr	r3, [r4, #20]
 80046f0:	425b      	negs	r3, r3
 80046f2:	61a3      	str	r3, [r4, #24]
 80046f4:	6923      	ldr	r3, [r4, #16]
 80046f6:	b943      	cbnz	r3, 800470a <__swsetup_r+0xc6>
 80046f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80046fc:	d1ba      	bne.n	8004674 <__swsetup_r+0x30>
 80046fe:	bd70      	pop	{r4, r5, r6, pc}
 8004700:	0781      	lsls	r1, r0, #30
 8004702:	bf58      	it	pl
 8004704:	6963      	ldrpl	r3, [r4, #20]
 8004706:	60a3      	str	r3, [r4, #8]
 8004708:	e7f4      	b.n	80046f4 <__swsetup_r+0xb0>
 800470a:	2000      	movs	r0, #0
 800470c:	e7f7      	b.n	80046fe <__swsetup_r+0xba>
 800470e:	bf00      	nop
 8004710:	2000000c 	.word	0x2000000c
 8004714:	080057ec 	.word	0x080057ec
 8004718:	0800580c 	.word	0x0800580c
 800471c:	080057cc 	.word	0x080057cc

08004720 <__sflush_r>:
 8004720:	898a      	ldrh	r2, [r1, #12]
 8004722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004726:	4605      	mov	r5, r0
 8004728:	0710      	lsls	r0, r2, #28
 800472a:	460c      	mov	r4, r1
 800472c:	d458      	bmi.n	80047e0 <__sflush_r+0xc0>
 800472e:	684b      	ldr	r3, [r1, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	dc05      	bgt.n	8004740 <__sflush_r+0x20>
 8004734:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004736:	2b00      	cmp	r3, #0
 8004738:	dc02      	bgt.n	8004740 <__sflush_r+0x20>
 800473a:	2000      	movs	r0, #0
 800473c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004740:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004742:	2e00      	cmp	r6, #0
 8004744:	d0f9      	beq.n	800473a <__sflush_r+0x1a>
 8004746:	2300      	movs	r3, #0
 8004748:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800474c:	682f      	ldr	r7, [r5, #0]
 800474e:	602b      	str	r3, [r5, #0]
 8004750:	d032      	beq.n	80047b8 <__sflush_r+0x98>
 8004752:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004754:	89a3      	ldrh	r3, [r4, #12]
 8004756:	075a      	lsls	r2, r3, #29
 8004758:	d505      	bpl.n	8004766 <__sflush_r+0x46>
 800475a:	6863      	ldr	r3, [r4, #4]
 800475c:	1ac0      	subs	r0, r0, r3
 800475e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004760:	b10b      	cbz	r3, 8004766 <__sflush_r+0x46>
 8004762:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004764:	1ac0      	subs	r0, r0, r3
 8004766:	2300      	movs	r3, #0
 8004768:	4602      	mov	r2, r0
 800476a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800476c:	6a21      	ldr	r1, [r4, #32]
 800476e:	4628      	mov	r0, r5
 8004770:	47b0      	blx	r6
 8004772:	1c43      	adds	r3, r0, #1
 8004774:	89a3      	ldrh	r3, [r4, #12]
 8004776:	d106      	bne.n	8004786 <__sflush_r+0x66>
 8004778:	6829      	ldr	r1, [r5, #0]
 800477a:	291d      	cmp	r1, #29
 800477c:	d82c      	bhi.n	80047d8 <__sflush_r+0xb8>
 800477e:	4a2a      	ldr	r2, [pc, #168]	; (8004828 <__sflush_r+0x108>)
 8004780:	40ca      	lsrs	r2, r1
 8004782:	07d6      	lsls	r6, r2, #31
 8004784:	d528      	bpl.n	80047d8 <__sflush_r+0xb8>
 8004786:	2200      	movs	r2, #0
 8004788:	6062      	str	r2, [r4, #4]
 800478a:	04d9      	lsls	r1, r3, #19
 800478c:	6922      	ldr	r2, [r4, #16]
 800478e:	6022      	str	r2, [r4, #0]
 8004790:	d504      	bpl.n	800479c <__sflush_r+0x7c>
 8004792:	1c42      	adds	r2, r0, #1
 8004794:	d101      	bne.n	800479a <__sflush_r+0x7a>
 8004796:	682b      	ldr	r3, [r5, #0]
 8004798:	b903      	cbnz	r3, 800479c <__sflush_r+0x7c>
 800479a:	6560      	str	r0, [r4, #84]	; 0x54
 800479c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800479e:	602f      	str	r7, [r5, #0]
 80047a0:	2900      	cmp	r1, #0
 80047a2:	d0ca      	beq.n	800473a <__sflush_r+0x1a>
 80047a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047a8:	4299      	cmp	r1, r3
 80047aa:	d002      	beq.n	80047b2 <__sflush_r+0x92>
 80047ac:	4628      	mov	r0, r5
 80047ae:	f000 f9d5 	bl	8004b5c <_free_r>
 80047b2:	2000      	movs	r0, #0
 80047b4:	6360      	str	r0, [r4, #52]	; 0x34
 80047b6:	e7c1      	b.n	800473c <__sflush_r+0x1c>
 80047b8:	6a21      	ldr	r1, [r4, #32]
 80047ba:	2301      	movs	r3, #1
 80047bc:	4628      	mov	r0, r5
 80047be:	47b0      	blx	r6
 80047c0:	1c41      	adds	r1, r0, #1
 80047c2:	d1c7      	bne.n	8004754 <__sflush_r+0x34>
 80047c4:	682b      	ldr	r3, [r5, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d0c4      	beq.n	8004754 <__sflush_r+0x34>
 80047ca:	2b1d      	cmp	r3, #29
 80047cc:	d001      	beq.n	80047d2 <__sflush_r+0xb2>
 80047ce:	2b16      	cmp	r3, #22
 80047d0:	d101      	bne.n	80047d6 <__sflush_r+0xb6>
 80047d2:	602f      	str	r7, [r5, #0]
 80047d4:	e7b1      	b.n	800473a <__sflush_r+0x1a>
 80047d6:	89a3      	ldrh	r3, [r4, #12]
 80047d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047dc:	81a3      	strh	r3, [r4, #12]
 80047de:	e7ad      	b.n	800473c <__sflush_r+0x1c>
 80047e0:	690f      	ldr	r7, [r1, #16]
 80047e2:	2f00      	cmp	r7, #0
 80047e4:	d0a9      	beq.n	800473a <__sflush_r+0x1a>
 80047e6:	0793      	lsls	r3, r2, #30
 80047e8:	680e      	ldr	r6, [r1, #0]
 80047ea:	bf08      	it	eq
 80047ec:	694b      	ldreq	r3, [r1, #20]
 80047ee:	600f      	str	r7, [r1, #0]
 80047f0:	bf18      	it	ne
 80047f2:	2300      	movne	r3, #0
 80047f4:	eba6 0807 	sub.w	r8, r6, r7
 80047f8:	608b      	str	r3, [r1, #8]
 80047fa:	f1b8 0f00 	cmp.w	r8, #0
 80047fe:	dd9c      	ble.n	800473a <__sflush_r+0x1a>
 8004800:	6a21      	ldr	r1, [r4, #32]
 8004802:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004804:	4643      	mov	r3, r8
 8004806:	463a      	mov	r2, r7
 8004808:	4628      	mov	r0, r5
 800480a:	47b0      	blx	r6
 800480c:	2800      	cmp	r0, #0
 800480e:	dc06      	bgt.n	800481e <__sflush_r+0xfe>
 8004810:	89a3      	ldrh	r3, [r4, #12]
 8004812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004816:	81a3      	strh	r3, [r4, #12]
 8004818:	f04f 30ff 	mov.w	r0, #4294967295
 800481c:	e78e      	b.n	800473c <__sflush_r+0x1c>
 800481e:	4407      	add	r7, r0
 8004820:	eba8 0800 	sub.w	r8, r8, r0
 8004824:	e7e9      	b.n	80047fa <__sflush_r+0xda>
 8004826:	bf00      	nop
 8004828:	20400001 	.word	0x20400001

0800482c <_fflush_r>:
 800482c:	b538      	push	{r3, r4, r5, lr}
 800482e:	690b      	ldr	r3, [r1, #16]
 8004830:	4605      	mov	r5, r0
 8004832:	460c      	mov	r4, r1
 8004834:	b913      	cbnz	r3, 800483c <_fflush_r+0x10>
 8004836:	2500      	movs	r5, #0
 8004838:	4628      	mov	r0, r5
 800483a:	bd38      	pop	{r3, r4, r5, pc}
 800483c:	b118      	cbz	r0, 8004846 <_fflush_r+0x1a>
 800483e:	6983      	ldr	r3, [r0, #24]
 8004840:	b90b      	cbnz	r3, 8004846 <_fflush_r+0x1a>
 8004842:	f000 f887 	bl	8004954 <__sinit>
 8004846:	4b14      	ldr	r3, [pc, #80]	; (8004898 <_fflush_r+0x6c>)
 8004848:	429c      	cmp	r4, r3
 800484a:	d11b      	bne.n	8004884 <_fflush_r+0x58>
 800484c:	686c      	ldr	r4, [r5, #4]
 800484e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d0ef      	beq.n	8004836 <_fflush_r+0xa>
 8004856:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004858:	07d0      	lsls	r0, r2, #31
 800485a:	d404      	bmi.n	8004866 <_fflush_r+0x3a>
 800485c:	0599      	lsls	r1, r3, #22
 800485e:	d402      	bmi.n	8004866 <_fflush_r+0x3a>
 8004860:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004862:	f000 f915 	bl	8004a90 <__retarget_lock_acquire_recursive>
 8004866:	4628      	mov	r0, r5
 8004868:	4621      	mov	r1, r4
 800486a:	f7ff ff59 	bl	8004720 <__sflush_r>
 800486e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004870:	07da      	lsls	r2, r3, #31
 8004872:	4605      	mov	r5, r0
 8004874:	d4e0      	bmi.n	8004838 <_fflush_r+0xc>
 8004876:	89a3      	ldrh	r3, [r4, #12]
 8004878:	059b      	lsls	r3, r3, #22
 800487a:	d4dd      	bmi.n	8004838 <_fflush_r+0xc>
 800487c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800487e:	f000 f908 	bl	8004a92 <__retarget_lock_release_recursive>
 8004882:	e7d9      	b.n	8004838 <_fflush_r+0xc>
 8004884:	4b05      	ldr	r3, [pc, #20]	; (800489c <_fflush_r+0x70>)
 8004886:	429c      	cmp	r4, r3
 8004888:	d101      	bne.n	800488e <_fflush_r+0x62>
 800488a:	68ac      	ldr	r4, [r5, #8]
 800488c:	e7df      	b.n	800484e <_fflush_r+0x22>
 800488e:	4b04      	ldr	r3, [pc, #16]	; (80048a0 <_fflush_r+0x74>)
 8004890:	429c      	cmp	r4, r3
 8004892:	bf08      	it	eq
 8004894:	68ec      	ldreq	r4, [r5, #12]
 8004896:	e7da      	b.n	800484e <_fflush_r+0x22>
 8004898:	080057ec 	.word	0x080057ec
 800489c:	0800580c 	.word	0x0800580c
 80048a0:	080057cc 	.word	0x080057cc

080048a4 <std>:
 80048a4:	2300      	movs	r3, #0
 80048a6:	b510      	push	{r4, lr}
 80048a8:	4604      	mov	r4, r0
 80048aa:	e9c0 3300 	strd	r3, r3, [r0]
 80048ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048b2:	6083      	str	r3, [r0, #8]
 80048b4:	8181      	strh	r1, [r0, #12]
 80048b6:	6643      	str	r3, [r0, #100]	; 0x64
 80048b8:	81c2      	strh	r2, [r0, #14]
 80048ba:	6183      	str	r3, [r0, #24]
 80048bc:	4619      	mov	r1, r3
 80048be:	2208      	movs	r2, #8
 80048c0:	305c      	adds	r0, #92	; 0x5c
 80048c2:	f7ff fda9 	bl	8004418 <memset>
 80048c6:	4b05      	ldr	r3, [pc, #20]	; (80048dc <std+0x38>)
 80048c8:	6263      	str	r3, [r4, #36]	; 0x24
 80048ca:	4b05      	ldr	r3, [pc, #20]	; (80048e0 <std+0x3c>)
 80048cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80048ce:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <std+0x40>)
 80048d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80048d2:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <std+0x44>)
 80048d4:	6224      	str	r4, [r4, #32]
 80048d6:	6323      	str	r3, [r4, #48]	; 0x30
 80048d8:	bd10      	pop	{r4, pc}
 80048da:	bf00      	nop
 80048dc:	0800533d 	.word	0x0800533d
 80048e0:	0800535f 	.word	0x0800535f
 80048e4:	08005397 	.word	0x08005397
 80048e8:	080053bb 	.word	0x080053bb

080048ec <_cleanup_r>:
 80048ec:	4901      	ldr	r1, [pc, #4]	; (80048f4 <_cleanup_r+0x8>)
 80048ee:	f000 b8af 	b.w	8004a50 <_fwalk_reent>
 80048f2:	bf00      	nop
 80048f4:	0800482d 	.word	0x0800482d

080048f8 <__sfmoreglue>:
 80048f8:	b570      	push	{r4, r5, r6, lr}
 80048fa:	1e4a      	subs	r2, r1, #1
 80048fc:	2568      	movs	r5, #104	; 0x68
 80048fe:	4355      	muls	r5, r2
 8004900:	460e      	mov	r6, r1
 8004902:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004906:	f000 f979 	bl	8004bfc <_malloc_r>
 800490a:	4604      	mov	r4, r0
 800490c:	b140      	cbz	r0, 8004920 <__sfmoreglue+0x28>
 800490e:	2100      	movs	r1, #0
 8004910:	e9c0 1600 	strd	r1, r6, [r0]
 8004914:	300c      	adds	r0, #12
 8004916:	60a0      	str	r0, [r4, #8]
 8004918:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800491c:	f7ff fd7c 	bl	8004418 <memset>
 8004920:	4620      	mov	r0, r4
 8004922:	bd70      	pop	{r4, r5, r6, pc}

08004924 <__sfp_lock_acquire>:
 8004924:	4801      	ldr	r0, [pc, #4]	; (800492c <__sfp_lock_acquire+0x8>)
 8004926:	f000 b8b3 	b.w	8004a90 <__retarget_lock_acquire_recursive>
 800492a:	bf00      	nop
 800492c:	200005b4 	.word	0x200005b4

08004930 <__sfp_lock_release>:
 8004930:	4801      	ldr	r0, [pc, #4]	; (8004938 <__sfp_lock_release+0x8>)
 8004932:	f000 b8ae 	b.w	8004a92 <__retarget_lock_release_recursive>
 8004936:	bf00      	nop
 8004938:	200005b4 	.word	0x200005b4

0800493c <__sinit_lock_acquire>:
 800493c:	4801      	ldr	r0, [pc, #4]	; (8004944 <__sinit_lock_acquire+0x8>)
 800493e:	f000 b8a7 	b.w	8004a90 <__retarget_lock_acquire_recursive>
 8004942:	bf00      	nop
 8004944:	200005af 	.word	0x200005af

08004948 <__sinit_lock_release>:
 8004948:	4801      	ldr	r0, [pc, #4]	; (8004950 <__sinit_lock_release+0x8>)
 800494a:	f000 b8a2 	b.w	8004a92 <__retarget_lock_release_recursive>
 800494e:	bf00      	nop
 8004950:	200005af 	.word	0x200005af

08004954 <__sinit>:
 8004954:	b510      	push	{r4, lr}
 8004956:	4604      	mov	r4, r0
 8004958:	f7ff fff0 	bl	800493c <__sinit_lock_acquire>
 800495c:	69a3      	ldr	r3, [r4, #24]
 800495e:	b11b      	cbz	r3, 8004968 <__sinit+0x14>
 8004960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004964:	f7ff bff0 	b.w	8004948 <__sinit_lock_release>
 8004968:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800496c:	6523      	str	r3, [r4, #80]	; 0x50
 800496e:	4b13      	ldr	r3, [pc, #76]	; (80049bc <__sinit+0x68>)
 8004970:	4a13      	ldr	r2, [pc, #76]	; (80049c0 <__sinit+0x6c>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	62a2      	str	r2, [r4, #40]	; 0x28
 8004976:	42a3      	cmp	r3, r4
 8004978:	bf04      	itt	eq
 800497a:	2301      	moveq	r3, #1
 800497c:	61a3      	streq	r3, [r4, #24]
 800497e:	4620      	mov	r0, r4
 8004980:	f000 f820 	bl	80049c4 <__sfp>
 8004984:	6060      	str	r0, [r4, #4]
 8004986:	4620      	mov	r0, r4
 8004988:	f000 f81c 	bl	80049c4 <__sfp>
 800498c:	60a0      	str	r0, [r4, #8]
 800498e:	4620      	mov	r0, r4
 8004990:	f000 f818 	bl	80049c4 <__sfp>
 8004994:	2200      	movs	r2, #0
 8004996:	60e0      	str	r0, [r4, #12]
 8004998:	2104      	movs	r1, #4
 800499a:	6860      	ldr	r0, [r4, #4]
 800499c:	f7ff ff82 	bl	80048a4 <std>
 80049a0:	68a0      	ldr	r0, [r4, #8]
 80049a2:	2201      	movs	r2, #1
 80049a4:	2109      	movs	r1, #9
 80049a6:	f7ff ff7d 	bl	80048a4 <std>
 80049aa:	68e0      	ldr	r0, [r4, #12]
 80049ac:	2202      	movs	r2, #2
 80049ae:	2112      	movs	r1, #18
 80049b0:	f7ff ff78 	bl	80048a4 <std>
 80049b4:	2301      	movs	r3, #1
 80049b6:	61a3      	str	r3, [r4, #24]
 80049b8:	e7d2      	b.n	8004960 <__sinit+0xc>
 80049ba:	bf00      	nop
 80049bc:	080057c8 	.word	0x080057c8
 80049c0:	080048ed 	.word	0x080048ed

080049c4 <__sfp>:
 80049c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049c6:	4607      	mov	r7, r0
 80049c8:	f7ff ffac 	bl	8004924 <__sfp_lock_acquire>
 80049cc:	4b1e      	ldr	r3, [pc, #120]	; (8004a48 <__sfp+0x84>)
 80049ce:	681e      	ldr	r6, [r3, #0]
 80049d0:	69b3      	ldr	r3, [r6, #24]
 80049d2:	b913      	cbnz	r3, 80049da <__sfp+0x16>
 80049d4:	4630      	mov	r0, r6
 80049d6:	f7ff ffbd 	bl	8004954 <__sinit>
 80049da:	3648      	adds	r6, #72	; 0x48
 80049dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80049e0:	3b01      	subs	r3, #1
 80049e2:	d503      	bpl.n	80049ec <__sfp+0x28>
 80049e4:	6833      	ldr	r3, [r6, #0]
 80049e6:	b30b      	cbz	r3, 8004a2c <__sfp+0x68>
 80049e8:	6836      	ldr	r6, [r6, #0]
 80049ea:	e7f7      	b.n	80049dc <__sfp+0x18>
 80049ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80049f0:	b9d5      	cbnz	r5, 8004a28 <__sfp+0x64>
 80049f2:	4b16      	ldr	r3, [pc, #88]	; (8004a4c <__sfp+0x88>)
 80049f4:	60e3      	str	r3, [r4, #12]
 80049f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80049fa:	6665      	str	r5, [r4, #100]	; 0x64
 80049fc:	f000 f847 	bl	8004a8e <__retarget_lock_init_recursive>
 8004a00:	f7ff ff96 	bl	8004930 <__sfp_lock_release>
 8004a04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004a08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004a0c:	6025      	str	r5, [r4, #0]
 8004a0e:	61a5      	str	r5, [r4, #24]
 8004a10:	2208      	movs	r2, #8
 8004a12:	4629      	mov	r1, r5
 8004a14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004a18:	f7ff fcfe 	bl	8004418 <memset>
 8004a1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004a20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004a24:	4620      	mov	r0, r4
 8004a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a28:	3468      	adds	r4, #104	; 0x68
 8004a2a:	e7d9      	b.n	80049e0 <__sfp+0x1c>
 8004a2c:	2104      	movs	r1, #4
 8004a2e:	4638      	mov	r0, r7
 8004a30:	f7ff ff62 	bl	80048f8 <__sfmoreglue>
 8004a34:	4604      	mov	r4, r0
 8004a36:	6030      	str	r0, [r6, #0]
 8004a38:	2800      	cmp	r0, #0
 8004a3a:	d1d5      	bne.n	80049e8 <__sfp+0x24>
 8004a3c:	f7ff ff78 	bl	8004930 <__sfp_lock_release>
 8004a40:	230c      	movs	r3, #12
 8004a42:	603b      	str	r3, [r7, #0]
 8004a44:	e7ee      	b.n	8004a24 <__sfp+0x60>
 8004a46:	bf00      	nop
 8004a48:	080057c8 	.word	0x080057c8
 8004a4c:	ffff0001 	.word	0xffff0001

08004a50 <_fwalk_reent>:
 8004a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a54:	4606      	mov	r6, r0
 8004a56:	4688      	mov	r8, r1
 8004a58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004a5c:	2700      	movs	r7, #0
 8004a5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a62:	f1b9 0901 	subs.w	r9, r9, #1
 8004a66:	d505      	bpl.n	8004a74 <_fwalk_reent+0x24>
 8004a68:	6824      	ldr	r4, [r4, #0]
 8004a6a:	2c00      	cmp	r4, #0
 8004a6c:	d1f7      	bne.n	8004a5e <_fwalk_reent+0xe>
 8004a6e:	4638      	mov	r0, r7
 8004a70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a74:	89ab      	ldrh	r3, [r5, #12]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d907      	bls.n	8004a8a <_fwalk_reent+0x3a>
 8004a7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	d003      	beq.n	8004a8a <_fwalk_reent+0x3a>
 8004a82:	4629      	mov	r1, r5
 8004a84:	4630      	mov	r0, r6
 8004a86:	47c0      	blx	r8
 8004a88:	4307      	orrs	r7, r0
 8004a8a:	3568      	adds	r5, #104	; 0x68
 8004a8c:	e7e9      	b.n	8004a62 <_fwalk_reent+0x12>

08004a8e <__retarget_lock_init_recursive>:
 8004a8e:	4770      	bx	lr

08004a90 <__retarget_lock_acquire_recursive>:
 8004a90:	4770      	bx	lr

08004a92 <__retarget_lock_release_recursive>:
 8004a92:	4770      	bx	lr

08004a94 <__swhatbuf_r>:
 8004a94:	b570      	push	{r4, r5, r6, lr}
 8004a96:	460e      	mov	r6, r1
 8004a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a9c:	2900      	cmp	r1, #0
 8004a9e:	b096      	sub	sp, #88	; 0x58
 8004aa0:	4614      	mov	r4, r2
 8004aa2:	461d      	mov	r5, r3
 8004aa4:	da07      	bge.n	8004ab6 <__swhatbuf_r+0x22>
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	602b      	str	r3, [r5, #0]
 8004aaa:	89b3      	ldrh	r3, [r6, #12]
 8004aac:	061a      	lsls	r2, r3, #24
 8004aae:	d410      	bmi.n	8004ad2 <__swhatbuf_r+0x3e>
 8004ab0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ab4:	e00e      	b.n	8004ad4 <__swhatbuf_r+0x40>
 8004ab6:	466a      	mov	r2, sp
 8004ab8:	f000 fca6 	bl	8005408 <_fstat_r>
 8004abc:	2800      	cmp	r0, #0
 8004abe:	dbf2      	blt.n	8004aa6 <__swhatbuf_r+0x12>
 8004ac0:	9a01      	ldr	r2, [sp, #4]
 8004ac2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ac6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004aca:	425a      	negs	r2, r3
 8004acc:	415a      	adcs	r2, r3
 8004ace:	602a      	str	r2, [r5, #0]
 8004ad0:	e7ee      	b.n	8004ab0 <__swhatbuf_r+0x1c>
 8004ad2:	2340      	movs	r3, #64	; 0x40
 8004ad4:	2000      	movs	r0, #0
 8004ad6:	6023      	str	r3, [r4, #0]
 8004ad8:	b016      	add	sp, #88	; 0x58
 8004ada:	bd70      	pop	{r4, r5, r6, pc}

08004adc <__smakebuf_r>:
 8004adc:	898b      	ldrh	r3, [r1, #12]
 8004ade:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ae0:	079d      	lsls	r5, r3, #30
 8004ae2:	4606      	mov	r6, r0
 8004ae4:	460c      	mov	r4, r1
 8004ae6:	d507      	bpl.n	8004af8 <__smakebuf_r+0x1c>
 8004ae8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004aec:	6023      	str	r3, [r4, #0]
 8004aee:	6123      	str	r3, [r4, #16]
 8004af0:	2301      	movs	r3, #1
 8004af2:	6163      	str	r3, [r4, #20]
 8004af4:	b002      	add	sp, #8
 8004af6:	bd70      	pop	{r4, r5, r6, pc}
 8004af8:	ab01      	add	r3, sp, #4
 8004afa:	466a      	mov	r2, sp
 8004afc:	f7ff ffca 	bl	8004a94 <__swhatbuf_r>
 8004b00:	9900      	ldr	r1, [sp, #0]
 8004b02:	4605      	mov	r5, r0
 8004b04:	4630      	mov	r0, r6
 8004b06:	f000 f879 	bl	8004bfc <_malloc_r>
 8004b0a:	b948      	cbnz	r0, 8004b20 <__smakebuf_r+0x44>
 8004b0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b10:	059a      	lsls	r2, r3, #22
 8004b12:	d4ef      	bmi.n	8004af4 <__smakebuf_r+0x18>
 8004b14:	f023 0303 	bic.w	r3, r3, #3
 8004b18:	f043 0302 	orr.w	r3, r3, #2
 8004b1c:	81a3      	strh	r3, [r4, #12]
 8004b1e:	e7e3      	b.n	8004ae8 <__smakebuf_r+0xc>
 8004b20:	4b0d      	ldr	r3, [pc, #52]	; (8004b58 <__smakebuf_r+0x7c>)
 8004b22:	62b3      	str	r3, [r6, #40]	; 0x28
 8004b24:	89a3      	ldrh	r3, [r4, #12]
 8004b26:	6020      	str	r0, [r4, #0]
 8004b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b2c:	81a3      	strh	r3, [r4, #12]
 8004b2e:	9b00      	ldr	r3, [sp, #0]
 8004b30:	6163      	str	r3, [r4, #20]
 8004b32:	9b01      	ldr	r3, [sp, #4]
 8004b34:	6120      	str	r0, [r4, #16]
 8004b36:	b15b      	cbz	r3, 8004b50 <__smakebuf_r+0x74>
 8004b38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b3c:	4630      	mov	r0, r6
 8004b3e:	f000 fc75 	bl	800542c <_isatty_r>
 8004b42:	b128      	cbz	r0, 8004b50 <__smakebuf_r+0x74>
 8004b44:	89a3      	ldrh	r3, [r4, #12]
 8004b46:	f023 0303 	bic.w	r3, r3, #3
 8004b4a:	f043 0301 	orr.w	r3, r3, #1
 8004b4e:	81a3      	strh	r3, [r4, #12]
 8004b50:	89a0      	ldrh	r0, [r4, #12]
 8004b52:	4305      	orrs	r5, r0
 8004b54:	81a5      	strh	r5, [r4, #12]
 8004b56:	e7cd      	b.n	8004af4 <__smakebuf_r+0x18>
 8004b58:	080048ed 	.word	0x080048ed

08004b5c <_free_r>:
 8004b5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b5e:	2900      	cmp	r1, #0
 8004b60:	d048      	beq.n	8004bf4 <_free_r+0x98>
 8004b62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b66:	9001      	str	r0, [sp, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f1a1 0404 	sub.w	r4, r1, #4
 8004b6e:	bfb8      	it	lt
 8004b70:	18e4      	addlt	r4, r4, r3
 8004b72:	f000 fc7d 	bl	8005470 <__malloc_lock>
 8004b76:	4a20      	ldr	r2, [pc, #128]	; (8004bf8 <_free_r+0x9c>)
 8004b78:	9801      	ldr	r0, [sp, #4]
 8004b7a:	6813      	ldr	r3, [r2, #0]
 8004b7c:	4615      	mov	r5, r2
 8004b7e:	b933      	cbnz	r3, 8004b8e <_free_r+0x32>
 8004b80:	6063      	str	r3, [r4, #4]
 8004b82:	6014      	str	r4, [r2, #0]
 8004b84:	b003      	add	sp, #12
 8004b86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b8a:	f000 bc77 	b.w	800547c <__malloc_unlock>
 8004b8e:	42a3      	cmp	r3, r4
 8004b90:	d90b      	bls.n	8004baa <_free_r+0x4e>
 8004b92:	6821      	ldr	r1, [r4, #0]
 8004b94:	1862      	adds	r2, r4, r1
 8004b96:	4293      	cmp	r3, r2
 8004b98:	bf04      	itt	eq
 8004b9a:	681a      	ldreq	r2, [r3, #0]
 8004b9c:	685b      	ldreq	r3, [r3, #4]
 8004b9e:	6063      	str	r3, [r4, #4]
 8004ba0:	bf04      	itt	eq
 8004ba2:	1852      	addeq	r2, r2, r1
 8004ba4:	6022      	streq	r2, [r4, #0]
 8004ba6:	602c      	str	r4, [r5, #0]
 8004ba8:	e7ec      	b.n	8004b84 <_free_r+0x28>
 8004baa:	461a      	mov	r2, r3
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	b10b      	cbz	r3, 8004bb4 <_free_r+0x58>
 8004bb0:	42a3      	cmp	r3, r4
 8004bb2:	d9fa      	bls.n	8004baa <_free_r+0x4e>
 8004bb4:	6811      	ldr	r1, [r2, #0]
 8004bb6:	1855      	adds	r5, r2, r1
 8004bb8:	42a5      	cmp	r5, r4
 8004bba:	d10b      	bne.n	8004bd4 <_free_r+0x78>
 8004bbc:	6824      	ldr	r4, [r4, #0]
 8004bbe:	4421      	add	r1, r4
 8004bc0:	1854      	adds	r4, r2, r1
 8004bc2:	42a3      	cmp	r3, r4
 8004bc4:	6011      	str	r1, [r2, #0]
 8004bc6:	d1dd      	bne.n	8004b84 <_free_r+0x28>
 8004bc8:	681c      	ldr	r4, [r3, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	6053      	str	r3, [r2, #4]
 8004bce:	4421      	add	r1, r4
 8004bd0:	6011      	str	r1, [r2, #0]
 8004bd2:	e7d7      	b.n	8004b84 <_free_r+0x28>
 8004bd4:	d902      	bls.n	8004bdc <_free_r+0x80>
 8004bd6:	230c      	movs	r3, #12
 8004bd8:	6003      	str	r3, [r0, #0]
 8004bda:	e7d3      	b.n	8004b84 <_free_r+0x28>
 8004bdc:	6825      	ldr	r5, [r4, #0]
 8004bde:	1961      	adds	r1, r4, r5
 8004be0:	428b      	cmp	r3, r1
 8004be2:	bf04      	itt	eq
 8004be4:	6819      	ldreq	r1, [r3, #0]
 8004be6:	685b      	ldreq	r3, [r3, #4]
 8004be8:	6063      	str	r3, [r4, #4]
 8004bea:	bf04      	itt	eq
 8004bec:	1949      	addeq	r1, r1, r5
 8004bee:	6021      	streq	r1, [r4, #0]
 8004bf0:	6054      	str	r4, [r2, #4]
 8004bf2:	e7c7      	b.n	8004b84 <_free_r+0x28>
 8004bf4:	b003      	add	sp, #12
 8004bf6:	bd30      	pop	{r4, r5, pc}
 8004bf8:	20000498 	.word	0x20000498

08004bfc <_malloc_r>:
 8004bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bfe:	1ccd      	adds	r5, r1, #3
 8004c00:	f025 0503 	bic.w	r5, r5, #3
 8004c04:	3508      	adds	r5, #8
 8004c06:	2d0c      	cmp	r5, #12
 8004c08:	bf38      	it	cc
 8004c0a:	250c      	movcc	r5, #12
 8004c0c:	2d00      	cmp	r5, #0
 8004c0e:	4606      	mov	r6, r0
 8004c10:	db01      	blt.n	8004c16 <_malloc_r+0x1a>
 8004c12:	42a9      	cmp	r1, r5
 8004c14:	d903      	bls.n	8004c1e <_malloc_r+0x22>
 8004c16:	230c      	movs	r3, #12
 8004c18:	6033      	str	r3, [r6, #0]
 8004c1a:	2000      	movs	r0, #0
 8004c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c1e:	f000 fc27 	bl	8005470 <__malloc_lock>
 8004c22:	4921      	ldr	r1, [pc, #132]	; (8004ca8 <_malloc_r+0xac>)
 8004c24:	680a      	ldr	r2, [r1, #0]
 8004c26:	4614      	mov	r4, r2
 8004c28:	b99c      	cbnz	r4, 8004c52 <_malloc_r+0x56>
 8004c2a:	4f20      	ldr	r7, [pc, #128]	; (8004cac <_malloc_r+0xb0>)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	b923      	cbnz	r3, 8004c3a <_malloc_r+0x3e>
 8004c30:	4621      	mov	r1, r4
 8004c32:	4630      	mov	r0, r6
 8004c34:	f000 fb72 	bl	800531c <_sbrk_r>
 8004c38:	6038      	str	r0, [r7, #0]
 8004c3a:	4629      	mov	r1, r5
 8004c3c:	4630      	mov	r0, r6
 8004c3e:	f000 fb6d 	bl	800531c <_sbrk_r>
 8004c42:	1c43      	adds	r3, r0, #1
 8004c44:	d123      	bne.n	8004c8e <_malloc_r+0x92>
 8004c46:	230c      	movs	r3, #12
 8004c48:	6033      	str	r3, [r6, #0]
 8004c4a:	4630      	mov	r0, r6
 8004c4c:	f000 fc16 	bl	800547c <__malloc_unlock>
 8004c50:	e7e3      	b.n	8004c1a <_malloc_r+0x1e>
 8004c52:	6823      	ldr	r3, [r4, #0]
 8004c54:	1b5b      	subs	r3, r3, r5
 8004c56:	d417      	bmi.n	8004c88 <_malloc_r+0x8c>
 8004c58:	2b0b      	cmp	r3, #11
 8004c5a:	d903      	bls.n	8004c64 <_malloc_r+0x68>
 8004c5c:	6023      	str	r3, [r4, #0]
 8004c5e:	441c      	add	r4, r3
 8004c60:	6025      	str	r5, [r4, #0]
 8004c62:	e004      	b.n	8004c6e <_malloc_r+0x72>
 8004c64:	6863      	ldr	r3, [r4, #4]
 8004c66:	42a2      	cmp	r2, r4
 8004c68:	bf0c      	ite	eq
 8004c6a:	600b      	streq	r3, [r1, #0]
 8004c6c:	6053      	strne	r3, [r2, #4]
 8004c6e:	4630      	mov	r0, r6
 8004c70:	f000 fc04 	bl	800547c <__malloc_unlock>
 8004c74:	f104 000b 	add.w	r0, r4, #11
 8004c78:	1d23      	adds	r3, r4, #4
 8004c7a:	f020 0007 	bic.w	r0, r0, #7
 8004c7e:	1ac2      	subs	r2, r0, r3
 8004c80:	d0cc      	beq.n	8004c1c <_malloc_r+0x20>
 8004c82:	1a1b      	subs	r3, r3, r0
 8004c84:	50a3      	str	r3, [r4, r2]
 8004c86:	e7c9      	b.n	8004c1c <_malloc_r+0x20>
 8004c88:	4622      	mov	r2, r4
 8004c8a:	6864      	ldr	r4, [r4, #4]
 8004c8c:	e7cc      	b.n	8004c28 <_malloc_r+0x2c>
 8004c8e:	1cc4      	adds	r4, r0, #3
 8004c90:	f024 0403 	bic.w	r4, r4, #3
 8004c94:	42a0      	cmp	r0, r4
 8004c96:	d0e3      	beq.n	8004c60 <_malloc_r+0x64>
 8004c98:	1a21      	subs	r1, r4, r0
 8004c9a:	4630      	mov	r0, r6
 8004c9c:	f000 fb3e 	bl	800531c <_sbrk_r>
 8004ca0:	3001      	adds	r0, #1
 8004ca2:	d1dd      	bne.n	8004c60 <_malloc_r+0x64>
 8004ca4:	e7cf      	b.n	8004c46 <_malloc_r+0x4a>
 8004ca6:	bf00      	nop
 8004ca8:	20000498 	.word	0x20000498
 8004cac:	2000049c 	.word	0x2000049c

08004cb0 <__sfputc_r>:
 8004cb0:	6893      	ldr	r3, [r2, #8]
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	b410      	push	{r4}
 8004cb8:	6093      	str	r3, [r2, #8]
 8004cba:	da08      	bge.n	8004cce <__sfputc_r+0x1e>
 8004cbc:	6994      	ldr	r4, [r2, #24]
 8004cbe:	42a3      	cmp	r3, r4
 8004cc0:	db01      	blt.n	8004cc6 <__sfputc_r+0x16>
 8004cc2:	290a      	cmp	r1, #10
 8004cc4:	d103      	bne.n	8004cce <__sfputc_r+0x1e>
 8004cc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004cca:	f7ff bc69 	b.w	80045a0 <__swbuf_r>
 8004cce:	6813      	ldr	r3, [r2, #0]
 8004cd0:	1c58      	adds	r0, r3, #1
 8004cd2:	6010      	str	r0, [r2, #0]
 8004cd4:	7019      	strb	r1, [r3, #0]
 8004cd6:	4608      	mov	r0, r1
 8004cd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <__sfputs_r>:
 8004cde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce0:	4606      	mov	r6, r0
 8004ce2:	460f      	mov	r7, r1
 8004ce4:	4614      	mov	r4, r2
 8004ce6:	18d5      	adds	r5, r2, r3
 8004ce8:	42ac      	cmp	r4, r5
 8004cea:	d101      	bne.n	8004cf0 <__sfputs_r+0x12>
 8004cec:	2000      	movs	r0, #0
 8004cee:	e007      	b.n	8004d00 <__sfputs_r+0x22>
 8004cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cf4:	463a      	mov	r2, r7
 8004cf6:	4630      	mov	r0, r6
 8004cf8:	f7ff ffda 	bl	8004cb0 <__sfputc_r>
 8004cfc:	1c43      	adds	r3, r0, #1
 8004cfe:	d1f3      	bne.n	8004ce8 <__sfputs_r+0xa>
 8004d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d04 <_vfiprintf_r>:
 8004d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d08:	460d      	mov	r5, r1
 8004d0a:	b09d      	sub	sp, #116	; 0x74
 8004d0c:	4614      	mov	r4, r2
 8004d0e:	4698      	mov	r8, r3
 8004d10:	4606      	mov	r6, r0
 8004d12:	b118      	cbz	r0, 8004d1c <_vfiprintf_r+0x18>
 8004d14:	6983      	ldr	r3, [r0, #24]
 8004d16:	b90b      	cbnz	r3, 8004d1c <_vfiprintf_r+0x18>
 8004d18:	f7ff fe1c 	bl	8004954 <__sinit>
 8004d1c:	4b89      	ldr	r3, [pc, #548]	; (8004f44 <_vfiprintf_r+0x240>)
 8004d1e:	429d      	cmp	r5, r3
 8004d20:	d11b      	bne.n	8004d5a <_vfiprintf_r+0x56>
 8004d22:	6875      	ldr	r5, [r6, #4]
 8004d24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d26:	07d9      	lsls	r1, r3, #31
 8004d28:	d405      	bmi.n	8004d36 <_vfiprintf_r+0x32>
 8004d2a:	89ab      	ldrh	r3, [r5, #12]
 8004d2c:	059a      	lsls	r2, r3, #22
 8004d2e:	d402      	bmi.n	8004d36 <_vfiprintf_r+0x32>
 8004d30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d32:	f7ff fead 	bl	8004a90 <__retarget_lock_acquire_recursive>
 8004d36:	89ab      	ldrh	r3, [r5, #12]
 8004d38:	071b      	lsls	r3, r3, #28
 8004d3a:	d501      	bpl.n	8004d40 <_vfiprintf_r+0x3c>
 8004d3c:	692b      	ldr	r3, [r5, #16]
 8004d3e:	b9eb      	cbnz	r3, 8004d7c <_vfiprintf_r+0x78>
 8004d40:	4629      	mov	r1, r5
 8004d42:	4630      	mov	r0, r6
 8004d44:	f7ff fc7e 	bl	8004644 <__swsetup_r>
 8004d48:	b1c0      	cbz	r0, 8004d7c <_vfiprintf_r+0x78>
 8004d4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d4c:	07dc      	lsls	r4, r3, #31
 8004d4e:	d50e      	bpl.n	8004d6e <_vfiprintf_r+0x6a>
 8004d50:	f04f 30ff 	mov.w	r0, #4294967295
 8004d54:	b01d      	add	sp, #116	; 0x74
 8004d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d5a:	4b7b      	ldr	r3, [pc, #492]	; (8004f48 <_vfiprintf_r+0x244>)
 8004d5c:	429d      	cmp	r5, r3
 8004d5e:	d101      	bne.n	8004d64 <_vfiprintf_r+0x60>
 8004d60:	68b5      	ldr	r5, [r6, #8]
 8004d62:	e7df      	b.n	8004d24 <_vfiprintf_r+0x20>
 8004d64:	4b79      	ldr	r3, [pc, #484]	; (8004f4c <_vfiprintf_r+0x248>)
 8004d66:	429d      	cmp	r5, r3
 8004d68:	bf08      	it	eq
 8004d6a:	68f5      	ldreq	r5, [r6, #12]
 8004d6c:	e7da      	b.n	8004d24 <_vfiprintf_r+0x20>
 8004d6e:	89ab      	ldrh	r3, [r5, #12]
 8004d70:	0598      	lsls	r0, r3, #22
 8004d72:	d4ed      	bmi.n	8004d50 <_vfiprintf_r+0x4c>
 8004d74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d76:	f7ff fe8c 	bl	8004a92 <__retarget_lock_release_recursive>
 8004d7a:	e7e9      	b.n	8004d50 <_vfiprintf_r+0x4c>
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8004d80:	2320      	movs	r3, #32
 8004d82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d86:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d8a:	2330      	movs	r3, #48	; 0x30
 8004d8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004f50 <_vfiprintf_r+0x24c>
 8004d90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d94:	f04f 0901 	mov.w	r9, #1
 8004d98:	4623      	mov	r3, r4
 8004d9a:	469a      	mov	sl, r3
 8004d9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004da0:	b10a      	cbz	r2, 8004da6 <_vfiprintf_r+0xa2>
 8004da2:	2a25      	cmp	r2, #37	; 0x25
 8004da4:	d1f9      	bne.n	8004d9a <_vfiprintf_r+0x96>
 8004da6:	ebba 0b04 	subs.w	fp, sl, r4
 8004daa:	d00b      	beq.n	8004dc4 <_vfiprintf_r+0xc0>
 8004dac:	465b      	mov	r3, fp
 8004dae:	4622      	mov	r2, r4
 8004db0:	4629      	mov	r1, r5
 8004db2:	4630      	mov	r0, r6
 8004db4:	f7ff ff93 	bl	8004cde <__sfputs_r>
 8004db8:	3001      	adds	r0, #1
 8004dba:	f000 80aa 	beq.w	8004f12 <_vfiprintf_r+0x20e>
 8004dbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004dc0:	445a      	add	r2, fp
 8004dc2:	9209      	str	r2, [sp, #36]	; 0x24
 8004dc4:	f89a 3000 	ldrb.w	r3, [sl]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f000 80a2 	beq.w	8004f12 <_vfiprintf_r+0x20e>
 8004dce:	2300      	movs	r3, #0
 8004dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8004dd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004dd8:	f10a 0a01 	add.w	sl, sl, #1
 8004ddc:	9304      	str	r3, [sp, #16]
 8004dde:	9307      	str	r3, [sp, #28]
 8004de0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004de4:	931a      	str	r3, [sp, #104]	; 0x68
 8004de6:	4654      	mov	r4, sl
 8004de8:	2205      	movs	r2, #5
 8004dea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dee:	4858      	ldr	r0, [pc, #352]	; (8004f50 <_vfiprintf_r+0x24c>)
 8004df0:	f7fb fa06 	bl	8000200 <memchr>
 8004df4:	9a04      	ldr	r2, [sp, #16]
 8004df6:	b9d8      	cbnz	r0, 8004e30 <_vfiprintf_r+0x12c>
 8004df8:	06d1      	lsls	r1, r2, #27
 8004dfa:	bf44      	itt	mi
 8004dfc:	2320      	movmi	r3, #32
 8004dfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e02:	0713      	lsls	r3, r2, #28
 8004e04:	bf44      	itt	mi
 8004e06:	232b      	movmi	r3, #43	; 0x2b
 8004e08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e0c:	f89a 3000 	ldrb.w	r3, [sl]
 8004e10:	2b2a      	cmp	r3, #42	; 0x2a
 8004e12:	d015      	beq.n	8004e40 <_vfiprintf_r+0x13c>
 8004e14:	9a07      	ldr	r2, [sp, #28]
 8004e16:	4654      	mov	r4, sl
 8004e18:	2000      	movs	r0, #0
 8004e1a:	f04f 0c0a 	mov.w	ip, #10
 8004e1e:	4621      	mov	r1, r4
 8004e20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e24:	3b30      	subs	r3, #48	; 0x30
 8004e26:	2b09      	cmp	r3, #9
 8004e28:	d94e      	bls.n	8004ec8 <_vfiprintf_r+0x1c4>
 8004e2a:	b1b0      	cbz	r0, 8004e5a <_vfiprintf_r+0x156>
 8004e2c:	9207      	str	r2, [sp, #28]
 8004e2e:	e014      	b.n	8004e5a <_vfiprintf_r+0x156>
 8004e30:	eba0 0308 	sub.w	r3, r0, r8
 8004e34:	fa09 f303 	lsl.w	r3, r9, r3
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	9304      	str	r3, [sp, #16]
 8004e3c:	46a2      	mov	sl, r4
 8004e3e:	e7d2      	b.n	8004de6 <_vfiprintf_r+0xe2>
 8004e40:	9b03      	ldr	r3, [sp, #12]
 8004e42:	1d19      	adds	r1, r3, #4
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	9103      	str	r1, [sp, #12]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	bfbb      	ittet	lt
 8004e4c:	425b      	neglt	r3, r3
 8004e4e:	f042 0202 	orrlt.w	r2, r2, #2
 8004e52:	9307      	strge	r3, [sp, #28]
 8004e54:	9307      	strlt	r3, [sp, #28]
 8004e56:	bfb8      	it	lt
 8004e58:	9204      	strlt	r2, [sp, #16]
 8004e5a:	7823      	ldrb	r3, [r4, #0]
 8004e5c:	2b2e      	cmp	r3, #46	; 0x2e
 8004e5e:	d10c      	bne.n	8004e7a <_vfiprintf_r+0x176>
 8004e60:	7863      	ldrb	r3, [r4, #1]
 8004e62:	2b2a      	cmp	r3, #42	; 0x2a
 8004e64:	d135      	bne.n	8004ed2 <_vfiprintf_r+0x1ce>
 8004e66:	9b03      	ldr	r3, [sp, #12]
 8004e68:	1d1a      	adds	r2, r3, #4
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	9203      	str	r2, [sp, #12]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	bfb8      	it	lt
 8004e72:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e76:	3402      	adds	r4, #2
 8004e78:	9305      	str	r3, [sp, #20]
 8004e7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004f60 <_vfiprintf_r+0x25c>
 8004e7e:	7821      	ldrb	r1, [r4, #0]
 8004e80:	2203      	movs	r2, #3
 8004e82:	4650      	mov	r0, sl
 8004e84:	f7fb f9bc 	bl	8000200 <memchr>
 8004e88:	b140      	cbz	r0, 8004e9c <_vfiprintf_r+0x198>
 8004e8a:	2340      	movs	r3, #64	; 0x40
 8004e8c:	eba0 000a 	sub.w	r0, r0, sl
 8004e90:	fa03 f000 	lsl.w	r0, r3, r0
 8004e94:	9b04      	ldr	r3, [sp, #16]
 8004e96:	4303      	orrs	r3, r0
 8004e98:	3401      	adds	r4, #1
 8004e9a:	9304      	str	r3, [sp, #16]
 8004e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ea0:	482c      	ldr	r0, [pc, #176]	; (8004f54 <_vfiprintf_r+0x250>)
 8004ea2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ea6:	2206      	movs	r2, #6
 8004ea8:	f7fb f9aa 	bl	8000200 <memchr>
 8004eac:	2800      	cmp	r0, #0
 8004eae:	d03f      	beq.n	8004f30 <_vfiprintf_r+0x22c>
 8004eb0:	4b29      	ldr	r3, [pc, #164]	; (8004f58 <_vfiprintf_r+0x254>)
 8004eb2:	bb1b      	cbnz	r3, 8004efc <_vfiprintf_r+0x1f8>
 8004eb4:	9b03      	ldr	r3, [sp, #12]
 8004eb6:	3307      	adds	r3, #7
 8004eb8:	f023 0307 	bic.w	r3, r3, #7
 8004ebc:	3308      	adds	r3, #8
 8004ebe:	9303      	str	r3, [sp, #12]
 8004ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ec2:	443b      	add	r3, r7
 8004ec4:	9309      	str	r3, [sp, #36]	; 0x24
 8004ec6:	e767      	b.n	8004d98 <_vfiprintf_r+0x94>
 8004ec8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ecc:	460c      	mov	r4, r1
 8004ece:	2001      	movs	r0, #1
 8004ed0:	e7a5      	b.n	8004e1e <_vfiprintf_r+0x11a>
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	3401      	adds	r4, #1
 8004ed6:	9305      	str	r3, [sp, #20]
 8004ed8:	4619      	mov	r1, r3
 8004eda:	f04f 0c0a 	mov.w	ip, #10
 8004ede:	4620      	mov	r0, r4
 8004ee0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ee4:	3a30      	subs	r2, #48	; 0x30
 8004ee6:	2a09      	cmp	r2, #9
 8004ee8:	d903      	bls.n	8004ef2 <_vfiprintf_r+0x1ee>
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d0c5      	beq.n	8004e7a <_vfiprintf_r+0x176>
 8004eee:	9105      	str	r1, [sp, #20]
 8004ef0:	e7c3      	b.n	8004e7a <_vfiprintf_r+0x176>
 8004ef2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ef6:	4604      	mov	r4, r0
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e7f0      	b.n	8004ede <_vfiprintf_r+0x1da>
 8004efc:	ab03      	add	r3, sp, #12
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	462a      	mov	r2, r5
 8004f02:	4b16      	ldr	r3, [pc, #88]	; (8004f5c <_vfiprintf_r+0x258>)
 8004f04:	a904      	add	r1, sp, #16
 8004f06:	4630      	mov	r0, r6
 8004f08:	f3af 8000 	nop.w
 8004f0c:	4607      	mov	r7, r0
 8004f0e:	1c78      	adds	r0, r7, #1
 8004f10:	d1d6      	bne.n	8004ec0 <_vfiprintf_r+0x1bc>
 8004f12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f14:	07d9      	lsls	r1, r3, #31
 8004f16:	d405      	bmi.n	8004f24 <_vfiprintf_r+0x220>
 8004f18:	89ab      	ldrh	r3, [r5, #12]
 8004f1a:	059a      	lsls	r2, r3, #22
 8004f1c:	d402      	bmi.n	8004f24 <_vfiprintf_r+0x220>
 8004f1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f20:	f7ff fdb7 	bl	8004a92 <__retarget_lock_release_recursive>
 8004f24:	89ab      	ldrh	r3, [r5, #12]
 8004f26:	065b      	lsls	r3, r3, #25
 8004f28:	f53f af12 	bmi.w	8004d50 <_vfiprintf_r+0x4c>
 8004f2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f2e:	e711      	b.n	8004d54 <_vfiprintf_r+0x50>
 8004f30:	ab03      	add	r3, sp, #12
 8004f32:	9300      	str	r3, [sp, #0]
 8004f34:	462a      	mov	r2, r5
 8004f36:	4b09      	ldr	r3, [pc, #36]	; (8004f5c <_vfiprintf_r+0x258>)
 8004f38:	a904      	add	r1, sp, #16
 8004f3a:	4630      	mov	r0, r6
 8004f3c:	f000 f880 	bl	8005040 <_printf_i>
 8004f40:	e7e4      	b.n	8004f0c <_vfiprintf_r+0x208>
 8004f42:	bf00      	nop
 8004f44:	080057ec 	.word	0x080057ec
 8004f48:	0800580c 	.word	0x0800580c
 8004f4c:	080057cc 	.word	0x080057cc
 8004f50:	0800582c 	.word	0x0800582c
 8004f54:	08005836 	.word	0x08005836
 8004f58:	00000000 	.word	0x00000000
 8004f5c:	08004cdf 	.word	0x08004cdf
 8004f60:	08005832 	.word	0x08005832

08004f64 <_printf_common>:
 8004f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f68:	4616      	mov	r6, r2
 8004f6a:	4699      	mov	r9, r3
 8004f6c:	688a      	ldr	r2, [r1, #8]
 8004f6e:	690b      	ldr	r3, [r1, #16]
 8004f70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f74:	4293      	cmp	r3, r2
 8004f76:	bfb8      	it	lt
 8004f78:	4613      	movlt	r3, r2
 8004f7a:	6033      	str	r3, [r6, #0]
 8004f7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f80:	4607      	mov	r7, r0
 8004f82:	460c      	mov	r4, r1
 8004f84:	b10a      	cbz	r2, 8004f8a <_printf_common+0x26>
 8004f86:	3301      	adds	r3, #1
 8004f88:	6033      	str	r3, [r6, #0]
 8004f8a:	6823      	ldr	r3, [r4, #0]
 8004f8c:	0699      	lsls	r1, r3, #26
 8004f8e:	bf42      	ittt	mi
 8004f90:	6833      	ldrmi	r3, [r6, #0]
 8004f92:	3302      	addmi	r3, #2
 8004f94:	6033      	strmi	r3, [r6, #0]
 8004f96:	6825      	ldr	r5, [r4, #0]
 8004f98:	f015 0506 	ands.w	r5, r5, #6
 8004f9c:	d106      	bne.n	8004fac <_printf_common+0x48>
 8004f9e:	f104 0a19 	add.w	sl, r4, #25
 8004fa2:	68e3      	ldr	r3, [r4, #12]
 8004fa4:	6832      	ldr	r2, [r6, #0]
 8004fa6:	1a9b      	subs	r3, r3, r2
 8004fa8:	42ab      	cmp	r3, r5
 8004faa:	dc26      	bgt.n	8004ffa <_printf_common+0x96>
 8004fac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004fb0:	1e13      	subs	r3, r2, #0
 8004fb2:	6822      	ldr	r2, [r4, #0]
 8004fb4:	bf18      	it	ne
 8004fb6:	2301      	movne	r3, #1
 8004fb8:	0692      	lsls	r2, r2, #26
 8004fba:	d42b      	bmi.n	8005014 <_printf_common+0xb0>
 8004fbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fc0:	4649      	mov	r1, r9
 8004fc2:	4638      	mov	r0, r7
 8004fc4:	47c0      	blx	r8
 8004fc6:	3001      	adds	r0, #1
 8004fc8:	d01e      	beq.n	8005008 <_printf_common+0xa4>
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	68e5      	ldr	r5, [r4, #12]
 8004fce:	6832      	ldr	r2, [r6, #0]
 8004fd0:	f003 0306 	and.w	r3, r3, #6
 8004fd4:	2b04      	cmp	r3, #4
 8004fd6:	bf08      	it	eq
 8004fd8:	1aad      	subeq	r5, r5, r2
 8004fda:	68a3      	ldr	r3, [r4, #8]
 8004fdc:	6922      	ldr	r2, [r4, #16]
 8004fde:	bf0c      	ite	eq
 8004fe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fe4:	2500      	movne	r5, #0
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	bfc4      	itt	gt
 8004fea:	1a9b      	subgt	r3, r3, r2
 8004fec:	18ed      	addgt	r5, r5, r3
 8004fee:	2600      	movs	r6, #0
 8004ff0:	341a      	adds	r4, #26
 8004ff2:	42b5      	cmp	r5, r6
 8004ff4:	d11a      	bne.n	800502c <_printf_common+0xc8>
 8004ff6:	2000      	movs	r0, #0
 8004ff8:	e008      	b.n	800500c <_printf_common+0xa8>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	4652      	mov	r2, sl
 8004ffe:	4649      	mov	r1, r9
 8005000:	4638      	mov	r0, r7
 8005002:	47c0      	blx	r8
 8005004:	3001      	adds	r0, #1
 8005006:	d103      	bne.n	8005010 <_printf_common+0xac>
 8005008:	f04f 30ff 	mov.w	r0, #4294967295
 800500c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005010:	3501      	adds	r5, #1
 8005012:	e7c6      	b.n	8004fa2 <_printf_common+0x3e>
 8005014:	18e1      	adds	r1, r4, r3
 8005016:	1c5a      	adds	r2, r3, #1
 8005018:	2030      	movs	r0, #48	; 0x30
 800501a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800501e:	4422      	add	r2, r4
 8005020:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005024:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005028:	3302      	adds	r3, #2
 800502a:	e7c7      	b.n	8004fbc <_printf_common+0x58>
 800502c:	2301      	movs	r3, #1
 800502e:	4622      	mov	r2, r4
 8005030:	4649      	mov	r1, r9
 8005032:	4638      	mov	r0, r7
 8005034:	47c0      	blx	r8
 8005036:	3001      	adds	r0, #1
 8005038:	d0e6      	beq.n	8005008 <_printf_common+0xa4>
 800503a:	3601      	adds	r6, #1
 800503c:	e7d9      	b.n	8004ff2 <_printf_common+0x8e>
	...

08005040 <_printf_i>:
 8005040:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005044:	460c      	mov	r4, r1
 8005046:	4691      	mov	r9, r2
 8005048:	7e27      	ldrb	r7, [r4, #24]
 800504a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800504c:	2f78      	cmp	r7, #120	; 0x78
 800504e:	4680      	mov	r8, r0
 8005050:	469a      	mov	sl, r3
 8005052:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005056:	d807      	bhi.n	8005068 <_printf_i+0x28>
 8005058:	2f62      	cmp	r7, #98	; 0x62
 800505a:	d80a      	bhi.n	8005072 <_printf_i+0x32>
 800505c:	2f00      	cmp	r7, #0
 800505e:	f000 80d8 	beq.w	8005212 <_printf_i+0x1d2>
 8005062:	2f58      	cmp	r7, #88	; 0x58
 8005064:	f000 80a3 	beq.w	80051ae <_printf_i+0x16e>
 8005068:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800506c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005070:	e03a      	b.n	80050e8 <_printf_i+0xa8>
 8005072:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005076:	2b15      	cmp	r3, #21
 8005078:	d8f6      	bhi.n	8005068 <_printf_i+0x28>
 800507a:	a001      	add	r0, pc, #4	; (adr r0, 8005080 <_printf_i+0x40>)
 800507c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005080:	080050d9 	.word	0x080050d9
 8005084:	080050ed 	.word	0x080050ed
 8005088:	08005069 	.word	0x08005069
 800508c:	08005069 	.word	0x08005069
 8005090:	08005069 	.word	0x08005069
 8005094:	08005069 	.word	0x08005069
 8005098:	080050ed 	.word	0x080050ed
 800509c:	08005069 	.word	0x08005069
 80050a0:	08005069 	.word	0x08005069
 80050a4:	08005069 	.word	0x08005069
 80050a8:	08005069 	.word	0x08005069
 80050ac:	080051f9 	.word	0x080051f9
 80050b0:	0800511d 	.word	0x0800511d
 80050b4:	080051db 	.word	0x080051db
 80050b8:	08005069 	.word	0x08005069
 80050bc:	08005069 	.word	0x08005069
 80050c0:	0800521b 	.word	0x0800521b
 80050c4:	08005069 	.word	0x08005069
 80050c8:	0800511d 	.word	0x0800511d
 80050cc:	08005069 	.word	0x08005069
 80050d0:	08005069 	.word	0x08005069
 80050d4:	080051e3 	.word	0x080051e3
 80050d8:	680b      	ldr	r3, [r1, #0]
 80050da:	1d1a      	adds	r2, r3, #4
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	600a      	str	r2, [r1, #0]
 80050e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80050e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050e8:	2301      	movs	r3, #1
 80050ea:	e0a3      	b.n	8005234 <_printf_i+0x1f4>
 80050ec:	6825      	ldr	r5, [r4, #0]
 80050ee:	6808      	ldr	r0, [r1, #0]
 80050f0:	062e      	lsls	r6, r5, #24
 80050f2:	f100 0304 	add.w	r3, r0, #4
 80050f6:	d50a      	bpl.n	800510e <_printf_i+0xce>
 80050f8:	6805      	ldr	r5, [r0, #0]
 80050fa:	600b      	str	r3, [r1, #0]
 80050fc:	2d00      	cmp	r5, #0
 80050fe:	da03      	bge.n	8005108 <_printf_i+0xc8>
 8005100:	232d      	movs	r3, #45	; 0x2d
 8005102:	426d      	negs	r5, r5
 8005104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005108:	485e      	ldr	r0, [pc, #376]	; (8005284 <_printf_i+0x244>)
 800510a:	230a      	movs	r3, #10
 800510c:	e019      	b.n	8005142 <_printf_i+0x102>
 800510e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005112:	6805      	ldr	r5, [r0, #0]
 8005114:	600b      	str	r3, [r1, #0]
 8005116:	bf18      	it	ne
 8005118:	b22d      	sxthne	r5, r5
 800511a:	e7ef      	b.n	80050fc <_printf_i+0xbc>
 800511c:	680b      	ldr	r3, [r1, #0]
 800511e:	6825      	ldr	r5, [r4, #0]
 8005120:	1d18      	adds	r0, r3, #4
 8005122:	6008      	str	r0, [r1, #0]
 8005124:	0628      	lsls	r0, r5, #24
 8005126:	d501      	bpl.n	800512c <_printf_i+0xec>
 8005128:	681d      	ldr	r5, [r3, #0]
 800512a:	e002      	b.n	8005132 <_printf_i+0xf2>
 800512c:	0669      	lsls	r1, r5, #25
 800512e:	d5fb      	bpl.n	8005128 <_printf_i+0xe8>
 8005130:	881d      	ldrh	r5, [r3, #0]
 8005132:	4854      	ldr	r0, [pc, #336]	; (8005284 <_printf_i+0x244>)
 8005134:	2f6f      	cmp	r7, #111	; 0x6f
 8005136:	bf0c      	ite	eq
 8005138:	2308      	moveq	r3, #8
 800513a:	230a      	movne	r3, #10
 800513c:	2100      	movs	r1, #0
 800513e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005142:	6866      	ldr	r6, [r4, #4]
 8005144:	60a6      	str	r6, [r4, #8]
 8005146:	2e00      	cmp	r6, #0
 8005148:	bfa2      	ittt	ge
 800514a:	6821      	ldrge	r1, [r4, #0]
 800514c:	f021 0104 	bicge.w	r1, r1, #4
 8005150:	6021      	strge	r1, [r4, #0]
 8005152:	b90d      	cbnz	r5, 8005158 <_printf_i+0x118>
 8005154:	2e00      	cmp	r6, #0
 8005156:	d04d      	beq.n	80051f4 <_printf_i+0x1b4>
 8005158:	4616      	mov	r6, r2
 800515a:	fbb5 f1f3 	udiv	r1, r5, r3
 800515e:	fb03 5711 	mls	r7, r3, r1, r5
 8005162:	5dc7      	ldrb	r7, [r0, r7]
 8005164:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005168:	462f      	mov	r7, r5
 800516a:	42bb      	cmp	r3, r7
 800516c:	460d      	mov	r5, r1
 800516e:	d9f4      	bls.n	800515a <_printf_i+0x11a>
 8005170:	2b08      	cmp	r3, #8
 8005172:	d10b      	bne.n	800518c <_printf_i+0x14c>
 8005174:	6823      	ldr	r3, [r4, #0]
 8005176:	07df      	lsls	r7, r3, #31
 8005178:	d508      	bpl.n	800518c <_printf_i+0x14c>
 800517a:	6923      	ldr	r3, [r4, #16]
 800517c:	6861      	ldr	r1, [r4, #4]
 800517e:	4299      	cmp	r1, r3
 8005180:	bfde      	ittt	le
 8005182:	2330      	movle	r3, #48	; 0x30
 8005184:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005188:	f106 36ff 	addle.w	r6, r6, #4294967295
 800518c:	1b92      	subs	r2, r2, r6
 800518e:	6122      	str	r2, [r4, #16]
 8005190:	f8cd a000 	str.w	sl, [sp]
 8005194:	464b      	mov	r3, r9
 8005196:	aa03      	add	r2, sp, #12
 8005198:	4621      	mov	r1, r4
 800519a:	4640      	mov	r0, r8
 800519c:	f7ff fee2 	bl	8004f64 <_printf_common>
 80051a0:	3001      	adds	r0, #1
 80051a2:	d14c      	bne.n	800523e <_printf_i+0x1fe>
 80051a4:	f04f 30ff 	mov.w	r0, #4294967295
 80051a8:	b004      	add	sp, #16
 80051aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051ae:	4835      	ldr	r0, [pc, #212]	; (8005284 <_printf_i+0x244>)
 80051b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80051b4:	6823      	ldr	r3, [r4, #0]
 80051b6:	680e      	ldr	r6, [r1, #0]
 80051b8:	061f      	lsls	r7, r3, #24
 80051ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80051be:	600e      	str	r6, [r1, #0]
 80051c0:	d514      	bpl.n	80051ec <_printf_i+0x1ac>
 80051c2:	07d9      	lsls	r1, r3, #31
 80051c4:	bf44      	itt	mi
 80051c6:	f043 0320 	orrmi.w	r3, r3, #32
 80051ca:	6023      	strmi	r3, [r4, #0]
 80051cc:	b91d      	cbnz	r5, 80051d6 <_printf_i+0x196>
 80051ce:	6823      	ldr	r3, [r4, #0]
 80051d0:	f023 0320 	bic.w	r3, r3, #32
 80051d4:	6023      	str	r3, [r4, #0]
 80051d6:	2310      	movs	r3, #16
 80051d8:	e7b0      	b.n	800513c <_printf_i+0xfc>
 80051da:	6823      	ldr	r3, [r4, #0]
 80051dc:	f043 0320 	orr.w	r3, r3, #32
 80051e0:	6023      	str	r3, [r4, #0]
 80051e2:	2378      	movs	r3, #120	; 0x78
 80051e4:	4828      	ldr	r0, [pc, #160]	; (8005288 <_printf_i+0x248>)
 80051e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80051ea:	e7e3      	b.n	80051b4 <_printf_i+0x174>
 80051ec:	065e      	lsls	r6, r3, #25
 80051ee:	bf48      	it	mi
 80051f0:	b2ad      	uxthmi	r5, r5
 80051f2:	e7e6      	b.n	80051c2 <_printf_i+0x182>
 80051f4:	4616      	mov	r6, r2
 80051f6:	e7bb      	b.n	8005170 <_printf_i+0x130>
 80051f8:	680b      	ldr	r3, [r1, #0]
 80051fa:	6826      	ldr	r6, [r4, #0]
 80051fc:	6960      	ldr	r0, [r4, #20]
 80051fe:	1d1d      	adds	r5, r3, #4
 8005200:	600d      	str	r5, [r1, #0]
 8005202:	0635      	lsls	r5, r6, #24
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	d501      	bpl.n	800520c <_printf_i+0x1cc>
 8005208:	6018      	str	r0, [r3, #0]
 800520a:	e002      	b.n	8005212 <_printf_i+0x1d2>
 800520c:	0671      	lsls	r1, r6, #25
 800520e:	d5fb      	bpl.n	8005208 <_printf_i+0x1c8>
 8005210:	8018      	strh	r0, [r3, #0]
 8005212:	2300      	movs	r3, #0
 8005214:	6123      	str	r3, [r4, #16]
 8005216:	4616      	mov	r6, r2
 8005218:	e7ba      	b.n	8005190 <_printf_i+0x150>
 800521a:	680b      	ldr	r3, [r1, #0]
 800521c:	1d1a      	adds	r2, r3, #4
 800521e:	600a      	str	r2, [r1, #0]
 8005220:	681e      	ldr	r6, [r3, #0]
 8005222:	6862      	ldr	r2, [r4, #4]
 8005224:	2100      	movs	r1, #0
 8005226:	4630      	mov	r0, r6
 8005228:	f7fa ffea 	bl	8000200 <memchr>
 800522c:	b108      	cbz	r0, 8005232 <_printf_i+0x1f2>
 800522e:	1b80      	subs	r0, r0, r6
 8005230:	6060      	str	r0, [r4, #4]
 8005232:	6863      	ldr	r3, [r4, #4]
 8005234:	6123      	str	r3, [r4, #16]
 8005236:	2300      	movs	r3, #0
 8005238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800523c:	e7a8      	b.n	8005190 <_printf_i+0x150>
 800523e:	6923      	ldr	r3, [r4, #16]
 8005240:	4632      	mov	r2, r6
 8005242:	4649      	mov	r1, r9
 8005244:	4640      	mov	r0, r8
 8005246:	47d0      	blx	sl
 8005248:	3001      	adds	r0, #1
 800524a:	d0ab      	beq.n	80051a4 <_printf_i+0x164>
 800524c:	6823      	ldr	r3, [r4, #0]
 800524e:	079b      	lsls	r3, r3, #30
 8005250:	d413      	bmi.n	800527a <_printf_i+0x23a>
 8005252:	68e0      	ldr	r0, [r4, #12]
 8005254:	9b03      	ldr	r3, [sp, #12]
 8005256:	4298      	cmp	r0, r3
 8005258:	bfb8      	it	lt
 800525a:	4618      	movlt	r0, r3
 800525c:	e7a4      	b.n	80051a8 <_printf_i+0x168>
 800525e:	2301      	movs	r3, #1
 8005260:	4632      	mov	r2, r6
 8005262:	4649      	mov	r1, r9
 8005264:	4640      	mov	r0, r8
 8005266:	47d0      	blx	sl
 8005268:	3001      	adds	r0, #1
 800526a:	d09b      	beq.n	80051a4 <_printf_i+0x164>
 800526c:	3501      	adds	r5, #1
 800526e:	68e3      	ldr	r3, [r4, #12]
 8005270:	9903      	ldr	r1, [sp, #12]
 8005272:	1a5b      	subs	r3, r3, r1
 8005274:	42ab      	cmp	r3, r5
 8005276:	dcf2      	bgt.n	800525e <_printf_i+0x21e>
 8005278:	e7eb      	b.n	8005252 <_printf_i+0x212>
 800527a:	2500      	movs	r5, #0
 800527c:	f104 0619 	add.w	r6, r4, #25
 8005280:	e7f5      	b.n	800526e <_printf_i+0x22e>
 8005282:	bf00      	nop
 8005284:	0800583d 	.word	0x0800583d
 8005288:	0800584e 	.word	0x0800584e

0800528c <_putc_r>:
 800528c:	b570      	push	{r4, r5, r6, lr}
 800528e:	460d      	mov	r5, r1
 8005290:	4614      	mov	r4, r2
 8005292:	4606      	mov	r6, r0
 8005294:	b118      	cbz	r0, 800529e <_putc_r+0x12>
 8005296:	6983      	ldr	r3, [r0, #24]
 8005298:	b90b      	cbnz	r3, 800529e <_putc_r+0x12>
 800529a:	f7ff fb5b 	bl	8004954 <__sinit>
 800529e:	4b1c      	ldr	r3, [pc, #112]	; (8005310 <_putc_r+0x84>)
 80052a0:	429c      	cmp	r4, r3
 80052a2:	d124      	bne.n	80052ee <_putc_r+0x62>
 80052a4:	6874      	ldr	r4, [r6, #4]
 80052a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052a8:	07d8      	lsls	r0, r3, #31
 80052aa:	d405      	bmi.n	80052b8 <_putc_r+0x2c>
 80052ac:	89a3      	ldrh	r3, [r4, #12]
 80052ae:	0599      	lsls	r1, r3, #22
 80052b0:	d402      	bmi.n	80052b8 <_putc_r+0x2c>
 80052b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052b4:	f7ff fbec 	bl	8004a90 <__retarget_lock_acquire_recursive>
 80052b8:	68a3      	ldr	r3, [r4, #8]
 80052ba:	3b01      	subs	r3, #1
 80052bc:	2b00      	cmp	r3, #0
 80052be:	60a3      	str	r3, [r4, #8]
 80052c0:	da05      	bge.n	80052ce <_putc_r+0x42>
 80052c2:	69a2      	ldr	r2, [r4, #24]
 80052c4:	4293      	cmp	r3, r2
 80052c6:	db1c      	blt.n	8005302 <_putc_r+0x76>
 80052c8:	b2eb      	uxtb	r3, r5
 80052ca:	2b0a      	cmp	r3, #10
 80052cc:	d019      	beq.n	8005302 <_putc_r+0x76>
 80052ce:	6823      	ldr	r3, [r4, #0]
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	6022      	str	r2, [r4, #0]
 80052d4:	701d      	strb	r5, [r3, #0]
 80052d6:	b2ed      	uxtb	r5, r5
 80052d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052da:	07da      	lsls	r2, r3, #31
 80052dc:	d405      	bmi.n	80052ea <_putc_r+0x5e>
 80052de:	89a3      	ldrh	r3, [r4, #12]
 80052e0:	059b      	lsls	r3, r3, #22
 80052e2:	d402      	bmi.n	80052ea <_putc_r+0x5e>
 80052e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052e6:	f7ff fbd4 	bl	8004a92 <__retarget_lock_release_recursive>
 80052ea:	4628      	mov	r0, r5
 80052ec:	bd70      	pop	{r4, r5, r6, pc}
 80052ee:	4b09      	ldr	r3, [pc, #36]	; (8005314 <_putc_r+0x88>)
 80052f0:	429c      	cmp	r4, r3
 80052f2:	d101      	bne.n	80052f8 <_putc_r+0x6c>
 80052f4:	68b4      	ldr	r4, [r6, #8]
 80052f6:	e7d6      	b.n	80052a6 <_putc_r+0x1a>
 80052f8:	4b07      	ldr	r3, [pc, #28]	; (8005318 <_putc_r+0x8c>)
 80052fa:	429c      	cmp	r4, r3
 80052fc:	bf08      	it	eq
 80052fe:	68f4      	ldreq	r4, [r6, #12]
 8005300:	e7d1      	b.n	80052a6 <_putc_r+0x1a>
 8005302:	4629      	mov	r1, r5
 8005304:	4622      	mov	r2, r4
 8005306:	4630      	mov	r0, r6
 8005308:	f7ff f94a 	bl	80045a0 <__swbuf_r>
 800530c:	4605      	mov	r5, r0
 800530e:	e7e3      	b.n	80052d8 <_putc_r+0x4c>
 8005310:	080057ec 	.word	0x080057ec
 8005314:	0800580c 	.word	0x0800580c
 8005318:	080057cc 	.word	0x080057cc

0800531c <_sbrk_r>:
 800531c:	b538      	push	{r3, r4, r5, lr}
 800531e:	4d06      	ldr	r5, [pc, #24]	; (8005338 <_sbrk_r+0x1c>)
 8005320:	2300      	movs	r3, #0
 8005322:	4604      	mov	r4, r0
 8005324:	4608      	mov	r0, r1
 8005326:	602b      	str	r3, [r5, #0]
 8005328:	f7fb fc38 	bl	8000b9c <_sbrk>
 800532c:	1c43      	adds	r3, r0, #1
 800532e:	d102      	bne.n	8005336 <_sbrk_r+0x1a>
 8005330:	682b      	ldr	r3, [r5, #0]
 8005332:	b103      	cbz	r3, 8005336 <_sbrk_r+0x1a>
 8005334:	6023      	str	r3, [r4, #0]
 8005336:	bd38      	pop	{r3, r4, r5, pc}
 8005338:	200005b8 	.word	0x200005b8

0800533c <__sread>:
 800533c:	b510      	push	{r4, lr}
 800533e:	460c      	mov	r4, r1
 8005340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005344:	f000 f8a0 	bl	8005488 <_read_r>
 8005348:	2800      	cmp	r0, #0
 800534a:	bfab      	itete	ge
 800534c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800534e:	89a3      	ldrhlt	r3, [r4, #12]
 8005350:	181b      	addge	r3, r3, r0
 8005352:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005356:	bfac      	ite	ge
 8005358:	6563      	strge	r3, [r4, #84]	; 0x54
 800535a:	81a3      	strhlt	r3, [r4, #12]
 800535c:	bd10      	pop	{r4, pc}

0800535e <__swrite>:
 800535e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005362:	461f      	mov	r7, r3
 8005364:	898b      	ldrh	r3, [r1, #12]
 8005366:	05db      	lsls	r3, r3, #23
 8005368:	4605      	mov	r5, r0
 800536a:	460c      	mov	r4, r1
 800536c:	4616      	mov	r6, r2
 800536e:	d505      	bpl.n	800537c <__swrite+0x1e>
 8005370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005374:	2302      	movs	r3, #2
 8005376:	2200      	movs	r2, #0
 8005378:	f000 f868 	bl	800544c <_lseek_r>
 800537c:	89a3      	ldrh	r3, [r4, #12]
 800537e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005382:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005386:	81a3      	strh	r3, [r4, #12]
 8005388:	4632      	mov	r2, r6
 800538a:	463b      	mov	r3, r7
 800538c:	4628      	mov	r0, r5
 800538e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005392:	f000 b817 	b.w	80053c4 <_write_r>

08005396 <__sseek>:
 8005396:	b510      	push	{r4, lr}
 8005398:	460c      	mov	r4, r1
 800539a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800539e:	f000 f855 	bl	800544c <_lseek_r>
 80053a2:	1c43      	adds	r3, r0, #1
 80053a4:	89a3      	ldrh	r3, [r4, #12]
 80053a6:	bf15      	itete	ne
 80053a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80053aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80053ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80053b2:	81a3      	strheq	r3, [r4, #12]
 80053b4:	bf18      	it	ne
 80053b6:	81a3      	strhne	r3, [r4, #12]
 80053b8:	bd10      	pop	{r4, pc}

080053ba <__sclose>:
 80053ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053be:	f000 b813 	b.w	80053e8 <_close_r>
	...

080053c4 <_write_r>:
 80053c4:	b538      	push	{r3, r4, r5, lr}
 80053c6:	4d07      	ldr	r5, [pc, #28]	; (80053e4 <_write_r+0x20>)
 80053c8:	4604      	mov	r4, r0
 80053ca:	4608      	mov	r0, r1
 80053cc:	4611      	mov	r1, r2
 80053ce:	2200      	movs	r2, #0
 80053d0:	602a      	str	r2, [r5, #0]
 80053d2:	461a      	mov	r2, r3
 80053d4:	f7fb fa95 	bl	8000902 <_write>
 80053d8:	1c43      	adds	r3, r0, #1
 80053da:	d102      	bne.n	80053e2 <_write_r+0x1e>
 80053dc:	682b      	ldr	r3, [r5, #0]
 80053de:	b103      	cbz	r3, 80053e2 <_write_r+0x1e>
 80053e0:	6023      	str	r3, [r4, #0]
 80053e2:	bd38      	pop	{r3, r4, r5, pc}
 80053e4:	200005b8 	.word	0x200005b8

080053e8 <_close_r>:
 80053e8:	b538      	push	{r3, r4, r5, lr}
 80053ea:	4d06      	ldr	r5, [pc, #24]	; (8005404 <_close_r+0x1c>)
 80053ec:	2300      	movs	r3, #0
 80053ee:	4604      	mov	r4, r0
 80053f0:	4608      	mov	r0, r1
 80053f2:	602b      	str	r3, [r5, #0]
 80053f4:	f7fb fb9d 	bl	8000b32 <_close>
 80053f8:	1c43      	adds	r3, r0, #1
 80053fa:	d102      	bne.n	8005402 <_close_r+0x1a>
 80053fc:	682b      	ldr	r3, [r5, #0]
 80053fe:	b103      	cbz	r3, 8005402 <_close_r+0x1a>
 8005400:	6023      	str	r3, [r4, #0]
 8005402:	bd38      	pop	{r3, r4, r5, pc}
 8005404:	200005b8 	.word	0x200005b8

08005408 <_fstat_r>:
 8005408:	b538      	push	{r3, r4, r5, lr}
 800540a:	4d07      	ldr	r5, [pc, #28]	; (8005428 <_fstat_r+0x20>)
 800540c:	2300      	movs	r3, #0
 800540e:	4604      	mov	r4, r0
 8005410:	4608      	mov	r0, r1
 8005412:	4611      	mov	r1, r2
 8005414:	602b      	str	r3, [r5, #0]
 8005416:	f7fb fb98 	bl	8000b4a <_fstat>
 800541a:	1c43      	adds	r3, r0, #1
 800541c:	d102      	bne.n	8005424 <_fstat_r+0x1c>
 800541e:	682b      	ldr	r3, [r5, #0]
 8005420:	b103      	cbz	r3, 8005424 <_fstat_r+0x1c>
 8005422:	6023      	str	r3, [r4, #0]
 8005424:	bd38      	pop	{r3, r4, r5, pc}
 8005426:	bf00      	nop
 8005428:	200005b8 	.word	0x200005b8

0800542c <_isatty_r>:
 800542c:	b538      	push	{r3, r4, r5, lr}
 800542e:	4d06      	ldr	r5, [pc, #24]	; (8005448 <_isatty_r+0x1c>)
 8005430:	2300      	movs	r3, #0
 8005432:	4604      	mov	r4, r0
 8005434:	4608      	mov	r0, r1
 8005436:	602b      	str	r3, [r5, #0]
 8005438:	f7fb fb97 	bl	8000b6a <_isatty>
 800543c:	1c43      	adds	r3, r0, #1
 800543e:	d102      	bne.n	8005446 <_isatty_r+0x1a>
 8005440:	682b      	ldr	r3, [r5, #0]
 8005442:	b103      	cbz	r3, 8005446 <_isatty_r+0x1a>
 8005444:	6023      	str	r3, [r4, #0]
 8005446:	bd38      	pop	{r3, r4, r5, pc}
 8005448:	200005b8 	.word	0x200005b8

0800544c <_lseek_r>:
 800544c:	b538      	push	{r3, r4, r5, lr}
 800544e:	4d07      	ldr	r5, [pc, #28]	; (800546c <_lseek_r+0x20>)
 8005450:	4604      	mov	r4, r0
 8005452:	4608      	mov	r0, r1
 8005454:	4611      	mov	r1, r2
 8005456:	2200      	movs	r2, #0
 8005458:	602a      	str	r2, [r5, #0]
 800545a:	461a      	mov	r2, r3
 800545c:	f7fb fb90 	bl	8000b80 <_lseek>
 8005460:	1c43      	adds	r3, r0, #1
 8005462:	d102      	bne.n	800546a <_lseek_r+0x1e>
 8005464:	682b      	ldr	r3, [r5, #0]
 8005466:	b103      	cbz	r3, 800546a <_lseek_r+0x1e>
 8005468:	6023      	str	r3, [r4, #0]
 800546a:	bd38      	pop	{r3, r4, r5, pc}
 800546c:	200005b8 	.word	0x200005b8

08005470 <__malloc_lock>:
 8005470:	4801      	ldr	r0, [pc, #4]	; (8005478 <__malloc_lock+0x8>)
 8005472:	f7ff bb0d 	b.w	8004a90 <__retarget_lock_acquire_recursive>
 8005476:	bf00      	nop
 8005478:	200005b0 	.word	0x200005b0

0800547c <__malloc_unlock>:
 800547c:	4801      	ldr	r0, [pc, #4]	; (8005484 <__malloc_unlock+0x8>)
 800547e:	f7ff bb08 	b.w	8004a92 <__retarget_lock_release_recursive>
 8005482:	bf00      	nop
 8005484:	200005b0 	.word	0x200005b0

08005488 <_read_r>:
 8005488:	b538      	push	{r3, r4, r5, lr}
 800548a:	4d07      	ldr	r5, [pc, #28]	; (80054a8 <_read_r+0x20>)
 800548c:	4604      	mov	r4, r0
 800548e:	4608      	mov	r0, r1
 8005490:	4611      	mov	r1, r2
 8005492:	2200      	movs	r2, #0
 8005494:	602a      	str	r2, [r5, #0]
 8005496:	461a      	mov	r2, r3
 8005498:	f7fb fb2e 	bl	8000af8 <_read>
 800549c:	1c43      	adds	r3, r0, #1
 800549e:	d102      	bne.n	80054a6 <_read_r+0x1e>
 80054a0:	682b      	ldr	r3, [r5, #0]
 80054a2:	b103      	cbz	r3, 80054a6 <_read_r+0x1e>
 80054a4:	6023      	str	r3, [r4, #0]
 80054a6:	bd38      	pop	{r3, r4, r5, pc}
 80054a8:	200005b8 	.word	0x200005b8

080054ac <_init>:
 80054ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ae:	bf00      	nop
 80054b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054b2:	bc08      	pop	{r3}
 80054b4:	469e      	mov	lr, r3
 80054b6:	4770      	bx	lr

080054b8 <_fini>:
 80054b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ba:	bf00      	nop
 80054bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054be:	bc08      	pop	{r3}
 80054c0:	469e      	mov	lr, r3
 80054c2:	4770      	bx	lr
