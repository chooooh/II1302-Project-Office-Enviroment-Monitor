
OfficeEnvironmentMonitorSensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000294  08004440  08004440  00014440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046d4  080046d4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080046d4  080046d4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046d4  080046d4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046d4  080046d4  000146d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046d8  080046d8  000146d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080046dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000070  0800474c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  0800474c  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000155fb  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b1f  00000000  00000000  0003569b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011f8  00000000  00000000  000381c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001090  00000000  00000000  000393b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029980  00000000  00000000  0003a448  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000faf0  00000000  00000000  00063dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010c355  00000000  00000000  000738b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017fc0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005108  00000000  00000000  0017fc88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004428 	.word	0x08004428

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004428 	.word	0x08004428

080001d0 <setjmp>:
 80001d0:	46ec      	mov	ip, sp
 80001d2:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80001d6:	f04f 0000 	mov.w	r0, #0
 80001da:	4770      	bx	lr

080001dc <longjmp>:
 80001dc:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80001e0:	46e5      	mov	sp, ip
 80001e2:	0008      	movs	r0, r1
 80001e4:	bf08      	it	eq
 80001e6:	2001      	moveq	r0, #1
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	0000      	movs	r0, r0
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <initialize_sensor>:
static uint8_t L_CO2 = 0;
static uint8_t H_OG = 0;
static uint8_t L_OG = 0;

uint8_t initialize_sensor(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
HAL_I2C_Mem_Write(&hi2c1, DEVICE_ADDR, APP_START, 8, &nulldata, 0, 1000);
//Pull up nWake
	}
return 0;
    */
	return 0;
 8000294:	2300      	movs	r3, #0
}
 8000296:	4618      	mov	r0, r3
 8000298:	46bd      	mov	sp, r7
 800029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029e:	4770      	bx	lr

080002a0 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b08a      	sub	sp, #40	; 0x28
 80002a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a6:	f107 0314 	add.w	r3, r7, #20
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]
 80002b2:	60da      	str	r2, [r3, #12]
 80002b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002b6:	4b33      	ldr	r3, [pc, #204]	; (8000384 <MX_GPIO_Init+0xe4>)
 80002b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ba:	4a32      	ldr	r2, [pc, #200]	; (8000384 <MX_GPIO_Init+0xe4>)
 80002bc:	f043 0304 	orr.w	r3, r3, #4
 80002c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002c2:	4b30      	ldr	r3, [pc, #192]	; (8000384 <MX_GPIO_Init+0xe4>)
 80002c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c6:	f003 0304 	and.w	r3, r3, #4
 80002ca:	613b      	str	r3, [r7, #16]
 80002cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80002ce:	4b2d      	ldr	r3, [pc, #180]	; (8000384 <MX_GPIO_Init+0xe4>)
 80002d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002d2:	4a2c      	ldr	r2, [pc, #176]	; (8000384 <MX_GPIO_Init+0xe4>)
 80002d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002da:	4b2a      	ldr	r3, [pc, #168]	; (8000384 <MX_GPIO_Init+0xe4>)
 80002dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002e2:	60fb      	str	r3, [r7, #12]
 80002e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e6:	4b27      	ldr	r3, [pc, #156]	; (8000384 <MX_GPIO_Init+0xe4>)
 80002e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ea:	4a26      	ldr	r2, [pc, #152]	; (8000384 <MX_GPIO_Init+0xe4>)
 80002ec:	f043 0301 	orr.w	r3, r3, #1
 80002f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002f2:	4b24      	ldr	r3, [pc, #144]	; (8000384 <MX_GPIO_Init+0xe4>)
 80002f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002f6:	f003 0301 	and.w	r3, r3, #1
 80002fa:	60bb      	str	r3, [r7, #8]
 80002fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002fe:	4b21      	ldr	r3, [pc, #132]	; (8000384 <MX_GPIO_Init+0xe4>)
 8000300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000302:	4a20      	ldr	r2, [pc, #128]	; (8000384 <MX_GPIO_Init+0xe4>)
 8000304:	f043 0302 	orr.w	r3, r3, #2
 8000308:	64d3      	str	r3, [r2, #76]	; 0x4c
 800030a:	4b1e      	ldr	r3, [pc, #120]	; (8000384 <MX_GPIO_Init+0xe4>)
 800030c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800030e:	f003 0302 	and.w	r3, r3, #2
 8000312:	607b      	str	r3, [r7, #4]
 8000314:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000316:	2200      	movs	r2, #0
 8000318:	2120      	movs	r1, #32
 800031a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800031e:	f001 f9f9 	bl	8001714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000322:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000328:	4b17      	ldr	r3, [pc, #92]	; (8000388 <MX_GPIO_Init+0xe8>)
 800032a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032c:	2300      	movs	r3, #0
 800032e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000330:	f107 0314 	add.w	r3, r7, #20
 8000334:	4619      	mov	r1, r3
 8000336:	4815      	ldr	r0, [pc, #84]	; (800038c <MX_GPIO_Init+0xec>)
 8000338:	f001 f844 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA3 */
  GPIO_InitStruct.Pin = USART_TX_Pin|GPIO_PIN_3;
 800033c:	230c      	movs	r3, #12
 800033e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000340:	2302      	movs	r3, #2
 8000342:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000344:	2300      	movs	r3, #0
 8000346:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000348:	2303      	movs	r3, #3
 800034a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800034c:	2307      	movs	r3, #7
 800034e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000350:	f107 0314 	add.w	r3, r7, #20
 8000354:	4619      	mov	r1, r3
 8000356:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800035a:	f001 f833 	bl	80013c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800035e:	2320      	movs	r3, #32
 8000360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000362:	2301      	movs	r3, #1
 8000364:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000366:	2300      	movs	r3, #0
 8000368:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800036a:	2300      	movs	r3, #0
 800036c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800036e:	f107 0314 	add.w	r3, r7, #20
 8000372:	4619      	mov	r1, r3
 8000374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000378:	f001 f824 	bl	80013c4 <HAL_GPIO_Init>

}
 800037c:	bf00      	nop
 800037e:	3728      	adds	r7, #40	; 0x28
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40021000 	.word	0x40021000
 8000388:	10210000 	.word	0x10210000
 800038c:	48000800 	.word	0x48000800

08000390 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000394:	4b1b      	ldr	r3, [pc, #108]	; (8000404 <MX_I2C1_Init+0x74>)
 8000396:	4a1c      	ldr	r2, [pc, #112]	; (8000408 <MX_I2C1_Init+0x78>)
 8000398:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800039a:	4b1a      	ldr	r3, [pc, #104]	; (8000404 <MX_I2C1_Init+0x74>)
 800039c:	4a1b      	ldr	r2, [pc, #108]	; (800040c <MX_I2C1_Init+0x7c>)
 800039e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003a0:	4b18      	ldr	r3, [pc, #96]	; (8000404 <MX_I2C1_Init+0x74>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003a6:	4b17      	ldr	r3, [pc, #92]	; (8000404 <MX_I2C1_Init+0x74>)
 80003a8:	2201      	movs	r2, #1
 80003aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003ac:	4b15      	ldr	r3, [pc, #84]	; (8000404 <MX_I2C1_Init+0x74>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003b2:	4b14      	ldr	r3, [pc, #80]	; (8000404 <MX_I2C1_Init+0x74>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003b8:	4b12      	ldr	r3, [pc, #72]	; (8000404 <MX_I2C1_Init+0x74>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003be:	4b11      	ldr	r3, [pc, #68]	; (8000404 <MX_I2C1_Init+0x74>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003c4:	4b0f      	ldr	r3, [pc, #60]	; (8000404 <MX_I2C1_Init+0x74>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003ca:	480e      	ldr	r0, [pc, #56]	; (8000404 <MX_I2C1_Init+0x74>)
 80003cc:	f001 f9ba 	bl	8001744 <HAL_I2C_Init>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003d6:	f000 fa21 	bl	800081c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003da:	2100      	movs	r1, #0
 80003dc:	4809      	ldr	r0, [pc, #36]	; (8000404 <MX_I2C1_Init+0x74>)
 80003de:	f001 fa40 	bl	8001862 <HAL_I2CEx_ConfigAnalogFilter>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003e8:	f000 fa18 	bl	800081c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003ec:	2100      	movs	r1, #0
 80003ee:	4805      	ldr	r0, [pc, #20]	; (8000404 <MX_I2C1_Init+0x74>)
 80003f0:	f001 fa82 	bl	80018f8 <HAL_I2CEx_ConfigDigitalFilter>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003fa:	f000 fa0f 	bl	800081c <Error_Handler>
  }

}
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	200000e4 	.word	0x200000e4
 8000408:	40005400 	.word	0x40005400
 800040c:	10909cec 	.word	0x10909cec

08000410 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000414:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <MX_I2C2_Init+0x74>)
 8000416:	4a1c      	ldr	r2, [pc, #112]	; (8000488 <MX_I2C2_Init+0x78>)
 8000418:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800041a:	4b1a      	ldr	r3, [pc, #104]	; (8000484 <MX_I2C2_Init+0x74>)
 800041c:	4a1b      	ldr	r2, [pc, #108]	; (800048c <MX_I2C2_Init+0x7c>)
 800041e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000420:	4b18      	ldr	r3, [pc, #96]	; (8000484 <MX_I2C2_Init+0x74>)
 8000422:	2200      	movs	r2, #0
 8000424:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000426:	4b17      	ldr	r3, [pc, #92]	; (8000484 <MX_I2C2_Init+0x74>)
 8000428:	2201      	movs	r2, #1
 800042a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800042c:	4b15      	ldr	r3, [pc, #84]	; (8000484 <MX_I2C2_Init+0x74>)
 800042e:	2200      	movs	r2, #0
 8000430:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000432:	4b14      	ldr	r3, [pc, #80]	; (8000484 <MX_I2C2_Init+0x74>)
 8000434:	2200      	movs	r2, #0
 8000436:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000438:	4b12      	ldr	r3, [pc, #72]	; (8000484 <MX_I2C2_Init+0x74>)
 800043a:	2200      	movs	r2, #0
 800043c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800043e:	4b11      	ldr	r3, [pc, #68]	; (8000484 <MX_I2C2_Init+0x74>)
 8000440:	2200      	movs	r2, #0
 8000442:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000444:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <MX_I2C2_Init+0x74>)
 8000446:	2200      	movs	r2, #0
 8000448:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800044a:	480e      	ldr	r0, [pc, #56]	; (8000484 <MX_I2C2_Init+0x74>)
 800044c:	f001 f97a 	bl	8001744 <HAL_I2C_Init>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000456:	f000 f9e1 	bl	800081c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800045a:	2100      	movs	r1, #0
 800045c:	4809      	ldr	r0, [pc, #36]	; (8000484 <MX_I2C2_Init+0x74>)
 800045e:	f001 fa00 	bl	8001862 <HAL_I2CEx_ConfigAnalogFilter>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000468:	f000 f9d8 	bl	800081c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800046c:	2100      	movs	r1, #0
 800046e:	4805      	ldr	r0, [pc, #20]	; (8000484 <MX_I2C2_Init+0x74>)
 8000470:	f001 fa42 	bl	80018f8 <HAL_I2CEx_ConfigDigitalFilter>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800047a:	f000 f9cf 	bl	800081c <Error_Handler>
  }

}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	20000130 	.word	0x20000130
 8000488:	40005800 	.word	0x40005800
 800048c:	10909cec 	.word	0x10909cec

08000490 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000494:	4b1b      	ldr	r3, [pc, #108]	; (8000504 <MX_I2C3_Init+0x74>)
 8000496:	4a1c      	ldr	r2, [pc, #112]	; (8000508 <MX_I2C3_Init+0x78>)
 8000498:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 800049a:	4b1a      	ldr	r3, [pc, #104]	; (8000504 <MX_I2C3_Init+0x74>)
 800049c:	4a1b      	ldr	r2, [pc, #108]	; (800050c <MX_I2C3_Init+0x7c>)
 800049e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80004a0:	4b18      	ldr	r3, [pc, #96]	; (8000504 <MX_I2C3_Init+0x74>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004a6:	4b17      	ldr	r3, [pc, #92]	; (8000504 <MX_I2C3_Init+0x74>)
 80004a8:	2201      	movs	r2, #1
 80004aa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004ac:	4b15      	ldr	r3, [pc, #84]	; (8000504 <MX_I2C3_Init+0x74>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80004b2:	4b14      	ldr	r3, [pc, #80]	; (8000504 <MX_I2C3_Init+0x74>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004b8:	4b12      	ldr	r3, [pc, #72]	; (8000504 <MX_I2C3_Init+0x74>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004be:	4b11      	ldr	r3, [pc, #68]	; (8000504 <MX_I2C3_Init+0x74>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004c4:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <MX_I2C3_Init+0x74>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80004ca:	480e      	ldr	r0, [pc, #56]	; (8000504 <MX_I2C3_Init+0x74>)
 80004cc:	f001 f93a 	bl	8001744 <HAL_I2C_Init>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80004d6:	f000 f9a1 	bl	800081c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004da:	2100      	movs	r1, #0
 80004dc:	4809      	ldr	r0, [pc, #36]	; (8000504 <MX_I2C3_Init+0x74>)
 80004de:	f001 f9c0 	bl	8001862 <HAL_I2CEx_ConfigAnalogFilter>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80004e8:	f000 f998 	bl	800081c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80004ec:	2100      	movs	r1, #0
 80004ee:	4805      	ldr	r0, [pc, #20]	; (8000504 <MX_I2C3_Init+0x74>)
 80004f0:	f001 fa02 	bl	80018f8 <HAL_I2CEx_ConfigDigitalFilter>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80004fa:	f000 f98f 	bl	800081c <Error_Handler>
  }

}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000098 	.word	0x20000098
 8000508:	40005c00 	.word	0x40005c00
 800050c:	10909cec 	.word	0x10909cec

08000510 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b08e      	sub	sp, #56	; 0x38
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a45      	ldr	r2, [pc, #276]	; (8000644 <HAL_I2C_MspInit+0x134>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d128      	bne.n	8000584 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000532:	4b45      	ldr	r3, [pc, #276]	; (8000648 <HAL_I2C_MspInit+0x138>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000536:	4a44      	ldr	r2, [pc, #272]	; (8000648 <HAL_I2C_MspInit+0x138>)
 8000538:	f043 0302 	orr.w	r3, r3, #2
 800053c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800053e:	4b42      	ldr	r3, [pc, #264]	; (8000648 <HAL_I2C_MspInit+0x138>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000542:	f003 0302 	and.w	r3, r3, #2
 8000546:	623b      	str	r3, [r7, #32]
 8000548:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800054a:	23c0      	movs	r3, #192	; 0xc0
 800054c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800054e:	2312      	movs	r3, #18
 8000550:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000552:	2301      	movs	r3, #1
 8000554:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000556:	2303      	movs	r3, #3
 8000558:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800055a:	2304      	movs	r3, #4
 800055c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800055e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000562:	4619      	mov	r1, r3
 8000564:	4839      	ldr	r0, [pc, #228]	; (800064c <HAL_I2C_MspInit+0x13c>)
 8000566:	f000 ff2d 	bl	80013c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800056a:	4b37      	ldr	r3, [pc, #220]	; (8000648 <HAL_I2C_MspInit+0x138>)
 800056c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800056e:	4a36      	ldr	r2, [pc, #216]	; (8000648 <HAL_I2C_MspInit+0x138>)
 8000570:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000574:	6593      	str	r3, [r2, #88]	; 0x58
 8000576:	4b34      	ldr	r3, [pc, #208]	; (8000648 <HAL_I2C_MspInit+0x138>)
 8000578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800057a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800057e:	61fb      	str	r3, [r7, #28]
 8000580:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000582:	e05b      	b.n	800063c <HAL_I2C_MspInit+0x12c>
  else if(i2cHandle->Instance==I2C2)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a31      	ldr	r2, [pc, #196]	; (8000650 <HAL_I2C_MspInit+0x140>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d129      	bne.n	80005e2 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800058e:	4b2e      	ldr	r3, [pc, #184]	; (8000648 <HAL_I2C_MspInit+0x138>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000592:	4a2d      	ldr	r2, [pc, #180]	; (8000648 <HAL_I2C_MspInit+0x138>)
 8000594:	f043 0302 	orr.w	r3, r3, #2
 8000598:	64d3      	str	r3, [r2, #76]	; 0x4c
 800059a:	4b2b      	ldr	r3, [pc, #172]	; (8000648 <HAL_I2C_MspInit+0x138>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059e:	f003 0302 	and.w	r3, r3, #2
 80005a2:	61bb      	str	r3, [r7, #24]
 80005a4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80005a6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80005aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005ac:	2312      	movs	r3, #18
 80005ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005b0:	2301      	movs	r3, #1
 80005b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005b4:	2303      	movs	r3, #3
 80005b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80005b8:	2304      	movs	r3, #4
 80005ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005c0:	4619      	mov	r1, r3
 80005c2:	4822      	ldr	r0, [pc, #136]	; (800064c <HAL_I2C_MspInit+0x13c>)
 80005c4:	f000 fefe 	bl	80013c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80005c8:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <HAL_I2C_MspInit+0x138>)
 80005ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005cc:	4a1e      	ldr	r2, [pc, #120]	; (8000648 <HAL_I2C_MspInit+0x138>)
 80005ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005d2:	6593      	str	r3, [r2, #88]	; 0x58
 80005d4:	4b1c      	ldr	r3, [pc, #112]	; (8000648 <HAL_I2C_MspInit+0x138>)
 80005d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005dc:	617b      	str	r3, [r7, #20]
 80005de:	697b      	ldr	r3, [r7, #20]
}
 80005e0:	e02c      	b.n	800063c <HAL_I2C_MspInit+0x12c>
  else if(i2cHandle->Instance==I2C3)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a1b      	ldr	r2, [pc, #108]	; (8000654 <HAL_I2C_MspInit+0x144>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d127      	bne.n	800063c <HAL_I2C_MspInit+0x12c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ec:	4b16      	ldr	r3, [pc, #88]	; (8000648 <HAL_I2C_MspInit+0x138>)
 80005ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f0:	4a15      	ldr	r2, [pc, #84]	; (8000648 <HAL_I2C_MspInit+0x138>)
 80005f2:	f043 0304 	orr.w	r3, r3, #4
 80005f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005f8:	4b13      	ldr	r3, [pc, #76]	; (8000648 <HAL_I2C_MspInit+0x138>)
 80005fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fc:	f003 0304 	and.w	r3, r3, #4
 8000600:	613b      	str	r3, [r7, #16]
 8000602:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000604:	2303      	movs	r3, #3
 8000606:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000608:	2312      	movs	r3, #18
 800060a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800060c:	2301      	movs	r3, #1
 800060e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000610:	2303      	movs	r3, #3
 8000612:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000614:	2304      	movs	r3, #4
 8000616:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800061c:	4619      	mov	r1, r3
 800061e:	480e      	ldr	r0, [pc, #56]	; (8000658 <HAL_I2C_MspInit+0x148>)
 8000620:	f000 fed0 	bl	80013c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <HAL_I2C_MspInit+0x138>)
 8000626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000628:	4a07      	ldr	r2, [pc, #28]	; (8000648 <HAL_I2C_MspInit+0x138>)
 800062a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800062e:	6593      	str	r3, [r2, #88]	; 0x58
 8000630:	4b05      	ldr	r3, [pc, #20]	; (8000648 <HAL_I2C_MspInit+0x138>)
 8000632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000634:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	68fb      	ldr	r3, [r7, #12]
}
 800063c:	bf00      	nop
 800063e:	3738      	adds	r7, #56	; 0x38
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40005400 	.word	0x40005400
 8000648:	40021000 	.word	0x40021000
 800064c:	48000400 	.word	0x48000400
 8000650:	40005800 	.word	0x40005800
 8000654:	40005c00 	.word	0x40005c00
 8000658:	48000800 	.word	0x48000800

0800065c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000664:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000668:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800066c:	f003 0301 	and.w	r3, r3, #1
 8000670:	2b00      	cmp	r3, #0
 8000672:	d013      	beq.n	800069c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000674:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000678:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800067c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000680:	2b00      	cmp	r3, #0
 8000682:	d00b      	beq.n	800069c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000684:	e000      	b.n	8000688 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000686:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000688:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d0f9      	beq.n	8000686 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000692:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	b2d2      	uxtb	r2, r2
 800069a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800069c:	687b      	ldr	r3, [r7, #4]
}
 800069e:	4618      	mov	r0, r3
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr

080006aa <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b086      	sub	sp, #24
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	60f8      	str	r0, [r7, #12]
 80006b2:	60b9      	str	r1, [r7, #8]
 80006b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
 80006ba:	e009      	b.n	80006d0 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	1c5a      	adds	r2, r3, #1
 80006c0:	60ba      	str	r2, [r7, #8]
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff ffc9 	bl	800065c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	3301      	adds	r3, #1
 80006ce:	617b      	str	r3, [r7, #20]
 80006d0:	697a      	ldr	r2, [r7, #20]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	dbf1      	blt.n	80006bc <_write+0x12>
	}
	return len;
 80006d8:	687b      	ldr	r3, [r7, #4]
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3718      	adds	r7, #24
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e6:	f000 fd4b 	bl	8001180 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ea:	f000 f80b 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ee:	f7ff fdd7 	bl	80002a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006f2:	f7ff fe4d 	bl	8000390 <MX_I2C1_Init>
  MX_I2C2_Init();
 80006f6:	f7ff fe8b 	bl	8000410 <MX_I2C2_Init>
  MX_I2C3_Init();
 80006fa:	f7ff fec9 	bl	8000490 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
#ifdef USER_TEST
  unit_test();
 80006fe:	f000 fa15 	bl	8000b2c <unit_test>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#endif
  while (1)
 8000702:	e7fe      	b.n	8000702 <main+0x20>

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b0b8      	sub	sp, #224	; 0xe0
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800070e:	2244      	movs	r2, #68	; 0x44
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f002 ff52 	bl	80035bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000728:	463b      	mov	r3, r7
 800072a:	2288      	movs	r2, #136	; 0x88
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f002 ff44 	bl	80035bc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000734:	2302      	movs	r3, #2
 8000736:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800073e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000742:	2310      	movs	r3, #16
 8000744:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000748:	2302      	movs	r3, #2
 800074a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800074e:	2302      	movs	r3, #2
 8000750:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000754:	2301      	movs	r3, #1
 8000756:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800075a:	230a      	movs	r3, #10
 800075c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000760:	2307      	movs	r3, #7
 8000762:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000766:	2302      	movs	r3, #2
 8000768:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800076c:	2302      	movs	r3, #2
 800076e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000772:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000776:	4618      	mov	r0, r3
 8000778:	f001 f96e 	bl	8001a58 <HAL_RCC_OscConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000782:	f000 f84b 	bl	800081c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000786:	230f      	movs	r3, #15
 8000788:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078c:	2303      	movs	r3, #3
 800078e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007a4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80007a8:	2104      	movs	r1, #4
 80007aa:	4618      	mov	r0, r3
 80007ac:	f001 fd3a 	bl	8002224 <HAL_RCC_ClockConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007b6:	f000 f831 	bl	800081c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
 80007ba:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80007be:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007cc:	463b      	mov	r3, r7
 80007ce:	4618      	mov	r0, r3
 80007d0:	f001 ff48 	bl	8002664 <HAL_RCCEx_PeriphCLKConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0xda>
  {
    Error_Handler();
 80007da:	f000 f81f 	bl	800081c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007e2:	f001 f8e3 	bl	80019ac <HAL_PWREx_ControlVoltageScaling>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0xec>
  {
    Error_Handler();
 80007ec:	f000 f816 	bl	800081c <Error_Handler>
  }
}
 80007f0:	bf00      	nop
 80007f2:	37e0      	adds	r7, #224	; 0xe0
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a04      	ldr	r2, [pc, #16]	; (8000818 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d101      	bne.n	800080e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800080a:	f000 fcd9 	bl	80011c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40012c00 	.word	0x40012c00

0800081c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
	...

0800082c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000832:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <HAL_MspInit+0x44>)
 8000834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000836:	4a0e      	ldr	r2, [pc, #56]	; (8000870 <HAL_MspInit+0x44>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	6613      	str	r3, [r2, #96]	; 0x60
 800083e:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <HAL_MspInit+0x44>)
 8000840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <HAL_MspInit+0x44>)
 800084c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800084e:	4a08      	ldr	r2, [pc, #32]	; (8000870 <HAL_MspInit+0x44>)
 8000850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000854:	6593      	str	r3, [r2, #88]	; 0x58
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <HAL_MspInit+0x44>)
 8000858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800085a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40021000 	.word	0x40021000

08000874 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08c      	sub	sp, #48	; 0x30
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000884:	2200      	movs	r2, #0
 8000886:	6879      	ldr	r1, [r7, #4]
 8000888:	2019      	movs	r0, #25
 800088a:	f000 fd71 	bl	8001370 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800088e:	2019      	movs	r0, #25
 8000890:	f000 fd8a 	bl	80013a8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000894:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <HAL_InitTick+0x9c>)
 8000896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000898:	4a1d      	ldr	r2, [pc, #116]	; (8000910 <HAL_InitTick+0x9c>)
 800089a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800089e:	6613      	str	r3, [r2, #96]	; 0x60
 80008a0:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <HAL_InitTick+0x9c>)
 80008a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008ac:	f107 0210 	add.w	r2, r7, #16
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4611      	mov	r1, r2
 80008b6:	4618      	mov	r0, r3
 80008b8:	f001 fe42 	bl	8002540 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008bc:	f001 fe2a 	bl	8002514 <HAL_RCC_GetPCLK2Freq>
 80008c0:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80008c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c4:	4a13      	ldr	r2, [pc, #76]	; (8000914 <HAL_InitTick+0xa0>)
 80008c6:	fba2 2303 	umull	r2, r3, r2, r3
 80008ca:	0c9b      	lsrs	r3, r3, #18
 80008cc:	3b01      	subs	r3, #1
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <HAL_InitTick+0xa4>)
 80008d2:	4a12      	ldr	r2, [pc, #72]	; (800091c <HAL_InitTick+0xa8>)
 80008d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <HAL_InitTick+0xa4>)
 80008d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008dc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008de:	4a0e      	ldr	r2, [pc, #56]	; (8000918 <HAL_InitTick+0xa4>)
 80008e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008e2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <HAL_InitTick+0xa4>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <HAL_InitTick+0xa4>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80008f0:	4809      	ldr	r0, [pc, #36]	; (8000918 <HAL_InitTick+0xa4>)
 80008f2:	f002 fb67 	bl	8002fc4 <HAL_TIM_Base_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d104      	bne.n	8000906 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80008fc:	4806      	ldr	r0, [pc, #24]	; (8000918 <HAL_InitTick+0xa4>)
 80008fe:	f002 fbc3 	bl	8003088 <HAL_TIM_Base_Start_IT>
 8000902:	4603      	mov	r3, r0
 8000904:	e000      	b.n	8000908 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000906:	2301      	movs	r3, #1
}
 8000908:	4618      	mov	r0, r3
 800090a:	3730      	adds	r7, #48	; 0x30
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40021000 	.word	0x40021000
 8000914:	431bde83 	.word	0x431bde83
 8000918:	2000017c 	.word	0x2000017c
 800091c:	40012c00 	.word	0x40012c00

08000920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <HardFault_Handler+0x4>

08000934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <MemManage_Handler+0x4>

0800093a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <BusFault_Handler+0x4>

08000940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <UsageFault_Handler+0x4>

08000946 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
	...

08000980 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000984:	4802      	ldr	r0, [pc, #8]	; (8000990 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000986:	f002 fbef 	bl	8003168 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	2000017c 	.word	0x2000017c

08000994 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
 80009a4:	e00a      	b.n	80009bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009a6:	f3af 8000 	nop.w
 80009aa:	4601      	mov	r1, r0
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	1c5a      	adds	r2, r3, #1
 80009b0:	60ba      	str	r2, [r7, #8]
 80009b2:	b2ca      	uxtb	r2, r1
 80009b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	3301      	adds	r3, #1
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	697a      	ldr	r2, [r7, #20]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	dbf0      	blt.n	80009a6 <_read+0x12>
	}

return len;
 80009c4:	687b      	ldr	r3, [r7, #4]
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3718      	adds	r7, #24
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <_close>:
	}
	return len;
}

int _close(int file)
{
 80009ce:	b480      	push	{r7}
 80009d0:	b083      	sub	sp, #12
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
	return -1;
 80009d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009da:	4618      	mov	r0, r3
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009e6:	b480      	push	{r7}
 80009e8:	b083      	sub	sp, #12
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
 80009ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009f6:	605a      	str	r2, [r3, #4]
	return 0;
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <_isatty>:

int _isatty(int file)
{
 8000a06:	b480      	push	{r7}
 8000a08:	b083      	sub	sp, #12
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
	return 1;
 8000a0e:	2301      	movs	r3, #1
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
	return 0;
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
	...

08000a38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a40:	4a14      	ldr	r2, [pc, #80]	; (8000a94 <_sbrk+0x5c>)
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <_sbrk+0x60>)
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a4c:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <_sbrk+0x64>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d102      	bne.n	8000a5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <_sbrk+0x64>)
 8000a56:	4a12      	ldr	r2, [pc, #72]	; (8000aa0 <_sbrk+0x68>)
 8000a58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a5a:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <_sbrk+0x64>)
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4413      	add	r3, r2
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d207      	bcs.n	8000a78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a68:	f002 fd7e 	bl	8003568 <__errno>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	230c      	movs	r3, #12
 8000a70:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a72:	f04f 33ff 	mov.w	r3, #4294967295
 8000a76:	e009      	b.n	8000a8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <_sbrk+0x64>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a7e:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <_sbrk+0x64>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4413      	add	r3, r2
 8000a86:	4a05      	ldr	r2, [pc, #20]	; (8000a9c <_sbrk+0x64>)
 8000a88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3718      	adds	r7, #24
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20018000 	.word	0x20018000
 8000a98:	00000400 	.word	0x00000400
 8000a9c:	2000008c 	.word	0x2000008c
 8000aa0:	20000258 	.word	0x20000258

08000aa4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa8:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <SystemInit+0x64>)
 8000aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aae:	4a16      	ldr	r2, [pc, #88]	; (8000b08 <SystemInit+0x64>)
 8000ab0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ab4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ab8:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <SystemInit+0x68>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a13      	ldr	r2, [pc, #76]	; (8000b0c <SystemInit+0x68>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <SystemInit+0x68>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <SystemInit+0x68>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a0f      	ldr	r2, [pc, #60]	; (8000b0c <SystemInit+0x68>)
 8000ad0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ad4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ad8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <SystemInit+0x68>)
 8000adc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ae0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <SystemInit+0x68>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a09      	ldr	r2, [pc, #36]	; (8000b0c <SystemInit+0x68>)
 8000ae8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000aee:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <SystemInit+0x68>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000af4:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <SystemInit+0x64>)
 8000af6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000afa:	609a      	str	r2, [r3, #8]
#endif
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000ed00 	.word	0xe000ed00
 8000b0c:	40021000 	.word	0x40021000

08000b10 <setUp>:
#include "unity.h"
#include "lsf.h"
#include "testfil.h"

void setUp(void)
{}
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <tearDown>:

void tearDown(void)
{}
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <unit_test>:

void unit_test(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
	setUp();
 8000b30:	f7ff ffee 	bl	8000b10 <setUp>

	UNITY_BEGIN();
 8000b34:	4818      	ldr	r0, [pc, #96]	; (8000b98 <unit_test+0x6c>)
 8000b36:	f000 fa83 	bl	8001040 <UnityBegin>
	//Enviromental snesor-tests
    RUN_TEST(test_lsf_start);
 8000b3a:	2218      	movs	r2, #24
 8000b3c:	4917      	ldr	r1, [pc, #92]	; (8000b9c <unit_test+0x70>)
 8000b3e:	4818      	ldr	r0, [pc, #96]	; (8000ba0 <unit_test+0x74>)
 8000b40:	f000 fa4a 	bl	8000fd8 <UnityDefaultTestRun>
	RUN_TEST(test_lsf_data_recv);
 8000b44:	2219      	movs	r2, #25
 8000b46:	4917      	ldr	r1, [pc, #92]	; (8000ba4 <unit_test+0x78>)
 8000b48:	4817      	ldr	r0, [pc, #92]	; (8000ba8 <unit_test+0x7c>)
 8000b4a:	f000 fa45 	bl	8000fd8 <UnityDefaultTestRun>

	//Ultrasound distance sensor-tests
	RUN_TEST(test_hc04_start_01);
 8000b4e:	221c      	movs	r2, #28
 8000b50:	4916      	ldr	r1, [pc, #88]	; (8000bac <unit_test+0x80>)
 8000b52:	4817      	ldr	r0, [pc, #92]	; (8000bb0 <unit_test+0x84>)
 8000b54:	f000 fa40 	bl	8000fd8 <UnityDefaultTestRun>
	RUN_TEST(test_hc04_start_02);
 8000b58:	221d      	movs	r2, #29
 8000b5a:	4916      	ldr	r1, [pc, #88]	; (8000bb4 <unit_test+0x88>)
 8000b5c:	4816      	ldr	r0, [pc, #88]	; (8000bb8 <unit_test+0x8c>)
 8000b5e:	f000 fa3b 	bl	8000fd8 <UnityDefaultTestRun>

	RUN_TEST(test_hc04_measure_01);
 8000b62:	221f      	movs	r2, #31
 8000b64:	4915      	ldr	r1, [pc, #84]	; (8000bbc <unit_test+0x90>)
 8000b66:	4816      	ldr	r0, [pc, #88]	; (8000bc0 <unit_test+0x94>)
 8000b68:	f000 fa36 	bl	8000fd8 <UnityDefaultTestRun>
	RUN_TEST(test_hc04_measure_02);
 8000b6c:	2220      	movs	r2, #32
 8000b6e:	4915      	ldr	r1, [pc, #84]	; (8000bc4 <unit_test+0x98>)
 8000b70:	4815      	ldr	r0, [pc, #84]	; (8000bc8 <unit_test+0x9c>)
 8000b72:	f000 fa31 	bl	8000fd8 <UnityDefaultTestRun>

	//Buzzer-tests
	RUN_TEST(test_buzzer_start);
 8000b76:	2223      	movs	r2, #35	; 0x23
 8000b78:	4914      	ldr	r1, [pc, #80]	; (8000bcc <unit_test+0xa0>)
 8000b7a:	4815      	ldr	r0, [pc, #84]	; (8000bd0 <unit_test+0xa4>)
 8000b7c:	f000 fa2c 	bl	8000fd8 <UnityDefaultTestRun>
	RUN_TEST(test_buzzer_sound);
 8000b80:	2224      	movs	r2, #36	; 0x24
 8000b82:	4914      	ldr	r1, [pc, #80]	; (8000bd4 <unit_test+0xa8>)
 8000b84:	4814      	ldr	r0, [pc, #80]	; (8000bd8 <unit_test+0xac>)
 8000b86:	f000 fa27 	bl	8000fd8 <UnityDefaultTestRun>
    UNITY_END();
 8000b8a:	f000 fa83 	bl	8001094 <UnityEnd>

    tearDown();
 8000b8e:	f7ff ffc6 	bl	8000b1e <tearDown>
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	08004440 	.word	0x08004440
 8000b9c:	08004458 	.word	0x08004458
 8000ba0:	08000bdd 	.word	0x08000bdd
 8000ba4:	08004468 	.word	0x08004468
 8000ba8:	08000bff 	.word	0x08000bff
 8000bac:	0800447c 	.word	0x0800447c
 8000bb0:	08000c0d 	.word	0x08000c0d
 8000bb4:	08004490 	.word	0x08004490
 8000bb8:	08000c1b 	.word	0x08000c1b
 8000bbc:	080044a4 	.word	0x080044a4
 8000bc0:	08000c29 	.word	0x08000c29
 8000bc4:	080044bc 	.word	0x080044bc
 8000bc8:	08000c37 	.word	0x08000c37
 8000bcc:	080044d4 	.word	0x080044d4
 8000bd0:	08000c45 	.word	0x08000c45
 8000bd4:	080044e8 	.word	0x080044e8
 8000bd8:	08000c53 	.word	0x08000c53

08000bdc <test_lsf_start>:

void test_lsf_start(void)
{TEST_ASSERT_EQUAL_UINT8(0, initialize_sensor());}
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af02      	add	r7, sp, #8
 8000be2:	f7ff fb55 	bl	8000290 <initialize_sensor>
 8000be6:	4603      	mov	r3, r0
 8000be8:	4619      	mov	r1, r3
 8000bea:	2321      	movs	r3, #33	; 0x21
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	232b      	movs	r3, #43	; 0x2b
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f000 f9aa 	bl	8000f4c <UnityAssertEqualNumber>
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <test_lsf_data_recv>:

void test_lsf_data_recv(void)
{}
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <test_hc04_start_01>:

void test_hc04_start_01(void)
{}
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <test_hc04_start_02>:

void test_hc04_start_02(void)
{}
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <test_hc04_measure_01>:

void test_hc04_measure_01(void)
{}
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <test_hc04_measure_02>:

void test_hc04_measure_02(void)
{}
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <test_buzzer_start>:

void test_buzzer_start(void)
{}
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <test_buzzer_sound>:

void test_buzzer_sound(void)
{}
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <UnityPrintChar>:
 *-----------------------------------------------*/

/*-----------------------------------------------*/
/* Local helper function to print characters. */
static void UnityPrintChar(const char* pch)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
    /* printable characters plus CR & LF are printed */
    if ((*pch <= 126) && (*pch >= 32))
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b7e      	cmp	r3, #126	; 0x7e
 8000c6e:	d809      	bhi.n	8000c84 <UnityPrintChar+0x24>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b1f      	cmp	r3, #31
 8000c76:	d905      	bls.n	8000c84 <UnityPrintChar+0x24>
    {
        UNITY_OUTPUT_CHAR(*pch);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f002 fcbd 	bl	80035fc <putchar>
    {
        UNITY_OUTPUT_CHAR('\\');
        UNITY_OUTPUT_CHAR('x');
        UnityPrintNumberHex((UNITY_UINT)*pch, 2);
    }
}
 8000c82:	e021      	b.n	8000cc8 <UnityPrintChar+0x68>
    else if (*pch == 13)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b0d      	cmp	r3, #13
 8000c8a:	d106      	bne.n	8000c9a <UnityPrintChar+0x3a>
        UNITY_OUTPUT_CHAR('\\');
 8000c8c:	205c      	movs	r0, #92	; 0x5c
 8000c8e:	f002 fcb5 	bl	80035fc <putchar>
        UNITY_OUTPUT_CHAR('r');
 8000c92:	2072      	movs	r0, #114	; 0x72
 8000c94:	f002 fcb2 	bl	80035fc <putchar>
}
 8000c98:	e016      	b.n	8000cc8 <UnityPrintChar+0x68>
    else if (*pch == 10)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b0a      	cmp	r3, #10
 8000ca0:	d106      	bne.n	8000cb0 <UnityPrintChar+0x50>
        UNITY_OUTPUT_CHAR('\\');
 8000ca2:	205c      	movs	r0, #92	; 0x5c
 8000ca4:	f002 fcaa 	bl	80035fc <putchar>
        UNITY_OUTPUT_CHAR('n');
 8000ca8:	206e      	movs	r0, #110	; 0x6e
 8000caa:	f002 fca7 	bl	80035fc <putchar>
}
 8000cae:	e00b      	b.n	8000cc8 <UnityPrintChar+0x68>
        UNITY_OUTPUT_CHAR('\\');
 8000cb0:	205c      	movs	r0, #92	; 0x5c
 8000cb2:	f002 fca3 	bl	80035fc <putchar>
        UNITY_OUTPUT_CHAR('x');
 8000cb6:	2078      	movs	r0, #120	; 0x78
 8000cb8:	f002 fca0 	bl	80035fc <putchar>
        UnityPrintNumberHex((UNITY_UINT)*pch, 2);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2102      	movs	r1, #2
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 f868 	bl	8000d98 <UnityPrintNumberHex>
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <UnityPrint>:
}
#endif

/*-----------------------------------------------*/
void UnityPrint(const char* string)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
    const char* pch = string;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	60fb      	str	r3, [r7, #12]

    if (pch != NULL)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d00a      	beq.n	8000cf8 <UnityPrint+0x28>
    {
        while (*pch)
 8000ce2:	e005      	b.n	8000cf0 <UnityPrint+0x20>
            {
                pch += UnityPrintAnsiEscapeString(pch);
                continue;
            }
#endif
            UnityPrintChar(pch);
 8000ce4:	68f8      	ldr	r0, [r7, #12]
 8000ce6:	f7ff ffbb 	bl	8000c60 <UnityPrintChar>
            pch++;
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	3301      	adds	r3, #1
 8000cee:	60fb      	str	r3, [r7, #12]
        while (*pch)
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d1f5      	bne.n	8000ce4 <UnityPrint+0x14>
        }
    }
}
 8000cf8:	bf00      	nop
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <UnityPrintNumber>:
    }
}

/*-----------------------------------------------*/
void UnityPrintNumber(const UNITY_INT number_to_print)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
    UNITY_UINT number = (UNITY_UINT)number_to_print;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	60fb      	str	r3, [r7, #12]

    if (number_to_print < 0)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	da05      	bge.n	8000d1e <UnityPrintNumber+0x1e>
    {
        /* A negative number, including MIN negative */
        UNITY_OUTPUT_CHAR('-');
 8000d12:	202d      	movs	r0, #45	; 0x2d
 8000d14:	f002 fc72 	bl	80035fc <putchar>
        number = (~number) + 1;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	425b      	negs	r3, r3
 8000d1c:	60fb      	str	r3, [r7, #12]
    }
    UnityPrintNumberUnsigned(number);
 8000d1e:	68f8      	ldr	r0, [r7, #12]
 8000d20:	f000 f804 	bl	8000d2c <UnityPrintNumberUnsigned>
}
 8000d24:	bf00      	nop
 8000d26:	3710      	adds	r7, #16
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <UnityPrintNumberUnsigned>:

/*-----------------------------------------------
 * basically do an itoa using as little ram as possible */
void UnityPrintNumberUnsigned(const UNITY_UINT number)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
    UNITY_UINT divisor = 1;
 8000d34:	2301      	movs	r3, #1
 8000d36:	60fb      	str	r3, [r7, #12]

    /* figure out initial divisor */
    while (number / divisor > 9)
 8000d38:	e005      	b.n	8000d46 <UnityPrintNumberUnsigned+0x1a>
    {
        divisor *= 10;
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	4413      	add	r3, r2
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	60fb      	str	r3, [r7, #12]
    while (number / divisor > 9)
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4e:	2b09      	cmp	r3, #9
 8000d50:	d8f3      	bhi.n	8000d3a <UnityPrintNumberUnsigned+0xe>
    }

    /* now mod and print, then divide divisor */
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	fbb2 f1f3 	udiv	r1, r2, r3
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <UnityPrintNumberUnsigned+0x68>)
 8000d5c:	fba3 2301 	umull	r2, r3, r3, r1
 8000d60:	08da      	lsrs	r2, r3, #3
 8000d62:	4613      	mov	r3, r2
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	4413      	add	r3, r2
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	1aca      	subs	r2, r1, r3
 8000d6c:	b2d3      	uxtb	r3, r2
 8000d6e:	3330      	adds	r3, #48	; 0x30
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	4618      	mov	r0, r3
 8000d74:	f002 fc42 	bl	80035fc <putchar>
        divisor /= 10;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4a06      	ldr	r2, [pc, #24]	; (8000d94 <UnityPrintNumberUnsigned+0x68>)
 8000d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d80:	08db      	lsrs	r3, r3, #3
 8000d82:	60fb      	str	r3, [r7, #12]
    } while (divisor > 0);
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d1e3      	bne.n	8000d52 <UnityPrintNumberUnsigned+0x26>
}
 8000d8a:	bf00      	nop
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	cccccccd 	.word	0xcccccccd

08000d98 <UnityPrintNumberHex>:

/*-----------------------------------------------*/
void UnityPrintNumberHex(const UNITY_UINT number, const char nibbles_to_print)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	460b      	mov	r3, r1
 8000da2:	70fb      	strb	r3, [r7, #3]
    int nibble;
    char nibbles = nibbles_to_print;
 8000da4:	78fb      	ldrb	r3, [r7, #3]
 8000da6:	73fb      	strb	r3, [r7, #15]

    if ((unsigned)nibbles > UNITY_MAX_NIBBLES)
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	2b08      	cmp	r3, #8
 8000dac:	d91f      	bls.n	8000dee <UnityPrintNumberHex+0x56>
    {
        nibbles = UNITY_MAX_NIBBLES;
 8000dae:	2308      	movs	r3, #8
 8000db0:	73fb      	strb	r3, [r7, #15]
    }

    while (nibbles > 0)
 8000db2:	e01c      	b.n	8000dee <UnityPrintNumberHex+0x56>
    {
        nibbles--;
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	73fb      	strb	r3, [r7, #15]
        nibble = (int)(number >> (nibbles * 4)) & 0x0F;
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8000dc4:	f003 030f 	and.w	r3, r3, #15
 8000dc8:	60bb      	str	r3, [r7, #8]
        if (nibble <= 9)
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	2b09      	cmp	r3, #9
 8000dce:	dc07      	bgt.n	8000de0 <UnityPrintNumberHex+0x48>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	3330      	adds	r3, #48	; 0x30
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f002 fc0f 	bl	80035fc <putchar>
 8000dde:	e006      	b.n	8000dee <UnityPrintNumberHex+0x56>
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	3337      	adds	r3, #55	; 0x37
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	4618      	mov	r0, r3
 8000dea:	f002 fc07 	bl	80035fc <putchar>
    while (nibbles > 0)
 8000dee:	7bfb      	ldrb	r3, [r7, #15]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d1df      	bne.n	8000db4 <UnityPrintNumberHex+0x1c>
        }
    }
}
 8000df4:	bf00      	nop
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <UnityTestResultsBegin>:
}
#endif /* ! UNITY_EXCLUDE_FLOAT_PRINT */

/*-----------------------------------------------*/
static void UnityTestResultsBegin(const char* file, const UNITY_LINE_TYPE line)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
    UnityPrintNumber((UNITY_INT)line);
    UNITY_OUTPUT_CHAR(' ');
    UnityPrint(Unity.CurrentTestName);
    UNITY_OUTPUT_CHAR(':');
#else
    UnityPrint(file);
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff ff62 	bl	8000cd0 <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
 8000e0c:	203a      	movs	r0, #58	; 0x3a
 8000e0e:	f002 fbf5 	bl	80035fc <putchar>
    UnityPrintNumber((UNITY_INT)line);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ff73 	bl	8000d00 <UnityPrintNumber>
    UNITY_OUTPUT_CHAR(':');
 8000e1a:	203a      	movs	r0, #58	; 0x3a
 8000e1c:	f002 fbee 	bl	80035fc <putchar>
    UnityPrint(Unity.CurrentTestName);
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <UnityTestResultsBegin+0x3c>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff53 	bl	8000cd0 <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
 8000e2a:	203a      	movs	r0, #58	; 0x3a
 8000e2c:	f002 fbe6 	bl	80035fc <putchar>
#endif
#endif
#endif
}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	200001c8 	.word	0x200001c8

08000e3c <UnityTestResultsFailBegin>:

/*-----------------------------------------------*/
static void UnityTestResultsFailBegin(const UNITY_LINE_TYPE line)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
    UnityTestResultsBegin(Unity.TestFile, line);
 8000e44:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <UnityTestResultsFailBegin+0x30>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	6879      	ldr	r1, [r7, #4]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff ffd6 	bl	8000dfc <UnityTestResultsBegin>
    //UnityPrint(UnityStrFail);
    printf(UnityStrFail);
 8000e50:	4807      	ldr	r0, [pc, #28]	; (8000e70 <UnityTestResultsFailBegin+0x34>)
 8000e52:	f002 fbbb 	bl	80035cc <iprintf>
    printf(Fail);
 8000e56:	4807      	ldr	r0, [pc, #28]	; (8000e74 <UnityTestResultsFailBegin+0x38>)
 8000e58:	f002 fbb8 	bl	80035cc <iprintf>
    UNITY_OUTPUT_CHAR(':');
 8000e5c:	203a      	movs	r0, #58	; 0x3a
 8000e5e:	f002 fbcd 	bl	80035fc <putchar>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	200001c8 	.word	0x200001c8
 8000e70:	08004590 	.word	0x08004590
 8000e74:	08004588 	.word	0x08004588

08000e78 <UnityConcludeTest>:

/*-----------------------------------------------*/
void UnityConcludeTest(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
    if (Unity.CurrentTestIgnored)
 8000e7c:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <UnityConcludeTest+0x60>)
 8000e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d005      	beq.n	8000e90 <UnityConcludeTest+0x18>
    {
        Unity.TestIgnores++;
 8000e84:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <UnityConcludeTest+0x60>)
 8000e86:	69db      	ldr	r3, [r3, #28]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	4a13      	ldr	r2, [pc, #76]	; (8000ed8 <UnityConcludeTest+0x60>)
 8000e8c:	61d3      	str	r3, [r2, #28]
 8000e8e:	e017      	b.n	8000ec0 <UnityConcludeTest+0x48>
    }
    else if (!Unity.CurrentTestFailed)
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <UnityConcludeTest+0x60>)
 8000e92:	6a1b      	ldr	r3, [r3, #32]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d10e      	bne.n	8000eb6 <UnityConcludeTest+0x3e>
    {
        UnityTestResultsBegin(Unity.TestFile, Unity.CurrentTestLineNumber);
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <UnityConcludeTest+0x60>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <UnityConcludeTest+0x60>)
 8000e9e:	691b      	ldr	r3, [r3, #16]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4610      	mov	r0, r2
 8000ea4:	f7ff ffaa 	bl	8000dfc <UnityTestResultsBegin>
        //UnityPrint(UnityStrPass);
        printf(UnityStrPass);
 8000ea8:	480c      	ldr	r0, [pc, #48]	; (8000edc <UnityConcludeTest+0x64>)
 8000eaa:	f002 fb8f 	bl	80035cc <iprintf>
        printf(Check);
 8000eae:	480c      	ldr	r0, [pc, #48]	; (8000ee0 <UnityConcludeTest+0x68>)
 8000eb0:	f002 fb8c 	bl	80035cc <iprintf>
 8000eb4:	e004      	b.n	8000ec0 <UnityConcludeTest+0x48>
    }
    else
    {
        Unity.TestFailures++;
 8000eb6:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <UnityConcludeTest+0x60>)
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	4a06      	ldr	r2, [pc, #24]	; (8000ed8 <UnityConcludeTest+0x60>)
 8000ebe:	6193      	str	r3, [r2, #24]
    }

    Unity.CurrentTestFailed = 0;
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <UnityConcludeTest+0x60>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	621a      	str	r2, [r3, #32]
    Unity.CurrentTestIgnored = 0;
 8000ec6:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <UnityConcludeTest+0x60>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	625a      	str	r2, [r3, #36]	; 0x24
    //printf("%d\n", (Unity.CurrentTestStopTime - Unity.CurrentTestStartTime));
    UNITY_PRINT_EXEC_TIME();
    UNITY_PRINT_EOL();
 8000ecc:	200a      	movs	r0, #10
 8000ece:	f002 fb95 	bl	80035fc <putchar>
    UNITY_FLUSH_CALL();
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	200001c8 	.word	0x200001c8
 8000edc:	08004578 	.word	0x08004578
 8000ee0:	08004580 	.word	0x08004580

08000ee4 <UnityAddMsgIfSpecified>:

/*-----------------------------------------------*/
static void UnityAddMsgIfSpecified(const char* msg)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
    if (msg)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d020      	beq.n	8000f34 <UnityAddMsgIfSpecified+0x50>
    {
        UnityPrint(UnityStrSpacer);
 8000ef2:	4812      	ldr	r0, [pc, #72]	; (8000f3c <UnityAddMsgIfSpecified+0x58>)
 8000ef4:	f7ff feec 	bl	8000cd0 <UnityPrint>

#ifdef UNITY_PRINT_TEST_CONTEXT
        UNITY_PRINT_TEST_CONTEXT();
#endif
#ifndef UNITY_EXCLUDE_DETAILS
        if (Unity.CurrentDetail1)
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <UnityAddMsgIfSpecified+0x5c>)
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d016      	beq.n	8000f2e <UnityAddMsgIfSpecified+0x4a>
        {
            UnityPrint(UnityStrDetail1Name);
 8000f00:	4810      	ldr	r0, [pc, #64]	; (8000f44 <UnityAddMsgIfSpecified+0x60>)
 8000f02:	f7ff fee5 	bl	8000cd0 <UnityPrint>
            UnityPrint(Unity.CurrentDetail1);
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <UnityAddMsgIfSpecified+0x5c>)
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff fee0 	bl	8000cd0 <UnityPrint>
            if (Unity.CurrentDetail2)
 8000f10:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <UnityAddMsgIfSpecified+0x5c>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d007      	beq.n	8000f28 <UnityAddMsgIfSpecified+0x44>
            {
                UnityPrint(UnityStrDetail2Name);
 8000f18:	480b      	ldr	r0, [pc, #44]	; (8000f48 <UnityAddMsgIfSpecified+0x64>)
 8000f1a:	f7ff fed9 	bl	8000cd0 <UnityPrint>
                UnityPrint(Unity.CurrentDetail2);
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <UnityAddMsgIfSpecified+0x5c>)
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fed4 	bl	8000cd0 <UnityPrint>
            }
            UnityPrint(UnityStrSpacer);
 8000f28:	4804      	ldr	r0, [pc, #16]	; (8000f3c <UnityAddMsgIfSpecified+0x58>)
 8000f2a:	f7ff fed1 	bl	8000cd0 <UnityPrint>
        }
#endif
        UnityPrint(msg);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff fece 	bl	8000cd0 <UnityPrint>
    }
}
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	08004598 	.word	0x08004598
 8000f40:	200001c8 	.word	0x200001c8
 8000f44:	08004624 	.word	0x08004624
 8000f48:	08004630 	.word	0x08004630

08000f4c <UnityAssertEqualNumber>:
void UnityAssertEqualNumber(const UNITY_INT expected,
                            const UNITY_INT actual,
                            const char* msg,
                            const UNITY_LINE_TYPE lineNumber,
                            const UNITY_DISPLAY_STYLE_T style)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
 8000f58:	603b      	str	r3, [r7, #0]
    RETURN_IF_FAIL_OR_IGNORE;
 8000f5a:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <UnityAssertEqualNumber+0x74>)
 8000f5c:	6a1b      	ldr	r3, [r3, #32]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d103      	bne.n	8000f6a <UnityAssertEqualNumber+0x1e>
 8000f62:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <UnityAssertEqualNumber+0x74>)
 8000f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <UnityAssertEqualNumber+0x26>
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	4815      	ldr	r0, [pc, #84]	; (8000fc4 <UnityAssertEqualNumber+0x78>)
 8000f6e:	f7ff f935 	bl	80001dc <longjmp>

    if (expected != actual)
 8000f72:	68fa      	ldr	r2, [r7, #12]
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d01d      	beq.n	8000fb6 <UnityAssertEqualNumber+0x6a>
    {
    	UnityTestResultsFailBegin(lineNumber);
 8000f7a:	6838      	ldr	r0, [r7, #0]
 8000f7c:	f7ff ff5e 	bl	8000e3c <UnityTestResultsFailBegin>
    	printf("\n");
 8000f80:	200a      	movs	r0, #10
 8000f82:	f002 fb3b 	bl	80035fc <putchar>
    	printf(UnityStrExpected);
 8000f86:	4810      	ldr	r0, [pc, #64]	; (8000fc8 <UnityAssertEqualNumber+0x7c>)
 8000f88:	f002 fb20 	bl	80035cc <iprintf>
        printf("%d\n", expected);
 8000f8c:	68f9      	ldr	r1, [r7, #12]
 8000f8e:	480f      	ldr	r0, [pc, #60]	; (8000fcc <UnityAssertEqualNumber+0x80>)
 8000f90:	f002 fb1c 	bl	80035cc <iprintf>
        printf(UnityStrWas);
 8000f94:	480e      	ldr	r0, [pc, #56]	; (8000fd0 <UnityAssertEqualNumber+0x84>)
 8000f96:	f002 fb19 	bl	80035cc <iprintf>
        printf("%d", actual);
 8000f9a:	68b9      	ldr	r1, [r7, #8]
 8000f9c:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <UnityAssertEqualNumber+0x88>)
 8000f9e:	f002 fb15 	bl	80035cc <iprintf>
        UnityAddMsgIfSpecified(msg);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff ff9e 	bl	8000ee4 <UnityAddMsgIfSpecified>
        UNITY_FAIL_AND_BAIL;
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <UnityAssertEqualNumber+0x74>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	621a      	str	r2, [r3, #32]
 8000fae:	2101      	movs	r1, #1
 8000fb0:	4804      	ldr	r0, [pc, #16]	; (8000fc4 <UnityAssertEqualNumber+0x78>)
 8000fb2:	f7ff f913 	bl	80001dc <longjmp>
        UnityPrintNumberByStyle(actual, style);
        UnityAddMsgIfSpecified(msg);
        UNITY_FAIL_AND_BAIL;
    	*/
    }
}
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200001c8 	.word	0x200001c8
 8000fc4:	200001f0 	.word	0x200001f0
 8000fc8:	0800459c 	.word	0x0800459c
 8000fcc:	0800450c 	.word	0x0800450c
 8000fd0:	080045a8 	.word	0x080045a8
 8000fd4:	08004510 	.word	0x08004510

08000fd8 <UnityDefaultTestRun>:
/*-----------------------------------------------*/
/* If we have not defined our own test runner, then include our default test runner to make life easier */
#ifndef UNITY_SKIP_DEFAULT_RUNNER

void UnityDefaultTestRun(UnityTestFunction Func, const char* FuncName, const int FuncLineNum)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
    Unity.CurrentTestName = FuncName;
 8000fe4:	4a14      	ldr	r2, [pc, #80]	; (8001038 <UnityDefaultTestRun+0x60>)
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	6053      	str	r3, [r2, #4]
    Unity.CurrentTestLineNumber = (UNITY_LINE_TYPE)FuncLineNum;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a12      	ldr	r2, [pc, #72]	; (8001038 <UnityDefaultTestRun+0x60>)
 8000fee:	6113      	str	r3, [r2, #16]
    Unity.NumberOfTests++;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <UnityDefaultTestRun+0x60>)
 8000ff2:	695b      	ldr	r3, [r3, #20]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	4a10      	ldr	r2, [pc, #64]	; (8001038 <UnityDefaultTestRun+0x60>)
 8000ff8:	6153      	str	r3, [r2, #20]
    UNITY_CLR_DETAILS();
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <UnityDefaultTestRun+0x60>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <UnityDefaultTestRun+0x60>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]

    //UNITY_EXEC_TIME_START();
    if (TEST_PROTECT())
 8001006:	480d      	ldr	r0, [pc, #52]	; (800103c <UnityDefaultTestRun+0x64>)
 8001008:	f7ff f8e2 	bl	80001d0 <setjmp>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d103      	bne.n	800101a <UnityDefaultTestRun+0x42>
    {
        setUp();
 8001012:	f7ff fd7d 	bl	8000b10 <setUp>
        Func();
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	4798      	blx	r3
    }
    if (TEST_PROTECT())
 800101a:	4808      	ldr	r0, [pc, #32]	; (800103c <UnityDefaultTestRun+0x64>)
 800101c:	f7ff f8d8 	bl	80001d0 <setjmp>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <UnityDefaultTestRun+0x52>
    {
        tearDown();
 8001026:	f7ff fd7a 	bl	8000b1e <tearDown>
    }
    //UNITY_EXEC_TIME_STOP();

    UnityConcludeTest();
 800102a:	f7ff ff25 	bl	8000e78 <UnityConcludeTest>
}
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200001c8 	.word	0x200001c8
 800103c:	200001f0 	.word	0x200001f0

08001040 <UnityBegin>:
	Unity.TestFile = filename;
}

/*-----------------------------------------------*/
void UnityBegin(const char* filename)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
    Unity.TestFile = filename;
 8001048:	4a11      	ldr	r2, [pc, #68]	; (8001090 <UnityBegin+0x50>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6013      	str	r3, [r2, #0]
    Unity.CurrentTestName = NULL;
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <UnityBegin+0x50>)
 8001050:	2200      	movs	r2, #0
 8001052:	605a      	str	r2, [r3, #4]
    Unity.CurrentTestLineNumber = 0;
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <UnityBegin+0x50>)
 8001056:	2200      	movs	r2, #0
 8001058:	611a      	str	r2, [r3, #16]
    Unity.NumberOfTests = 0;
 800105a:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <UnityBegin+0x50>)
 800105c:	2200      	movs	r2, #0
 800105e:	615a      	str	r2, [r3, #20]
    Unity.TestFailures = 0;
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <UnityBegin+0x50>)
 8001062:	2200      	movs	r2, #0
 8001064:	619a      	str	r2, [r3, #24]
    Unity.TestIgnores = 0;
 8001066:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <UnityBegin+0x50>)
 8001068:	2200      	movs	r2, #0
 800106a:	61da      	str	r2, [r3, #28]
    Unity.CurrentTestFailed = 0;
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <UnityBegin+0x50>)
 800106e:	2200      	movs	r2, #0
 8001070:	621a      	str	r2, [r3, #32]
    Unity.CurrentTestIgnored = 0;
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <UnityBegin+0x50>)
 8001074:	2200      	movs	r2, #0
 8001076:	625a      	str	r2, [r3, #36]	; 0x24

    UNITY_CLR_DETAILS();
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <UnityBegin+0x50>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	4b04      	ldr	r3, [pc, #16]	; (8001090 <UnityBegin+0x50>)
 8001080:	2200      	movs	r2, #0
 8001082:	60da      	str	r2, [r3, #12]
    UNITY_OUTPUT_START();
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	200001c8 	.word	0x200001c8

08001094 <UnityEnd>:

/*-----------------------------------------------*/
int UnityEnd(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
    printf(UnityStrBreaker);
 8001098:	481c      	ldr	r0, [pc, #112]	; (800110c <UnityEnd+0x78>)
 800109a:	f002 fa97 	bl	80035cc <iprintf>
    printf("\n");
 800109e:	200a      	movs	r0, #10
 80010a0:	f002 faac 	bl	80035fc <putchar>
    printf(UnityStrResultsTests);
 80010a4:	481a      	ldr	r0, [pc, #104]	; (8001110 <UnityEnd+0x7c>)
 80010a6:	f002 fa91 	bl	80035cc <iprintf>
    printf("%d\n", (UNITY_INT)(Unity.NumberOfTests));
 80010aa:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <UnityEnd+0x80>)
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	4619      	mov	r1, r3
 80010b0:	4819      	ldr	r0, [pc, #100]	; (8001118 <UnityEnd+0x84>)
 80010b2:	f002 fa8b 	bl	80035cc <iprintf>
    printf(UnityStrResultsFailures);
 80010b6:	4819      	ldr	r0, [pc, #100]	; (800111c <UnityEnd+0x88>)
 80010b8:	f002 fa88 	bl	80035cc <iprintf>
    printf("%d\n", (UNITY_INT)(Unity.TestFailures));
 80010bc:	4b15      	ldr	r3, [pc, #84]	; (8001114 <UnityEnd+0x80>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	4619      	mov	r1, r3
 80010c2:	4815      	ldr	r0, [pc, #84]	; (8001118 <UnityEnd+0x84>)
 80010c4:	f002 fa82 	bl	80035cc <iprintf>
    printf(UnityStrResultsIgnored);
 80010c8:	4815      	ldr	r0, [pc, #84]	; (8001120 <UnityEnd+0x8c>)
 80010ca:	f002 fa7f 	bl	80035cc <iprintf>
    printf("%d\n", (UNITY_INT)(Unity.TestIgnores));
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <UnityEnd+0x80>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	4619      	mov	r1, r3
 80010d4:	4810      	ldr	r0, [pc, #64]	; (8001118 <UnityEnd+0x84>)
 80010d6:	f002 fa79 	bl	80035cc <iprintf>
    printf("\n");
 80010da:	200a      	movs	r0, #10
 80010dc:	f002 fa8e 	bl	80035fc <putchar>
    if (Unity.TestFailures == 0U)
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <UnityEnd+0x80>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d106      	bne.n	80010f6 <UnityEnd+0x62>
    {
        printf(UnityStrOk);
 80010e8:	480e      	ldr	r0, [pc, #56]	; (8001124 <UnityEnd+0x90>)
 80010ea:	f002 fa6f 	bl	80035cc <iprintf>
        printf("\n");
 80010ee:	200a      	movs	r0, #10
 80010f0:	f002 fa84 	bl	80035fc <putchar>
 80010f4:	e002      	b.n	80010fc <UnityEnd+0x68>
    }
    else
    {
        printf(UnityStrFail);
 80010f6:	480c      	ldr	r0, [pc, #48]	; (8001128 <UnityEnd+0x94>)
 80010f8:	f002 fa68 	bl	80035cc <iprintf>
		#ifdef UNITY_DIFFERENTIATE_FINAL_FAIL
        printf('E'); printf('D');
		#endif
    }
    printf("\n");
 80010fc:	200a      	movs	r0, #10
 80010fe:	f002 fa7d 	bl	80035fc <putchar>
    UNITY_FLUSH_CALL();
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures);
 8001102:	4b04      	ldr	r3, [pc, #16]	; (8001114 <UnityEnd+0x80>)
 8001104:	699b      	ldr	r3, [r3, #24]
    UNITY_PRINT_EOL();
    UNITY_FLUSH_CALL();
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures); */

}
 8001106:	4618      	mov	r0, r3
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	080045e0 	.word	0x080045e0
 8001110:	080045f8 	.word	0x080045f8
 8001114:	200001c8 	.word	0x200001c8
 8001118:	0800450c 	.word	0x0800450c
 800111c:	0800460c 	.word	0x0800460c
 8001120:	08004618 	.word	0x08004618
 8001124:	08004574 	.word	0x08004574
 8001128:	08004590 	.word	0x08004590

0800112c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800112c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001164 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001130:	f7ff fcb8 	bl	8000aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001134:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001136:	e003      	b.n	8001140 <LoopCopyDataInit>

08001138 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001138:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800113a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800113c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800113e:	3104      	adds	r1, #4

08001140 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001140:	480a      	ldr	r0, [pc, #40]	; (800116c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001144:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001146:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001148:	d3f6      	bcc.n	8001138 <CopyDataInit>
	ldr	r2, =_sbss
 800114a:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <LoopForever+0x12>)
	b	LoopFillZerobss
 800114c:	e002      	b.n	8001154 <LoopFillZerobss>

0800114e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800114e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001150:	f842 3b04 	str.w	r3, [r2], #4

08001154 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <LoopForever+0x16>)
	cmp	r2, r3
 8001156:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001158:	d3f9      	bcc.n	800114e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800115a:	f002 fa0b 	bl	8003574 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800115e:	f7ff fac0 	bl	80006e2 <main>

08001162 <LoopForever>:

LoopForever:
    b LoopForever
 8001162:	e7fe      	b.n	8001162 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001164:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001168:	080046dc 	.word	0x080046dc
	ldr	r0, =_sdata
 800116c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001170:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001174:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001178:	20000254 	.word	0x20000254

0800117c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800117c:	e7fe      	b.n	800117c <ADC1_2_IRQHandler>
	...

08001180 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001186:	2300      	movs	r3, #0
 8001188:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <HAL_Init+0x3c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a0b      	ldr	r2, [pc, #44]	; (80011bc <HAL_Init+0x3c>)
 8001190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001194:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001196:	2003      	movs	r0, #3
 8001198:	f000 f8df 	bl	800135a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800119c:	2000      	movs	r0, #0
 800119e:	f7ff fb69 	bl	8000874 <HAL_InitTick>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d002      	beq.n	80011ae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	71fb      	strb	r3, [r7, #7]
 80011ac:	e001      	b.n	80011b2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011ae:	f7ff fb3d 	bl	800082c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011b2:	79fb      	ldrb	r3, [r7, #7]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40022000 	.word	0x40022000

080011c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_IncTick+0x20>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_IncTick+0x24>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4413      	add	r3, r2
 80011d0:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <HAL_IncTick+0x24>)
 80011d2:	6013      	str	r3, [r2, #0]
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000008 	.word	0x20000008
 80011e4:	2000024c 	.word	0x2000024c

080011e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return uwTick;
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <HAL_GetTick+0x14>)
 80011ee:	681b      	ldr	r3, [r3, #0]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	2000024c 	.word	0x2000024c

08001200 <__NVIC_SetPriorityGrouping>:
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800121c:	4013      	ands	r3, r2
 800121e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001228:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800122c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001232:	4a04      	ldr	r2, [pc, #16]	; (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	60d3      	str	r3, [r2, #12]
}
 8001238:	bf00      	nop
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_GetPriorityGrouping>:
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <__NVIC_GetPriorityGrouping+0x18>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	0a1b      	lsrs	r3, r3, #8
 8001252:	f003 0307 	and.w	r3, r3, #7
}
 8001256:	4618      	mov	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_EnableIRQ>:
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	2b00      	cmp	r3, #0
 8001274:	db0b      	blt.n	800128e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	f003 021f 	and.w	r2, r3, #31
 800127c:	4907      	ldr	r1, [pc, #28]	; (800129c <__NVIC_EnableIRQ+0x38>)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	095b      	lsrs	r3, r3, #5
 8001284:	2001      	movs	r0, #1
 8001286:	fa00 f202 	lsl.w	r2, r0, r2
 800128a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000e100 	.word	0xe000e100

080012a0 <__NVIC_SetPriority>:
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	6039      	str	r1, [r7, #0]
 80012aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	db0a      	blt.n	80012ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	490c      	ldr	r1, [pc, #48]	; (80012ec <__NVIC_SetPriority+0x4c>)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	0112      	lsls	r2, r2, #4
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	440b      	add	r3, r1
 80012c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80012c8:	e00a      	b.n	80012e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4908      	ldr	r1, [pc, #32]	; (80012f0 <__NVIC_SetPriority+0x50>)
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	3b04      	subs	r3, #4
 80012d8:	0112      	lsls	r2, r2, #4
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	440b      	add	r3, r1
 80012de:	761a      	strb	r2, [r3, #24]
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000e100 	.word	0xe000e100
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <NVIC_EncodePriority>:
{
 80012f4:	b480      	push	{r7}
 80012f6:	b089      	sub	sp, #36	; 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f1c3 0307 	rsb	r3, r3, #7
 800130e:	2b04      	cmp	r3, #4
 8001310:	bf28      	it	cs
 8001312:	2304      	movcs	r3, #4
 8001314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3304      	adds	r3, #4
 800131a:	2b06      	cmp	r3, #6
 800131c:	d902      	bls.n	8001324 <NVIC_EncodePriority+0x30>
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3b03      	subs	r3, #3
 8001322:	e000      	b.n	8001326 <NVIC_EncodePriority+0x32>
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001328:	f04f 32ff 	mov.w	r2, #4294967295
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43da      	mvns	r2, r3
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	401a      	ands	r2, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800133c:	f04f 31ff 	mov.w	r1, #4294967295
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	fa01 f303 	lsl.w	r3, r1, r3
 8001346:	43d9      	mvns	r1, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	4313      	orrs	r3, r2
}
 800134e:	4618      	mov	r0, r3
 8001350:	3724      	adds	r7, #36	; 0x24
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ff4c 	bl	8001200 <__NVIC_SetPriorityGrouping>
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
 800137c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001382:	f7ff ff61 	bl	8001248 <__NVIC_GetPriorityGrouping>
 8001386:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	68b9      	ldr	r1, [r7, #8]
 800138c:	6978      	ldr	r0, [r7, #20]
 800138e:	f7ff ffb1 	bl	80012f4 <NVIC_EncodePriority>
 8001392:	4602      	mov	r2, r0
 8001394:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001398:	4611      	mov	r1, r2
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff ff80 	bl	80012a0 <__NVIC_SetPriority>
}
 80013a0:	bf00      	nop
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff ff54 	bl	8001264 <__NVIC_EnableIRQ>
}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b087      	sub	sp, #28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013d2:	e17f      	b.n	80016d4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	2101      	movs	r1, #1
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	fa01 f303 	lsl.w	r3, r1, r3
 80013e0:	4013      	ands	r3, r2
 80013e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 8171 	beq.w	80016ce <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d00b      	beq.n	800140c <HAL_GPIO_Init+0x48>
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d007      	beq.n	800140c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001400:	2b11      	cmp	r3, #17
 8001402:	d003      	beq.n	800140c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2b12      	cmp	r3, #18
 800140a:	d130      	bne.n	800146e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	2203      	movs	r2, #3
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4013      	ands	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	68da      	ldr	r2, [r3, #12]
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	4313      	orrs	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001442:	2201      	movs	r2, #1
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43db      	mvns	r3, r3
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	4013      	ands	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	091b      	lsrs	r3, r3, #4
 8001458:	f003 0201 	and.w	r2, r3, #1
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	2b03      	cmp	r3, #3
 8001478:	d118      	bne.n	80014ac <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001480:	2201      	movs	r2, #1
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	4013      	ands	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	08db      	lsrs	r3, r3, #3
 8001496:	f003 0201 	and.w	r2, r3, #1
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	2203      	movs	r2, #3
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4013      	ands	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x128>
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b12      	cmp	r3, #18
 80014ea:	d123      	bne.n	8001534 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	08da      	lsrs	r2, r3, #3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3208      	adds	r2, #8
 80014f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	f003 0307 	and.w	r3, r3, #7
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	220f      	movs	r2, #15
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	691a      	ldr	r2, [r3, #16]
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	4313      	orrs	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	08da      	lsrs	r2, r3, #3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	3208      	adds	r2, #8
 800152e:	6939      	ldr	r1, [r7, #16]
 8001530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	2203      	movs	r2, #3
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 0203 	and.w	r2, r3, #3
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	4313      	orrs	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 80ac 	beq.w	80016ce <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001576:	4b5e      	ldr	r3, [pc, #376]	; (80016f0 <HAL_GPIO_Init+0x32c>)
 8001578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157a:	4a5d      	ldr	r2, [pc, #372]	; (80016f0 <HAL_GPIO_Init+0x32c>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6613      	str	r3, [r2, #96]	; 0x60
 8001582:	4b5b      	ldr	r3, [pc, #364]	; (80016f0 <HAL_GPIO_Init+0x32c>)
 8001584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800158e:	4a59      	ldr	r2, [pc, #356]	; (80016f4 <HAL_GPIO_Init+0x330>)
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	089b      	lsrs	r3, r3, #2
 8001594:	3302      	adds	r3, #2
 8001596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800159a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	220f      	movs	r2, #15
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	4013      	ands	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015b8:	d025      	beq.n	8001606 <HAL_GPIO_Init+0x242>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a4e      	ldr	r2, [pc, #312]	; (80016f8 <HAL_GPIO_Init+0x334>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d01f      	beq.n	8001602 <HAL_GPIO_Init+0x23e>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a4d      	ldr	r2, [pc, #308]	; (80016fc <HAL_GPIO_Init+0x338>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d019      	beq.n	80015fe <HAL_GPIO_Init+0x23a>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a4c      	ldr	r2, [pc, #304]	; (8001700 <HAL_GPIO_Init+0x33c>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d013      	beq.n	80015fa <HAL_GPIO_Init+0x236>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a4b      	ldr	r2, [pc, #300]	; (8001704 <HAL_GPIO_Init+0x340>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d00d      	beq.n	80015f6 <HAL_GPIO_Init+0x232>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a4a      	ldr	r2, [pc, #296]	; (8001708 <HAL_GPIO_Init+0x344>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d007      	beq.n	80015f2 <HAL_GPIO_Init+0x22e>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a49      	ldr	r2, [pc, #292]	; (800170c <HAL_GPIO_Init+0x348>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d101      	bne.n	80015ee <HAL_GPIO_Init+0x22a>
 80015ea:	2306      	movs	r3, #6
 80015ec:	e00c      	b.n	8001608 <HAL_GPIO_Init+0x244>
 80015ee:	2307      	movs	r3, #7
 80015f0:	e00a      	b.n	8001608 <HAL_GPIO_Init+0x244>
 80015f2:	2305      	movs	r3, #5
 80015f4:	e008      	b.n	8001608 <HAL_GPIO_Init+0x244>
 80015f6:	2304      	movs	r3, #4
 80015f8:	e006      	b.n	8001608 <HAL_GPIO_Init+0x244>
 80015fa:	2303      	movs	r3, #3
 80015fc:	e004      	b.n	8001608 <HAL_GPIO_Init+0x244>
 80015fe:	2302      	movs	r3, #2
 8001600:	e002      	b.n	8001608 <HAL_GPIO_Init+0x244>
 8001602:	2301      	movs	r3, #1
 8001604:	e000      	b.n	8001608 <HAL_GPIO_Init+0x244>
 8001606:	2300      	movs	r3, #0
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	f002 0203 	and.w	r2, r2, #3
 800160e:	0092      	lsls	r2, r2, #2
 8001610:	4093      	lsls	r3, r2
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001618:	4936      	ldr	r1, [pc, #216]	; (80016f4 <HAL_GPIO_Init+0x330>)
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	089b      	lsrs	r3, r3, #2
 800161e:	3302      	adds	r3, #2
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001626:	4b3a      	ldr	r3, [pc, #232]	; (8001710 <HAL_GPIO_Init+0x34c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	43db      	mvns	r3, r3
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	4013      	ands	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4313      	orrs	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800164a:	4a31      	ldr	r2, [pc, #196]	; (8001710 <HAL_GPIO_Init+0x34c>)
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001650:	4b2f      	ldr	r3, [pc, #188]	; (8001710 <HAL_GPIO_Init+0x34c>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	43db      	mvns	r3, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001674:	4a26      	ldr	r2, [pc, #152]	; (8001710 <HAL_GPIO_Init+0x34c>)
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800167a:	4b25      	ldr	r3, [pc, #148]	; (8001710 <HAL_GPIO_Init+0x34c>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	43db      	mvns	r3, r3
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4313      	orrs	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800169e:	4a1c      	ldr	r2, [pc, #112]	; (8001710 <HAL_GPIO_Init+0x34c>)
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016a4:	4b1a      	ldr	r3, [pc, #104]	; (8001710 <HAL_GPIO_Init+0x34c>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	43db      	mvns	r3, r3
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4013      	ands	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d003      	beq.n	80016c8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016c8:	4a11      	ldr	r2, [pc, #68]	; (8001710 <HAL_GPIO_Init+0x34c>)
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	3301      	adds	r3, #1
 80016d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	fa22 f303 	lsr.w	r3, r2, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f47f ae78 	bne.w	80013d4 <HAL_GPIO_Init+0x10>
  }
}
 80016e4:	bf00      	nop
 80016e6:	371c      	adds	r7, #28
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40010000 	.word	0x40010000
 80016f8:	48000400 	.word	0x48000400
 80016fc:	48000800 	.word	0x48000800
 8001700:	48000c00 	.word	0x48000c00
 8001704:	48001000 	.word	0x48001000
 8001708:	48001400 	.word	0x48001400
 800170c:	48001800 	.word	0x48001800
 8001710:	40010400 	.word	0x40010400

08001714 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	807b      	strh	r3, [r7, #2]
 8001720:	4613      	mov	r3, r2
 8001722:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001724:	787b      	ldrb	r3, [r7, #1]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800172a:	887a      	ldrh	r2, [r7, #2]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001730:	e002      	b.n	8001738 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001732:	887a      	ldrh	r2, [r7, #2]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e081      	b.n	800185a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d106      	bne.n	8001770 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7fe fed0 	bl	8000510 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2224      	movs	r2, #36	; 0x24
 8001774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 0201 	bic.w	r2, r2, #1
 8001786:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685a      	ldr	r2, [r3, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001794:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d107      	bne.n	80017be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689a      	ldr	r2, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	e006      	b.n	80017cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689a      	ldr	r2, [r3, #8]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80017ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d104      	bne.n	80017de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6812      	ldr	r2, [r2, #0]
 80017e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	68da      	ldr	r2, [r3, #12]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001800:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	691a      	ldr	r2, [r3, #16]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	ea42 0103 	orr.w	r1, r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	021a      	lsls	r2, r3, #8
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	430a      	orrs	r2, r1
 800181a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	69d9      	ldr	r1, [r3, #28]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a1a      	ldr	r2, [r3, #32]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	430a      	orrs	r2, r1
 800182a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f042 0201 	orr.w	r2, r2, #1
 800183a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2220      	movs	r2, #32
 8001846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b20      	cmp	r3, #32
 8001876:	d138      	bne.n	80018ea <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800187e:	2b01      	cmp	r3, #1
 8001880:	d101      	bne.n	8001886 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001882:	2302      	movs	r3, #2
 8001884:	e032      	b.n	80018ec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2201      	movs	r2, #1
 800188a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2224      	movs	r2, #36	; 0x24
 8001892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 0201 	bic.w	r2, r2, #1
 80018a4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018b4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6819      	ldr	r1, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f042 0201 	orr.w	r2, r2, #1
 80018d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2220      	movs	r2, #32
 80018da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	e000      	b.n	80018ec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80018ea:	2302      	movs	r3, #2
  }
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b20      	cmp	r3, #32
 800190c:	d139      	bne.n	8001982 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001914:	2b01      	cmp	r3, #1
 8001916:	d101      	bne.n	800191c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001918:	2302      	movs	r3, #2
 800191a:	e033      	b.n	8001984 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2224      	movs	r2, #36	; 0x24
 8001928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 0201 	bic.w	r2, r2, #1
 800193a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800194a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	021b      	lsls	r3, r3, #8
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	4313      	orrs	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f042 0201 	orr.w	r2, r2, #1
 800196c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2220      	movs	r2, #32
 8001972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800197e:	2300      	movs	r3, #0
 8001980:	e000      	b.n	8001984 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001982:	2302      	movs	r3, #2
  }
}
 8001984:	4618      	mov	r0, r3
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001994:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800199c:	4618      	mov	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40007000 	.word	0x40007000

080019ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019ba:	d130      	bne.n	8001a1e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019bc:	4b23      	ldr	r3, [pc, #140]	; (8001a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019c8:	d038      	beq.n	8001a3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019ca:	4b20      	ldr	r3, [pc, #128]	; (8001a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019d2:	4a1e      	ldr	r2, [pc, #120]	; (8001a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019da:	4b1d      	ldr	r3, [pc, #116]	; (8001a50 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2232      	movs	r2, #50	; 0x32
 80019e0:	fb02 f303 	mul.w	r3, r2, r3
 80019e4:	4a1b      	ldr	r2, [pc, #108]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019e6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ea:	0c9b      	lsrs	r3, r3, #18
 80019ec:	3301      	adds	r3, #1
 80019ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019f0:	e002      	b.n	80019f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	3b01      	subs	r3, #1
 80019f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019f8:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a04:	d102      	bne.n	8001a0c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1f2      	bne.n	80019f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a0c:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a18:	d110      	bne.n	8001a3c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e00f      	b.n	8001a3e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a2a:	d007      	beq.n	8001a3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a2c:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a34:	4a05      	ldr	r2, [pc, #20]	; (8001a4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a3a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	40007000 	.word	0x40007000
 8001a50:	20000000 	.word	0x20000000
 8001a54:	431bde83 	.word	0x431bde83

08001a58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e3d4      	b.n	8002214 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a6a:	4ba1      	ldr	r3, [pc, #644]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 030c 	and.w	r3, r3, #12
 8001a72:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a74:	4b9e      	ldr	r3, [pc, #632]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	f003 0303 	and.w	r3, r3, #3
 8001a7c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0310 	and.w	r3, r3, #16
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 80e4 	beq.w	8001c54 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d007      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x4a>
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	2b0c      	cmp	r3, #12
 8001a96:	f040 808b 	bne.w	8001bb0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	f040 8087 	bne.w	8001bb0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001aa2:	4b93      	ldr	r3, [pc, #588]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d005      	beq.n	8001aba <HAL_RCC_OscConfig+0x62>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e3ac      	b.n	8002214 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a1a      	ldr	r2, [r3, #32]
 8001abe:	4b8c      	ldr	r3, [pc, #560]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0308 	and.w	r3, r3, #8
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d004      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x7c>
 8001aca:	4b89      	ldr	r3, [pc, #548]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ad2:	e005      	b.n	8001ae0 <HAL_RCC_OscConfig+0x88>
 8001ad4:	4b86      	ldr	r3, [pc, #536]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ada:	091b      	lsrs	r3, r3, #4
 8001adc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d223      	bcs.n	8001b2c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f000 fd5b 	bl	80025a4 <RCC_SetFlashLatencyFromMSIRange>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e38d      	b.n	8002214 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001af8:	4b7d      	ldr	r3, [pc, #500]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a7c      	ldr	r2, [pc, #496]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001afe:	f043 0308 	orr.w	r3, r3, #8
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	4b7a      	ldr	r3, [pc, #488]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	4977      	ldr	r1, [pc, #476]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b16:	4b76      	ldr	r3, [pc, #472]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	021b      	lsls	r3, r3, #8
 8001b24:	4972      	ldr	r1, [pc, #456]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	604b      	str	r3, [r1, #4]
 8001b2a:	e025      	b.n	8001b78 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b2c:	4b70      	ldr	r3, [pc, #448]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a6f      	ldr	r2, [pc, #444]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001b32:	f043 0308 	orr.w	r3, r3, #8
 8001b36:	6013      	str	r3, [r2, #0]
 8001b38:	4b6d      	ldr	r3, [pc, #436]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	496a      	ldr	r1, [pc, #424]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b4a:	4b69      	ldr	r3, [pc, #420]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	021b      	lsls	r3, r3, #8
 8001b58:	4965      	ldr	r1, [pc, #404]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d109      	bne.n	8001b78 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f000 fd1b 	bl	80025a4 <RCC_SetFlashLatencyFromMSIRange>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e34d      	b.n	8002214 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b78:	f000 fc36 	bl	80023e8 <HAL_RCC_GetSysClockFreq>
 8001b7c:	4601      	mov	r1, r0
 8001b7e:	4b5c      	ldr	r3, [pc, #368]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	091b      	lsrs	r3, r3, #4
 8001b84:	f003 030f 	and.w	r3, r3, #15
 8001b88:	4a5a      	ldr	r2, [pc, #360]	; (8001cf4 <HAL_RCC_OscConfig+0x29c>)
 8001b8a:	5cd3      	ldrb	r3, [r2, r3]
 8001b8c:	f003 031f 	and.w	r3, r3, #31
 8001b90:	fa21 f303 	lsr.w	r3, r1, r3
 8001b94:	4a58      	ldr	r2, [pc, #352]	; (8001cf8 <HAL_RCC_OscConfig+0x2a0>)
 8001b96:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b98:	4b58      	ldr	r3, [pc, #352]	; (8001cfc <HAL_RCC_OscConfig+0x2a4>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7fe fe69 	bl	8000874 <HAL_InitTick>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d052      	beq.n	8001c52 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001bac:	7bfb      	ldrb	r3, [r7, #15]
 8001bae:	e331      	b.n	8002214 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d032      	beq.n	8001c1e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bb8:	4b4d      	ldr	r3, [pc, #308]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a4c      	ldr	r2, [pc, #304]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bc4:	f7ff fb10 	bl	80011e8 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bcc:	f7ff fb0c 	bl	80011e8 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e31a      	b.n	8002214 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bde:	4b44      	ldr	r3, [pc, #272]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0f0      	beq.n	8001bcc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bea:	4b41      	ldr	r3, [pc, #260]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a40      	ldr	r2, [pc, #256]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001bf0:	f043 0308 	orr.w	r3, r3, #8
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	4b3e      	ldr	r3, [pc, #248]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	493b      	ldr	r1, [pc, #236]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c08:	4b39      	ldr	r3, [pc, #228]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	69db      	ldr	r3, [r3, #28]
 8001c14:	021b      	lsls	r3, r3, #8
 8001c16:	4936      	ldr	r1, [pc, #216]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	604b      	str	r3, [r1, #4]
 8001c1c:	e01a      	b.n	8001c54 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c1e:	4b34      	ldr	r3, [pc, #208]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a33      	ldr	r2, [pc, #204]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001c24:	f023 0301 	bic.w	r3, r3, #1
 8001c28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c2a:	f7ff fadd 	bl	80011e8 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c32:	f7ff fad9 	bl	80011e8 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e2e7      	b.n	8002214 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c44:	4b2a      	ldr	r3, [pc, #168]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1f0      	bne.n	8001c32 <HAL_RCC_OscConfig+0x1da>
 8001c50:	e000      	b.n	8001c54 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c52:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d074      	beq.n	8001d4a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d005      	beq.n	8001c72 <HAL_RCC_OscConfig+0x21a>
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	2b0c      	cmp	r3, #12
 8001c6a:	d10e      	bne.n	8001c8a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	2b03      	cmp	r3, #3
 8001c70:	d10b      	bne.n	8001c8a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c72:	4b1f      	ldr	r3, [pc, #124]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d064      	beq.n	8001d48 <HAL_RCC_OscConfig+0x2f0>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d160      	bne.n	8001d48 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e2c4      	b.n	8002214 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c92:	d106      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x24a>
 8001c94:	4b16      	ldr	r3, [pc, #88]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a15      	ldr	r2, [pc, #84]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c9e:	6013      	str	r3, [r2, #0]
 8001ca0:	e01d      	b.n	8001cde <HAL_RCC_OscConfig+0x286>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001caa:	d10c      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x26e>
 8001cac:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a0f      	ldr	r2, [pc, #60]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001cb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb6:	6013      	str	r3, [r2, #0]
 8001cb8:	4b0d      	ldr	r3, [pc, #52]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a0c      	ldr	r2, [pc, #48]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001cbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc2:	6013      	str	r3, [r2, #0]
 8001cc4:	e00b      	b.n	8001cde <HAL_RCC_OscConfig+0x286>
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a09      	ldr	r2, [pc, #36]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001ccc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a06      	ldr	r2, [pc, #24]	; (8001cf0 <HAL_RCC_OscConfig+0x298>)
 8001cd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cdc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d01c      	beq.n	8001d20 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce6:	f7ff fa7f 	bl	80011e8 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cec:	e011      	b.n	8001d12 <HAL_RCC_OscConfig+0x2ba>
 8001cee:	bf00      	nop
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	0800452c 	.word	0x0800452c
 8001cf8:	20000000 	.word	0x20000000
 8001cfc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d00:	f7ff fa72 	bl	80011e8 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b64      	cmp	r3, #100	; 0x64
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e280      	b.n	8002214 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d12:	4baf      	ldr	r3, [pc, #700]	; (8001fd0 <HAL_RCC_OscConfig+0x578>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCC_OscConfig+0x2a8>
 8001d1e:	e014      	b.n	8001d4a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d20:	f7ff fa62 	bl	80011e8 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d28:	f7ff fa5e 	bl	80011e8 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b64      	cmp	r3, #100	; 0x64
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e26c      	b.n	8002214 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d3a:	4ba5      	ldr	r3, [pc, #660]	; (8001fd0 <HAL_RCC_OscConfig+0x578>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x2d0>
 8001d46:	e000      	b.n	8001d4a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d060      	beq.n	8001e18 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	d005      	beq.n	8001d68 <HAL_RCC_OscConfig+0x310>
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	2b0c      	cmp	r3, #12
 8001d60:	d119      	bne.n	8001d96 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d116      	bne.n	8001d96 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d68:	4b99      	ldr	r3, [pc, #612]	; (8001fd0 <HAL_RCC_OscConfig+0x578>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d005      	beq.n	8001d80 <HAL_RCC_OscConfig+0x328>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e249      	b.n	8002214 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d80:	4b93      	ldr	r3, [pc, #588]	; (8001fd0 <HAL_RCC_OscConfig+0x578>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	061b      	lsls	r3, r3, #24
 8001d8e:	4990      	ldr	r1, [pc, #576]	; (8001fd0 <HAL_RCC_OscConfig+0x578>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d94:	e040      	b.n	8001e18 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d023      	beq.n	8001de6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d9e:	4b8c      	ldr	r3, [pc, #560]	; (8001fd0 <HAL_RCC_OscConfig+0x578>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a8b      	ldr	r2, [pc, #556]	; (8001fd0 <HAL_RCC_OscConfig+0x578>)
 8001da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001daa:	f7ff fa1d 	bl	80011e8 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db2:	f7ff fa19 	bl	80011e8 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e227      	b.n	8002214 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dc4:	4b82      	ldr	r3, [pc, #520]	; (8001fd0 <HAL_RCC_OscConfig+0x578>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0f0      	beq.n	8001db2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd0:	4b7f      	ldr	r3, [pc, #508]	; (8001fd0 <HAL_RCC_OscConfig+0x578>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	061b      	lsls	r3, r3, #24
 8001dde:	497c      	ldr	r1, [pc, #496]	; (8001fd0 <HAL_RCC_OscConfig+0x578>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]
 8001de4:	e018      	b.n	8001e18 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001de6:	4b7a      	ldr	r3, [pc, #488]	; (8001fd0 <HAL_RCC_OscConfig+0x578>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a79      	ldr	r2, [pc, #484]	; (8001fd0 <HAL_RCC_OscConfig+0x578>)
 8001dec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001df0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df2:	f7ff f9f9 	bl	80011e8 <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dfa:	f7ff f9f5 	bl	80011e8 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e203      	b.n	8002214 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e0c:	4b70      	ldr	r3, [pc, #448]	; (8001fd0 <HAL_RCC_OscConfig+0x578>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1f0      	bne.n	8001dfa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0308 	and.w	r3, r3, #8
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d03c      	beq.n	8001e9e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	695b      	ldr	r3, [r3, #20]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d01c      	beq.n	8001e66 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e2c:	4b68      	ldr	r3, [pc, #416]	; (8001fd0 <HAL_RCC_OscConfig+0x578>)
 8001e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e32:	4a67      	ldr	r2, [pc, #412]	; (8001fd0 <HAL_RCC_OscConfig+0x578>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e3c:	f7ff f9d4 	bl	80011e8 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e44:	f7ff f9d0 	bl	80011e8 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e1de      	b.n	8002214 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e56:	4b5e      	ldr	r3, [pc, #376]	; (8001fd0 <HAL_RCC_OscConfig+0x578>)
 8001e58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d0ef      	beq.n	8001e44 <HAL_RCC_OscConfig+0x3ec>
 8001e64:	e01b      	b.n	8001e9e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e66:	4b5a      	ldr	r3, [pc, #360]	; (8001fd0 <HAL_RCC_OscConfig+0x578>)
 8001e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e6c:	4a58      	ldr	r2, [pc, #352]	; (8001fd0 <HAL_RCC_OscConfig+0x578>)
 8001e6e:	f023 0301 	bic.w	r3, r3, #1
 8001e72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e76:	f7ff f9b7 	bl	80011e8 <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e7e:	f7ff f9b3 	bl	80011e8 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e1c1      	b.n	8002214 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e90:	4b4f      	ldr	r3, [pc, #316]	; (8001fd0 <HAL_RCC_OscConfig+0x578>)
 8001e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1ef      	bne.n	8001e7e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0304 	and.w	r3, r3, #4
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f000 80a6 	beq.w	8001ff8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eac:	2300      	movs	r3, #0
 8001eae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001eb0:	4b47      	ldr	r3, [pc, #284]	; (8001fd0 <HAL_RCC_OscConfig+0x578>)
 8001eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d10d      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ebc:	4b44      	ldr	r3, [pc, #272]	; (8001fd0 <HAL_RCC_OscConfig+0x578>)
 8001ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec0:	4a43      	ldr	r2, [pc, #268]	; (8001fd0 <HAL_RCC_OscConfig+0x578>)
 8001ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ec8:	4b41      	ldr	r3, [pc, #260]	; (8001fd0 <HAL_RCC_OscConfig+0x578>)
 8001eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed0:	60bb      	str	r3, [r7, #8]
 8001ed2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ed8:	4b3e      	ldr	r3, [pc, #248]	; (8001fd4 <HAL_RCC_OscConfig+0x57c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d118      	bne.n	8001f16 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ee4:	4b3b      	ldr	r3, [pc, #236]	; (8001fd4 <HAL_RCC_OscConfig+0x57c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a3a      	ldr	r2, [pc, #232]	; (8001fd4 <HAL_RCC_OscConfig+0x57c>)
 8001eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ef0:	f7ff f97a 	bl	80011e8 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef8:	f7ff f976 	bl	80011e8 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e184      	b.n	8002214 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f0a:	4b32      	ldr	r3, [pc, #200]	; (8001fd4 <HAL_RCC_OscConfig+0x57c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d108      	bne.n	8001f30 <HAL_RCC_OscConfig+0x4d8>
 8001f1e:	4b2c      	ldr	r3, [pc, #176]	; (8001fd0 <HAL_RCC_OscConfig+0x578>)
 8001f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f24:	4a2a      	ldr	r2, [pc, #168]	; (8001fd0 <HAL_RCC_OscConfig+0x578>)
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f2e:	e024      	b.n	8001f7a <HAL_RCC_OscConfig+0x522>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	2b05      	cmp	r3, #5
 8001f36:	d110      	bne.n	8001f5a <HAL_RCC_OscConfig+0x502>
 8001f38:	4b25      	ldr	r3, [pc, #148]	; (8001fd0 <HAL_RCC_OscConfig+0x578>)
 8001f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f3e:	4a24      	ldr	r2, [pc, #144]	; (8001fd0 <HAL_RCC_OscConfig+0x578>)
 8001f40:	f043 0304 	orr.w	r3, r3, #4
 8001f44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f48:	4b21      	ldr	r3, [pc, #132]	; (8001fd0 <HAL_RCC_OscConfig+0x578>)
 8001f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4e:	4a20      	ldr	r2, [pc, #128]	; (8001fd0 <HAL_RCC_OscConfig+0x578>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f58:	e00f      	b.n	8001f7a <HAL_RCC_OscConfig+0x522>
 8001f5a:	4b1d      	ldr	r3, [pc, #116]	; (8001fd0 <HAL_RCC_OscConfig+0x578>)
 8001f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f60:	4a1b      	ldr	r2, [pc, #108]	; (8001fd0 <HAL_RCC_OscConfig+0x578>)
 8001f62:	f023 0301 	bic.w	r3, r3, #1
 8001f66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f6a:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <HAL_RCC_OscConfig+0x578>)
 8001f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f70:	4a17      	ldr	r2, [pc, #92]	; (8001fd0 <HAL_RCC_OscConfig+0x578>)
 8001f72:	f023 0304 	bic.w	r3, r3, #4
 8001f76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d016      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f82:	f7ff f931 	bl	80011e8 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f88:	e00a      	b.n	8001fa0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8a:	f7ff f92d 	bl	80011e8 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e139      	b.n	8002214 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <HAL_RCC_OscConfig+0x578>)
 8001fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0ed      	beq.n	8001f8a <HAL_RCC_OscConfig+0x532>
 8001fae:	e01a      	b.n	8001fe6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb0:	f7ff f91a 	bl	80011e8 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fb6:	e00f      	b.n	8001fd8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb8:	f7ff f916 	bl	80011e8 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d906      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e122      	b.n	8002214 <HAL_RCC_OscConfig+0x7bc>
 8001fce:	bf00      	nop
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fd8:	4b90      	ldr	r3, [pc, #576]	; (800221c <HAL_RCC_OscConfig+0x7c4>)
 8001fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1e8      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fe6:	7ffb      	ldrb	r3, [r7, #31]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d105      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fec:	4b8b      	ldr	r3, [pc, #556]	; (800221c <HAL_RCC_OscConfig+0x7c4>)
 8001fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff0:	4a8a      	ldr	r2, [pc, #552]	; (800221c <HAL_RCC_OscConfig+0x7c4>)
 8001ff2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 8108 	beq.w	8002212 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002006:	2b02      	cmp	r3, #2
 8002008:	f040 80d0 	bne.w	80021ac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800200c:	4b83      	ldr	r3, [pc, #524]	; (800221c <HAL_RCC_OscConfig+0x7c4>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f003 0203 	and.w	r2, r3, #3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201c:	429a      	cmp	r2, r3
 800201e:	d130      	bne.n	8002082 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	3b01      	subs	r3, #1
 800202c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800202e:	429a      	cmp	r2, r3
 8002030:	d127      	bne.n	8002082 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800203c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800203e:	429a      	cmp	r2, r3
 8002040:	d11f      	bne.n	8002082 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800204c:	2a07      	cmp	r2, #7
 800204e:	bf14      	ite	ne
 8002050:	2201      	movne	r2, #1
 8002052:	2200      	moveq	r2, #0
 8002054:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002056:	4293      	cmp	r3, r2
 8002058:	d113      	bne.n	8002082 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002064:	085b      	lsrs	r3, r3, #1
 8002066:	3b01      	subs	r3, #1
 8002068:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800206a:	429a      	cmp	r2, r3
 800206c:	d109      	bne.n	8002082 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	085b      	lsrs	r3, r3, #1
 800207a:	3b01      	subs	r3, #1
 800207c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800207e:	429a      	cmp	r2, r3
 8002080:	d06e      	beq.n	8002160 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	2b0c      	cmp	r3, #12
 8002086:	d069      	beq.n	800215c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002088:	4b64      	ldr	r3, [pc, #400]	; (800221c <HAL_RCC_OscConfig+0x7c4>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d105      	bne.n	80020a0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002094:	4b61      	ldr	r3, [pc, #388]	; (800221c <HAL_RCC_OscConfig+0x7c4>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e0b7      	b.n	8002214 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020a4:	4b5d      	ldr	r3, [pc, #372]	; (800221c <HAL_RCC_OscConfig+0x7c4>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a5c      	ldr	r2, [pc, #368]	; (800221c <HAL_RCC_OscConfig+0x7c4>)
 80020aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020ae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020b0:	f7ff f89a 	bl	80011e8 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b8:	f7ff f896 	bl	80011e8 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e0a4      	b.n	8002214 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020ca:	4b54      	ldr	r3, [pc, #336]	; (800221c <HAL_RCC_OscConfig+0x7c4>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f0      	bne.n	80020b8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020d6:	4b51      	ldr	r3, [pc, #324]	; (800221c <HAL_RCC_OscConfig+0x7c4>)
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	4b51      	ldr	r3, [pc, #324]	; (8002220 <HAL_RCC_OscConfig+0x7c8>)
 80020dc:	4013      	ands	r3, r2
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80020e6:	3a01      	subs	r2, #1
 80020e8:	0112      	lsls	r2, r2, #4
 80020ea:	4311      	orrs	r1, r2
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020f0:	0212      	lsls	r2, r2, #8
 80020f2:	4311      	orrs	r1, r2
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80020f8:	0852      	lsrs	r2, r2, #1
 80020fa:	3a01      	subs	r2, #1
 80020fc:	0552      	lsls	r2, r2, #21
 80020fe:	4311      	orrs	r1, r2
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002104:	0852      	lsrs	r2, r2, #1
 8002106:	3a01      	subs	r2, #1
 8002108:	0652      	lsls	r2, r2, #25
 800210a:	4311      	orrs	r1, r2
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002110:	0912      	lsrs	r2, r2, #4
 8002112:	0452      	lsls	r2, r2, #17
 8002114:	430a      	orrs	r2, r1
 8002116:	4941      	ldr	r1, [pc, #260]	; (800221c <HAL_RCC_OscConfig+0x7c4>)
 8002118:	4313      	orrs	r3, r2
 800211a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800211c:	4b3f      	ldr	r3, [pc, #252]	; (800221c <HAL_RCC_OscConfig+0x7c4>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a3e      	ldr	r2, [pc, #248]	; (800221c <HAL_RCC_OscConfig+0x7c4>)
 8002122:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002126:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002128:	4b3c      	ldr	r3, [pc, #240]	; (800221c <HAL_RCC_OscConfig+0x7c4>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	4a3b      	ldr	r2, [pc, #236]	; (800221c <HAL_RCC_OscConfig+0x7c4>)
 800212e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002132:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002134:	f7ff f858 	bl	80011e8 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800213c:	f7ff f854 	bl	80011e8 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e062      	b.n	8002214 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800214e:	4b33      	ldr	r3, [pc, #204]	; (800221c <HAL_RCC_OscConfig+0x7c4>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0f0      	beq.n	800213c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800215a:	e05a      	b.n	8002212 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e059      	b.n	8002214 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002160:	4b2e      	ldr	r3, [pc, #184]	; (800221c <HAL_RCC_OscConfig+0x7c4>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d152      	bne.n	8002212 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800216c:	4b2b      	ldr	r3, [pc, #172]	; (800221c <HAL_RCC_OscConfig+0x7c4>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a2a      	ldr	r2, [pc, #168]	; (800221c <HAL_RCC_OscConfig+0x7c4>)
 8002172:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002176:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002178:	4b28      	ldr	r3, [pc, #160]	; (800221c <HAL_RCC_OscConfig+0x7c4>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	4a27      	ldr	r2, [pc, #156]	; (800221c <HAL_RCC_OscConfig+0x7c4>)
 800217e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002182:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002184:	f7ff f830 	bl	80011e8 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800218c:	f7ff f82c 	bl	80011e8 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e03a      	b.n	8002214 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800219e:	4b1f      	ldr	r3, [pc, #124]	; (800221c <HAL_RCC_OscConfig+0x7c4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0x734>
 80021aa:	e032      	b.n	8002212 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	2b0c      	cmp	r3, #12
 80021b0:	d02d      	beq.n	800220e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b2:	4b1a      	ldr	r3, [pc, #104]	; (800221c <HAL_RCC_OscConfig+0x7c4>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a19      	ldr	r2, [pc, #100]	; (800221c <HAL_RCC_OscConfig+0x7c4>)
 80021b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021bc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80021be:	4b17      	ldr	r3, [pc, #92]	; (800221c <HAL_RCC_OscConfig+0x7c4>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d105      	bne.n	80021d6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80021ca:	4b14      	ldr	r3, [pc, #80]	; (800221c <HAL_RCC_OscConfig+0x7c4>)
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	4a13      	ldr	r2, [pc, #76]	; (800221c <HAL_RCC_OscConfig+0x7c4>)
 80021d0:	f023 0303 	bic.w	r3, r3, #3
 80021d4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <HAL_RCC_OscConfig+0x7c4>)
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	4a10      	ldr	r2, [pc, #64]	; (800221c <HAL_RCC_OscConfig+0x7c4>)
 80021dc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80021e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e6:	f7fe ffff 	bl	80011e8 <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ee:	f7fe fffb 	bl	80011e8 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e009      	b.n	8002214 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_RCC_OscConfig+0x7c4>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1f0      	bne.n	80021ee <HAL_RCC_OscConfig+0x796>
 800220c:	e001      	b.n	8002212 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e000      	b.n	8002214 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3720      	adds	r7, #32
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40021000 	.word	0x40021000
 8002220:	f99d808c 	.word	0xf99d808c

08002224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e0c8      	b.n	80023ca <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002238:	4b66      	ldr	r3, [pc, #408]	; (80023d4 <HAL_RCC_ClockConfig+0x1b0>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d910      	bls.n	8002268 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002246:	4b63      	ldr	r3, [pc, #396]	; (80023d4 <HAL_RCC_ClockConfig+0x1b0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f023 0207 	bic.w	r2, r3, #7
 800224e:	4961      	ldr	r1, [pc, #388]	; (80023d4 <HAL_RCC_ClockConfig+0x1b0>)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	4313      	orrs	r3, r2
 8002254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002256:	4b5f      	ldr	r3, [pc, #380]	; (80023d4 <HAL_RCC_ClockConfig+0x1b0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	d001      	beq.n	8002268 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e0b0      	b.n	80023ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b00      	cmp	r3, #0
 8002272:	d04c      	beq.n	800230e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2b03      	cmp	r3, #3
 800227a:	d107      	bne.n	800228c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800227c:	4b56      	ldr	r3, [pc, #344]	; (80023d8 <HAL_RCC_ClockConfig+0x1b4>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d121      	bne.n	80022cc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e09e      	b.n	80023ca <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2b02      	cmp	r3, #2
 8002292:	d107      	bne.n	80022a4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002294:	4b50      	ldr	r3, [pc, #320]	; (80023d8 <HAL_RCC_ClockConfig+0x1b4>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d115      	bne.n	80022cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e092      	b.n	80023ca <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d107      	bne.n	80022bc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022ac:	4b4a      	ldr	r3, [pc, #296]	; (80023d8 <HAL_RCC_ClockConfig+0x1b4>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d109      	bne.n	80022cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e086      	b.n	80023ca <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022bc:	4b46      	ldr	r3, [pc, #280]	; (80023d8 <HAL_RCC_ClockConfig+0x1b4>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d101      	bne.n	80022cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e07e      	b.n	80023ca <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022cc:	4b42      	ldr	r3, [pc, #264]	; (80023d8 <HAL_RCC_ClockConfig+0x1b4>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f023 0203 	bic.w	r2, r3, #3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	493f      	ldr	r1, [pc, #252]	; (80023d8 <HAL_RCC_ClockConfig+0x1b4>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022de:	f7fe ff83 	bl	80011e8 <HAL_GetTick>
 80022e2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e4:	e00a      	b.n	80022fc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e6:	f7fe ff7f 	bl	80011e8 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e066      	b.n	80023ca <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fc:	4b36      	ldr	r3, [pc, #216]	; (80023d8 <HAL_RCC_ClockConfig+0x1b4>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 020c 	and.w	r2, r3, #12
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	429a      	cmp	r2, r3
 800230c:	d1eb      	bne.n	80022e6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d008      	beq.n	800232c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800231a:	4b2f      	ldr	r3, [pc, #188]	; (80023d8 <HAL_RCC_ClockConfig+0x1b4>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	492c      	ldr	r1, [pc, #176]	; (80023d8 <HAL_RCC_ClockConfig+0x1b4>)
 8002328:	4313      	orrs	r3, r2
 800232a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800232c:	4b29      	ldr	r3, [pc, #164]	; (80023d4 <HAL_RCC_ClockConfig+0x1b0>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d210      	bcs.n	800235c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233a:	4b26      	ldr	r3, [pc, #152]	; (80023d4 <HAL_RCC_ClockConfig+0x1b0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f023 0207 	bic.w	r2, r3, #7
 8002342:	4924      	ldr	r1, [pc, #144]	; (80023d4 <HAL_RCC_ClockConfig+0x1b0>)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	4313      	orrs	r3, r2
 8002348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800234a:	4b22      	ldr	r3, [pc, #136]	; (80023d4 <HAL_RCC_ClockConfig+0x1b0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	429a      	cmp	r2, r3
 8002356:	d001      	beq.n	800235c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e036      	b.n	80023ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b00      	cmp	r3, #0
 8002366:	d008      	beq.n	800237a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002368:	4b1b      	ldr	r3, [pc, #108]	; (80023d8 <HAL_RCC_ClockConfig+0x1b4>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	4918      	ldr	r1, [pc, #96]	; (80023d8 <HAL_RCC_ClockConfig+0x1b4>)
 8002376:	4313      	orrs	r3, r2
 8002378:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	2b00      	cmp	r3, #0
 8002384:	d009      	beq.n	800239a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002386:	4b14      	ldr	r3, [pc, #80]	; (80023d8 <HAL_RCC_ClockConfig+0x1b4>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	4910      	ldr	r1, [pc, #64]	; (80023d8 <HAL_RCC_ClockConfig+0x1b4>)
 8002396:	4313      	orrs	r3, r2
 8002398:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800239a:	f000 f825 	bl	80023e8 <HAL_RCC_GetSysClockFreq>
 800239e:	4601      	mov	r1, r0
 80023a0:	4b0d      	ldr	r3, [pc, #52]	; (80023d8 <HAL_RCC_ClockConfig+0x1b4>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	091b      	lsrs	r3, r3, #4
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	4a0c      	ldr	r2, [pc, #48]	; (80023dc <HAL_RCC_ClockConfig+0x1b8>)
 80023ac:	5cd3      	ldrb	r3, [r2, r3]
 80023ae:	f003 031f 	and.w	r3, r3, #31
 80023b2:	fa21 f303 	lsr.w	r3, r1, r3
 80023b6:	4a0a      	ldr	r2, [pc, #40]	; (80023e0 <HAL_RCC_ClockConfig+0x1bc>)
 80023b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023ba:	4b0a      	ldr	r3, [pc, #40]	; (80023e4 <HAL_RCC_ClockConfig+0x1c0>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe fa58 	bl	8000874 <HAL_InitTick>
 80023c4:	4603      	mov	r3, r0
 80023c6:	72fb      	strb	r3, [r7, #11]

  return status;
 80023c8:	7afb      	ldrb	r3, [r7, #11]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40022000 	.word	0x40022000
 80023d8:	40021000 	.word	0x40021000
 80023dc:	0800452c 	.word	0x0800452c
 80023e0:	20000000 	.word	0x20000000
 80023e4:	20000004 	.word	0x20000004

080023e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b089      	sub	sp, #36	; 0x24
 80023ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
 80023f2:	2300      	movs	r3, #0
 80023f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023f6:	4b3d      	ldr	r3, [pc, #244]	; (80024ec <HAL_RCC_GetSysClockFreq+0x104>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 030c 	and.w	r3, r3, #12
 80023fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002400:	4b3a      	ldr	r3, [pc, #232]	; (80024ec <HAL_RCC_GetSysClockFreq+0x104>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f003 0303 	and.w	r3, r3, #3
 8002408:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <HAL_RCC_GetSysClockFreq+0x34>
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	2b0c      	cmp	r3, #12
 8002414:	d121      	bne.n	800245a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d11e      	bne.n	800245a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800241c:	4b33      	ldr	r3, [pc, #204]	; (80024ec <HAL_RCC_GetSysClockFreq+0x104>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0308 	and.w	r3, r3, #8
 8002424:	2b00      	cmp	r3, #0
 8002426:	d107      	bne.n	8002438 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002428:	4b30      	ldr	r3, [pc, #192]	; (80024ec <HAL_RCC_GetSysClockFreq+0x104>)
 800242a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800242e:	0a1b      	lsrs	r3, r3, #8
 8002430:	f003 030f 	and.w	r3, r3, #15
 8002434:	61fb      	str	r3, [r7, #28]
 8002436:	e005      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002438:	4b2c      	ldr	r3, [pc, #176]	; (80024ec <HAL_RCC_GetSysClockFreq+0x104>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	091b      	lsrs	r3, r3, #4
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002444:	4a2a      	ldr	r2, [pc, #168]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d10d      	bne.n	8002470 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002458:	e00a      	b.n	8002470 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	2b04      	cmp	r3, #4
 800245e:	d102      	bne.n	8002466 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002460:	4b24      	ldr	r3, [pc, #144]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002462:	61bb      	str	r3, [r7, #24]
 8002464:	e004      	b.n	8002470 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	2b08      	cmp	r3, #8
 800246a:	d101      	bne.n	8002470 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800246c:	4b22      	ldr	r3, [pc, #136]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x110>)
 800246e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	2b0c      	cmp	r3, #12
 8002474:	d133      	bne.n	80024de <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002476:	4b1d      	ldr	r3, [pc, #116]	; (80024ec <HAL_RCC_GetSysClockFreq+0x104>)
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2b02      	cmp	r3, #2
 8002484:	d002      	beq.n	800248c <HAL_RCC_GetSysClockFreq+0xa4>
 8002486:	2b03      	cmp	r3, #3
 8002488:	d003      	beq.n	8002492 <HAL_RCC_GetSysClockFreq+0xaa>
 800248a:	e005      	b.n	8002498 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800248c:	4b19      	ldr	r3, [pc, #100]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800248e:	617b      	str	r3, [r7, #20]
      break;
 8002490:	e005      	b.n	800249e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002492:	4b19      	ldr	r3, [pc, #100]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002494:	617b      	str	r3, [r7, #20]
      break;
 8002496:	e002      	b.n	800249e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	617b      	str	r3, [r7, #20]
      break;
 800249c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800249e:	4b13      	ldr	r3, [pc, #76]	; (80024ec <HAL_RCC_GetSysClockFreq+0x104>)
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	091b      	lsrs	r3, r3, #4
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	3301      	adds	r3, #1
 80024aa:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024ac:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <HAL_RCC_GetSysClockFreq+0x104>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	0a1b      	lsrs	r3, r3, #8
 80024b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	fb02 f203 	mul.w	r2, r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024c4:	4b09      	ldr	r3, [pc, #36]	; (80024ec <HAL_RCC_GetSysClockFreq+0x104>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	0e5b      	lsrs	r3, r3, #25
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	3301      	adds	r3, #1
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024dc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80024de:	69bb      	ldr	r3, [r7, #24]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3724      	adds	r7, #36	; 0x24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	40021000 	.word	0x40021000
 80024f0:	08004544 	.word	0x08004544
 80024f4:	00f42400 	.word	0x00f42400
 80024f8:	007a1200 	.word	0x007a1200

080024fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002500:	4b03      	ldr	r3, [pc, #12]	; (8002510 <HAL_RCC_GetHCLKFreq+0x14>)
 8002502:	681b      	ldr	r3, [r3, #0]
}
 8002504:	4618      	mov	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	20000000 	.word	0x20000000

08002514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002518:	f7ff fff0 	bl	80024fc <HAL_RCC_GetHCLKFreq>
 800251c:	4601      	mov	r1, r0
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	0adb      	lsrs	r3, r3, #11
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	4a04      	ldr	r2, [pc, #16]	; (800253c <HAL_RCC_GetPCLK2Freq+0x28>)
 800252a:	5cd3      	ldrb	r3, [r2, r3]
 800252c:	f003 031f 	and.w	r3, r3, #31
 8002530:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002534:	4618      	mov	r0, r3
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40021000 	.word	0x40021000
 800253c:	0800453c 	.word	0x0800453c

08002540 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	220f      	movs	r2, #15
 800254e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002550:	4b12      	ldr	r3, [pc, #72]	; (800259c <HAL_RCC_GetClockConfig+0x5c>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 0203 	and.w	r2, r3, #3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800255c:	4b0f      	ldr	r3, [pc, #60]	; (800259c <HAL_RCC_GetClockConfig+0x5c>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002568:	4b0c      	ldr	r3, [pc, #48]	; (800259c <HAL_RCC_GetClockConfig+0x5c>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002574:	4b09      	ldr	r3, [pc, #36]	; (800259c <HAL_RCC_GetClockConfig+0x5c>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	08db      	lsrs	r3, r3, #3
 800257a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002582:	4b07      	ldr	r3, [pc, #28]	; (80025a0 <HAL_RCC_GetClockConfig+0x60>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0207 	and.w	r2, r3, #7
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	601a      	str	r2, [r3, #0]
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40021000 	.word	0x40021000
 80025a0:	40022000 	.word	0x40022000

080025a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025ac:	2300      	movs	r3, #0
 80025ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025b0:	4b2a      	ldr	r3, [pc, #168]	; (800265c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d003      	beq.n	80025c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025bc:	f7ff f9e8 	bl	8001990 <HAL_PWREx_GetVoltageRange>
 80025c0:	6178      	str	r0, [r7, #20]
 80025c2:	e014      	b.n	80025ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025c4:	4b25      	ldr	r3, [pc, #148]	; (800265c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c8:	4a24      	ldr	r2, [pc, #144]	; (800265c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ce:	6593      	str	r3, [r2, #88]	; 0x58
 80025d0:	4b22      	ldr	r3, [pc, #136]	; (800265c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025dc:	f7ff f9d8 	bl	8001990 <HAL_PWREx_GetVoltageRange>
 80025e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025e2:	4b1e      	ldr	r3, [pc, #120]	; (800265c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e6:	4a1d      	ldr	r2, [pc, #116]	; (800265c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025f4:	d10b      	bne.n	800260e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b80      	cmp	r3, #128	; 0x80
 80025fa:	d919      	bls.n	8002630 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2ba0      	cmp	r3, #160	; 0xa0
 8002600:	d902      	bls.n	8002608 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002602:	2302      	movs	r3, #2
 8002604:	613b      	str	r3, [r7, #16]
 8002606:	e013      	b.n	8002630 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002608:	2301      	movs	r3, #1
 800260a:	613b      	str	r3, [r7, #16]
 800260c:	e010      	b.n	8002630 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b80      	cmp	r3, #128	; 0x80
 8002612:	d902      	bls.n	800261a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002614:	2303      	movs	r3, #3
 8002616:	613b      	str	r3, [r7, #16]
 8002618:	e00a      	b.n	8002630 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b80      	cmp	r3, #128	; 0x80
 800261e:	d102      	bne.n	8002626 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002620:	2302      	movs	r3, #2
 8002622:	613b      	str	r3, [r7, #16]
 8002624:	e004      	b.n	8002630 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b70      	cmp	r3, #112	; 0x70
 800262a:	d101      	bne.n	8002630 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800262c:	2301      	movs	r3, #1
 800262e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002630:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f023 0207 	bic.w	r2, r3, #7
 8002638:	4909      	ldr	r1, [pc, #36]	; (8002660 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002640:	4b07      	ldr	r3, [pc, #28]	; (8002660 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	429a      	cmp	r2, r3
 800264c:	d001      	beq.n	8002652 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40021000 	.word	0x40021000
 8002660:	40022000 	.word	0x40022000

08002664 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800266c:	2300      	movs	r3, #0
 800266e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002670:	2300      	movs	r3, #0
 8002672:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800267c:	2b00      	cmp	r3, #0
 800267e:	d03f      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002684:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002688:	d01c      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800268a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800268e:	d802      	bhi.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00e      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002694:	e01f      	b.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002696:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800269a:	d003      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800269c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026a0:	d01c      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x78>
 80026a2:	e018      	b.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026a4:	4b85      	ldr	r3, [pc, #532]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4a84      	ldr	r2, [pc, #528]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026b0:	e015      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3304      	adds	r3, #4
 80026b6:	2100      	movs	r1, #0
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 fab9 	bl	8002c30 <RCCEx_PLLSAI1_Config>
 80026be:	4603      	mov	r3, r0
 80026c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026c2:	e00c      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3320      	adds	r3, #32
 80026c8:	2100      	movs	r1, #0
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 fba0 	bl	8002e10 <RCCEx_PLLSAI2_Config>
 80026d0:	4603      	mov	r3, r0
 80026d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026d4:	e003      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	74fb      	strb	r3, [r7, #19]
      break;
 80026da:	e000      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80026dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026de:	7cfb      	ldrb	r3, [r7, #19]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10b      	bne.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026e4:	4b75      	ldr	r3, [pc, #468]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026f2:	4972      	ldr	r1, [pc, #456]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80026fa:	e001      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026fc:	7cfb      	ldrb	r3, [r7, #19]
 80026fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d03f      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002710:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002714:	d01c      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002716:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800271a:	d802      	bhi.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00e      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002720:	e01f      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002722:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002726:	d003      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002728:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800272c:	d01c      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800272e:	e018      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002730:	4b62      	ldr	r3, [pc, #392]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	4a61      	ldr	r2, [pc, #388]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800273a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800273c:	e015      	b.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3304      	adds	r3, #4
 8002742:	2100      	movs	r1, #0
 8002744:	4618      	mov	r0, r3
 8002746:	f000 fa73 	bl	8002c30 <RCCEx_PLLSAI1_Config>
 800274a:	4603      	mov	r3, r0
 800274c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800274e:	e00c      	b.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3320      	adds	r3, #32
 8002754:	2100      	movs	r1, #0
 8002756:	4618      	mov	r0, r3
 8002758:	f000 fb5a 	bl	8002e10 <RCCEx_PLLSAI2_Config>
 800275c:	4603      	mov	r3, r0
 800275e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002760:	e003      	b.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	74fb      	strb	r3, [r7, #19]
      break;
 8002766:	e000      	b.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002768:	bf00      	nop
    }

    if(ret == HAL_OK)
 800276a:	7cfb      	ldrb	r3, [r7, #19]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d10b      	bne.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002770:	4b52      	ldr	r3, [pc, #328]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002776:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800277e:	494f      	ldr	r1, [pc, #316]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002780:	4313      	orrs	r3, r2
 8002782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002786:	e001      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002788:	7cfb      	ldrb	r3, [r7, #19]
 800278a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 80a0 	beq.w	80028da <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800279a:	2300      	movs	r3, #0
 800279c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800279e:	4b47      	ldr	r3, [pc, #284]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80027aa:	2301      	movs	r3, #1
 80027ac:	e000      	b.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80027ae:	2300      	movs	r3, #0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00d      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027b4:	4b41      	ldr	r3, [pc, #260]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b8:	4a40      	ldr	r2, [pc, #256]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027be:	6593      	str	r3, [r2, #88]	; 0x58
 80027c0:	4b3e      	ldr	r3, [pc, #248]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c8:	60bb      	str	r3, [r7, #8]
 80027ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027cc:	2301      	movs	r3, #1
 80027ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027d0:	4b3b      	ldr	r3, [pc, #236]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a3a      	ldr	r2, [pc, #232]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80027d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027dc:	f7fe fd04 	bl	80011e8 <HAL_GetTick>
 80027e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027e2:	e009      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e4:	f7fe fd00 	bl	80011e8 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d902      	bls.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	74fb      	strb	r3, [r7, #19]
        break;
 80027f6:	e005      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027f8:	4b31      	ldr	r3, [pc, #196]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0ef      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002804:	7cfb      	ldrb	r3, [r7, #19]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d15c      	bne.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800280a:	4b2c      	ldr	r3, [pc, #176]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800280c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002810:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002814:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d01f      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	429a      	cmp	r2, r3
 8002826:	d019      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002828:	4b24      	ldr	r3, [pc, #144]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800282a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002832:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002834:	4b21      	ldr	r3, [pc, #132]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283a:	4a20      	ldr	r2, [pc, #128]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800283c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002840:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002844:	4b1d      	ldr	r3, [pc, #116]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284a:	4a1c      	ldr	r2, [pc, #112]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800284c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002854:	4a19      	ldr	r2, [pc, #100]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d016      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002866:	f7fe fcbf 	bl	80011e8 <HAL_GetTick>
 800286a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800286c:	e00b      	b.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286e:	f7fe fcbb 	bl	80011e8 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	f241 3288 	movw	r2, #5000	; 0x1388
 800287c:	4293      	cmp	r3, r2
 800287e:	d902      	bls.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	74fb      	strb	r3, [r7, #19]
            break;
 8002884:	e006      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002886:	4b0d      	ldr	r3, [pc, #52]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0ec      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002894:	7cfb      	ldrb	r3, [r7, #19]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10c      	bne.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800289a:	4b08      	ldr	r3, [pc, #32]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800289c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028aa:	4904      	ldr	r1, [pc, #16]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028b2:	e009      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028b4:	7cfb      	ldrb	r3, [r7, #19]
 80028b6:	74bb      	strb	r3, [r7, #18]
 80028b8:	e006      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80028ba:	bf00      	nop
 80028bc:	40021000 	.word	0x40021000
 80028c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028c4:	7cfb      	ldrb	r3, [r7, #19]
 80028c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028c8:	7c7b      	ldrb	r3, [r7, #17]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d105      	bne.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ce:	4b9e      	ldr	r3, [pc, #632]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d2:	4a9d      	ldr	r2, [pc, #628]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00a      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028e6:	4b98      	ldr	r3, [pc, #608]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ec:	f023 0203 	bic.w	r2, r3, #3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f4:	4994      	ldr	r1, [pc, #592]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00a      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002908:	4b8f      	ldr	r3, [pc, #572]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800290a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290e:	f023 020c 	bic.w	r2, r3, #12
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002916:	498c      	ldr	r1, [pc, #560]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002918:	4313      	orrs	r3, r2
 800291a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0304 	and.w	r3, r3, #4
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00a      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800292a:	4b87      	ldr	r3, [pc, #540]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800292c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002930:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	4983      	ldr	r1, [pc, #524]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0308 	and.w	r3, r3, #8
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00a      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800294c:	4b7e      	ldr	r3, [pc, #504]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800294e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002952:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295a:	497b      	ldr	r1, [pc, #492]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800295c:	4313      	orrs	r3, r2
 800295e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0310 	and.w	r3, r3, #16
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00a      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800296e:	4b76      	ldr	r3, [pc, #472]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002974:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800297c:	4972      	ldr	r1, [pc, #456]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800297e:	4313      	orrs	r3, r2
 8002980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0320 	and.w	r3, r3, #32
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00a      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002990:	4b6d      	ldr	r3, [pc, #436]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002996:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800299e:	496a      	ldr	r1, [pc, #424]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00a      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029b2:	4b65      	ldr	r3, [pc, #404]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c0:	4961      	ldr	r1, [pc, #388]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00a      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029d4:	4b5c      	ldr	r3, [pc, #368]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029e2:	4959      	ldr	r1, [pc, #356]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00a      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029f6:	4b54      	ldr	r3, [pc, #336]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a04:	4950      	ldr	r1, [pc, #320]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00a      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a18:	4b4b      	ldr	r3, [pc, #300]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a26:	4948      	ldr	r1, [pc, #288]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00a      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a3a:	4b43      	ldr	r3, [pc, #268]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a48:	493f      	ldr	r1, [pc, #252]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d028      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a5c:	4b3a      	ldr	r3, [pc, #232]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a6a:	4937      	ldr	r1, [pc, #220]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a7a:	d106      	bne.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a7c:	4b32      	ldr	r3, [pc, #200]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	4a31      	ldr	r2, [pc, #196]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a86:	60d3      	str	r3, [r2, #12]
 8002a88:	e011      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a92:	d10c      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3304      	adds	r3, #4
 8002a98:	2101      	movs	r1, #1
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 f8c8 	bl	8002c30 <RCCEx_PLLSAI1_Config>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002aa4:	7cfb      	ldrb	r3, [r7, #19]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002aaa:	7cfb      	ldrb	r3, [r7, #19]
 8002aac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d028      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002aba:	4b23      	ldr	r3, [pc, #140]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac8:	491f      	ldr	r1, [pc, #124]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ad8:	d106      	bne.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ada:	4b1b      	ldr	r3, [pc, #108]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	4a1a      	ldr	r2, [pc, #104]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ae0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ae4:	60d3      	str	r3, [r2, #12]
 8002ae6:	e011      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002af0:	d10c      	bne.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3304      	adds	r3, #4
 8002af6:	2101      	movs	r1, #1
 8002af8:	4618      	mov	r0, r3
 8002afa:	f000 f899 	bl	8002c30 <RCCEx_PLLSAI1_Config>
 8002afe:	4603      	mov	r3, r0
 8002b00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b02:	7cfb      	ldrb	r3, [r7, #19]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002b08:	7cfb      	ldrb	r3, [r7, #19]
 8002b0a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d02b      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b18:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b26:	4908      	ldr	r1, [pc, #32]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b36:	d109      	bne.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b38:	4b03      	ldr	r3, [pc, #12]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	4a02      	ldr	r2, [pc, #8]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b42:	60d3      	str	r3, [r2, #12]
 8002b44:	e014      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002b46:	bf00      	nop
 8002b48:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b54:	d10c      	bne.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3304      	adds	r3, #4
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f000 f867 	bl	8002c30 <RCCEx_PLLSAI1_Config>
 8002b62:	4603      	mov	r3, r0
 8002b64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b66:	7cfb      	ldrb	r3, [r7, #19]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002b6c:	7cfb      	ldrb	r3, [r7, #19]
 8002b6e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d02f      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b7c:	4b2b      	ldr	r3, [pc, #172]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b82:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b8a:	4928      	ldr	r1, [pc, #160]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b9a:	d10d      	bne.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3304      	adds	r3, #4
 8002ba0:	2102      	movs	r1, #2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f000 f844 	bl	8002c30 <RCCEx_PLLSAI1_Config>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bac:	7cfb      	ldrb	r3, [r7, #19]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d014      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002bb2:	7cfb      	ldrb	r3, [r7, #19]
 8002bb4:	74bb      	strb	r3, [r7, #18]
 8002bb6:	e011      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bc0:	d10c      	bne.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	3320      	adds	r3, #32
 8002bc6:	2102      	movs	r1, #2
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f000 f921 	bl	8002e10 <RCCEx_PLLSAI2_Config>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bd2:	7cfb      	ldrb	r3, [r7, #19]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002bd8:	7cfb      	ldrb	r3, [r7, #19]
 8002bda:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00a      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002be8:	4b10      	ldr	r3, [pc, #64]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bf6:	490d      	ldr	r1, [pc, #52]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00b      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c0a:	4b08      	ldr	r3, [pc, #32]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c10:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c1a:	4904      	ldr	r1, [pc, #16]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c22:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40021000 	.word	0x40021000

08002c30 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c3e:	4b73      	ldr	r3, [pc, #460]	; (8002e0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d018      	beq.n	8002c7c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c4a:	4b70      	ldr	r3, [pc, #448]	; (8002e0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f003 0203 	and.w	r2, r3, #3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d10d      	bne.n	8002c76 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
       ||
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d009      	beq.n	8002c76 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c62:	4b6a      	ldr	r3, [pc, #424]	; (8002e0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	091b      	lsrs	r3, r3, #4
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	1c5a      	adds	r2, r3, #1
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
       ||
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d044      	beq.n	8002d00 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	73fb      	strb	r3, [r7, #15]
 8002c7a:	e041      	b.n	8002d00 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d00c      	beq.n	8002c9e <RCCEx_PLLSAI1_Config+0x6e>
 8002c84:	2b03      	cmp	r3, #3
 8002c86:	d013      	beq.n	8002cb0 <RCCEx_PLLSAI1_Config+0x80>
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d120      	bne.n	8002cce <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c8c:	4b5f      	ldr	r3, [pc, #380]	; (8002e0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d11d      	bne.n	8002cd4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c9c:	e01a      	b.n	8002cd4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c9e:	4b5b      	ldr	r3, [pc, #364]	; (8002e0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d116      	bne.n	8002cd8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cae:	e013      	b.n	8002cd8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002cb0:	4b56      	ldr	r3, [pc, #344]	; (8002e0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10f      	bne.n	8002cdc <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cbc:	4b53      	ldr	r3, [pc, #332]	; (8002e0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d109      	bne.n	8002cdc <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ccc:	e006      	b.n	8002cdc <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	73fb      	strb	r3, [r7, #15]
      break;
 8002cd2:	e004      	b.n	8002cde <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002cd4:	bf00      	nop
 8002cd6:	e002      	b.n	8002cde <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002cd8:	bf00      	nop
 8002cda:	e000      	b.n	8002cde <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002cdc:	bf00      	nop
    }

    if(status == HAL_OK)
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10d      	bne.n	8002d00 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ce4:	4b49      	ldr	r3, [pc, #292]	; (8002e0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6819      	ldr	r1, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	430b      	orrs	r3, r1
 8002cfa:	4944      	ldr	r1, [pc, #272]	; (8002e0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d17d      	bne.n	8002e02 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d06:	4b41      	ldr	r3, [pc, #260]	; (8002e0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a40      	ldr	r2, [pc, #256]	; (8002e0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d0c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d12:	f7fe fa69 	bl	80011e8 <HAL_GetTick>
 8002d16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d18:	e009      	b.n	8002d2e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d1a:	f7fe fa65 	bl	80011e8 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d902      	bls.n	8002d2e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	73fb      	strb	r3, [r7, #15]
        break;
 8002d2c:	e005      	b.n	8002d3a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d2e:	4b37      	ldr	r3, [pc, #220]	; (8002e0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1ef      	bne.n	8002d1a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d160      	bne.n	8002e02 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d111      	bne.n	8002d6a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d46:	4b31      	ldr	r3, [pc, #196]	; (8002e0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	6892      	ldr	r2, [r2, #8]
 8002d56:	0211      	lsls	r1, r2, #8
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	68d2      	ldr	r2, [r2, #12]
 8002d5c:	0912      	lsrs	r2, r2, #4
 8002d5e:	0452      	lsls	r2, r2, #17
 8002d60:	430a      	orrs	r2, r1
 8002d62:	492a      	ldr	r1, [pc, #168]	; (8002e0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	610b      	str	r3, [r1, #16]
 8002d68:	e027      	b.n	8002dba <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d112      	bne.n	8002d96 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d70:	4b26      	ldr	r3, [pc, #152]	; (8002e0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002d78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	6892      	ldr	r2, [r2, #8]
 8002d80:	0211      	lsls	r1, r2, #8
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6912      	ldr	r2, [r2, #16]
 8002d86:	0852      	lsrs	r2, r2, #1
 8002d88:	3a01      	subs	r2, #1
 8002d8a:	0552      	lsls	r2, r2, #21
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	491f      	ldr	r1, [pc, #124]	; (8002e0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	610b      	str	r3, [r1, #16]
 8002d94:	e011      	b.n	8002dba <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d96:	4b1d      	ldr	r3, [pc, #116]	; (8002e0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d9e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6892      	ldr	r2, [r2, #8]
 8002da6:	0211      	lsls	r1, r2, #8
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6952      	ldr	r2, [r2, #20]
 8002dac:	0852      	lsrs	r2, r2, #1
 8002dae:	3a01      	subs	r2, #1
 8002db0:	0652      	lsls	r2, r2, #25
 8002db2:	430a      	orrs	r2, r1
 8002db4:	4915      	ldr	r1, [pc, #84]	; (8002e0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002dba:	4b14      	ldr	r3, [pc, #80]	; (8002e0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a13      	ldr	r2, [pc, #76]	; (8002e0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dc0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002dc4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc6:	f7fe fa0f 	bl	80011e8 <HAL_GetTick>
 8002dca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002dcc:	e009      	b.n	8002de2 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002dce:	f7fe fa0b 	bl	80011e8 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d902      	bls.n	8002de2 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	73fb      	strb	r3, [r7, #15]
          break;
 8002de0:	e005      	b.n	8002dee <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002de2:	4b0a      	ldr	r3, [pc, #40]	; (8002e0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0ef      	beq.n	8002dce <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002dee:	7bfb      	ldrb	r3, [r7, #15]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d106      	bne.n	8002e02 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002df4:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	4903      	ldr	r1, [pc, #12]	; (8002e0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40021000 	.word	0x40021000

08002e10 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e1e:	4b68      	ldr	r3, [pc, #416]	; (8002fc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d018      	beq.n	8002e5c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e2a:	4b65      	ldr	r3, [pc, #404]	; (8002fc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f003 0203 	and.w	r2, r3, #3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d10d      	bne.n	8002e56 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
       ||
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d009      	beq.n	8002e56 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002e42:	4b5f      	ldr	r3, [pc, #380]	; (8002fc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	091b      	lsrs	r3, r3, #4
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	1c5a      	adds	r2, r3, #1
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
       ||
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d044      	beq.n	8002ee0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	73fb      	strb	r3, [r7, #15]
 8002e5a:	e041      	b.n	8002ee0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d00c      	beq.n	8002e7e <RCCEx_PLLSAI2_Config+0x6e>
 8002e64:	2b03      	cmp	r3, #3
 8002e66:	d013      	beq.n	8002e90 <RCCEx_PLLSAI2_Config+0x80>
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d120      	bne.n	8002eae <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e6c:	4b54      	ldr	r3, [pc, #336]	; (8002fc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d11d      	bne.n	8002eb4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e7c:	e01a      	b.n	8002eb4 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e7e:	4b50      	ldr	r3, [pc, #320]	; (8002fc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d116      	bne.n	8002eb8 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e8e:	e013      	b.n	8002eb8 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e90:	4b4b      	ldr	r3, [pc, #300]	; (8002fc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10f      	bne.n	8002ebc <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e9c:	4b48      	ldr	r3, [pc, #288]	; (8002fc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d109      	bne.n	8002ebc <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002eac:	e006      	b.n	8002ebc <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	73fb      	strb	r3, [r7, #15]
      break;
 8002eb2:	e004      	b.n	8002ebe <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002eb4:	bf00      	nop
 8002eb6:	e002      	b.n	8002ebe <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002eb8:	bf00      	nop
 8002eba:	e000      	b.n	8002ebe <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002ebc:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10d      	bne.n	8002ee0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ec4:	4b3e      	ldr	r3, [pc, #248]	; (8002fc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6819      	ldr	r1, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	4939      	ldr	r1, [pc, #228]	; (8002fc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d167      	bne.n	8002fb6 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ee6:	4b36      	ldr	r3, [pc, #216]	; (8002fc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a35      	ldr	r2, [pc, #212]	; (8002fc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002eec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ef0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ef2:	f7fe f979 	bl	80011e8 <HAL_GetTick>
 8002ef6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ef8:	e009      	b.n	8002f0e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002efa:	f7fe f975 	bl	80011e8 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d902      	bls.n	8002f0e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	73fb      	strb	r3, [r7, #15]
        break;
 8002f0c:	e005      	b.n	8002f1a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f0e:	4b2c      	ldr	r3, [pc, #176]	; (8002fc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1ef      	bne.n	8002efa <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d14a      	bne.n	8002fb6 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d111      	bne.n	8002f4a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f26:	4b26      	ldr	r3, [pc, #152]	; (8002fc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6892      	ldr	r2, [r2, #8]
 8002f36:	0211      	lsls	r1, r2, #8
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	68d2      	ldr	r2, [r2, #12]
 8002f3c:	0912      	lsrs	r2, r2, #4
 8002f3e:	0452      	lsls	r2, r2, #17
 8002f40:	430a      	orrs	r2, r1
 8002f42:	491f      	ldr	r1, [pc, #124]	; (8002fc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	614b      	str	r3, [r1, #20]
 8002f48:	e011      	b.n	8002f6e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f4a:	4b1d      	ldr	r3, [pc, #116]	; (8002fc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f52:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	6892      	ldr	r2, [r2, #8]
 8002f5a:	0211      	lsls	r1, r2, #8
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	6912      	ldr	r2, [r2, #16]
 8002f60:	0852      	lsrs	r2, r2, #1
 8002f62:	3a01      	subs	r2, #1
 8002f64:	0652      	lsls	r2, r2, #25
 8002f66:	430a      	orrs	r2, r1
 8002f68:	4915      	ldr	r1, [pc, #84]	; (8002fc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f6e:	4b14      	ldr	r3, [pc, #80]	; (8002fc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a13      	ldr	r2, [pc, #76]	; (8002fc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f78:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f7a:	f7fe f935 	bl	80011e8 <HAL_GetTick>
 8002f7e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f80:	e009      	b.n	8002f96 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f82:	f7fe f931 	bl	80011e8 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d902      	bls.n	8002f96 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	73fb      	strb	r3, [r7, #15]
          break;
 8002f94:	e005      	b.n	8002fa2 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f96:	4b0a      	ldr	r3, [pc, #40]	; (8002fc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d0ef      	beq.n	8002f82 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d106      	bne.n	8002fb6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002fa8:	4b05      	ldr	r3, [pc, #20]	; (8002fc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002faa:	695a      	ldr	r2, [r3, #20]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	4903      	ldr	r1, [pc, #12]	; (8002fc0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40021000 	.word	0x40021000

08002fc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e049      	b.n	800306a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d106      	bne.n	8002ff0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f841 	bl	8003072 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3304      	adds	r3, #4
 8003000:	4619      	mov	r1, r3
 8003002:	4610      	mov	r0, r2
 8003004:	f000 f9f8 	bl	80033f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003072:	b480      	push	{r7}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
	...

08003088 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b01      	cmp	r3, #1
 800309a:	d001      	beq.n	80030a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e04f      	b.n	8003140 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2202      	movs	r2, #2
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 0201 	orr.w	r2, r2, #1
 80030b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a23      	ldr	r2, [pc, #140]	; (800314c <HAL_TIM_Base_Start_IT+0xc4>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d01d      	beq.n	80030fe <HAL_TIM_Base_Start_IT+0x76>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ca:	d018      	beq.n	80030fe <HAL_TIM_Base_Start_IT+0x76>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a1f      	ldr	r2, [pc, #124]	; (8003150 <HAL_TIM_Base_Start_IT+0xc8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d013      	beq.n	80030fe <HAL_TIM_Base_Start_IT+0x76>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a1e      	ldr	r2, [pc, #120]	; (8003154 <HAL_TIM_Base_Start_IT+0xcc>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d00e      	beq.n	80030fe <HAL_TIM_Base_Start_IT+0x76>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a1c      	ldr	r2, [pc, #112]	; (8003158 <HAL_TIM_Base_Start_IT+0xd0>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d009      	beq.n	80030fe <HAL_TIM_Base_Start_IT+0x76>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a1b      	ldr	r2, [pc, #108]	; (800315c <HAL_TIM_Base_Start_IT+0xd4>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d004      	beq.n	80030fe <HAL_TIM_Base_Start_IT+0x76>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a19      	ldr	r2, [pc, #100]	; (8003160 <HAL_TIM_Base_Start_IT+0xd8>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d115      	bne.n	800312a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	4b17      	ldr	r3, [pc, #92]	; (8003164 <HAL_TIM_Base_Start_IT+0xdc>)
 8003106:	4013      	ands	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2b06      	cmp	r3, #6
 800310e:	d015      	beq.n	800313c <HAL_TIM_Base_Start_IT+0xb4>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003116:	d011      	beq.n	800313c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0201 	orr.w	r2, r2, #1
 8003126:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003128:	e008      	b.n	800313c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f042 0201 	orr.w	r2, r2, #1
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	e000      	b.n	800313e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800313c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	40012c00 	.word	0x40012c00
 8003150:	40000400 	.word	0x40000400
 8003154:	40000800 	.word	0x40000800
 8003158:	40000c00 	.word	0x40000c00
 800315c:	40013400 	.word	0x40013400
 8003160:	40014000 	.word	0x40014000
 8003164:	00010007 	.word	0x00010007

08003168 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b02      	cmp	r3, #2
 800317c:	d122      	bne.n	80031c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b02      	cmp	r3, #2
 800318a:	d11b      	bne.n	80031c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f06f 0202 	mvn.w	r2, #2
 8003194:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f905 	bl	80033ba <HAL_TIM_IC_CaptureCallback>
 80031b0:	e005      	b.n	80031be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f8f7 	bl	80033a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 f908 	bl	80033ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d122      	bne.n	8003218 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d11b      	bne.n	8003218 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f06f 0204 	mvn.w	r2, #4
 80031e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2202      	movs	r2, #2
 80031ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f8db 	bl	80033ba <HAL_TIM_IC_CaptureCallback>
 8003204:	e005      	b.n	8003212 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f8cd 	bl	80033a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 f8de 	bl	80033ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	2b08      	cmp	r3, #8
 8003224:	d122      	bne.n	800326c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	f003 0308 	and.w	r3, r3, #8
 8003230:	2b08      	cmp	r3, #8
 8003232:	d11b      	bne.n	800326c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f06f 0208 	mvn.w	r2, #8
 800323c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2204      	movs	r2, #4
 8003242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	f003 0303 	and.w	r3, r3, #3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f8b1 	bl	80033ba <HAL_TIM_IC_CaptureCallback>
 8003258:	e005      	b.n	8003266 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f8a3 	bl	80033a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 f8b4 	bl	80033ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	f003 0310 	and.w	r3, r3, #16
 8003276:	2b10      	cmp	r3, #16
 8003278:	d122      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f003 0310 	and.w	r3, r3, #16
 8003284:	2b10      	cmp	r3, #16
 8003286:	d11b      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f06f 0210 	mvn.w	r2, #16
 8003290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2208      	movs	r2, #8
 8003296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f887 	bl	80033ba <HAL_TIM_IC_CaptureCallback>
 80032ac:	e005      	b.n	80032ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f879 	bl	80033a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f88a 	bl	80033ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d10e      	bne.n	80032ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d107      	bne.n	80032ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f06f 0201 	mvn.w	r2, #1
 80032e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7fd fa86 	bl	80007f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f6:	2b80      	cmp	r3, #128	; 0x80
 80032f8:	d10e      	bne.n	8003318 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003304:	2b80      	cmp	r3, #128	; 0x80
 8003306:	d107      	bne.n	8003318 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f914 	bl	8003540 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003326:	d10e      	bne.n	8003346 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003332:	2b80      	cmp	r3, #128	; 0x80
 8003334:	d107      	bne.n	8003346 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800333e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 f907 	bl	8003554 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003350:	2b40      	cmp	r3, #64	; 0x40
 8003352:	d10e      	bne.n	8003372 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335e:	2b40      	cmp	r3, #64	; 0x40
 8003360:	d107      	bne.n	8003372 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800336a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 f838 	bl	80033e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	f003 0320 	and.w	r3, r3, #32
 800337c:	2b20      	cmp	r3, #32
 800337e:	d10e      	bne.n	800339e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	f003 0320 	and.w	r3, r3, #32
 800338a:	2b20      	cmp	r3, #32
 800338c:	d107      	bne.n	800339e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f06f 0220 	mvn.w	r2, #32
 8003396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f8c7 	bl	800352c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800339e:	bf00      	nop
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033c2:	bf00      	nop
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
	...

080033f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a40      	ldr	r2, [pc, #256]	; (800350c <TIM_Base_SetConfig+0x114>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d013      	beq.n	8003438 <TIM_Base_SetConfig+0x40>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003416:	d00f      	beq.n	8003438 <TIM_Base_SetConfig+0x40>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a3d      	ldr	r2, [pc, #244]	; (8003510 <TIM_Base_SetConfig+0x118>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d00b      	beq.n	8003438 <TIM_Base_SetConfig+0x40>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a3c      	ldr	r2, [pc, #240]	; (8003514 <TIM_Base_SetConfig+0x11c>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d007      	beq.n	8003438 <TIM_Base_SetConfig+0x40>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a3b      	ldr	r2, [pc, #236]	; (8003518 <TIM_Base_SetConfig+0x120>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d003      	beq.n	8003438 <TIM_Base_SetConfig+0x40>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a3a      	ldr	r2, [pc, #232]	; (800351c <TIM_Base_SetConfig+0x124>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d108      	bne.n	800344a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800343e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	4313      	orrs	r3, r2
 8003448:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a2f      	ldr	r2, [pc, #188]	; (800350c <TIM_Base_SetConfig+0x114>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d01f      	beq.n	8003492 <TIM_Base_SetConfig+0x9a>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003458:	d01b      	beq.n	8003492 <TIM_Base_SetConfig+0x9a>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a2c      	ldr	r2, [pc, #176]	; (8003510 <TIM_Base_SetConfig+0x118>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d017      	beq.n	8003492 <TIM_Base_SetConfig+0x9a>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a2b      	ldr	r2, [pc, #172]	; (8003514 <TIM_Base_SetConfig+0x11c>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d013      	beq.n	8003492 <TIM_Base_SetConfig+0x9a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a2a      	ldr	r2, [pc, #168]	; (8003518 <TIM_Base_SetConfig+0x120>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d00f      	beq.n	8003492 <TIM_Base_SetConfig+0x9a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a29      	ldr	r2, [pc, #164]	; (800351c <TIM_Base_SetConfig+0x124>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d00b      	beq.n	8003492 <TIM_Base_SetConfig+0x9a>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a28      	ldr	r2, [pc, #160]	; (8003520 <TIM_Base_SetConfig+0x128>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d007      	beq.n	8003492 <TIM_Base_SetConfig+0x9a>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a27      	ldr	r2, [pc, #156]	; (8003524 <TIM_Base_SetConfig+0x12c>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d003      	beq.n	8003492 <TIM_Base_SetConfig+0x9a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a26      	ldr	r2, [pc, #152]	; (8003528 <TIM_Base_SetConfig+0x130>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d108      	bne.n	80034a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a10      	ldr	r2, [pc, #64]	; (800350c <TIM_Base_SetConfig+0x114>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d00f      	beq.n	80034f0 <TIM_Base_SetConfig+0xf8>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a12      	ldr	r2, [pc, #72]	; (800351c <TIM_Base_SetConfig+0x124>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d00b      	beq.n	80034f0 <TIM_Base_SetConfig+0xf8>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a11      	ldr	r2, [pc, #68]	; (8003520 <TIM_Base_SetConfig+0x128>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d007      	beq.n	80034f0 <TIM_Base_SetConfig+0xf8>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a10      	ldr	r2, [pc, #64]	; (8003524 <TIM_Base_SetConfig+0x12c>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d003      	beq.n	80034f0 <TIM_Base_SetConfig+0xf8>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a0f      	ldr	r2, [pc, #60]	; (8003528 <TIM_Base_SetConfig+0x130>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d103      	bne.n	80034f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	691a      	ldr	r2, [r3, #16]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	615a      	str	r2, [r3, #20]
}
 80034fe:	bf00      	nop
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	40012c00 	.word	0x40012c00
 8003510:	40000400 	.word	0x40000400
 8003514:	40000800 	.word	0x40000800
 8003518:	40000c00 	.word	0x40000c00
 800351c:	40013400 	.word	0x40013400
 8003520:	40014000 	.word	0x40014000
 8003524:	40014400 	.word	0x40014400
 8003528:	40014800 	.word	0x40014800

0800352c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <__errno>:
 8003568:	4b01      	ldr	r3, [pc, #4]	; (8003570 <__errno+0x8>)
 800356a:	6818      	ldr	r0, [r3, #0]
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	2000000c 	.word	0x2000000c

08003574 <__libc_init_array>:
 8003574:	b570      	push	{r4, r5, r6, lr}
 8003576:	4e0d      	ldr	r6, [pc, #52]	; (80035ac <__libc_init_array+0x38>)
 8003578:	4c0d      	ldr	r4, [pc, #52]	; (80035b0 <__libc_init_array+0x3c>)
 800357a:	1ba4      	subs	r4, r4, r6
 800357c:	10a4      	asrs	r4, r4, #2
 800357e:	2500      	movs	r5, #0
 8003580:	42a5      	cmp	r5, r4
 8003582:	d109      	bne.n	8003598 <__libc_init_array+0x24>
 8003584:	4e0b      	ldr	r6, [pc, #44]	; (80035b4 <__libc_init_array+0x40>)
 8003586:	4c0c      	ldr	r4, [pc, #48]	; (80035b8 <__libc_init_array+0x44>)
 8003588:	f000 ff4e 	bl	8004428 <_init>
 800358c:	1ba4      	subs	r4, r4, r6
 800358e:	10a4      	asrs	r4, r4, #2
 8003590:	2500      	movs	r5, #0
 8003592:	42a5      	cmp	r5, r4
 8003594:	d105      	bne.n	80035a2 <__libc_init_array+0x2e>
 8003596:	bd70      	pop	{r4, r5, r6, pc}
 8003598:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800359c:	4798      	blx	r3
 800359e:	3501      	adds	r5, #1
 80035a0:	e7ee      	b.n	8003580 <__libc_init_array+0xc>
 80035a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035a6:	4798      	blx	r3
 80035a8:	3501      	adds	r5, #1
 80035aa:	e7f2      	b.n	8003592 <__libc_init_array+0x1e>
 80035ac:	080046d4 	.word	0x080046d4
 80035b0:	080046d4 	.word	0x080046d4
 80035b4:	080046d4 	.word	0x080046d4
 80035b8:	080046d8 	.word	0x080046d8

080035bc <memset>:
 80035bc:	4402      	add	r2, r0
 80035be:	4603      	mov	r3, r0
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d100      	bne.n	80035c6 <memset+0xa>
 80035c4:	4770      	bx	lr
 80035c6:	f803 1b01 	strb.w	r1, [r3], #1
 80035ca:	e7f9      	b.n	80035c0 <memset+0x4>

080035cc <iprintf>:
 80035cc:	b40f      	push	{r0, r1, r2, r3}
 80035ce:	4b0a      	ldr	r3, [pc, #40]	; (80035f8 <iprintf+0x2c>)
 80035d0:	b513      	push	{r0, r1, r4, lr}
 80035d2:	681c      	ldr	r4, [r3, #0]
 80035d4:	b124      	cbz	r4, 80035e0 <iprintf+0x14>
 80035d6:	69a3      	ldr	r3, [r4, #24]
 80035d8:	b913      	cbnz	r3, 80035e0 <iprintf+0x14>
 80035da:	4620      	mov	r0, r4
 80035dc:	f000 f9d2 	bl	8003984 <__sinit>
 80035e0:	ab05      	add	r3, sp, #20
 80035e2:	9a04      	ldr	r2, [sp, #16]
 80035e4:	68a1      	ldr	r1, [r4, #8]
 80035e6:	9301      	str	r3, [sp, #4]
 80035e8:	4620      	mov	r0, r4
 80035ea:	f000 fb8b 	bl	8003d04 <_vfiprintf_r>
 80035ee:	b002      	add	sp, #8
 80035f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035f4:	b004      	add	sp, #16
 80035f6:	4770      	bx	lr
 80035f8:	2000000c 	.word	0x2000000c

080035fc <putchar>:
 80035fc:	b538      	push	{r3, r4, r5, lr}
 80035fe:	4b08      	ldr	r3, [pc, #32]	; (8003620 <putchar+0x24>)
 8003600:	681c      	ldr	r4, [r3, #0]
 8003602:	4605      	mov	r5, r0
 8003604:	b124      	cbz	r4, 8003610 <putchar+0x14>
 8003606:	69a3      	ldr	r3, [r4, #24]
 8003608:	b913      	cbnz	r3, 8003610 <putchar+0x14>
 800360a:	4620      	mov	r0, r4
 800360c:	f000 f9ba 	bl	8003984 <__sinit>
 8003610:	68a2      	ldr	r2, [r4, #8]
 8003612:	4629      	mov	r1, r5
 8003614:	4620      	mov	r0, r4
 8003616:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800361a:	f000 be11 	b.w	8004240 <_putc_r>
 800361e:	bf00      	nop
 8003620:	2000000c 	.word	0x2000000c

08003624 <__swbuf_r>:
 8003624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003626:	460e      	mov	r6, r1
 8003628:	4614      	mov	r4, r2
 800362a:	4605      	mov	r5, r0
 800362c:	b118      	cbz	r0, 8003636 <__swbuf_r+0x12>
 800362e:	6983      	ldr	r3, [r0, #24]
 8003630:	b90b      	cbnz	r3, 8003636 <__swbuf_r+0x12>
 8003632:	f000 f9a7 	bl	8003984 <__sinit>
 8003636:	4b21      	ldr	r3, [pc, #132]	; (80036bc <__swbuf_r+0x98>)
 8003638:	429c      	cmp	r4, r3
 800363a:	d12a      	bne.n	8003692 <__swbuf_r+0x6e>
 800363c:	686c      	ldr	r4, [r5, #4]
 800363e:	69a3      	ldr	r3, [r4, #24]
 8003640:	60a3      	str	r3, [r4, #8]
 8003642:	89a3      	ldrh	r3, [r4, #12]
 8003644:	071a      	lsls	r2, r3, #28
 8003646:	d52e      	bpl.n	80036a6 <__swbuf_r+0x82>
 8003648:	6923      	ldr	r3, [r4, #16]
 800364a:	b363      	cbz	r3, 80036a6 <__swbuf_r+0x82>
 800364c:	6923      	ldr	r3, [r4, #16]
 800364e:	6820      	ldr	r0, [r4, #0]
 8003650:	1ac0      	subs	r0, r0, r3
 8003652:	6963      	ldr	r3, [r4, #20]
 8003654:	b2f6      	uxtb	r6, r6
 8003656:	4283      	cmp	r3, r0
 8003658:	4637      	mov	r7, r6
 800365a:	dc04      	bgt.n	8003666 <__swbuf_r+0x42>
 800365c:	4621      	mov	r1, r4
 800365e:	4628      	mov	r0, r5
 8003660:	f000 f926 	bl	80038b0 <_fflush_r>
 8003664:	bb28      	cbnz	r0, 80036b2 <__swbuf_r+0x8e>
 8003666:	68a3      	ldr	r3, [r4, #8]
 8003668:	3b01      	subs	r3, #1
 800366a:	60a3      	str	r3, [r4, #8]
 800366c:	6823      	ldr	r3, [r4, #0]
 800366e:	1c5a      	adds	r2, r3, #1
 8003670:	6022      	str	r2, [r4, #0]
 8003672:	701e      	strb	r6, [r3, #0]
 8003674:	6963      	ldr	r3, [r4, #20]
 8003676:	3001      	adds	r0, #1
 8003678:	4283      	cmp	r3, r0
 800367a:	d004      	beq.n	8003686 <__swbuf_r+0x62>
 800367c:	89a3      	ldrh	r3, [r4, #12]
 800367e:	07db      	lsls	r3, r3, #31
 8003680:	d519      	bpl.n	80036b6 <__swbuf_r+0x92>
 8003682:	2e0a      	cmp	r6, #10
 8003684:	d117      	bne.n	80036b6 <__swbuf_r+0x92>
 8003686:	4621      	mov	r1, r4
 8003688:	4628      	mov	r0, r5
 800368a:	f000 f911 	bl	80038b0 <_fflush_r>
 800368e:	b190      	cbz	r0, 80036b6 <__swbuf_r+0x92>
 8003690:	e00f      	b.n	80036b2 <__swbuf_r+0x8e>
 8003692:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <__swbuf_r+0x9c>)
 8003694:	429c      	cmp	r4, r3
 8003696:	d101      	bne.n	800369c <__swbuf_r+0x78>
 8003698:	68ac      	ldr	r4, [r5, #8]
 800369a:	e7d0      	b.n	800363e <__swbuf_r+0x1a>
 800369c:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <__swbuf_r+0xa0>)
 800369e:	429c      	cmp	r4, r3
 80036a0:	bf08      	it	eq
 80036a2:	68ec      	ldreq	r4, [r5, #12]
 80036a4:	e7cb      	b.n	800363e <__swbuf_r+0x1a>
 80036a6:	4621      	mov	r1, r4
 80036a8:	4628      	mov	r0, r5
 80036aa:	f000 f80d 	bl	80036c8 <__swsetup_r>
 80036ae:	2800      	cmp	r0, #0
 80036b0:	d0cc      	beq.n	800364c <__swbuf_r+0x28>
 80036b2:	f04f 37ff 	mov.w	r7, #4294967295
 80036b6:	4638      	mov	r0, r7
 80036b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036ba:	bf00      	nop
 80036bc:	08004660 	.word	0x08004660
 80036c0:	08004680 	.word	0x08004680
 80036c4:	08004640 	.word	0x08004640

080036c8 <__swsetup_r>:
 80036c8:	4b32      	ldr	r3, [pc, #200]	; (8003794 <__swsetup_r+0xcc>)
 80036ca:	b570      	push	{r4, r5, r6, lr}
 80036cc:	681d      	ldr	r5, [r3, #0]
 80036ce:	4606      	mov	r6, r0
 80036d0:	460c      	mov	r4, r1
 80036d2:	b125      	cbz	r5, 80036de <__swsetup_r+0x16>
 80036d4:	69ab      	ldr	r3, [r5, #24]
 80036d6:	b913      	cbnz	r3, 80036de <__swsetup_r+0x16>
 80036d8:	4628      	mov	r0, r5
 80036da:	f000 f953 	bl	8003984 <__sinit>
 80036de:	4b2e      	ldr	r3, [pc, #184]	; (8003798 <__swsetup_r+0xd0>)
 80036e0:	429c      	cmp	r4, r3
 80036e2:	d10f      	bne.n	8003704 <__swsetup_r+0x3c>
 80036e4:	686c      	ldr	r4, [r5, #4]
 80036e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	0715      	lsls	r5, r2, #28
 80036ee:	d42c      	bmi.n	800374a <__swsetup_r+0x82>
 80036f0:	06d0      	lsls	r0, r2, #27
 80036f2:	d411      	bmi.n	8003718 <__swsetup_r+0x50>
 80036f4:	2209      	movs	r2, #9
 80036f6:	6032      	str	r2, [r6, #0]
 80036f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036fc:	81a3      	strh	r3, [r4, #12]
 80036fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003702:	e03e      	b.n	8003782 <__swsetup_r+0xba>
 8003704:	4b25      	ldr	r3, [pc, #148]	; (800379c <__swsetup_r+0xd4>)
 8003706:	429c      	cmp	r4, r3
 8003708:	d101      	bne.n	800370e <__swsetup_r+0x46>
 800370a:	68ac      	ldr	r4, [r5, #8]
 800370c:	e7eb      	b.n	80036e6 <__swsetup_r+0x1e>
 800370e:	4b24      	ldr	r3, [pc, #144]	; (80037a0 <__swsetup_r+0xd8>)
 8003710:	429c      	cmp	r4, r3
 8003712:	bf08      	it	eq
 8003714:	68ec      	ldreq	r4, [r5, #12]
 8003716:	e7e6      	b.n	80036e6 <__swsetup_r+0x1e>
 8003718:	0751      	lsls	r1, r2, #29
 800371a:	d512      	bpl.n	8003742 <__swsetup_r+0x7a>
 800371c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800371e:	b141      	cbz	r1, 8003732 <__swsetup_r+0x6a>
 8003720:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003724:	4299      	cmp	r1, r3
 8003726:	d002      	beq.n	800372e <__swsetup_r+0x66>
 8003728:	4630      	mov	r0, r6
 800372a:	f000 fa19 	bl	8003b60 <_free_r>
 800372e:	2300      	movs	r3, #0
 8003730:	6363      	str	r3, [r4, #52]	; 0x34
 8003732:	89a3      	ldrh	r3, [r4, #12]
 8003734:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003738:	81a3      	strh	r3, [r4, #12]
 800373a:	2300      	movs	r3, #0
 800373c:	6063      	str	r3, [r4, #4]
 800373e:	6923      	ldr	r3, [r4, #16]
 8003740:	6023      	str	r3, [r4, #0]
 8003742:	89a3      	ldrh	r3, [r4, #12]
 8003744:	f043 0308 	orr.w	r3, r3, #8
 8003748:	81a3      	strh	r3, [r4, #12]
 800374a:	6923      	ldr	r3, [r4, #16]
 800374c:	b94b      	cbnz	r3, 8003762 <__swsetup_r+0x9a>
 800374e:	89a3      	ldrh	r3, [r4, #12]
 8003750:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003754:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003758:	d003      	beq.n	8003762 <__swsetup_r+0x9a>
 800375a:	4621      	mov	r1, r4
 800375c:	4630      	mov	r0, r6
 800375e:	f000 f9bf 	bl	8003ae0 <__smakebuf_r>
 8003762:	89a2      	ldrh	r2, [r4, #12]
 8003764:	f012 0301 	ands.w	r3, r2, #1
 8003768:	d00c      	beq.n	8003784 <__swsetup_r+0xbc>
 800376a:	2300      	movs	r3, #0
 800376c:	60a3      	str	r3, [r4, #8]
 800376e:	6963      	ldr	r3, [r4, #20]
 8003770:	425b      	negs	r3, r3
 8003772:	61a3      	str	r3, [r4, #24]
 8003774:	6923      	ldr	r3, [r4, #16]
 8003776:	b953      	cbnz	r3, 800378e <__swsetup_r+0xc6>
 8003778:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800377c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003780:	d1ba      	bne.n	80036f8 <__swsetup_r+0x30>
 8003782:	bd70      	pop	{r4, r5, r6, pc}
 8003784:	0792      	lsls	r2, r2, #30
 8003786:	bf58      	it	pl
 8003788:	6963      	ldrpl	r3, [r4, #20]
 800378a:	60a3      	str	r3, [r4, #8]
 800378c:	e7f2      	b.n	8003774 <__swsetup_r+0xac>
 800378e:	2000      	movs	r0, #0
 8003790:	e7f7      	b.n	8003782 <__swsetup_r+0xba>
 8003792:	bf00      	nop
 8003794:	2000000c 	.word	0x2000000c
 8003798:	08004660 	.word	0x08004660
 800379c:	08004680 	.word	0x08004680
 80037a0:	08004640 	.word	0x08004640

080037a4 <__sflush_r>:
 80037a4:	898a      	ldrh	r2, [r1, #12]
 80037a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037aa:	4605      	mov	r5, r0
 80037ac:	0710      	lsls	r0, r2, #28
 80037ae:	460c      	mov	r4, r1
 80037b0:	d458      	bmi.n	8003864 <__sflush_r+0xc0>
 80037b2:	684b      	ldr	r3, [r1, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	dc05      	bgt.n	80037c4 <__sflush_r+0x20>
 80037b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	dc02      	bgt.n	80037c4 <__sflush_r+0x20>
 80037be:	2000      	movs	r0, #0
 80037c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037c6:	2e00      	cmp	r6, #0
 80037c8:	d0f9      	beq.n	80037be <__sflush_r+0x1a>
 80037ca:	2300      	movs	r3, #0
 80037cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80037d0:	682f      	ldr	r7, [r5, #0]
 80037d2:	6a21      	ldr	r1, [r4, #32]
 80037d4:	602b      	str	r3, [r5, #0]
 80037d6:	d032      	beq.n	800383e <__sflush_r+0x9a>
 80037d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80037da:	89a3      	ldrh	r3, [r4, #12]
 80037dc:	075a      	lsls	r2, r3, #29
 80037de:	d505      	bpl.n	80037ec <__sflush_r+0x48>
 80037e0:	6863      	ldr	r3, [r4, #4]
 80037e2:	1ac0      	subs	r0, r0, r3
 80037e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80037e6:	b10b      	cbz	r3, 80037ec <__sflush_r+0x48>
 80037e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037ea:	1ac0      	subs	r0, r0, r3
 80037ec:	2300      	movs	r3, #0
 80037ee:	4602      	mov	r2, r0
 80037f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037f2:	6a21      	ldr	r1, [r4, #32]
 80037f4:	4628      	mov	r0, r5
 80037f6:	47b0      	blx	r6
 80037f8:	1c43      	adds	r3, r0, #1
 80037fa:	89a3      	ldrh	r3, [r4, #12]
 80037fc:	d106      	bne.n	800380c <__sflush_r+0x68>
 80037fe:	6829      	ldr	r1, [r5, #0]
 8003800:	291d      	cmp	r1, #29
 8003802:	d848      	bhi.n	8003896 <__sflush_r+0xf2>
 8003804:	4a29      	ldr	r2, [pc, #164]	; (80038ac <__sflush_r+0x108>)
 8003806:	40ca      	lsrs	r2, r1
 8003808:	07d6      	lsls	r6, r2, #31
 800380a:	d544      	bpl.n	8003896 <__sflush_r+0xf2>
 800380c:	2200      	movs	r2, #0
 800380e:	6062      	str	r2, [r4, #4]
 8003810:	04d9      	lsls	r1, r3, #19
 8003812:	6922      	ldr	r2, [r4, #16]
 8003814:	6022      	str	r2, [r4, #0]
 8003816:	d504      	bpl.n	8003822 <__sflush_r+0x7e>
 8003818:	1c42      	adds	r2, r0, #1
 800381a:	d101      	bne.n	8003820 <__sflush_r+0x7c>
 800381c:	682b      	ldr	r3, [r5, #0]
 800381e:	b903      	cbnz	r3, 8003822 <__sflush_r+0x7e>
 8003820:	6560      	str	r0, [r4, #84]	; 0x54
 8003822:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003824:	602f      	str	r7, [r5, #0]
 8003826:	2900      	cmp	r1, #0
 8003828:	d0c9      	beq.n	80037be <__sflush_r+0x1a>
 800382a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800382e:	4299      	cmp	r1, r3
 8003830:	d002      	beq.n	8003838 <__sflush_r+0x94>
 8003832:	4628      	mov	r0, r5
 8003834:	f000 f994 	bl	8003b60 <_free_r>
 8003838:	2000      	movs	r0, #0
 800383a:	6360      	str	r0, [r4, #52]	; 0x34
 800383c:	e7c0      	b.n	80037c0 <__sflush_r+0x1c>
 800383e:	2301      	movs	r3, #1
 8003840:	4628      	mov	r0, r5
 8003842:	47b0      	blx	r6
 8003844:	1c41      	adds	r1, r0, #1
 8003846:	d1c8      	bne.n	80037da <__sflush_r+0x36>
 8003848:	682b      	ldr	r3, [r5, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0c5      	beq.n	80037da <__sflush_r+0x36>
 800384e:	2b1d      	cmp	r3, #29
 8003850:	d001      	beq.n	8003856 <__sflush_r+0xb2>
 8003852:	2b16      	cmp	r3, #22
 8003854:	d101      	bne.n	800385a <__sflush_r+0xb6>
 8003856:	602f      	str	r7, [r5, #0]
 8003858:	e7b1      	b.n	80037be <__sflush_r+0x1a>
 800385a:	89a3      	ldrh	r3, [r4, #12]
 800385c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003860:	81a3      	strh	r3, [r4, #12]
 8003862:	e7ad      	b.n	80037c0 <__sflush_r+0x1c>
 8003864:	690f      	ldr	r7, [r1, #16]
 8003866:	2f00      	cmp	r7, #0
 8003868:	d0a9      	beq.n	80037be <__sflush_r+0x1a>
 800386a:	0793      	lsls	r3, r2, #30
 800386c:	680e      	ldr	r6, [r1, #0]
 800386e:	bf08      	it	eq
 8003870:	694b      	ldreq	r3, [r1, #20]
 8003872:	600f      	str	r7, [r1, #0]
 8003874:	bf18      	it	ne
 8003876:	2300      	movne	r3, #0
 8003878:	eba6 0807 	sub.w	r8, r6, r7
 800387c:	608b      	str	r3, [r1, #8]
 800387e:	f1b8 0f00 	cmp.w	r8, #0
 8003882:	dd9c      	ble.n	80037be <__sflush_r+0x1a>
 8003884:	4643      	mov	r3, r8
 8003886:	463a      	mov	r2, r7
 8003888:	6a21      	ldr	r1, [r4, #32]
 800388a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800388c:	4628      	mov	r0, r5
 800388e:	47b0      	blx	r6
 8003890:	2800      	cmp	r0, #0
 8003892:	dc06      	bgt.n	80038a2 <__sflush_r+0xfe>
 8003894:	89a3      	ldrh	r3, [r4, #12]
 8003896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800389a:	81a3      	strh	r3, [r4, #12]
 800389c:	f04f 30ff 	mov.w	r0, #4294967295
 80038a0:	e78e      	b.n	80037c0 <__sflush_r+0x1c>
 80038a2:	4407      	add	r7, r0
 80038a4:	eba8 0800 	sub.w	r8, r8, r0
 80038a8:	e7e9      	b.n	800387e <__sflush_r+0xda>
 80038aa:	bf00      	nop
 80038ac:	20400001 	.word	0x20400001

080038b0 <_fflush_r>:
 80038b0:	b538      	push	{r3, r4, r5, lr}
 80038b2:	690b      	ldr	r3, [r1, #16]
 80038b4:	4605      	mov	r5, r0
 80038b6:	460c      	mov	r4, r1
 80038b8:	b1db      	cbz	r3, 80038f2 <_fflush_r+0x42>
 80038ba:	b118      	cbz	r0, 80038c4 <_fflush_r+0x14>
 80038bc:	6983      	ldr	r3, [r0, #24]
 80038be:	b90b      	cbnz	r3, 80038c4 <_fflush_r+0x14>
 80038c0:	f000 f860 	bl	8003984 <__sinit>
 80038c4:	4b0c      	ldr	r3, [pc, #48]	; (80038f8 <_fflush_r+0x48>)
 80038c6:	429c      	cmp	r4, r3
 80038c8:	d109      	bne.n	80038de <_fflush_r+0x2e>
 80038ca:	686c      	ldr	r4, [r5, #4]
 80038cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038d0:	b17b      	cbz	r3, 80038f2 <_fflush_r+0x42>
 80038d2:	4621      	mov	r1, r4
 80038d4:	4628      	mov	r0, r5
 80038d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038da:	f7ff bf63 	b.w	80037a4 <__sflush_r>
 80038de:	4b07      	ldr	r3, [pc, #28]	; (80038fc <_fflush_r+0x4c>)
 80038e0:	429c      	cmp	r4, r3
 80038e2:	d101      	bne.n	80038e8 <_fflush_r+0x38>
 80038e4:	68ac      	ldr	r4, [r5, #8]
 80038e6:	e7f1      	b.n	80038cc <_fflush_r+0x1c>
 80038e8:	4b05      	ldr	r3, [pc, #20]	; (8003900 <_fflush_r+0x50>)
 80038ea:	429c      	cmp	r4, r3
 80038ec:	bf08      	it	eq
 80038ee:	68ec      	ldreq	r4, [r5, #12]
 80038f0:	e7ec      	b.n	80038cc <_fflush_r+0x1c>
 80038f2:	2000      	movs	r0, #0
 80038f4:	bd38      	pop	{r3, r4, r5, pc}
 80038f6:	bf00      	nop
 80038f8:	08004660 	.word	0x08004660
 80038fc:	08004680 	.word	0x08004680
 8003900:	08004640 	.word	0x08004640

08003904 <std>:
 8003904:	2300      	movs	r3, #0
 8003906:	b510      	push	{r4, lr}
 8003908:	4604      	mov	r4, r0
 800390a:	e9c0 3300 	strd	r3, r3, [r0]
 800390e:	6083      	str	r3, [r0, #8]
 8003910:	8181      	strh	r1, [r0, #12]
 8003912:	6643      	str	r3, [r0, #100]	; 0x64
 8003914:	81c2      	strh	r2, [r0, #14]
 8003916:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800391a:	6183      	str	r3, [r0, #24]
 800391c:	4619      	mov	r1, r3
 800391e:	2208      	movs	r2, #8
 8003920:	305c      	adds	r0, #92	; 0x5c
 8003922:	f7ff fe4b 	bl	80035bc <memset>
 8003926:	4b05      	ldr	r3, [pc, #20]	; (800393c <std+0x38>)
 8003928:	6263      	str	r3, [r4, #36]	; 0x24
 800392a:	4b05      	ldr	r3, [pc, #20]	; (8003940 <std+0x3c>)
 800392c:	62a3      	str	r3, [r4, #40]	; 0x28
 800392e:	4b05      	ldr	r3, [pc, #20]	; (8003944 <std+0x40>)
 8003930:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003932:	4b05      	ldr	r3, [pc, #20]	; (8003948 <std+0x44>)
 8003934:	6224      	str	r4, [r4, #32]
 8003936:	6323      	str	r3, [r4, #48]	; 0x30
 8003938:	bd10      	pop	{r4, pc}
 800393a:	bf00      	nop
 800393c:	080042cd 	.word	0x080042cd
 8003940:	080042ef 	.word	0x080042ef
 8003944:	08004327 	.word	0x08004327
 8003948:	0800434b 	.word	0x0800434b

0800394c <_cleanup_r>:
 800394c:	4901      	ldr	r1, [pc, #4]	; (8003954 <_cleanup_r+0x8>)
 800394e:	f000 b885 	b.w	8003a5c <_fwalk_reent>
 8003952:	bf00      	nop
 8003954:	080038b1 	.word	0x080038b1

08003958 <__sfmoreglue>:
 8003958:	b570      	push	{r4, r5, r6, lr}
 800395a:	1e4a      	subs	r2, r1, #1
 800395c:	2568      	movs	r5, #104	; 0x68
 800395e:	4355      	muls	r5, r2
 8003960:	460e      	mov	r6, r1
 8003962:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003966:	f000 f949 	bl	8003bfc <_malloc_r>
 800396a:	4604      	mov	r4, r0
 800396c:	b140      	cbz	r0, 8003980 <__sfmoreglue+0x28>
 800396e:	2100      	movs	r1, #0
 8003970:	e9c0 1600 	strd	r1, r6, [r0]
 8003974:	300c      	adds	r0, #12
 8003976:	60a0      	str	r0, [r4, #8]
 8003978:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800397c:	f7ff fe1e 	bl	80035bc <memset>
 8003980:	4620      	mov	r0, r4
 8003982:	bd70      	pop	{r4, r5, r6, pc}

08003984 <__sinit>:
 8003984:	6983      	ldr	r3, [r0, #24]
 8003986:	b510      	push	{r4, lr}
 8003988:	4604      	mov	r4, r0
 800398a:	bb33      	cbnz	r3, 80039da <__sinit+0x56>
 800398c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003990:	6503      	str	r3, [r0, #80]	; 0x50
 8003992:	4b12      	ldr	r3, [pc, #72]	; (80039dc <__sinit+0x58>)
 8003994:	4a12      	ldr	r2, [pc, #72]	; (80039e0 <__sinit+0x5c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6282      	str	r2, [r0, #40]	; 0x28
 800399a:	4298      	cmp	r0, r3
 800399c:	bf04      	itt	eq
 800399e:	2301      	moveq	r3, #1
 80039a0:	6183      	streq	r3, [r0, #24]
 80039a2:	f000 f81f 	bl	80039e4 <__sfp>
 80039a6:	6060      	str	r0, [r4, #4]
 80039a8:	4620      	mov	r0, r4
 80039aa:	f000 f81b 	bl	80039e4 <__sfp>
 80039ae:	60a0      	str	r0, [r4, #8]
 80039b0:	4620      	mov	r0, r4
 80039b2:	f000 f817 	bl	80039e4 <__sfp>
 80039b6:	2200      	movs	r2, #0
 80039b8:	60e0      	str	r0, [r4, #12]
 80039ba:	2104      	movs	r1, #4
 80039bc:	6860      	ldr	r0, [r4, #4]
 80039be:	f7ff ffa1 	bl	8003904 <std>
 80039c2:	2201      	movs	r2, #1
 80039c4:	2109      	movs	r1, #9
 80039c6:	68a0      	ldr	r0, [r4, #8]
 80039c8:	f7ff ff9c 	bl	8003904 <std>
 80039cc:	2202      	movs	r2, #2
 80039ce:	2112      	movs	r1, #18
 80039d0:	68e0      	ldr	r0, [r4, #12]
 80039d2:	f7ff ff97 	bl	8003904 <std>
 80039d6:	2301      	movs	r3, #1
 80039d8:	61a3      	str	r3, [r4, #24]
 80039da:	bd10      	pop	{r4, pc}
 80039dc:	0800463c 	.word	0x0800463c
 80039e0:	0800394d 	.word	0x0800394d

080039e4 <__sfp>:
 80039e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039e6:	4b1b      	ldr	r3, [pc, #108]	; (8003a54 <__sfp+0x70>)
 80039e8:	681e      	ldr	r6, [r3, #0]
 80039ea:	69b3      	ldr	r3, [r6, #24]
 80039ec:	4607      	mov	r7, r0
 80039ee:	b913      	cbnz	r3, 80039f6 <__sfp+0x12>
 80039f0:	4630      	mov	r0, r6
 80039f2:	f7ff ffc7 	bl	8003984 <__sinit>
 80039f6:	3648      	adds	r6, #72	; 0x48
 80039f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80039fc:	3b01      	subs	r3, #1
 80039fe:	d503      	bpl.n	8003a08 <__sfp+0x24>
 8003a00:	6833      	ldr	r3, [r6, #0]
 8003a02:	b133      	cbz	r3, 8003a12 <__sfp+0x2e>
 8003a04:	6836      	ldr	r6, [r6, #0]
 8003a06:	e7f7      	b.n	80039f8 <__sfp+0x14>
 8003a08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a0c:	b16d      	cbz	r5, 8003a2a <__sfp+0x46>
 8003a0e:	3468      	adds	r4, #104	; 0x68
 8003a10:	e7f4      	b.n	80039fc <__sfp+0x18>
 8003a12:	2104      	movs	r1, #4
 8003a14:	4638      	mov	r0, r7
 8003a16:	f7ff ff9f 	bl	8003958 <__sfmoreglue>
 8003a1a:	6030      	str	r0, [r6, #0]
 8003a1c:	2800      	cmp	r0, #0
 8003a1e:	d1f1      	bne.n	8003a04 <__sfp+0x20>
 8003a20:	230c      	movs	r3, #12
 8003a22:	603b      	str	r3, [r7, #0]
 8003a24:	4604      	mov	r4, r0
 8003a26:	4620      	mov	r0, r4
 8003a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a2a:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <__sfp+0x74>)
 8003a2c:	6665      	str	r5, [r4, #100]	; 0x64
 8003a2e:	e9c4 5500 	strd	r5, r5, [r4]
 8003a32:	60a5      	str	r5, [r4, #8]
 8003a34:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003a38:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003a3c:	2208      	movs	r2, #8
 8003a3e:	4629      	mov	r1, r5
 8003a40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003a44:	f7ff fdba 	bl	80035bc <memset>
 8003a48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003a4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003a50:	e7e9      	b.n	8003a26 <__sfp+0x42>
 8003a52:	bf00      	nop
 8003a54:	0800463c 	.word	0x0800463c
 8003a58:	ffff0001 	.word	0xffff0001

08003a5c <_fwalk_reent>:
 8003a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a60:	4680      	mov	r8, r0
 8003a62:	4689      	mov	r9, r1
 8003a64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003a68:	2600      	movs	r6, #0
 8003a6a:	b914      	cbnz	r4, 8003a72 <_fwalk_reent+0x16>
 8003a6c:	4630      	mov	r0, r6
 8003a6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a72:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003a76:	3f01      	subs	r7, #1
 8003a78:	d501      	bpl.n	8003a7e <_fwalk_reent+0x22>
 8003a7a:	6824      	ldr	r4, [r4, #0]
 8003a7c:	e7f5      	b.n	8003a6a <_fwalk_reent+0xe>
 8003a7e:	89ab      	ldrh	r3, [r5, #12]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d907      	bls.n	8003a94 <_fwalk_reent+0x38>
 8003a84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	d003      	beq.n	8003a94 <_fwalk_reent+0x38>
 8003a8c:	4629      	mov	r1, r5
 8003a8e:	4640      	mov	r0, r8
 8003a90:	47c8      	blx	r9
 8003a92:	4306      	orrs	r6, r0
 8003a94:	3568      	adds	r5, #104	; 0x68
 8003a96:	e7ee      	b.n	8003a76 <_fwalk_reent+0x1a>

08003a98 <__swhatbuf_r>:
 8003a98:	b570      	push	{r4, r5, r6, lr}
 8003a9a:	460e      	mov	r6, r1
 8003a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003aa0:	2900      	cmp	r1, #0
 8003aa2:	b096      	sub	sp, #88	; 0x58
 8003aa4:	4614      	mov	r4, r2
 8003aa6:	461d      	mov	r5, r3
 8003aa8:	da07      	bge.n	8003aba <__swhatbuf_r+0x22>
 8003aaa:	2300      	movs	r3, #0
 8003aac:	602b      	str	r3, [r5, #0]
 8003aae:	89b3      	ldrh	r3, [r6, #12]
 8003ab0:	061a      	lsls	r2, r3, #24
 8003ab2:	d410      	bmi.n	8003ad6 <__swhatbuf_r+0x3e>
 8003ab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ab8:	e00e      	b.n	8003ad8 <__swhatbuf_r+0x40>
 8003aba:	466a      	mov	r2, sp
 8003abc:	f000 fc6c 	bl	8004398 <_fstat_r>
 8003ac0:	2800      	cmp	r0, #0
 8003ac2:	dbf2      	blt.n	8003aaa <__swhatbuf_r+0x12>
 8003ac4:	9a01      	ldr	r2, [sp, #4]
 8003ac6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003aca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003ace:	425a      	negs	r2, r3
 8003ad0:	415a      	adcs	r2, r3
 8003ad2:	602a      	str	r2, [r5, #0]
 8003ad4:	e7ee      	b.n	8003ab4 <__swhatbuf_r+0x1c>
 8003ad6:	2340      	movs	r3, #64	; 0x40
 8003ad8:	2000      	movs	r0, #0
 8003ada:	6023      	str	r3, [r4, #0]
 8003adc:	b016      	add	sp, #88	; 0x58
 8003ade:	bd70      	pop	{r4, r5, r6, pc}

08003ae0 <__smakebuf_r>:
 8003ae0:	898b      	ldrh	r3, [r1, #12]
 8003ae2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003ae4:	079d      	lsls	r5, r3, #30
 8003ae6:	4606      	mov	r6, r0
 8003ae8:	460c      	mov	r4, r1
 8003aea:	d507      	bpl.n	8003afc <__smakebuf_r+0x1c>
 8003aec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003af0:	6023      	str	r3, [r4, #0]
 8003af2:	6123      	str	r3, [r4, #16]
 8003af4:	2301      	movs	r3, #1
 8003af6:	6163      	str	r3, [r4, #20]
 8003af8:	b002      	add	sp, #8
 8003afa:	bd70      	pop	{r4, r5, r6, pc}
 8003afc:	ab01      	add	r3, sp, #4
 8003afe:	466a      	mov	r2, sp
 8003b00:	f7ff ffca 	bl	8003a98 <__swhatbuf_r>
 8003b04:	9900      	ldr	r1, [sp, #0]
 8003b06:	4605      	mov	r5, r0
 8003b08:	4630      	mov	r0, r6
 8003b0a:	f000 f877 	bl	8003bfc <_malloc_r>
 8003b0e:	b948      	cbnz	r0, 8003b24 <__smakebuf_r+0x44>
 8003b10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b14:	059a      	lsls	r2, r3, #22
 8003b16:	d4ef      	bmi.n	8003af8 <__smakebuf_r+0x18>
 8003b18:	f023 0303 	bic.w	r3, r3, #3
 8003b1c:	f043 0302 	orr.w	r3, r3, #2
 8003b20:	81a3      	strh	r3, [r4, #12]
 8003b22:	e7e3      	b.n	8003aec <__smakebuf_r+0xc>
 8003b24:	4b0d      	ldr	r3, [pc, #52]	; (8003b5c <__smakebuf_r+0x7c>)
 8003b26:	62b3      	str	r3, [r6, #40]	; 0x28
 8003b28:	89a3      	ldrh	r3, [r4, #12]
 8003b2a:	6020      	str	r0, [r4, #0]
 8003b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b30:	81a3      	strh	r3, [r4, #12]
 8003b32:	9b00      	ldr	r3, [sp, #0]
 8003b34:	6163      	str	r3, [r4, #20]
 8003b36:	9b01      	ldr	r3, [sp, #4]
 8003b38:	6120      	str	r0, [r4, #16]
 8003b3a:	b15b      	cbz	r3, 8003b54 <__smakebuf_r+0x74>
 8003b3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b40:	4630      	mov	r0, r6
 8003b42:	f000 fc3b 	bl	80043bc <_isatty_r>
 8003b46:	b128      	cbz	r0, 8003b54 <__smakebuf_r+0x74>
 8003b48:	89a3      	ldrh	r3, [r4, #12]
 8003b4a:	f023 0303 	bic.w	r3, r3, #3
 8003b4e:	f043 0301 	orr.w	r3, r3, #1
 8003b52:	81a3      	strh	r3, [r4, #12]
 8003b54:	89a3      	ldrh	r3, [r4, #12]
 8003b56:	431d      	orrs	r5, r3
 8003b58:	81a5      	strh	r5, [r4, #12]
 8003b5a:	e7cd      	b.n	8003af8 <__smakebuf_r+0x18>
 8003b5c:	0800394d 	.word	0x0800394d

08003b60 <_free_r>:
 8003b60:	b538      	push	{r3, r4, r5, lr}
 8003b62:	4605      	mov	r5, r0
 8003b64:	2900      	cmp	r1, #0
 8003b66:	d045      	beq.n	8003bf4 <_free_r+0x94>
 8003b68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b6c:	1f0c      	subs	r4, r1, #4
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	bfb8      	it	lt
 8003b72:	18e4      	addlt	r4, r4, r3
 8003b74:	f000 fc44 	bl	8004400 <__malloc_lock>
 8003b78:	4a1f      	ldr	r2, [pc, #124]	; (8003bf8 <_free_r+0x98>)
 8003b7a:	6813      	ldr	r3, [r2, #0]
 8003b7c:	4610      	mov	r0, r2
 8003b7e:	b933      	cbnz	r3, 8003b8e <_free_r+0x2e>
 8003b80:	6063      	str	r3, [r4, #4]
 8003b82:	6014      	str	r4, [r2, #0]
 8003b84:	4628      	mov	r0, r5
 8003b86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b8a:	f000 bc3a 	b.w	8004402 <__malloc_unlock>
 8003b8e:	42a3      	cmp	r3, r4
 8003b90:	d90c      	bls.n	8003bac <_free_r+0x4c>
 8003b92:	6821      	ldr	r1, [r4, #0]
 8003b94:	1862      	adds	r2, r4, r1
 8003b96:	4293      	cmp	r3, r2
 8003b98:	bf04      	itt	eq
 8003b9a:	681a      	ldreq	r2, [r3, #0]
 8003b9c:	685b      	ldreq	r3, [r3, #4]
 8003b9e:	6063      	str	r3, [r4, #4]
 8003ba0:	bf04      	itt	eq
 8003ba2:	1852      	addeq	r2, r2, r1
 8003ba4:	6022      	streq	r2, [r4, #0]
 8003ba6:	6004      	str	r4, [r0, #0]
 8003ba8:	e7ec      	b.n	8003b84 <_free_r+0x24>
 8003baa:	4613      	mov	r3, r2
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	b10a      	cbz	r2, 8003bb4 <_free_r+0x54>
 8003bb0:	42a2      	cmp	r2, r4
 8003bb2:	d9fa      	bls.n	8003baa <_free_r+0x4a>
 8003bb4:	6819      	ldr	r1, [r3, #0]
 8003bb6:	1858      	adds	r0, r3, r1
 8003bb8:	42a0      	cmp	r0, r4
 8003bba:	d10b      	bne.n	8003bd4 <_free_r+0x74>
 8003bbc:	6820      	ldr	r0, [r4, #0]
 8003bbe:	4401      	add	r1, r0
 8003bc0:	1858      	adds	r0, r3, r1
 8003bc2:	4282      	cmp	r2, r0
 8003bc4:	6019      	str	r1, [r3, #0]
 8003bc6:	d1dd      	bne.n	8003b84 <_free_r+0x24>
 8003bc8:	6810      	ldr	r0, [r2, #0]
 8003bca:	6852      	ldr	r2, [r2, #4]
 8003bcc:	605a      	str	r2, [r3, #4]
 8003bce:	4401      	add	r1, r0
 8003bd0:	6019      	str	r1, [r3, #0]
 8003bd2:	e7d7      	b.n	8003b84 <_free_r+0x24>
 8003bd4:	d902      	bls.n	8003bdc <_free_r+0x7c>
 8003bd6:	230c      	movs	r3, #12
 8003bd8:	602b      	str	r3, [r5, #0]
 8003bda:	e7d3      	b.n	8003b84 <_free_r+0x24>
 8003bdc:	6820      	ldr	r0, [r4, #0]
 8003bde:	1821      	adds	r1, r4, r0
 8003be0:	428a      	cmp	r2, r1
 8003be2:	bf04      	itt	eq
 8003be4:	6811      	ldreq	r1, [r2, #0]
 8003be6:	6852      	ldreq	r2, [r2, #4]
 8003be8:	6062      	str	r2, [r4, #4]
 8003bea:	bf04      	itt	eq
 8003bec:	1809      	addeq	r1, r1, r0
 8003bee:	6021      	streq	r1, [r4, #0]
 8003bf0:	605c      	str	r4, [r3, #4]
 8003bf2:	e7c7      	b.n	8003b84 <_free_r+0x24>
 8003bf4:	bd38      	pop	{r3, r4, r5, pc}
 8003bf6:	bf00      	nop
 8003bf8:	20000090 	.word	0x20000090

08003bfc <_malloc_r>:
 8003bfc:	b570      	push	{r4, r5, r6, lr}
 8003bfe:	1ccd      	adds	r5, r1, #3
 8003c00:	f025 0503 	bic.w	r5, r5, #3
 8003c04:	3508      	adds	r5, #8
 8003c06:	2d0c      	cmp	r5, #12
 8003c08:	bf38      	it	cc
 8003c0a:	250c      	movcc	r5, #12
 8003c0c:	2d00      	cmp	r5, #0
 8003c0e:	4606      	mov	r6, r0
 8003c10:	db01      	blt.n	8003c16 <_malloc_r+0x1a>
 8003c12:	42a9      	cmp	r1, r5
 8003c14:	d903      	bls.n	8003c1e <_malloc_r+0x22>
 8003c16:	230c      	movs	r3, #12
 8003c18:	6033      	str	r3, [r6, #0]
 8003c1a:	2000      	movs	r0, #0
 8003c1c:	bd70      	pop	{r4, r5, r6, pc}
 8003c1e:	f000 fbef 	bl	8004400 <__malloc_lock>
 8003c22:	4a21      	ldr	r2, [pc, #132]	; (8003ca8 <_malloc_r+0xac>)
 8003c24:	6814      	ldr	r4, [r2, #0]
 8003c26:	4621      	mov	r1, r4
 8003c28:	b991      	cbnz	r1, 8003c50 <_malloc_r+0x54>
 8003c2a:	4c20      	ldr	r4, [pc, #128]	; (8003cac <_malloc_r+0xb0>)
 8003c2c:	6823      	ldr	r3, [r4, #0]
 8003c2e:	b91b      	cbnz	r3, 8003c38 <_malloc_r+0x3c>
 8003c30:	4630      	mov	r0, r6
 8003c32:	f000 fb3b 	bl	80042ac <_sbrk_r>
 8003c36:	6020      	str	r0, [r4, #0]
 8003c38:	4629      	mov	r1, r5
 8003c3a:	4630      	mov	r0, r6
 8003c3c:	f000 fb36 	bl	80042ac <_sbrk_r>
 8003c40:	1c43      	adds	r3, r0, #1
 8003c42:	d124      	bne.n	8003c8e <_malloc_r+0x92>
 8003c44:	230c      	movs	r3, #12
 8003c46:	6033      	str	r3, [r6, #0]
 8003c48:	4630      	mov	r0, r6
 8003c4a:	f000 fbda 	bl	8004402 <__malloc_unlock>
 8003c4e:	e7e4      	b.n	8003c1a <_malloc_r+0x1e>
 8003c50:	680b      	ldr	r3, [r1, #0]
 8003c52:	1b5b      	subs	r3, r3, r5
 8003c54:	d418      	bmi.n	8003c88 <_malloc_r+0x8c>
 8003c56:	2b0b      	cmp	r3, #11
 8003c58:	d90f      	bls.n	8003c7a <_malloc_r+0x7e>
 8003c5a:	600b      	str	r3, [r1, #0]
 8003c5c:	50cd      	str	r5, [r1, r3]
 8003c5e:	18cc      	adds	r4, r1, r3
 8003c60:	4630      	mov	r0, r6
 8003c62:	f000 fbce 	bl	8004402 <__malloc_unlock>
 8003c66:	f104 000b 	add.w	r0, r4, #11
 8003c6a:	1d23      	adds	r3, r4, #4
 8003c6c:	f020 0007 	bic.w	r0, r0, #7
 8003c70:	1ac3      	subs	r3, r0, r3
 8003c72:	d0d3      	beq.n	8003c1c <_malloc_r+0x20>
 8003c74:	425a      	negs	r2, r3
 8003c76:	50e2      	str	r2, [r4, r3]
 8003c78:	e7d0      	b.n	8003c1c <_malloc_r+0x20>
 8003c7a:	428c      	cmp	r4, r1
 8003c7c:	684b      	ldr	r3, [r1, #4]
 8003c7e:	bf16      	itet	ne
 8003c80:	6063      	strne	r3, [r4, #4]
 8003c82:	6013      	streq	r3, [r2, #0]
 8003c84:	460c      	movne	r4, r1
 8003c86:	e7eb      	b.n	8003c60 <_malloc_r+0x64>
 8003c88:	460c      	mov	r4, r1
 8003c8a:	6849      	ldr	r1, [r1, #4]
 8003c8c:	e7cc      	b.n	8003c28 <_malloc_r+0x2c>
 8003c8e:	1cc4      	adds	r4, r0, #3
 8003c90:	f024 0403 	bic.w	r4, r4, #3
 8003c94:	42a0      	cmp	r0, r4
 8003c96:	d005      	beq.n	8003ca4 <_malloc_r+0xa8>
 8003c98:	1a21      	subs	r1, r4, r0
 8003c9a:	4630      	mov	r0, r6
 8003c9c:	f000 fb06 	bl	80042ac <_sbrk_r>
 8003ca0:	3001      	adds	r0, #1
 8003ca2:	d0cf      	beq.n	8003c44 <_malloc_r+0x48>
 8003ca4:	6025      	str	r5, [r4, #0]
 8003ca6:	e7db      	b.n	8003c60 <_malloc_r+0x64>
 8003ca8:	20000090 	.word	0x20000090
 8003cac:	20000094 	.word	0x20000094

08003cb0 <__sfputc_r>:
 8003cb0:	6893      	ldr	r3, [r2, #8]
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	b410      	push	{r4}
 8003cb8:	6093      	str	r3, [r2, #8]
 8003cba:	da08      	bge.n	8003cce <__sfputc_r+0x1e>
 8003cbc:	6994      	ldr	r4, [r2, #24]
 8003cbe:	42a3      	cmp	r3, r4
 8003cc0:	db01      	blt.n	8003cc6 <__sfputc_r+0x16>
 8003cc2:	290a      	cmp	r1, #10
 8003cc4:	d103      	bne.n	8003cce <__sfputc_r+0x1e>
 8003cc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003cca:	f7ff bcab 	b.w	8003624 <__swbuf_r>
 8003cce:	6813      	ldr	r3, [r2, #0]
 8003cd0:	1c58      	adds	r0, r3, #1
 8003cd2:	6010      	str	r0, [r2, #0]
 8003cd4:	7019      	strb	r1, [r3, #0]
 8003cd6:	4608      	mov	r0, r1
 8003cd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <__sfputs_r>:
 8003cde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce0:	4606      	mov	r6, r0
 8003ce2:	460f      	mov	r7, r1
 8003ce4:	4614      	mov	r4, r2
 8003ce6:	18d5      	adds	r5, r2, r3
 8003ce8:	42ac      	cmp	r4, r5
 8003cea:	d101      	bne.n	8003cf0 <__sfputs_r+0x12>
 8003cec:	2000      	movs	r0, #0
 8003cee:	e007      	b.n	8003d00 <__sfputs_r+0x22>
 8003cf0:	463a      	mov	r2, r7
 8003cf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cf6:	4630      	mov	r0, r6
 8003cf8:	f7ff ffda 	bl	8003cb0 <__sfputc_r>
 8003cfc:	1c43      	adds	r3, r0, #1
 8003cfe:	d1f3      	bne.n	8003ce8 <__sfputs_r+0xa>
 8003d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003d04 <_vfiprintf_r>:
 8003d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d08:	460c      	mov	r4, r1
 8003d0a:	b09d      	sub	sp, #116	; 0x74
 8003d0c:	4617      	mov	r7, r2
 8003d0e:	461d      	mov	r5, r3
 8003d10:	4606      	mov	r6, r0
 8003d12:	b118      	cbz	r0, 8003d1c <_vfiprintf_r+0x18>
 8003d14:	6983      	ldr	r3, [r0, #24]
 8003d16:	b90b      	cbnz	r3, 8003d1c <_vfiprintf_r+0x18>
 8003d18:	f7ff fe34 	bl	8003984 <__sinit>
 8003d1c:	4b7c      	ldr	r3, [pc, #496]	; (8003f10 <_vfiprintf_r+0x20c>)
 8003d1e:	429c      	cmp	r4, r3
 8003d20:	d158      	bne.n	8003dd4 <_vfiprintf_r+0xd0>
 8003d22:	6874      	ldr	r4, [r6, #4]
 8003d24:	89a3      	ldrh	r3, [r4, #12]
 8003d26:	0718      	lsls	r0, r3, #28
 8003d28:	d55e      	bpl.n	8003de8 <_vfiprintf_r+0xe4>
 8003d2a:	6923      	ldr	r3, [r4, #16]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d05b      	beq.n	8003de8 <_vfiprintf_r+0xe4>
 8003d30:	2300      	movs	r3, #0
 8003d32:	9309      	str	r3, [sp, #36]	; 0x24
 8003d34:	2320      	movs	r3, #32
 8003d36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d3a:	2330      	movs	r3, #48	; 0x30
 8003d3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d40:	9503      	str	r5, [sp, #12]
 8003d42:	f04f 0b01 	mov.w	fp, #1
 8003d46:	46b8      	mov	r8, r7
 8003d48:	4645      	mov	r5, r8
 8003d4a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003d4e:	b10b      	cbz	r3, 8003d54 <_vfiprintf_r+0x50>
 8003d50:	2b25      	cmp	r3, #37	; 0x25
 8003d52:	d154      	bne.n	8003dfe <_vfiprintf_r+0xfa>
 8003d54:	ebb8 0a07 	subs.w	sl, r8, r7
 8003d58:	d00b      	beq.n	8003d72 <_vfiprintf_r+0x6e>
 8003d5a:	4653      	mov	r3, sl
 8003d5c:	463a      	mov	r2, r7
 8003d5e:	4621      	mov	r1, r4
 8003d60:	4630      	mov	r0, r6
 8003d62:	f7ff ffbc 	bl	8003cde <__sfputs_r>
 8003d66:	3001      	adds	r0, #1
 8003d68:	f000 80c2 	beq.w	8003ef0 <_vfiprintf_r+0x1ec>
 8003d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d6e:	4453      	add	r3, sl
 8003d70:	9309      	str	r3, [sp, #36]	; 0x24
 8003d72:	f898 3000 	ldrb.w	r3, [r8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f000 80ba 	beq.w	8003ef0 <_vfiprintf_r+0x1ec>
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d86:	9304      	str	r3, [sp, #16]
 8003d88:	9307      	str	r3, [sp, #28]
 8003d8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d8e:	931a      	str	r3, [sp, #104]	; 0x68
 8003d90:	46a8      	mov	r8, r5
 8003d92:	2205      	movs	r2, #5
 8003d94:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003d98:	485e      	ldr	r0, [pc, #376]	; (8003f14 <_vfiprintf_r+0x210>)
 8003d9a:	f7fc fa29 	bl	80001f0 <memchr>
 8003d9e:	9b04      	ldr	r3, [sp, #16]
 8003da0:	bb78      	cbnz	r0, 8003e02 <_vfiprintf_r+0xfe>
 8003da2:	06d9      	lsls	r1, r3, #27
 8003da4:	bf44      	itt	mi
 8003da6:	2220      	movmi	r2, #32
 8003da8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003dac:	071a      	lsls	r2, r3, #28
 8003dae:	bf44      	itt	mi
 8003db0:	222b      	movmi	r2, #43	; 0x2b
 8003db2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003db6:	782a      	ldrb	r2, [r5, #0]
 8003db8:	2a2a      	cmp	r2, #42	; 0x2a
 8003dba:	d02a      	beq.n	8003e12 <_vfiprintf_r+0x10e>
 8003dbc:	9a07      	ldr	r2, [sp, #28]
 8003dbe:	46a8      	mov	r8, r5
 8003dc0:	2000      	movs	r0, #0
 8003dc2:	250a      	movs	r5, #10
 8003dc4:	4641      	mov	r1, r8
 8003dc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dca:	3b30      	subs	r3, #48	; 0x30
 8003dcc:	2b09      	cmp	r3, #9
 8003dce:	d969      	bls.n	8003ea4 <_vfiprintf_r+0x1a0>
 8003dd0:	b360      	cbz	r0, 8003e2c <_vfiprintf_r+0x128>
 8003dd2:	e024      	b.n	8003e1e <_vfiprintf_r+0x11a>
 8003dd4:	4b50      	ldr	r3, [pc, #320]	; (8003f18 <_vfiprintf_r+0x214>)
 8003dd6:	429c      	cmp	r4, r3
 8003dd8:	d101      	bne.n	8003dde <_vfiprintf_r+0xda>
 8003dda:	68b4      	ldr	r4, [r6, #8]
 8003ddc:	e7a2      	b.n	8003d24 <_vfiprintf_r+0x20>
 8003dde:	4b4f      	ldr	r3, [pc, #316]	; (8003f1c <_vfiprintf_r+0x218>)
 8003de0:	429c      	cmp	r4, r3
 8003de2:	bf08      	it	eq
 8003de4:	68f4      	ldreq	r4, [r6, #12]
 8003de6:	e79d      	b.n	8003d24 <_vfiprintf_r+0x20>
 8003de8:	4621      	mov	r1, r4
 8003dea:	4630      	mov	r0, r6
 8003dec:	f7ff fc6c 	bl	80036c8 <__swsetup_r>
 8003df0:	2800      	cmp	r0, #0
 8003df2:	d09d      	beq.n	8003d30 <_vfiprintf_r+0x2c>
 8003df4:	f04f 30ff 	mov.w	r0, #4294967295
 8003df8:	b01d      	add	sp, #116	; 0x74
 8003dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dfe:	46a8      	mov	r8, r5
 8003e00:	e7a2      	b.n	8003d48 <_vfiprintf_r+0x44>
 8003e02:	4a44      	ldr	r2, [pc, #272]	; (8003f14 <_vfiprintf_r+0x210>)
 8003e04:	1a80      	subs	r0, r0, r2
 8003e06:	fa0b f000 	lsl.w	r0, fp, r0
 8003e0a:	4318      	orrs	r0, r3
 8003e0c:	9004      	str	r0, [sp, #16]
 8003e0e:	4645      	mov	r5, r8
 8003e10:	e7be      	b.n	8003d90 <_vfiprintf_r+0x8c>
 8003e12:	9a03      	ldr	r2, [sp, #12]
 8003e14:	1d11      	adds	r1, r2, #4
 8003e16:	6812      	ldr	r2, [r2, #0]
 8003e18:	9103      	str	r1, [sp, #12]
 8003e1a:	2a00      	cmp	r2, #0
 8003e1c:	db01      	blt.n	8003e22 <_vfiprintf_r+0x11e>
 8003e1e:	9207      	str	r2, [sp, #28]
 8003e20:	e004      	b.n	8003e2c <_vfiprintf_r+0x128>
 8003e22:	4252      	negs	r2, r2
 8003e24:	f043 0302 	orr.w	r3, r3, #2
 8003e28:	9207      	str	r2, [sp, #28]
 8003e2a:	9304      	str	r3, [sp, #16]
 8003e2c:	f898 3000 	ldrb.w	r3, [r8]
 8003e30:	2b2e      	cmp	r3, #46	; 0x2e
 8003e32:	d10e      	bne.n	8003e52 <_vfiprintf_r+0x14e>
 8003e34:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003e38:	2b2a      	cmp	r3, #42	; 0x2a
 8003e3a:	d138      	bne.n	8003eae <_vfiprintf_r+0x1aa>
 8003e3c:	9b03      	ldr	r3, [sp, #12]
 8003e3e:	1d1a      	adds	r2, r3, #4
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	9203      	str	r2, [sp, #12]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	bfb8      	it	lt
 8003e48:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e4c:	f108 0802 	add.w	r8, r8, #2
 8003e50:	9305      	str	r3, [sp, #20]
 8003e52:	4d33      	ldr	r5, [pc, #204]	; (8003f20 <_vfiprintf_r+0x21c>)
 8003e54:	f898 1000 	ldrb.w	r1, [r8]
 8003e58:	2203      	movs	r2, #3
 8003e5a:	4628      	mov	r0, r5
 8003e5c:	f7fc f9c8 	bl	80001f0 <memchr>
 8003e60:	b140      	cbz	r0, 8003e74 <_vfiprintf_r+0x170>
 8003e62:	2340      	movs	r3, #64	; 0x40
 8003e64:	1b40      	subs	r0, r0, r5
 8003e66:	fa03 f000 	lsl.w	r0, r3, r0
 8003e6a:	9b04      	ldr	r3, [sp, #16]
 8003e6c:	4303      	orrs	r3, r0
 8003e6e:	f108 0801 	add.w	r8, r8, #1
 8003e72:	9304      	str	r3, [sp, #16]
 8003e74:	f898 1000 	ldrb.w	r1, [r8]
 8003e78:	482a      	ldr	r0, [pc, #168]	; (8003f24 <_vfiprintf_r+0x220>)
 8003e7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e7e:	2206      	movs	r2, #6
 8003e80:	f108 0701 	add.w	r7, r8, #1
 8003e84:	f7fc f9b4 	bl	80001f0 <memchr>
 8003e88:	2800      	cmp	r0, #0
 8003e8a:	d037      	beq.n	8003efc <_vfiprintf_r+0x1f8>
 8003e8c:	4b26      	ldr	r3, [pc, #152]	; (8003f28 <_vfiprintf_r+0x224>)
 8003e8e:	bb1b      	cbnz	r3, 8003ed8 <_vfiprintf_r+0x1d4>
 8003e90:	9b03      	ldr	r3, [sp, #12]
 8003e92:	3307      	adds	r3, #7
 8003e94:	f023 0307 	bic.w	r3, r3, #7
 8003e98:	3308      	adds	r3, #8
 8003e9a:	9303      	str	r3, [sp, #12]
 8003e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e9e:	444b      	add	r3, r9
 8003ea0:	9309      	str	r3, [sp, #36]	; 0x24
 8003ea2:	e750      	b.n	8003d46 <_vfiprintf_r+0x42>
 8003ea4:	fb05 3202 	mla	r2, r5, r2, r3
 8003ea8:	2001      	movs	r0, #1
 8003eaa:	4688      	mov	r8, r1
 8003eac:	e78a      	b.n	8003dc4 <_vfiprintf_r+0xc0>
 8003eae:	2300      	movs	r3, #0
 8003eb0:	f108 0801 	add.w	r8, r8, #1
 8003eb4:	9305      	str	r3, [sp, #20]
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	250a      	movs	r5, #10
 8003eba:	4640      	mov	r0, r8
 8003ebc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ec0:	3a30      	subs	r2, #48	; 0x30
 8003ec2:	2a09      	cmp	r2, #9
 8003ec4:	d903      	bls.n	8003ece <_vfiprintf_r+0x1ca>
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0c3      	beq.n	8003e52 <_vfiprintf_r+0x14e>
 8003eca:	9105      	str	r1, [sp, #20]
 8003ecc:	e7c1      	b.n	8003e52 <_vfiprintf_r+0x14e>
 8003ece:	fb05 2101 	mla	r1, r5, r1, r2
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	4680      	mov	r8, r0
 8003ed6:	e7f0      	b.n	8003eba <_vfiprintf_r+0x1b6>
 8003ed8:	ab03      	add	r3, sp, #12
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	4622      	mov	r2, r4
 8003ede:	4b13      	ldr	r3, [pc, #76]	; (8003f2c <_vfiprintf_r+0x228>)
 8003ee0:	a904      	add	r1, sp, #16
 8003ee2:	4630      	mov	r0, r6
 8003ee4:	f3af 8000 	nop.w
 8003ee8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003eec:	4681      	mov	r9, r0
 8003eee:	d1d5      	bne.n	8003e9c <_vfiprintf_r+0x198>
 8003ef0:	89a3      	ldrh	r3, [r4, #12]
 8003ef2:	065b      	lsls	r3, r3, #25
 8003ef4:	f53f af7e 	bmi.w	8003df4 <_vfiprintf_r+0xf0>
 8003ef8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003efa:	e77d      	b.n	8003df8 <_vfiprintf_r+0xf4>
 8003efc:	ab03      	add	r3, sp, #12
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	4622      	mov	r2, r4
 8003f02:	4b0a      	ldr	r3, [pc, #40]	; (8003f2c <_vfiprintf_r+0x228>)
 8003f04:	a904      	add	r1, sp, #16
 8003f06:	4630      	mov	r0, r6
 8003f08:	f000 f888 	bl	800401c <_printf_i>
 8003f0c:	e7ec      	b.n	8003ee8 <_vfiprintf_r+0x1e4>
 8003f0e:	bf00      	nop
 8003f10:	08004660 	.word	0x08004660
 8003f14:	080046a0 	.word	0x080046a0
 8003f18:	08004680 	.word	0x08004680
 8003f1c:	08004640 	.word	0x08004640
 8003f20:	080046a6 	.word	0x080046a6
 8003f24:	080046aa 	.word	0x080046aa
 8003f28:	00000000 	.word	0x00000000
 8003f2c:	08003cdf 	.word	0x08003cdf

08003f30 <_printf_common>:
 8003f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f34:	4691      	mov	r9, r2
 8003f36:	461f      	mov	r7, r3
 8003f38:	688a      	ldr	r2, [r1, #8]
 8003f3a:	690b      	ldr	r3, [r1, #16]
 8003f3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f40:	4293      	cmp	r3, r2
 8003f42:	bfb8      	it	lt
 8003f44:	4613      	movlt	r3, r2
 8003f46:	f8c9 3000 	str.w	r3, [r9]
 8003f4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f4e:	4606      	mov	r6, r0
 8003f50:	460c      	mov	r4, r1
 8003f52:	b112      	cbz	r2, 8003f5a <_printf_common+0x2a>
 8003f54:	3301      	adds	r3, #1
 8003f56:	f8c9 3000 	str.w	r3, [r9]
 8003f5a:	6823      	ldr	r3, [r4, #0]
 8003f5c:	0699      	lsls	r1, r3, #26
 8003f5e:	bf42      	ittt	mi
 8003f60:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003f64:	3302      	addmi	r3, #2
 8003f66:	f8c9 3000 	strmi.w	r3, [r9]
 8003f6a:	6825      	ldr	r5, [r4, #0]
 8003f6c:	f015 0506 	ands.w	r5, r5, #6
 8003f70:	d107      	bne.n	8003f82 <_printf_common+0x52>
 8003f72:	f104 0a19 	add.w	sl, r4, #25
 8003f76:	68e3      	ldr	r3, [r4, #12]
 8003f78:	f8d9 2000 	ldr.w	r2, [r9]
 8003f7c:	1a9b      	subs	r3, r3, r2
 8003f7e:	42ab      	cmp	r3, r5
 8003f80:	dc28      	bgt.n	8003fd4 <_printf_common+0xa4>
 8003f82:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003f86:	6822      	ldr	r2, [r4, #0]
 8003f88:	3300      	adds	r3, #0
 8003f8a:	bf18      	it	ne
 8003f8c:	2301      	movne	r3, #1
 8003f8e:	0692      	lsls	r2, r2, #26
 8003f90:	d42d      	bmi.n	8003fee <_printf_common+0xbe>
 8003f92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f96:	4639      	mov	r1, r7
 8003f98:	4630      	mov	r0, r6
 8003f9a:	47c0      	blx	r8
 8003f9c:	3001      	adds	r0, #1
 8003f9e:	d020      	beq.n	8003fe2 <_printf_common+0xb2>
 8003fa0:	6823      	ldr	r3, [r4, #0]
 8003fa2:	68e5      	ldr	r5, [r4, #12]
 8003fa4:	f8d9 2000 	ldr.w	r2, [r9]
 8003fa8:	f003 0306 	and.w	r3, r3, #6
 8003fac:	2b04      	cmp	r3, #4
 8003fae:	bf08      	it	eq
 8003fb0:	1aad      	subeq	r5, r5, r2
 8003fb2:	68a3      	ldr	r3, [r4, #8]
 8003fb4:	6922      	ldr	r2, [r4, #16]
 8003fb6:	bf0c      	ite	eq
 8003fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fbc:	2500      	movne	r5, #0
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	bfc4      	itt	gt
 8003fc2:	1a9b      	subgt	r3, r3, r2
 8003fc4:	18ed      	addgt	r5, r5, r3
 8003fc6:	f04f 0900 	mov.w	r9, #0
 8003fca:	341a      	adds	r4, #26
 8003fcc:	454d      	cmp	r5, r9
 8003fce:	d11a      	bne.n	8004006 <_printf_common+0xd6>
 8003fd0:	2000      	movs	r0, #0
 8003fd2:	e008      	b.n	8003fe6 <_printf_common+0xb6>
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	4652      	mov	r2, sl
 8003fd8:	4639      	mov	r1, r7
 8003fda:	4630      	mov	r0, r6
 8003fdc:	47c0      	blx	r8
 8003fde:	3001      	adds	r0, #1
 8003fe0:	d103      	bne.n	8003fea <_printf_common+0xba>
 8003fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fea:	3501      	adds	r5, #1
 8003fec:	e7c3      	b.n	8003f76 <_printf_common+0x46>
 8003fee:	18e1      	adds	r1, r4, r3
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	2030      	movs	r0, #48	; 0x30
 8003ff4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ff8:	4422      	add	r2, r4
 8003ffa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ffe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004002:	3302      	adds	r3, #2
 8004004:	e7c5      	b.n	8003f92 <_printf_common+0x62>
 8004006:	2301      	movs	r3, #1
 8004008:	4622      	mov	r2, r4
 800400a:	4639      	mov	r1, r7
 800400c:	4630      	mov	r0, r6
 800400e:	47c0      	blx	r8
 8004010:	3001      	adds	r0, #1
 8004012:	d0e6      	beq.n	8003fe2 <_printf_common+0xb2>
 8004014:	f109 0901 	add.w	r9, r9, #1
 8004018:	e7d8      	b.n	8003fcc <_printf_common+0x9c>
	...

0800401c <_printf_i>:
 800401c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004020:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004024:	460c      	mov	r4, r1
 8004026:	7e09      	ldrb	r1, [r1, #24]
 8004028:	b085      	sub	sp, #20
 800402a:	296e      	cmp	r1, #110	; 0x6e
 800402c:	4617      	mov	r7, r2
 800402e:	4606      	mov	r6, r0
 8004030:	4698      	mov	r8, r3
 8004032:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004034:	f000 80b3 	beq.w	800419e <_printf_i+0x182>
 8004038:	d822      	bhi.n	8004080 <_printf_i+0x64>
 800403a:	2963      	cmp	r1, #99	; 0x63
 800403c:	d036      	beq.n	80040ac <_printf_i+0x90>
 800403e:	d80a      	bhi.n	8004056 <_printf_i+0x3a>
 8004040:	2900      	cmp	r1, #0
 8004042:	f000 80b9 	beq.w	80041b8 <_printf_i+0x19c>
 8004046:	2958      	cmp	r1, #88	; 0x58
 8004048:	f000 8083 	beq.w	8004152 <_printf_i+0x136>
 800404c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004050:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004054:	e032      	b.n	80040bc <_printf_i+0xa0>
 8004056:	2964      	cmp	r1, #100	; 0x64
 8004058:	d001      	beq.n	800405e <_printf_i+0x42>
 800405a:	2969      	cmp	r1, #105	; 0x69
 800405c:	d1f6      	bne.n	800404c <_printf_i+0x30>
 800405e:	6820      	ldr	r0, [r4, #0]
 8004060:	6813      	ldr	r3, [r2, #0]
 8004062:	0605      	lsls	r5, r0, #24
 8004064:	f103 0104 	add.w	r1, r3, #4
 8004068:	d52a      	bpl.n	80040c0 <_printf_i+0xa4>
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6011      	str	r1, [r2, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	da03      	bge.n	800407a <_printf_i+0x5e>
 8004072:	222d      	movs	r2, #45	; 0x2d
 8004074:	425b      	negs	r3, r3
 8004076:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800407a:	486f      	ldr	r0, [pc, #444]	; (8004238 <_printf_i+0x21c>)
 800407c:	220a      	movs	r2, #10
 800407e:	e039      	b.n	80040f4 <_printf_i+0xd8>
 8004080:	2973      	cmp	r1, #115	; 0x73
 8004082:	f000 809d 	beq.w	80041c0 <_printf_i+0x1a4>
 8004086:	d808      	bhi.n	800409a <_printf_i+0x7e>
 8004088:	296f      	cmp	r1, #111	; 0x6f
 800408a:	d020      	beq.n	80040ce <_printf_i+0xb2>
 800408c:	2970      	cmp	r1, #112	; 0x70
 800408e:	d1dd      	bne.n	800404c <_printf_i+0x30>
 8004090:	6823      	ldr	r3, [r4, #0]
 8004092:	f043 0320 	orr.w	r3, r3, #32
 8004096:	6023      	str	r3, [r4, #0]
 8004098:	e003      	b.n	80040a2 <_printf_i+0x86>
 800409a:	2975      	cmp	r1, #117	; 0x75
 800409c:	d017      	beq.n	80040ce <_printf_i+0xb2>
 800409e:	2978      	cmp	r1, #120	; 0x78
 80040a0:	d1d4      	bne.n	800404c <_printf_i+0x30>
 80040a2:	2378      	movs	r3, #120	; 0x78
 80040a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040a8:	4864      	ldr	r0, [pc, #400]	; (800423c <_printf_i+0x220>)
 80040aa:	e055      	b.n	8004158 <_printf_i+0x13c>
 80040ac:	6813      	ldr	r3, [r2, #0]
 80040ae:	1d19      	adds	r1, r3, #4
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6011      	str	r1, [r2, #0]
 80040b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040bc:	2301      	movs	r3, #1
 80040be:	e08c      	b.n	80041da <_printf_i+0x1be>
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6011      	str	r1, [r2, #0]
 80040c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80040c8:	bf18      	it	ne
 80040ca:	b21b      	sxthne	r3, r3
 80040cc:	e7cf      	b.n	800406e <_printf_i+0x52>
 80040ce:	6813      	ldr	r3, [r2, #0]
 80040d0:	6825      	ldr	r5, [r4, #0]
 80040d2:	1d18      	adds	r0, r3, #4
 80040d4:	6010      	str	r0, [r2, #0]
 80040d6:	0628      	lsls	r0, r5, #24
 80040d8:	d501      	bpl.n	80040de <_printf_i+0xc2>
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	e002      	b.n	80040e4 <_printf_i+0xc8>
 80040de:	0668      	lsls	r0, r5, #25
 80040e0:	d5fb      	bpl.n	80040da <_printf_i+0xbe>
 80040e2:	881b      	ldrh	r3, [r3, #0]
 80040e4:	4854      	ldr	r0, [pc, #336]	; (8004238 <_printf_i+0x21c>)
 80040e6:	296f      	cmp	r1, #111	; 0x6f
 80040e8:	bf14      	ite	ne
 80040ea:	220a      	movne	r2, #10
 80040ec:	2208      	moveq	r2, #8
 80040ee:	2100      	movs	r1, #0
 80040f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040f4:	6865      	ldr	r5, [r4, #4]
 80040f6:	60a5      	str	r5, [r4, #8]
 80040f8:	2d00      	cmp	r5, #0
 80040fa:	f2c0 8095 	blt.w	8004228 <_printf_i+0x20c>
 80040fe:	6821      	ldr	r1, [r4, #0]
 8004100:	f021 0104 	bic.w	r1, r1, #4
 8004104:	6021      	str	r1, [r4, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d13d      	bne.n	8004186 <_printf_i+0x16a>
 800410a:	2d00      	cmp	r5, #0
 800410c:	f040 808e 	bne.w	800422c <_printf_i+0x210>
 8004110:	4665      	mov	r5, ip
 8004112:	2a08      	cmp	r2, #8
 8004114:	d10b      	bne.n	800412e <_printf_i+0x112>
 8004116:	6823      	ldr	r3, [r4, #0]
 8004118:	07db      	lsls	r3, r3, #31
 800411a:	d508      	bpl.n	800412e <_printf_i+0x112>
 800411c:	6923      	ldr	r3, [r4, #16]
 800411e:	6862      	ldr	r2, [r4, #4]
 8004120:	429a      	cmp	r2, r3
 8004122:	bfde      	ittt	le
 8004124:	2330      	movle	r3, #48	; 0x30
 8004126:	f805 3c01 	strble.w	r3, [r5, #-1]
 800412a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800412e:	ebac 0305 	sub.w	r3, ip, r5
 8004132:	6123      	str	r3, [r4, #16]
 8004134:	f8cd 8000 	str.w	r8, [sp]
 8004138:	463b      	mov	r3, r7
 800413a:	aa03      	add	r2, sp, #12
 800413c:	4621      	mov	r1, r4
 800413e:	4630      	mov	r0, r6
 8004140:	f7ff fef6 	bl	8003f30 <_printf_common>
 8004144:	3001      	adds	r0, #1
 8004146:	d14d      	bne.n	80041e4 <_printf_i+0x1c8>
 8004148:	f04f 30ff 	mov.w	r0, #4294967295
 800414c:	b005      	add	sp, #20
 800414e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004152:	4839      	ldr	r0, [pc, #228]	; (8004238 <_printf_i+0x21c>)
 8004154:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004158:	6813      	ldr	r3, [r2, #0]
 800415a:	6821      	ldr	r1, [r4, #0]
 800415c:	1d1d      	adds	r5, r3, #4
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6015      	str	r5, [r2, #0]
 8004162:	060a      	lsls	r2, r1, #24
 8004164:	d50b      	bpl.n	800417e <_printf_i+0x162>
 8004166:	07ca      	lsls	r2, r1, #31
 8004168:	bf44      	itt	mi
 800416a:	f041 0120 	orrmi.w	r1, r1, #32
 800416e:	6021      	strmi	r1, [r4, #0]
 8004170:	b91b      	cbnz	r3, 800417a <_printf_i+0x15e>
 8004172:	6822      	ldr	r2, [r4, #0]
 8004174:	f022 0220 	bic.w	r2, r2, #32
 8004178:	6022      	str	r2, [r4, #0]
 800417a:	2210      	movs	r2, #16
 800417c:	e7b7      	b.n	80040ee <_printf_i+0xd2>
 800417e:	064d      	lsls	r5, r1, #25
 8004180:	bf48      	it	mi
 8004182:	b29b      	uxthmi	r3, r3
 8004184:	e7ef      	b.n	8004166 <_printf_i+0x14a>
 8004186:	4665      	mov	r5, ip
 8004188:	fbb3 f1f2 	udiv	r1, r3, r2
 800418c:	fb02 3311 	mls	r3, r2, r1, r3
 8004190:	5cc3      	ldrb	r3, [r0, r3]
 8004192:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004196:	460b      	mov	r3, r1
 8004198:	2900      	cmp	r1, #0
 800419a:	d1f5      	bne.n	8004188 <_printf_i+0x16c>
 800419c:	e7b9      	b.n	8004112 <_printf_i+0xf6>
 800419e:	6813      	ldr	r3, [r2, #0]
 80041a0:	6825      	ldr	r5, [r4, #0]
 80041a2:	6961      	ldr	r1, [r4, #20]
 80041a4:	1d18      	adds	r0, r3, #4
 80041a6:	6010      	str	r0, [r2, #0]
 80041a8:	0628      	lsls	r0, r5, #24
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	d501      	bpl.n	80041b2 <_printf_i+0x196>
 80041ae:	6019      	str	r1, [r3, #0]
 80041b0:	e002      	b.n	80041b8 <_printf_i+0x19c>
 80041b2:	066a      	lsls	r2, r5, #25
 80041b4:	d5fb      	bpl.n	80041ae <_printf_i+0x192>
 80041b6:	8019      	strh	r1, [r3, #0]
 80041b8:	2300      	movs	r3, #0
 80041ba:	6123      	str	r3, [r4, #16]
 80041bc:	4665      	mov	r5, ip
 80041be:	e7b9      	b.n	8004134 <_printf_i+0x118>
 80041c0:	6813      	ldr	r3, [r2, #0]
 80041c2:	1d19      	adds	r1, r3, #4
 80041c4:	6011      	str	r1, [r2, #0]
 80041c6:	681d      	ldr	r5, [r3, #0]
 80041c8:	6862      	ldr	r2, [r4, #4]
 80041ca:	2100      	movs	r1, #0
 80041cc:	4628      	mov	r0, r5
 80041ce:	f7fc f80f 	bl	80001f0 <memchr>
 80041d2:	b108      	cbz	r0, 80041d8 <_printf_i+0x1bc>
 80041d4:	1b40      	subs	r0, r0, r5
 80041d6:	6060      	str	r0, [r4, #4]
 80041d8:	6863      	ldr	r3, [r4, #4]
 80041da:	6123      	str	r3, [r4, #16]
 80041dc:	2300      	movs	r3, #0
 80041de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041e2:	e7a7      	b.n	8004134 <_printf_i+0x118>
 80041e4:	6923      	ldr	r3, [r4, #16]
 80041e6:	462a      	mov	r2, r5
 80041e8:	4639      	mov	r1, r7
 80041ea:	4630      	mov	r0, r6
 80041ec:	47c0      	blx	r8
 80041ee:	3001      	adds	r0, #1
 80041f0:	d0aa      	beq.n	8004148 <_printf_i+0x12c>
 80041f2:	6823      	ldr	r3, [r4, #0]
 80041f4:	079b      	lsls	r3, r3, #30
 80041f6:	d413      	bmi.n	8004220 <_printf_i+0x204>
 80041f8:	68e0      	ldr	r0, [r4, #12]
 80041fa:	9b03      	ldr	r3, [sp, #12]
 80041fc:	4298      	cmp	r0, r3
 80041fe:	bfb8      	it	lt
 8004200:	4618      	movlt	r0, r3
 8004202:	e7a3      	b.n	800414c <_printf_i+0x130>
 8004204:	2301      	movs	r3, #1
 8004206:	464a      	mov	r2, r9
 8004208:	4639      	mov	r1, r7
 800420a:	4630      	mov	r0, r6
 800420c:	47c0      	blx	r8
 800420e:	3001      	adds	r0, #1
 8004210:	d09a      	beq.n	8004148 <_printf_i+0x12c>
 8004212:	3501      	adds	r5, #1
 8004214:	68e3      	ldr	r3, [r4, #12]
 8004216:	9a03      	ldr	r2, [sp, #12]
 8004218:	1a9b      	subs	r3, r3, r2
 800421a:	42ab      	cmp	r3, r5
 800421c:	dcf2      	bgt.n	8004204 <_printf_i+0x1e8>
 800421e:	e7eb      	b.n	80041f8 <_printf_i+0x1dc>
 8004220:	2500      	movs	r5, #0
 8004222:	f104 0919 	add.w	r9, r4, #25
 8004226:	e7f5      	b.n	8004214 <_printf_i+0x1f8>
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1ac      	bne.n	8004186 <_printf_i+0x16a>
 800422c:	7803      	ldrb	r3, [r0, #0]
 800422e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004232:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004236:	e76c      	b.n	8004112 <_printf_i+0xf6>
 8004238:	080046b1 	.word	0x080046b1
 800423c:	080046c2 	.word	0x080046c2

08004240 <_putc_r>:
 8004240:	b570      	push	{r4, r5, r6, lr}
 8004242:	460d      	mov	r5, r1
 8004244:	4614      	mov	r4, r2
 8004246:	4606      	mov	r6, r0
 8004248:	b118      	cbz	r0, 8004252 <_putc_r+0x12>
 800424a:	6983      	ldr	r3, [r0, #24]
 800424c:	b90b      	cbnz	r3, 8004252 <_putc_r+0x12>
 800424e:	f7ff fb99 	bl	8003984 <__sinit>
 8004252:	4b13      	ldr	r3, [pc, #76]	; (80042a0 <_putc_r+0x60>)
 8004254:	429c      	cmp	r4, r3
 8004256:	d112      	bne.n	800427e <_putc_r+0x3e>
 8004258:	6874      	ldr	r4, [r6, #4]
 800425a:	68a3      	ldr	r3, [r4, #8]
 800425c:	3b01      	subs	r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	60a3      	str	r3, [r4, #8]
 8004262:	da16      	bge.n	8004292 <_putc_r+0x52>
 8004264:	69a2      	ldr	r2, [r4, #24]
 8004266:	4293      	cmp	r3, r2
 8004268:	db02      	blt.n	8004270 <_putc_r+0x30>
 800426a:	b2eb      	uxtb	r3, r5
 800426c:	2b0a      	cmp	r3, #10
 800426e:	d110      	bne.n	8004292 <_putc_r+0x52>
 8004270:	4622      	mov	r2, r4
 8004272:	4629      	mov	r1, r5
 8004274:	4630      	mov	r0, r6
 8004276:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800427a:	f7ff b9d3 	b.w	8003624 <__swbuf_r>
 800427e:	4b09      	ldr	r3, [pc, #36]	; (80042a4 <_putc_r+0x64>)
 8004280:	429c      	cmp	r4, r3
 8004282:	d101      	bne.n	8004288 <_putc_r+0x48>
 8004284:	68b4      	ldr	r4, [r6, #8]
 8004286:	e7e8      	b.n	800425a <_putc_r+0x1a>
 8004288:	4b07      	ldr	r3, [pc, #28]	; (80042a8 <_putc_r+0x68>)
 800428a:	429c      	cmp	r4, r3
 800428c:	bf08      	it	eq
 800428e:	68f4      	ldreq	r4, [r6, #12]
 8004290:	e7e3      	b.n	800425a <_putc_r+0x1a>
 8004292:	6823      	ldr	r3, [r4, #0]
 8004294:	1c5a      	adds	r2, r3, #1
 8004296:	6022      	str	r2, [r4, #0]
 8004298:	701d      	strb	r5, [r3, #0]
 800429a:	b2e8      	uxtb	r0, r5
 800429c:	bd70      	pop	{r4, r5, r6, pc}
 800429e:	bf00      	nop
 80042a0:	08004660 	.word	0x08004660
 80042a4:	08004680 	.word	0x08004680
 80042a8:	08004640 	.word	0x08004640

080042ac <_sbrk_r>:
 80042ac:	b538      	push	{r3, r4, r5, lr}
 80042ae:	4c06      	ldr	r4, [pc, #24]	; (80042c8 <_sbrk_r+0x1c>)
 80042b0:	2300      	movs	r3, #0
 80042b2:	4605      	mov	r5, r0
 80042b4:	4608      	mov	r0, r1
 80042b6:	6023      	str	r3, [r4, #0]
 80042b8:	f7fc fbbe 	bl	8000a38 <_sbrk>
 80042bc:	1c43      	adds	r3, r0, #1
 80042be:	d102      	bne.n	80042c6 <_sbrk_r+0x1a>
 80042c0:	6823      	ldr	r3, [r4, #0]
 80042c2:	b103      	cbz	r3, 80042c6 <_sbrk_r+0x1a>
 80042c4:	602b      	str	r3, [r5, #0]
 80042c6:	bd38      	pop	{r3, r4, r5, pc}
 80042c8:	20000250 	.word	0x20000250

080042cc <__sread>:
 80042cc:	b510      	push	{r4, lr}
 80042ce:	460c      	mov	r4, r1
 80042d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042d4:	f000 f896 	bl	8004404 <_read_r>
 80042d8:	2800      	cmp	r0, #0
 80042da:	bfab      	itete	ge
 80042dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80042de:	89a3      	ldrhlt	r3, [r4, #12]
 80042e0:	181b      	addge	r3, r3, r0
 80042e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80042e6:	bfac      	ite	ge
 80042e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80042ea:	81a3      	strhlt	r3, [r4, #12]
 80042ec:	bd10      	pop	{r4, pc}

080042ee <__swrite>:
 80042ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042f2:	461f      	mov	r7, r3
 80042f4:	898b      	ldrh	r3, [r1, #12]
 80042f6:	05db      	lsls	r3, r3, #23
 80042f8:	4605      	mov	r5, r0
 80042fa:	460c      	mov	r4, r1
 80042fc:	4616      	mov	r6, r2
 80042fe:	d505      	bpl.n	800430c <__swrite+0x1e>
 8004300:	2302      	movs	r3, #2
 8004302:	2200      	movs	r2, #0
 8004304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004308:	f000 f868 	bl	80043dc <_lseek_r>
 800430c:	89a3      	ldrh	r3, [r4, #12]
 800430e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004312:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004316:	81a3      	strh	r3, [r4, #12]
 8004318:	4632      	mov	r2, r6
 800431a:	463b      	mov	r3, r7
 800431c:	4628      	mov	r0, r5
 800431e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004322:	f000 b817 	b.w	8004354 <_write_r>

08004326 <__sseek>:
 8004326:	b510      	push	{r4, lr}
 8004328:	460c      	mov	r4, r1
 800432a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800432e:	f000 f855 	bl	80043dc <_lseek_r>
 8004332:	1c43      	adds	r3, r0, #1
 8004334:	89a3      	ldrh	r3, [r4, #12]
 8004336:	bf15      	itete	ne
 8004338:	6560      	strne	r0, [r4, #84]	; 0x54
 800433a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800433e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004342:	81a3      	strheq	r3, [r4, #12]
 8004344:	bf18      	it	ne
 8004346:	81a3      	strhne	r3, [r4, #12]
 8004348:	bd10      	pop	{r4, pc}

0800434a <__sclose>:
 800434a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800434e:	f000 b813 	b.w	8004378 <_close_r>
	...

08004354 <_write_r>:
 8004354:	b538      	push	{r3, r4, r5, lr}
 8004356:	4c07      	ldr	r4, [pc, #28]	; (8004374 <_write_r+0x20>)
 8004358:	4605      	mov	r5, r0
 800435a:	4608      	mov	r0, r1
 800435c:	4611      	mov	r1, r2
 800435e:	2200      	movs	r2, #0
 8004360:	6022      	str	r2, [r4, #0]
 8004362:	461a      	mov	r2, r3
 8004364:	f7fc f9a1 	bl	80006aa <_write>
 8004368:	1c43      	adds	r3, r0, #1
 800436a:	d102      	bne.n	8004372 <_write_r+0x1e>
 800436c:	6823      	ldr	r3, [r4, #0]
 800436e:	b103      	cbz	r3, 8004372 <_write_r+0x1e>
 8004370:	602b      	str	r3, [r5, #0]
 8004372:	bd38      	pop	{r3, r4, r5, pc}
 8004374:	20000250 	.word	0x20000250

08004378 <_close_r>:
 8004378:	b538      	push	{r3, r4, r5, lr}
 800437a:	4c06      	ldr	r4, [pc, #24]	; (8004394 <_close_r+0x1c>)
 800437c:	2300      	movs	r3, #0
 800437e:	4605      	mov	r5, r0
 8004380:	4608      	mov	r0, r1
 8004382:	6023      	str	r3, [r4, #0]
 8004384:	f7fc fb23 	bl	80009ce <_close>
 8004388:	1c43      	adds	r3, r0, #1
 800438a:	d102      	bne.n	8004392 <_close_r+0x1a>
 800438c:	6823      	ldr	r3, [r4, #0]
 800438e:	b103      	cbz	r3, 8004392 <_close_r+0x1a>
 8004390:	602b      	str	r3, [r5, #0]
 8004392:	bd38      	pop	{r3, r4, r5, pc}
 8004394:	20000250 	.word	0x20000250

08004398 <_fstat_r>:
 8004398:	b538      	push	{r3, r4, r5, lr}
 800439a:	4c07      	ldr	r4, [pc, #28]	; (80043b8 <_fstat_r+0x20>)
 800439c:	2300      	movs	r3, #0
 800439e:	4605      	mov	r5, r0
 80043a0:	4608      	mov	r0, r1
 80043a2:	4611      	mov	r1, r2
 80043a4:	6023      	str	r3, [r4, #0]
 80043a6:	f7fc fb1e 	bl	80009e6 <_fstat>
 80043aa:	1c43      	adds	r3, r0, #1
 80043ac:	d102      	bne.n	80043b4 <_fstat_r+0x1c>
 80043ae:	6823      	ldr	r3, [r4, #0]
 80043b0:	b103      	cbz	r3, 80043b4 <_fstat_r+0x1c>
 80043b2:	602b      	str	r3, [r5, #0]
 80043b4:	bd38      	pop	{r3, r4, r5, pc}
 80043b6:	bf00      	nop
 80043b8:	20000250 	.word	0x20000250

080043bc <_isatty_r>:
 80043bc:	b538      	push	{r3, r4, r5, lr}
 80043be:	4c06      	ldr	r4, [pc, #24]	; (80043d8 <_isatty_r+0x1c>)
 80043c0:	2300      	movs	r3, #0
 80043c2:	4605      	mov	r5, r0
 80043c4:	4608      	mov	r0, r1
 80043c6:	6023      	str	r3, [r4, #0]
 80043c8:	f7fc fb1d 	bl	8000a06 <_isatty>
 80043cc:	1c43      	adds	r3, r0, #1
 80043ce:	d102      	bne.n	80043d6 <_isatty_r+0x1a>
 80043d0:	6823      	ldr	r3, [r4, #0]
 80043d2:	b103      	cbz	r3, 80043d6 <_isatty_r+0x1a>
 80043d4:	602b      	str	r3, [r5, #0]
 80043d6:	bd38      	pop	{r3, r4, r5, pc}
 80043d8:	20000250 	.word	0x20000250

080043dc <_lseek_r>:
 80043dc:	b538      	push	{r3, r4, r5, lr}
 80043de:	4c07      	ldr	r4, [pc, #28]	; (80043fc <_lseek_r+0x20>)
 80043e0:	4605      	mov	r5, r0
 80043e2:	4608      	mov	r0, r1
 80043e4:	4611      	mov	r1, r2
 80043e6:	2200      	movs	r2, #0
 80043e8:	6022      	str	r2, [r4, #0]
 80043ea:	461a      	mov	r2, r3
 80043ec:	f7fc fb16 	bl	8000a1c <_lseek>
 80043f0:	1c43      	adds	r3, r0, #1
 80043f2:	d102      	bne.n	80043fa <_lseek_r+0x1e>
 80043f4:	6823      	ldr	r3, [r4, #0]
 80043f6:	b103      	cbz	r3, 80043fa <_lseek_r+0x1e>
 80043f8:	602b      	str	r3, [r5, #0]
 80043fa:	bd38      	pop	{r3, r4, r5, pc}
 80043fc:	20000250 	.word	0x20000250

08004400 <__malloc_lock>:
 8004400:	4770      	bx	lr

08004402 <__malloc_unlock>:
 8004402:	4770      	bx	lr

08004404 <_read_r>:
 8004404:	b538      	push	{r3, r4, r5, lr}
 8004406:	4c07      	ldr	r4, [pc, #28]	; (8004424 <_read_r+0x20>)
 8004408:	4605      	mov	r5, r0
 800440a:	4608      	mov	r0, r1
 800440c:	4611      	mov	r1, r2
 800440e:	2200      	movs	r2, #0
 8004410:	6022      	str	r2, [r4, #0]
 8004412:	461a      	mov	r2, r3
 8004414:	f7fc fabe 	bl	8000994 <_read>
 8004418:	1c43      	adds	r3, r0, #1
 800441a:	d102      	bne.n	8004422 <_read_r+0x1e>
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	b103      	cbz	r3, 8004422 <_read_r+0x1e>
 8004420:	602b      	str	r3, [r5, #0]
 8004422:	bd38      	pop	{r3, r4, r5, pc}
 8004424:	20000250 	.word	0x20000250

08004428 <_init>:
 8004428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800442a:	bf00      	nop
 800442c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800442e:	bc08      	pop	{r3}
 8004430:	469e      	mov	lr, r3
 8004432:	4770      	bx	lr

08004434 <_fini>:
 8004434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004436:	bf00      	nop
 8004438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800443a:	bc08      	pop	{r3}
 800443c:	469e      	mov	lr, r3
 800443e:	4770      	bx	lr
